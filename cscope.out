cscope 15 $HOME/ipfw3-2012 -q 0000009275 0001223322
	@glue.h

38 #i‡
deföed
 
__FªeBSD__


39 
	#_GLUE_H


	)

41 #i‚de‡
_GLUE_H


42 
	#_GLUE_H


	)

48 #i‚de‡
__FBSDID


49 
	#__FBSDID
(
x
)

	)

52 #i‚de‡
KERNEL_MODULE


54 #i‡
deföed
(
__CYGWIN32__
Ë&& !deföed(
_WIN32
)

55 
	#_WIN32


	)

58 #i‡
deföed
(
TCC
Ë&& deföed(
_WIN32
)

59 
	~<tcc_glue.h
>

62 
	~<°döt.h
>

63 
	~<sys/ty≥s.h
>

64 
	~<sys/io˘l.h
>

65 
	~<time.h
>

66 
	~<î∫o.h
>

67 #ifde‡
__löux__


68 
	~<√töë/ëhî.h
>

73 
	#INET
 #w™à
öë
 
suµ‹t


	)

74 #ifde‡
__löux__


76 
	~<löux/vîsi⁄.h
>

78 
	#i‚ë
 
√t_devi˚


	)

79 
	#_KERNEL
 #makê
kî√l
 
°ru˘uª
 
visibÀ


	)

80 
	#KLD_MODULE
 #add 
the
 
moduÀ
 
glue


	)

82 
	~<löux/°ddef.h
>

83 
	~<löux/ty≥s.h
>

85 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,17)

86 
	~<löux/lökage.h
>

87 
	~<löux/√tdevi˚.h
>

92 #i‡
LINUX_VERSION_CODE
 > 
KERNEL_VERSION
(2,6,13) && \

93 
	gLINUX_VERSION_CODE
 < 
	$KERNEL_VERSION
(2,6,23)

94 
	~<löux/•ölock_ty≥s.h
>

99 
	~<löux/msg.h
>

101 
	~<löux/li°.h
>

102 
	~<löux/ö.h
>

103 
	~<löux/ö6.h
>

104 
	~<löux/icmp.h
>

109 #unde‡
LIST_HEAD


111 
	#IF_NAMESIZE
 (16)

	)

112 
uöt32_t
 
	tö_addr_t
;

114 
	#¥ötf
(
fmt
, 
¨g
...Ë
	`¥ötk
(
KERN_ERR
 fmt, ##¨g)

	)

124 #i‚de‡
ETHER_ADDR_LEN


125 
	#ETHER_ADDR_LEN
 (6+0Ë

	)

128 
	#ICMP6_DST_UNREACH_NOROUTE
 0

	)

129 
	#ICMP6_DST_UNREACH_ADMIN
 1

	)

130 
	#ICMP6_DST_UNREACH_ADDR
 3

	)

131 
	#ICMP6_DST_UNREACH_NOPORT
 4

	)

137 
	#CTLFLAG_RD
 1

	)

138 
	#CTLFLAG_RDTUN
 1

	)

139 
	#CTLFLAG_RW
 2

	)

140 
	#CTLFLAG_SECURE3
 0

141 
	#CTLFLAG_VNET
 0

	)

151 
	sthªad
 {

152 *
s›t_td
;

153 *
td_u¸ed
;

156 
	es›t_dú
 { 
SOPT_GET
, 
SOPT_SET
 };

158 
	ssock›t
 {

159 
s›t_dú
 sopt_dir;

160 
s›t_Àvñ
;

161 
s›t_«me
;

162 #ifde‡
_X64EMU


163 * 
∑d1
;

164 * 
∑d2
;

166 *
s›t_vÆ
;

167 
size_t
 
s›t_vÆsize
;

168 #ifde‡
_X64EMU


169 * 
∑d3
;

170 * 
∑d4
;

172 
thªad
 *
s›t_td
;

176 
	#INET_ADDRSTRLEN
 (16Ë

	)

184 #i‚de‡
IP_FW_TABLE_ADD


185 
	#_IPFW_SOCKOPT_BASE
 100

	)

186 
	eùfw_msg_ty≥
 {

187 
IP_FW_TABLE_ADD
 = 
_IPFW_SOCKOPT_BASE
,

188 
IP_FW_TABLE_DEL
,

189 
IP_FW_TABLE_FLUSH
,

190 
IP_FW_TABLE_GETSIZE
,

191 
IP_FW_TABLE_LIST
,

192 
IP_FW_DYN_GET
,

195 
IP_FW3
 = 
_IPFW_SOCKOPT_BASE
 + 8,

196 
IP_DUMMYNET3
,

198 
IP_FW_ADD
 = 
_IPFW_SOCKOPT_BASE
 + 10,

199 
IP_FW_DEL
,

200 
IP_FW_FLUSH
,

201 
IP_FW_ZERO
,

202 
IP_FW_GET
,

203 
IP_FW_RESETLOG
,

205 
IP_FW_NAT_CFG
,

206 
IP_FW_NAT_DEL
,

207 
IP_FW_NAT_GET_CONFIG
,

208 
IP_FW_NAT_GET_LOG
,

210 
IP_DUMMYNET_CONFIGURE
,

211 
IP_DUMMYNET_DEL
 ,

212 
IP_DUMMYNET_FLUSH
,

214 
IP_DUMMYNET_GET
 = 
_IPFW_SOCKOPT_BASE
 + 24,

215 
_IPFW_SOCKOPT_END


223 #i‚de‡
KERNEL_MODULE


229 #i‚de‡
_WIN32


230 
	#__u6_addr
 
ö6_u


	)

231 
	#__u6_addr32
 
u6_addr32


	)

232 
	#ö6_u
 
__ö6_u


	)

234 
	#__u6_addr
 
__u6


	)

235 
	#__u6_addr32
 
__s6_addr32


	)

239 
	#IPTOS_ECN_ECT0
 0x02

	)

240 
	#IPTOS_ECN_CE
 0x03

	)

243 
	#ICMP6_MAXTYPE
 201

	)

246 
	#NET_RT_IFLIST
 3

	)

248 #i‡
	`deföed
(
__löux__
Ë|| deföed(
__CYGWIN32__
)

250 
	sif_d©a
 {

252 
u_l⁄g
 
ifi_mtu
;

260 
	sif_msghdr
 {

261 
u_sh‹t
 
ifm_msgÀn
;

262 
u_ch¨
 
ifm_vîsi⁄
;

263 
u_ch¨
 
ifm_ty≥
;

264 
ifm_addrs
;

265 
ifm_Êags
;

266 
u_sh‹t
 
ifm_ödex
;

267 
if_d©a
 
ifm_d©a
;

274 
	siÁ_msghdr
 {

275 
u_sh‹t
 
iÁm_msgÀn
;

276 
u_ch¨
 
iÁm_vîsi⁄
;

277 
u_ch¨
 
iÁm_ty≥
;

278 
iÁm_addrs
;

279 
iÁm_Êags
;

280 
u_sh‹t
 
iÁm_ödex
;

281 
iÁm_mëric
;

284 #i‚de‡
NO_RTM


286 
	#RTM_VERSION
 5

	)

287 
	#RTM_IFINFO
 0xê

	)

288 
	#RTM_NEWADDR
 0x¯

	)

289 
	#RTA_IFA
 0x20

	)

293 
	#SA_SIZE
(
ß
) \

294 –(!(
ß
) ) ? \

296 1 + ( ((
sockaddr
Ë- 1Ë| ((Ë- 1ËË)

	)

302 
	s˛ocköfo
 {

303 
hz
;

304 
tick
;

305 
•¨e
;

306 
°©hz
;

307 
¥ofhz
;

311 
	#sö_Àn
 
sö_zîo
[0]

	)

319 
	`qs‹t_r
(*
a
, 
size_t
 
n
, size_à
es
, *
thunk
,

320 
	`cmp_t
(*, const *, const *));

324 
	#HN_DECIMAL
 0x01

	)

325 
	#HN_NOSPACE
 0x02

	)

326 
	#HN_B
 0x04

	)

327 
	#HN_DIVISOR_1000
 0x08

	)

329 
	#HN_GETSCALE
 0x10

	)

330 
	#HN_AUTOSCALE
 0x20

	)

332 
	`hum™ize_numbî
(*
_buf
, 
size_t
 
_Àn
, 
öt64_t
 
_numbî
,

333 c⁄° *
_suffix
, 
_sˇÀ
, 
_Êags
);

334 
	`ex∑nd_numbî
(c⁄° *
_buf
, 
öt64_t
 *
_num
);

336 
	#£çrog«me
(
x
Ë

	)

338 
›åe£t
;

340 
size_t
 
	`°æ˝y
(* 
d°
, c⁄° * 
§c
, size_à
siz
);

341 
	`°π⁄um
(c⁄° *
≈å
, 
mövÆ
,

342 
maxvÆ
, c⁄° **
îr°r
);

344 
	`sys˘lby«me
(c⁄° *
«me
, *
ﬁdp
, 
size_t
 *
ﬁdÀ≈
,

345 *
√wp
, 
size_t
 
√wÀn
);

355 
	#bc›y
(
_s
, 
_d
, 
_l
Ë
	`mem˝y
(_d, _s, _l)

	)

357 
	srouã_ö6
 {

358 
dummy
;

361 #ifde‡
__löux__


363 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,17)

364 
	~<löux/ö6.h
>

368 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,31)

369 
	`skb_d°_£t
(
sk_buff
 *
skb
, 
d°_íåy
 *
d°
);

370 
d°_íåy
 *
	`skb_d°
(c⁄° 
sk_buff
 *
skb
);

374 #i‡
LINUX_VERSION_CODE
 > 
	`KERNEL_VERSION
(2,6,38)

375 
	#Êow_daddr
 
Ê
.
u
.
ù4


	)

377 
	#Êow_daddr
 
Ê
.
∆_u
.
ù4_u


	)

386 
	#_LINUX_PRIO_HEAP_H


	)

394 #i‚de‡
_NET_IPV6_H


395 
	#_NET_IPV6_H


	)

396 
ölöe
 
	$ùv6_addr_c›y
(
ö6_addr
 *
a1
, c⁄° ö6_add∏*
a2
)

398 
	`mem˝y
(
a1
, 
a2
, (
ö6_addr
));

399 
	}
}

408 #ifde‡
_WIN32


409 #i‚de‡
KERNEL_MODULE


410 
	#CTL_CODE
–
Devi˚Ty≥
, 
Fun˘i⁄
, 
Mëhod
, 
Ac˚ss
 ) ( \

411 ((
Devi˚Ty≥
Ë<< 16Ë| ((
Ac˚ss
Ë<< 14Ë| ((
Fun˘i⁄
Ë<< 2Ë| (
Mëhod
) \

412 )

	)

414 
	#METHOD_BUFFERED
 0

	)

415 
	#METHOD_IN_DIRECT
 1

	)

416 
	#METHOD_OUT_DIRECT
 2

	)

417 
	#METHOD_NEITHER
 3

	)

418 
	#FILE_ANY_ACCESS
 0

	)

419 
	#FILE_READ_DATA
 ( 0x0001 )

420 
	#FILE_WRITE_DATA
 ( 0x0002 )

422 

	)

423 
	#FILE_DEVICE_IPFW
 0x00654324

	)

424 
	#IP_FW_BASE_CTL
 0x840

	)

425 
	#IP_FW_SETSOCKOPT
 \

426 
	`CTL_CODE
(
FILE_DEVICE_IPFW
, 
IP_FW_BASE_CTL
 + 1, 
METHOD_BUFFERED
, 
FILE_WRITE_DATA
)

	)

427 
	#IP_FW_GETSOCKOPT
 \

428 
	`CTL_CODE
(
FILE_DEVICE_IPFW
, 
IP_FW_BASE_CTL
 + 2, 
METHOD_BUFFERED
, 
FILE_ANY_ACCESS
)

	)

434 
	#_IOWR
(
x
,
y
,
t
Ë
	`_IOW
(x,y,t)

	)

440 
	#ICMP_UNREACH_NET
 0

	)

441 
	#ICMP_UNREACH_HOST
 1

	)

442 
	#ICMP_UNREACH_PROTOCOL
 2

	)

443 
	#ICMP_UNREACH_PORT
 3

	)

444 
	#ICMP_UNREACH_NEEDFRAG
 4

	)

445 
	#ICMP_UNREACH_SRCFAIL
 5

	)

446 
	#ICMP_UNREACH_NET_UNKNOWN
 6

	)

447 
	#ICMP_UNREACH_HOST_UNKNOWN
 7

	)

448 
	#ICMP_UNREACH_ISOLATED
 8

	)

449 
	#ICMP_UNREACH_NET_PROHIB
 9

	)

450 
	#ICMP_UNREACH_HOST_PROHIB
 10

	)

451 
	#ICMP_UNREACH_TOSNET
 11

	)

452 
	#ICMP_UNREACH_TOSHOST
 12

	)

453 
	#ICMP_UNREACH_FILTER_PROHIB
 13

	)

454 
	#ICMP_UNREACH_HOST_PRECEDENCE
 14

	)

455 
	#ICMP_UNREACH_PRECEDENCE_CUTOFF
 15

	)

458 
	gëhî_addr
;

459 
ëhî_addr
 * 
ëhî_©⁄
(c⁄° *
a
);

465 
ho°ít
* 
gëho°by«me2
(c⁄° *
«me
, 
af
);

472 
my_sockë
(
domaö
, 
ty
, 
¥Ÿo
);

473 
	#sockë
(
_a
, 
_b
, 
_c
Ë
	`my_sockë
(_a, _b, _c)

	)

479 #i‡
deföed
 (
_WIN32
Ë|| deföed (
EMULATE_SYSCTL
)

480 
	#STRINGIFY
(
x
Ë#x

	)

486 
	mSYSCTLTYPE_INT
 = 0,

487 
	mSYSCTLTYPE_UINT
,

488 
	mSYSCTLTYPE_SHORT
,

489 
	mSYSCTLTYPE_USHORT
,

490 
	mSYSCTLTYPE_LONG
,

491 
	mSYSCTLTYPE_ULONG
,

492 
	mSYSCTLTYPE_STRING
,

495 
	ssys˘lhód
 {

496 
uöt32_t
 
	mblockÀn
;

497 
uöt32_t
 
	m«mñí
;

498 
uöt32_t
 
	mÊags
;

499 
uöt32_t
 
	md©Æí
;

502 #ifde‡
_KERNEL


504 #ifde‡
SYSCTL_NODE


505 #unde‡
SYSCTL_NODE


507 
	#SYSCTL_NODE
(
a
,
b
,
c
,
d
,
e
,
f
)

	)

508 
	#SYSCTL_DECL
(
a
)

	)

509 
	#SYSCTL_VNET_PROC
(
a
,
b
,
c
,
d
,
e
,
f
,
g
,
h
,
i
)

	)

511 
	#GST_HARD_LIMIT
 100

	)

521 
	ssys˘À¡ry
 {

522 
sys˘lhód
 
	mhód
;

523 * 
	m«me
;

524 * 
	md©a
;

527 
	ssys˘…abÀ
 {

528 
	mcou¡
;

529 
	mtŸÆsize
;

530 * 
	m«mebuf„r
;

531 
sys˘À¡ry
 
	míåy
[
GST_HARD_LIMIT
];

534 #ifde‡
SYSBEGIN


535 #unde‡
SYSBEGIN


537 
	#SYSBEGIN
(
x
Ë
sys˘l_addgroup_
##
	`x
(Ë{

	)

538 #ifde‡
SYSEND


539 #unde‡
SYSEND


541 
	#SYSEND
 }

	)

544 
	#SYSCTL_INT
(
a
,
b
,
c
,
d
,
e
,
f
,
g
) \

545 
	`sys˘l_pushback
(
	`STRINGIFY
(
a
Ë"." STRINGIFY(
c
) + 1, \

546 (
d
Ë| (
SYSCTLTYPE_INT
 << 2), (*
e
),É)

	)

548 
	#SYSCTL_VNET_INT
(
a
,
b
,
c
,
d
,
e
,
f
,
g
) \

549 
	`sys˘l_pushback
(
	`STRINGIFY
(
a
Ë"." STRINGIFY(
c
) + 1, \

550 (
d
Ë| (
SYSCTLTYPE_INT
 << 2), (*
e
),É)

	)

552 
	#SYSCTL_UINT
(
a
,
b
,
c
,
d
,
e
,
f
,
g
) \

553 
	`sys˘l_pushback
(
	`STRINGIFY
(
a
Ë"." STRINGIFY(
c
) + 1, \

554 (
d
Ë| (
SYSCTLTYPE_UINT
 << 2), (*
e
),É)

	)

556 
	#SYSCTL_VNET_UINT
(
a
,
b
,
c
,
d
,
e
,
f
,
g
) \

557 
	`sys˘l_pushback
(
	`STRINGIFY
(
a
Ë"." STRINGIFY(
c
) + 1, \

558 (
d
Ë| (
SYSCTLTYPE_UINT
 << 2), (*
e
),É)

	)

560 
	#SYSCTL_LONG
(
a
,
b
,
c
,
d
,
e
,
f
,
g
) \

561 
	`sys˘l_pushback
(
	`STRINGIFY
(
a
Ë"." STRINGIFY(
c
) + 1, \

562 (
d
Ë| (
SYSCTLTYPE_LONG
 << 2), (*
e
),É)

	)

564 
	#SYSCTL_ULONG
(
a
,
b
,
c
,
d
,
e
,
f
,
g
) \

565 
	`sys˘l_pushback
(
	`STRINGIFY
(
a
Ë"." STRINGIFY(
c
) + 1, \

566 (
d
Ë| (
SYSCTLTYPE_ULONG
 << 2), (*
e
),É)

	)

567 
	#TUNABLE_INT
(
a
,
b
)

	)

569 
keöô_GST
();

570 
kìxô_GST
();

571 
kesys˘l_emu_£t
(* 
p
, 
l
);

572 
kesys˘l_emu_gë
(
sock›t
* 
s›t
);

573 
sys˘l_pushback
(* 
«me
, 
Êags
, 
d©Æí
, * 
d©a
);

577 
sys˘lby«me
(c⁄° *
«me
, *
ﬁdp
, 
size_t
 *
ﬁdÀ≈
, *
√wp
,

578 
size_t
 
√wÀn
);

580 #ifde‡
_WIN32


581 
do_cmd
(
›äame
, *
›tvÆ
, 
uöçå_t
 
›éí
);

585 
	#__PAST_END
(
v
, 
idx
Ëv[idx]

	)

	@ipfw/dummynet.c

18 
	~<sys/ty≥s.h
>

19 
	~<sys/sockë.h
>

21 
	~<sys/sys˘l.h
>

23 
	~"ùfw2.h
"

25 
	~<˘y≥.h
>

26 
	~<îr.h
>

27 
	~<î∫o.h
>

28 
	~<libutû.h
>

29 
	~<√tdb.h
>

30 
	~<°dio.h
>

31 
	~<°dlib.h
>

32 
	~<°rög.h
>

33 
	~<sy£xôs.h
>

35 
	~<√t/if.h
>

36 
	~<√töë/ö.h
>

37 
	~<√töë/ù_fw.h
>

38 
	~<√töë/ù_dummy√t.h
>

39 
	~<¨∑/öë.h
>

42 
_s_x
 
	gdummy√t_∑øms
[] = {

43 { "∂r", 
TOK_PLR
 },

44 { "n€º‹", 
TOK_NOERROR
 },

45 { "buckës", 
TOK_BUCKETS
 },

46 { "d°-ù", 
TOK_DSTIP
 },

47 { "§c-ù", 
TOK_SRCIP
 },

48 { "d°-p‹t", 
TOK_DSTPORT
 },

49 { "§c-p‹t", 
TOK_SRCPORT
 },

50 { "¥Ÿo", 
TOK_PROTO
 },

51 { "weight", 
TOK_WEIGHT
 },

52 { "lmax", 
TOK_LMAX
 },

53 { "maxÀn", 
TOK_LMAX
 },

54 { "Æl", 
TOK_ALL
 },

55 { "mask", 
TOK_MASK
 },

56 { "sched_mask", 
TOK_SCHED_MASK
 },

57 { "Êow_mask", 
TOK_FLOW_MASK
 },

58 { "dr›èû", 
TOK_DROPTAIL
 },

59 { "ªd", 
TOK_RED
 },

60 { "gªd", 
TOK_GRED
 },

61 { "bw", 
TOK_BW
 },

62 { "b™dwidth", 
TOK_BW
 },

63 { "dñay", 
TOK_DELAY
 },

64 { "lök", 
TOK_LINK
 },

65 { "pùe", 
TOK_PIPE
 },

66 { "queue", 
TOK_QUEUE
 },

67 { "Êow£t", 
TOK_FLOWSET
 },

68 { "sched", 
TOK_SCHED
 },

69 { "¥i", 
TOK_PRI
 },

70 { "¥i‹ôy", 
TOK_PRI
 },

71 { "ty≥", 
TOK_TYPE
 },

72 { "Êow-id", 
TOK_FLOWID
},

73 { "d°-ùv6", 
TOK_DSTIP6
},

74 { "d°-ù6", 
TOK_DSTIP6
},

75 { "§c-ùv6", 
TOK_SRCIP6
},

76 { "§c-ù6", 
TOK_SRCIP6
},

77 { "¥ofûe", 
TOK_PROFILE
},

78 { "bur°", 
TOK_BURST
},

79 { "dummy√t-∑øms", 
TOK_NULL
 },

80 { 
NULL
, 0 }

83 
	#O_NEXT
(
p
, 
Àn
Ë((*)((*Ì +Üí))

	)

86 
	$oid_fûl
(
dn_id
 *
oid
, 
Àn
, 
ty≥
, 
uöçå_t
 
id
)

88 
oid
->
Àn
 =Üen;

89 
oid
->
ty≥
 =Åype;

90 
oid
->
subty≥
 = 0;

91 
oid
->
id
 = id;

92 
	}
}

96 
	$o_√xt
(
dn_id
 **
o
, 
Àn
, 
ty≥
)

98 
dn_id
 *
ªt
 = *
o
;

99 
	`oid_fûl
(
ªt
, 
Àn
, 
ty≥
, 0);

100 *
o
 = 
	`O_NEXT
(*o, 
Àn
);

101  
ªt
;

102 
	}
}

106 
	$o_com∑˘
(
dn_id
 **
o
, 
Àn
, 
ªÆ_Àngth
, 
ty≥
)

108 
dn_id
 *
ªt
 = *
o
;

110 
ªt
 = 
	`O_NEXT
(*
o
, -
Àn
);

111 
	`oid_fûl
(
ªt
, 
ªÆ_Àngth
, 
ty≥
, 0);

112 *
o
 = 
	`O_NEXT
(
ªt
, 
ªÆ_Àngth
);

113  
ªt
;

114 
	}
}

118 
	$s‹t_q
(*
¨g
, c⁄° *
∑
, c⁄° *
pb
)

120 
ªv
 = (
co
.
do_s‹t
 < 0);

121 
fõld
 = 
ªv
 ? -
co
.
do_s‹t
 : co.do_sort;

122 
ªs
 = 0;

123 c⁄° 
dn_Êow_queue
 *
a
 = 
∑
;

124 c⁄° 
dn_Êow_queue
 *
b
 = 
pb
;

126 
fõld
) {

128 
ªs
 = 
a
->
Àn
 - 
b
->len;

131 
ªs
 = 
a
->
Àn_byãs
 - 
b
->len_bytes;

135 
ªs
 = 
a
->
tŸ_pkts
 - 
b
->tot_pkts;

139 
ªs
 = 
a
->
tŸ_byãs
 - 
b
->tot_bytes;

142 i‡(
ªs
 < 0)

143 
ªs
 = -1;

144 i‡(
ªs
 > 0)

145 
ªs
 = 1;

146  ()(
ªv
 ? 
ªs
 : -res);

147 
	}
}

152 
	$¥öt_mask
(
ùfw_Êow_id
 *
id
)

154 i‡(!
	`IS_IP6_FLOW_ID
(
id
)) {

155 
	`¥ötf
(" "

157 
id
->
exåa
 ? "queue," : "",

158 
id
->
¥Ÿo
,

159 
id
->
§c_ù
, id->
§c_p‹t
,

160 
id
->
d°_ù
, id->
d°_p‹t
);

162 
buf
[255];

163 
	`¥ötf
("\n mask: %sproto: 0x%02x, flow_id: 0x%08x, ",

164 
id
->
exåa
 ? "queue," : "",

165 
id
->
¥Ÿo
, id->
Êow_id6
);

166 
	`öë_¡›
(
AF_INET6
, &(
id
->
§c_ù6
), 
buf
, (buf));

167 
	`¥ötf
("%s/0x%04x -> ", 
buf
, 
id
->
§c_p‹t
);

168 
	`öë_¡›
(
AF_INET6
, &(
id
->
d°_ù6
), 
buf
, (buf));

169 
	`¥ötf
("%s/0x%04x\n", 
buf
, 
id
->
d°_p‹t
);

171 
	}
}

174 
	$¥öt_hódî
(
ùfw_Êow_id
 *
id
)

176 i‡(!
	`IS_IP6_FLOW_ID
(
id
))

177 
	`¥ötf
("BKT Prot ___Source IP/port____ "

181 
	`¥ötf
("BKT ___Prot___ _flow-id_ "

185 
	}
}

188 
	$li°_Êow
(
dn_Êow
 *
ni
, *
¥öt
)

190 
buff
[255];

191 
¥Ÿ€¡
 *
≥
 = 
NULL
;

192 
ö_addr
 
öa
;

193 
ùfw_Êow_id
 *
id
 = &
ni
->
fid
;

195 i‡(*
¥öt
) {

196 
	`¥öt_hódî
(&
ni
->
fid
);

197 *
¥öt
 = 0;

199 
≥
 = 
	`gë¥Ÿobynumbî
(
id
->
¥Ÿo
);

201 
	`¥ötf
("%3u%c", (
ni
->
oid
.
id
) & 0xff,

202 
id
->
exåa
 ? '*' : ' ');

203 i‡(!
	`IS_IP6_FLOW_ID
(
id
)) {

204 i‡(
≥
)

205 
	`¥ötf
("%-4†", 
≥
->
p_«me
);

207 
	`¥ötf
("%4u ", 
id
->
¥Ÿo
);

208 
öa
.
s_addr
 = 
	`ht⁄l
(
id
->
§c_ù
);

209 
	`¥ötf
("%15s/%-5d ",

210 
	`öë_¡ﬂ
(
öa
), 
id
->
§c_p‹t
);

211 
öa
.
s_addr
 = 
	`ht⁄l
(
id
->
d°_ù
);

212 
	`¥ötf
("%15s/%-5d ",

213 
	`öë_¡ﬂ
(
öa
), 
id
->
d°_p‹t
);

216 i‡(
≥
 !
NULL
)

217 
	`¥ötf
("%9†", 
≥
->
p_«me
);

219 
	`¥ötf
("%9u ", 
id
->
¥Ÿo
);

220 
	`¥ötf
("%7d %39s/%-5d ", 
id
->
Êow_id6
,

221 
	`öë_¡›
(
AF_INET6
, &(
id
->
§c_ù6
), 
buff
, (buff)),

222 
id
->
§c_p‹t
);

223 
	`¥ötf
(" %39s/%-5d ",

224 
	`öë_¡›
(
AF_INET6
, &(
id
->
d°_ù6
), 
buff
, (buff)),

225 
id
->
d°_p‹t
);

227 
	`¥_u64
(&
ni
->
tŸ_pkts
, 4);

228 
	`¥_u64
(&
ni
->
tŸ_byãs
, 8);

229 
	`¥ötf
("%2u %4u %3u\n",

230 
ni
->
Àngth
,Çi->
Àn_byãs
,Çi->
dr›s
);

231 
	}
}

234 
	$¥öt_Êow£t_∑rms
(
dn_fs
 *
fs
, *
¥efix
)

236 
l
;

237 
qs
[30];

238 
∂r
[30];

239 
ªd
[90];

241 
l
 = 
fs
->
qsize
;

242 i‡(
fs
->
Êags
 & 
DN_QSIZE_BYTES
) {

243 i‡(
l
 >= 8192)

244 
	`•rötf
(
qs
, "%d KB", 
l
 / 1024);

246 
	`•rötf
(
qs
, "%d B", 
l
);

248 
	`•rötf
(
qs
, "%3d sl.", 
l
);

249 i‡(
fs
->
∂r
)

250 
	`•rötf
(
∂r
, "∂∏%f", 1.0 * 
fs
->plr / ()(0x7fffffff));

252 
∂r
[0] = '\0';

254 i‡(
fs
->
Êags
 & 
DN_IS_RED
)

255 
	`•rötf
(
ªd
,

257 (
fs
->
Êags
 & 
DN_IS_GENTLE_RED
) ? 'G' : ' ',

258 1.0 * 
fs
->
w_q
 / ()(1 << 
SCALE_RED
),

259 
fs
->
mö_th
,

260 
fs
->
max_th
,

261 1.0 * 
fs
->
max_p
 / ()(1 << 
SCALE_RED
));

263 
	`•rötf
(
ªd
, "droptail");

265 i‡(
¥efix
[0]) {

266 
	`¥ötf
("%s %s%s %d queues (%d buckets) %s\n",

267 
¥efix
, 
qs
, 
∂r
, 
fs
->
oid
.
id
, fs->
buckës
, 
ªd
);

268 
¥efix
[0] = '\0';

270 
	`¥ötf
("q%05d %s%s %d flows (%d buckets) sched %d "

272 
fs
->
fs_ƒ
, 
qs
, 
∂r
, fs->
oid
.
id
, fs->
buckës
,

273 
fs
->
sched_ƒ
, fs->
∑r
[0], fs->∑r[1], fs->∑r[2], 
ªd
);

274 i‡(
fs
->
Êags
 & 
DN_HAVE_MASK
)

275 
	`¥öt_mask
(&
fs
->
Êow_mask
);

277 
	}
}

280 
	$¥öt_exåa_dñay_∑rms
(
dn_¥ofûe
 *
p
)

282 
loss
;

283 i‡(
p
->
ßm∂es_no
 <= 0)

286 
loss
 = 
p
->
loss_Àvñ
;

287 
loss
 /
p
->
ßm∂es_no
;

288 
	`¥ötf
("\tÖrofile:Çame \"%s\"Üoss %f samples %d\n",

289 
p
->
«me
, 
loss
,Ö->
ßm∂es_no
);

290 
	}
}

293 
	$Êush_buf
(*
buf
)

295 i‡(
buf
[0])

296 
	`¥ötf
("%s\n", 
buf
);

297 
buf
[0] = '\0';

298 
	}
}

311 
	$li°_pùes
(
dn_id
 *
oid
, dn_id *
íd
)

313 
buf
[160];

314 
toPröt
 = 1;

316 
buf
[0] = '\0';

317 ; 
oid
 !
íd
; oid = 
	`O_NEXT
(oid, oid->
Àn
)) {

318 i‡(
oid
->
Àn
 < (*oid))

319 
	`îrx
(1, "övÆid oidÜí %d\n", 
oid
->
Àn
);

321 
oid
->
ty≥
) {

323 
	`Êush_buf
(
buf
);

324 
	`¥ötf
("uƒecognized obje˘ %d sizê%d\n", 
oid
->
ty≥
, oid->
Àn
);

326 
DN_TEXT
:

328 
i
, 
l
;

330 
dn_id
 
id
;

331 
uöt32_t
 
p
[0];

332 } *
d
 = (*)
oid
;

333 
l
 = (
oid
->
Àn
 - (*oid))/(
d
->
p
[0]);

334 i‡(
l
 == 0)

336 
	`¥ötf
(" Children flowsets: ");

337 
i
 = 0; i < 
l
; i++)

338 
	`¥ötf
("%u ", 
d
->
p
[
i
]);

339 
	`¥ötf
("\n");

342 
DN_CMD_GET
:

343 i‡(
co
.
vîbo£
)

344 
	`¥ötf
("™swî f‹ cmd %d,Üí %d\n", 
oid
->
ty≥
, oid->
id
);

346 
DN_SCH
: {

347 
dn_sch
 *
s
 = (dn_sch *)
oid
;

348 
	`Êush_buf
(
buf
);

349 
	`¥ötf
(" sched %dÅype %s flags 0x%x %d buckets %dáctive\n",

350 
s
->
sched_ƒ
,

351 
s
->
«me
, s->
Êags
, s->
buckës
, s->
oid
.
id
);

352 i‡(
s
->
Êags
 & 
DN_HAVE_MASK
)

353 
	`¥öt_mask
(&
s
->
sched_mask
);

357 
DN_FLOW
:

358 
	`li°_Êow
((
dn_Êow
 *)
oid
, &
toPröt
);

361 
DN_LINK
: {

362 
dn_lök
 *
p
 = (dn_lök *)
oid
;

363 
b
 = 
p
->
b™dwidth
;

364 
bwbuf
[30];

365 
bur°
[5 + 7];

368 
	`Êush_buf
(
buf
);

370 i‡(
b
 == 0)

371 
	`•rötf
(
bwbuf
, "unlimited ");

372 i‡(
b
 >= 1000000)

373 
	`•rötf
(
bwbuf
, "%7.3‡Mbô/s", 
b
/1000000);

374 i‡(
b
 >= 1000)

375 
	`•rötf
(
bwbuf
, "%7.3‡Kbô/s", 
b
/1000);

377 
	`•rötf
(
bwbuf
, "%7.3‡bô/†", 
b
);

379 i‡(
	`hum™ize_numbî
(
bur°
, (bur°), 
p
->burst,

380 "", 
HN_AUTOSCALE
, 0Ë< 0 || 
co
.
vîbo£
)

381 
	`•rötf
(
bur°
, "%d", ()
p
->burst);

382 
	`•rötf
(
buf
, "%05d: %s %4d ms burst %s",

383 
p
->
lök_ƒ
 % 
DN_MAX_ID
, 
bwbuf
,Ö->
dñay
, 
bur°
);

387 
DN_FS
:

388 
	`¥öt_Êow£t_∑rms
((
dn_fs
 *)
oid
, 
buf
);

390 
DN_PROFILE
:

391 
	`Êush_buf
(
buf
);

392 
	`¥öt_exåa_dñay_∑rms
((
dn_¥ofûe
 *)
oid
);

394 
	`Êush_buf
(
buf
);

396 
	}
}

402 
	$ùfw_dñëe_pùe
(
do_pùe
, 
i
)

405 
dn_id
 
oid
;

406 
uöçå_t
 
a
[1];

407 } 
cmd
;

408 
	`oid_fûl
((*)&
cmd
, (cmd), 
DN_CMD_DELETE
, 
DN_API_VERSION
);

409 
cmd
.
oid
.
subty≥
 = (
do_pùe
 =1Ë? 
DN_LINK
 :

410 –(
do_pùe
 =2Ë? 
DN_FS
 : 
DN_SCH
);

411 
cmd
.
a
[0] = 
i
;

412 
i
 = 
	`do_cmd
(
IP_DUMMYNET3
, &
cmd
, cmd.
oid
.
Àn
);

413 i‡(
i
) {

414 
i
 = 1;

415 
	`w¨n
("ruÀ %u: sësock›t(IP_DUMMYNET_DEL)", 
i
);

417  
i
;

418 
	}
}

505 
	#ED_MAX_LINE_LEN
 256+
ED_MAX_NAME_LEN


	)

506 
	#ED_TOK_SAMPLES
 "ßm∂es"

	)

507 
	#ED_TOK_LOSS
 "loss-Àvñ"

	)

508 
	#ED_TOK_NAME
 "«me"

	)

509 
	#ED_TOK_DELAY
 "dñay"

	)

510 
	#ED_TOK_PROB
 "¥ob"

	)

511 
	#ED_TOK_BW
 "bw"

	)

512 
	#ED_SEPARATORS
 " \t\n"

	)

513 
	#ED_MIN_SAMPLES_NO
 2

	)

519 
	$is_vÆid_numbî
(c⁄° *
s
)

521 
i
, 
dŸs_found
 = 0;

522 
Àn
 = 
	`°æí
(
s
);

524 
i
 = 0; i<
Àn
; ++i)

525 i‡(!
	`isdigô
(
s
[
i
]Ë&& (s[i] !='.' || ++
dŸs_found
 > 1))

528 
	}
}

536 
	$ªad_b™dwidth
(*
¨g
, *
b™dwidth
, *
if_«me
, 
«mñí
)

538 i‡(*
b™dwidth
 != -1)

539 
	`w¨nx
("duplicateÅoken, override bandwidth value!");

541 i‡(
¨g
[0] >= 'a' &&árg[0] <= 'z') {

542 i‡(!
if_«me
) {

543 
	`îrx
(1, "no if support");

545 i‡(
«mñí
 >
IFNAMSIZ
)

546 
	`w¨n
("interfaceÇameÅruncated");

547 
«mñí
--;

549 
	`°∫˝y
(
if_«me
, 
¨g
, 
«mñí
);

550 
if_«me
[
«mñí
] = '\0';

551 *
b™dwidth
 = 0;

553 
bw
;

554 *
íd
 = 
NULL
;

556 
bw
 = 
	`°πoul
(
¨g
, &
íd
, 0);

557 i‡(*
íd
 == 'K' || *end == 'k') {

558 
íd
++;

559 
bw
 *= 1000;

560 } i‡(*
íd
 == 'M' || *end == 'm') {

561 
íd
++;

562 
bw
 *= 1000000;

564 i‡((*
íd
 == 'B' &&

565 
	`_sub°rcmp2
(
íd
, "Bi", "Bit/s") != 0) ||

566 
	`_sub°rcmp2
(
íd
, "by", "bytes") == 0)

567 
bw
 *= 8;

569 i‡(
bw
 < 0)

570 
	`îrx
(
EX_DATAERR
, "bandwidthÅooÜarge");

572 *
b™dwidth
 = 
bw
;

573 i‡(
if_«me
)

574 
if_«me
[0] = '\0';

576 
	}
}

578 
	spoöt
 {

579 
	m¥ob
;

580 
	mdñay
;

584 
	$com∑ª_poöts
(c⁄° *
vp1
, c⁄° *
vp2
)

586 c⁄° 
poöt
 *
p1
 = 
vp1
;

587 c⁄° 
poöt
 *
p2
 = 
vp2
;

588 
ªs
 = 0;

590 
ªs
 = 
p1
->
¥ob
 - 
p2
->prob;

591 i‡(
ªs
 == 0)

592 
ªs
 = 
p1
->
dñay
 - 
p2
->delay;

593 i‡(
ªs
 < 0)

595 i‡(
ªs
 > 0)

599 
	}
}

601 
	#ED_EFMT
(
s
Ë
EX_DATAERR
,"îr‹ i¿%†©Üöê%d: "#s,
fûíame
,
löío


	)

623 
	$öãΩﬁ©e_ßm∂es
(
poöt
 *
p
, 
poöts_no
,

624 *
ßm∂es
, 
ßm∂es_no
, c⁄° *
fûíame
)

626 
dy
;

627 
y
;

628 
x
;

629 
m
;

630 
i
;

631 
cuº
;

635 i‡(
poöts_no
 < 3)

636 
	`îrx
(
EX_DATAERR
, "%sÅoo few samples,ÇeedátÜeast %d",

637 
fûíame
, 3);

639 
	`qs‹t
(
p
, 
poöts_no
, (
poöt
), 
com∑ª_poöts
);

641 
dy
 = 1.0/
ßm∂es_no
;

642 
y
 = 0;

644 
i
=0, 
cuº
 = 0; i < 
ßm∂es_no
; i++, 
y
+=
dy
) {

650  
y
 >
p
[
cuº
+1].
¥ob
 ) curr++;

653 
m
 = (
p
[
cuº
+1].
dñay
 -Ö[cuº].dñayË/ (p[cuº+1].
¥ob
 -Ö[curr].prob);

655 
x
 = 
p
[
cuº
].
dñay
 + (
y
 -Ö[cuº].
¥ob
Ë* 
m
;

656 
ßm∂es
[
i
] = 
x
;

660 
ßm∂es
[
i
] = 
p
[
cuº
+1].
dñay
;

661 
	}
}

668 
	$lﬂd_exåa_dñays
(c⁄° *
fûíame
, 
dn_¥ofûe
 *
p
,

669 
dn_lök
 *
lök
)

671 
löe
[
ED_MAX_LINE_LEN
];

672 
FILE
 *
f
;

673 
löío
 = 0;

675 
ßm∂es
 = -1;

676 
loss
 = -1.0;

677 
¥ofûe_«me
[
ED_MAX_NAME_LEN
];

678 
dñay_fú°
 = -1;

679 
do_poöts
 = 0;

680 
poöt
 
poöts
[
ED_MAX_SAMPLES_NO
];

681 
poöts_no
 = 0;

684 
p
->
lök_ƒ
 = 
lök
->link_nr;

686 
¥ofûe_«me
[0] = '\0';

687 
f
 = 
	`f›í
(
fûíame
, "r");

688 i‡(
f
 =
NULL
)

689 
	`îr
(
EX_UNAVAILABLE
, "f›í: %s", 
fûíame
);

691 
	`fgës
(
löe
, 
ED_MAX_LINE_LEN
, 
f
)) {

692 *
s
, *
cur
 = 
löe
, *
«me
 = 
NULL
, *
¨g
 = NULL;

694 ++
löío
;

697 
cur
) {

698 
s
 = 
	`°r£p
(&
cur
, 
ED_SEPARATORS
);

699 i‡(
s
 =
NULL
 || *s == '#')

701 i‡(*
s
 == '\0')

703 i‡(
¨g
)

704 
	`îrx
(
	`ED_EFMT
("too manyárguments"));

705 i‡(
«me
 =
NULL
)

706 
«me
 = 
s
;

708 
¨g
 = 
s
;

711 i‡((
«me
 =
NULL
) || (*name == '#'))

713 i‡(
¨g
 =
NULL
)

714 
	`îrx
(
	`ED_EFMT
("missögárg f‹ %s"), 
«me
);

716 i‡(!
	`°rˇ£cmp
(
«me
, 
ED_TOK_SAMPLES
)) {

717 i‡(
ßm∂es
 > 0)

718 
	`îrx
(
	`ED_EFMT
("duplicate ``samples''Üine"));

719 i‡(
	`©oi
(
¨g
) <=0)

720 
	`îrx
(
	`ED_EFMT
("invalidÇumber of samples"));

721 
ßm∂es
 = 
	`©oi
(
¨g
);

722 i‡(
ßm∂es
>=
ED_MAX_SAMPLES_NO
-1)

723 
	`îrx
(
	`ED_EFMT
("too many samples, maximum is %d"),

724 
ED_MAX_SAMPLES_NO
-1);

725 
do_poöts
 = 0;

726 } i‡(!
	`°rˇ£cmp
(
«me
, 
ED_TOK_BW
)) {

727 
buf
[
IFNAMSIZ
];

728 
	`ªad_b™dwidth
(
¨g
, &
lök
->
b™dwidth
, 
buf
, (buf));

729 
p
->
b™dwidth
 = 
lök
->bandwidth;

730 } i‡(!
	`°rˇ£cmp
(
«me
, 
ED_TOK_LOSS
)) {

731 i‡(
loss
 != -1.0)

732 
	`îrx
(
	`ED_EFMT
("du∂iˇãdÅokí: %s"), 
«me
);

733 i‡(!
	`is_vÆid_numbî
(
¨g
))

734 
	`îrx
(
	`ED_EFMT
("övÆid %s"), 
¨g
);

735 
loss
 = 
	`©of
(
¨g
);

736 i‡(
loss
 > 1)

737 
	`îrx
(
	`ED_EFMT
("%†gª©îÅh™ 1.0"), 
«me
);

738 
do_poöts
 = 0;

739 } i‡(!
	`°rˇ£cmp
(
«me
, 
ED_TOK_NAME
)) {

740 i‡(
¥ofûe_«me
[0] != '\0')

741 
	`îrx
(
	`ED_EFMT
("du∂iˇãdÅokí: %s"), 
«me
);

742 
	`°∫˝y
(
¥ofûe_«me
, 
¨g
, (profile_name) - 1);

743 
¥ofûe_«me
[(profile_name)-1] = '\0';

744 
do_poöts
 = 0;

745 } i‡(!
	`°rˇ£cmp
(
«me
, 
ED_TOK_DELAY
)) {

746 i‡(
do_poöts
)

747 
	`îrx
(
	`ED_EFMT
("du∂iˇãdÅokí: %s"), 
«me
);

748 
dñay_fú°
 = 1;

749 
do_poöts
 = 1;

750 } i‡(!
	`°rˇ£cmp
(
«me
, 
ED_TOK_PROB
)) {

751 i‡(
do_poöts
)

752 
	`îrx
(
	`ED_EFMT
("du∂iˇãdÅokí: %s"), 
«me
);

753 
dñay_fú°
 = 0;

754 
do_poöts
 = 1;

755 } i‡(
do_poöts
) {

756 i‡(!
	`is_vÆid_numbî
(
«me
Ë|| !is_vÆid_numbî(
¨g
))

757 
	`îrx
(
	`ED_EFMT
("invalidÖoint found"));

758 i‡(
dñay_fú°
) {

759 
poöts
[
poöts_no
].
dñay
 = 
	`©of
(
«me
);

760 
poöts
[
poöts_no
].
¥ob
 = 
	`©of
(
¨g
);

762 
poöts
[
poöts_no
].
dñay
 = 
	`©of
(
¨g
);

763 
poöts
[
poöts_no
].
¥ob
 = 
	`©of
(
«me
);

765 i‡(
poöts
[
poöts_no
].
¥ob
 > 1.0)

766 
	`îrx
(
	`ED_EFMT
("probability greaterÅhan 1.0"));

767 ++
poöts_no
;

769 
	`îrx
(
	`ED_EFMT
("uƒecogni£d comm™d '%s'"), 
«me
);

773 
	`f˛o£
 (
f
);

775 i‡(
ßm∂es
 == -1) {

776 
	`w¨nx
("'%s'ÇŸ found,ássumög 100", 
ED_TOK_SAMPLES
);

777 
ßm∂es
 = 100;

780 i‡(
loss
 == -1.0) {

781 
	`w¨nx
("'%s'ÇŸ found,ássumögÇÿloss", 
ED_TOK_LOSS
);

782 
loss
 = 1;

785 
	`öãΩﬁ©e_ßm∂es
(
poöts
, 
poöts_no
, 
p
->
ßm∂es
, sam∂es, 
fûíame
);

787 
p
->
ßm∂es_no
 = 
ßm∂es
++;

788 
p
->
loss_Àvñ
 = 
loss
 * 
ßm∂es
;

789 
	`°∫˝y
(
p
->
«me
, 
¥ofûe_«me
, (p->name));

790 
	}
}

812 
	$ùfw_c⁄fig_pùe
(
ac
, **
av
)

814 
i
;

815 
u_öt
 
j
;

816 *
íd
;

817 *
∑r
 = 
NULL
;

818 
dn_id
 *
buf
, *
ba£
;

819 
dn_sch
 *
sch
 = 
NULL
;

820 
dn_lök
 *
p
 = 
NULL
;

821 
dn_fs
 *
fs
 = 
NULL
;

822 
dn_¥ofûe
 *
pf
 = 
NULL
;

823 
ùfw_Êow_id
 *
mask
 = 
NULL
;

824 
lmax
;

825 
uöt32_t
 
_foo
 = 0, *
Êags
 = &_foÿ, *
buckës
 = &_foo;

826 
size_t
 
max_pf_size
 = (
dn_¥ofûe
Ë+ 
ED_MAX_SAMPLES_NO
 * ();

832 
lmax
 = (
dn_id
);

833 
lmax
 +(
dn_sch
Ë+ (
dn_lök
) +

834 (
dn_fs
);

835 
lmax
 +
max_pf_size
;

837 
av
++; 
ac
--;

839 i‡(
ac
 && 
	`isdigô
(**
av
)) {

840 
i
 = 
	`©oi
(*
av
);áv++; 
ac
--;

842 
i
 = -1;

843 i‡(
i
 <= 0)

844 
	`îrx
(
EX_USAGE
, "needáÖipe/flowset/schedÇumber");

845 
ba£
 = 
buf
 = 
	`ß„_ˇŒoc
(1, 
lmax
);

847 
	`o_√xt
(&
buf
, (
dn_id
), 
DN_CMD_CONFIG
);

848 
ba£
->
id
 = 
DN_API_VERSION
;

850 
co
.
do_pùe
) {

862 
sch
 = 
	`o_√xt
(&
buf
, (*sch), 
DN_SCH
);

863 
p
 = 
	`o_√xt
(&
buf
, (*p), 
DN_LINK
);

864 
fs
 = 
	`o_√xt
(&
buf
, (*fs), 
DN_FS
);

866 
sch
->
sched_ƒ
 = 
i
;

867 
sch
->
oid
.
subty≥
 = 0;

868 
mask
 = &
sch
->
sched_mask
;

869 
Êags
 = &
sch
->flags;

870 
buckës
 = &
sch
->buckets;

871 *
Êags
 |
DN_PIPE_CMD
;

873 
p
->
lök_ƒ
 = 
i
;

876 
fs
->
fs_ƒ
 = 
i
 + 2*
DN_MAX_ID
;

877 
fs
->
sched_ƒ
 = 
i
 + 
DN_MAX_ID
;

881 
fs
 = 
	`o_√xt
(&
buf
, (*fs), 
DN_FS
);

882 
fs
->
fs_ƒ
 = 
i
;

883 
mask
 = &
fs
->
Êow_mask
;

884 
Êags
 = &
fs
->flags;

885 
buckës
 = &
fs
->buckets;

889 
sch
 = 
	`o_√xt
(&
buf
, (*sch), 
DN_SCH
);

890 
fs
 = 
	`o_√xt
(&
buf
, (*fs), 
DN_FS
);

891 
sch
->
sched_ƒ
 = 
i
;

892 
mask
 = &
sch
->
sched_mask
;

893 
Êags
 = &
sch
->flags;

894 
buckës
 = &
sch
->buckets;

896 
fs
->
fs_ƒ
 = 
i
 + 
DN_MAX_ID
;

897 
fs
->
sched_ƒ
 = 
i
;

905 i‡(
p
)

906 
p
->
b™dwidth
 = -1;

907 
j
 = 0; j < (
fs
->
∑r
)/(fs->par[0]); j++)

908 
fs
->
∑r
[
j
] = -1;

909 
ac
 > 0) {

910 
d
;

911 
tok
 = 
	`m©ch_tokí
(
dummy√t_∑øms
, *
av
);

912 
ac
--; 
av
++;

914 
tok
) {

915 
TOK_NOERROR
:

916 
	`NEED
(
fs
, "noerror is only forÖipes");

917 
fs
->
Êags
 |
DN_NOERROR
;

920 
TOK_PLR
:

921 
	`NEED
(
fs
, "plr is only forÖipes");

922 
	`NEED1
("plrÇeedsárgument 0..1\n");

923 
d
 = 
	`°πod
(
av
[0], 
NULL
);

924 i‡(
d
 > 1)

925 
d
 = 1;

926 i‡(
d
 < 0)

927 
d
 = 0;

928 
fs
->
∂r
 = ()(
d
*0x7fffffff);

929 
ac
--; 
av
++;

932 
TOK_QUEUE
:

933 
	`NEED
(
fs
, "queue is only forÖipes or flowsets");

934 
	`NEED1
("queueÇeeds queue size\n");

935 
íd
 = 
NULL
;

936 
fs
->
qsize
 = 
	`°πoul
(
av
[0], &
íd
, 0);

937 i‡(*
íd
 == 'K' || *end == 'k') {

938 
fs
->
Êags
 |
DN_QSIZE_BYTES
;

939 
fs
->
qsize
 *= 1024;

940 } i‡(*
íd
 == 'B' ||

941 
	`_sub°rcmp2
(
íd
, "by", "bytes") == 0) {

942 
fs
->
Êags
 |
DN_QSIZE_BYTES
;

944 
ac
--; 
av
++;

947 
TOK_BUCKETS
:

948 
	`NEED
(
fs
, "buckets is only forÖipes or flowsets");

949 
	`NEED1
("bucketsÇeedsárgument\n");

950 *
buckës
 = 
	`°πoul
(
av
[0], 
NULL
, 0);

951 
ac
--; 
av
++;

954 
TOK_FLOW_MASK
:

955 
TOK_SCHED_MASK
:

956 
TOK_MASK
:

957 
	`NEED
(
mask
, "tok_mask");

958 
	`NEED1
("maskÇeeds mask specifier\n");

963 
∑r
 = 
NULL
;

965 
	`bzîo
(
mask
, (*mask));

966 
íd
 = 
NULL
;

968 
ac
 >= 1) {

969 
uöt32_t
 *
p32
 = 
NULL
;

970 
uöt16_t
 *
p16
 = 
NULL
;

971 
uöt32_t
 *
p20
 = 
NULL
;

972 
ö6_addr
 *
∑6
 = 
NULL
;

973 
uöt32_t
 
a
;

975 
tok
 = 
	`m©ch_tokí
(
dummy√t_∑øms
, *
av
);

976 
ac
--; 
av
++;

977 
tok
) {

978 
TOK_ALL
:

983 
mask
->
d°_ù
 = ~0;

984 
mask
->
§c_ù
 = ~0;

985 
mask
->
d°_p‹t
 = ~0;

986 
mask
->
§c_p‹t
 = ~0;

987 
mask
->
¥Ÿo
 = ~0;

988 
	`n2mask
(&
mask
->
d°_ù6
, 128);

989 
	`n2mask
(&
mask
->
§c_ù6
, 128);

990 
mask
->
Êow_id6
 = ~0;

991 *
Êags
 |
DN_HAVE_MASK
;

992 
íd_mask
;

994 
TOK_QUEUE
:

995 
mask
->
exåa
 = ~0;

996 *
Êags
 |
DN_HAVE_MASK
;

997 
íd_mask
;

999 
TOK_DSTIP
:

1000 
mask
->
addr_ty≥
 = 4;

1001 
p32
 = &
mask
->
d°_ù
;

1004 
TOK_SRCIP
:

1005 
mask
->
addr_ty≥
 = 4;

1006 
p32
 = &
mask
->
§c_ù
;

1009 
TOK_DSTIP6
:

1010 
mask
->
addr_ty≥
 = 6;

1011 
∑6
 = &
mask
->
d°_ù6
;

1014 
TOK_SRCIP6
:

1015 
mask
->
addr_ty≥
 = 6;

1016 
∑6
 = &
mask
->
§c_ù6
;

1019 
TOK_FLOWID
:

1020 
mask
->
addr_ty≥
 = 6;

1021 
p20
 = &
mask
->
Êow_id6
;

1024 
TOK_DSTPORT
:

1025 
p16
 = &
mask
->
d°_p‹t
;

1028 
TOK_SRCPORT
:

1029 
p16
 = &
mask
->
§c_p‹t
;

1032 
TOK_PROTO
:

1036 
ac
++; 
av
--;

1037 
íd_mask
;

1039 i‡(
ac
 < 1)

1040 
	`îrx
(
EX_USAGE
, "mask: value missing");

1041 i‡(*
av
[0] == '/') {

1042 
a
 = 
	`°πoul
(
av
[0]+1, &
íd
, 0);

1043 i‡(
∑6
 =
NULL
)

1044 
a
 = (a == 32) ? ~0 : (1 <<á) - 1;

1046 
a
 = 
	`°πoul
(
av
[0], &
íd
, 0);

1047 i‡(
p32
 !
NULL
)

1048 *
p32
 = 
a
;

1049 i‡(
p16
 !
NULL
) {

1050 i‡(
a
 > 0xFFFF)

1051 
	`îrx
(
EX_DATAERR
,

1053 *
p16
 = (
uöt16_t
)
a
;

1054 } i‡(
p20
 !
NULL
) {

1055 i‡(
a
 > 0xfffff)

1056 
	`îrx
(
EX_DATAERR
,

1058 *
p20
 = (
uöt32_t
)
a
;

1059 } i‡(
∑6
 !
NULL
) {

1060 i‡(
a
 > 128)

1061 
	`îrx
(
EX_DATAERR
,

1064 
	`n2mask
(
∑6
, 
a
);

1066 i‡(
a
 > 0xFF)

1067 
	`îrx
(
EX_DATAERR
,

1069 
mask
->
¥Ÿo
 = (
uöt8_t
)
a
;

1071 i‡(
a
 != 0)

1072 *
Êags
 |
DN_HAVE_MASK
;

1073 
ac
--; 
av
++;

1075 
íd_mask
:

1078 
TOK_RED
:

1079 
TOK_GRED
:

1080 
	`NEED1
("red/gredÇeeds w_q/min_th/max_th/max_p\n");

1081 
fs
->
Êags
 |
DN_IS_RED
;

1082 i‡(
tok
 =
TOK_GRED
)

1083 
fs
->
Êags
 |
DN_IS_GENTLE_RED
;

1087 i‡((
íd
 = 
	`°r£p
(&
av
[0], "/"))) {

1088 
w_q
 = 
	`°πod
(
íd
, 
NULL
);

1089 i‡(
w_q
 > 1 || w_q <= 0)

1090 
	`îrx
(
EX_DATAERR
, "0 < w_q <= 1");

1091 
fs
->
w_q
 = (Ë(w_q * (1 << 
SCALE_RED
));

1093 i‡((
íd
 = 
	`°r£p
(&
av
[0], "/"))) {

1094 
fs
->
mö_th
 = 
	`°πoul
(
íd
, &end, 0);

1095 i‡(*
íd
 == 'K' || *end == 'k')

1096 
fs
->
mö_th
 *= 1024;

1098 i‡((
íd
 = 
	`°r£p
(&
av
[0], "/"))) {

1099 
fs
->
max_th
 = 
	`°πoul
(
íd
, &end, 0);

1100 i‡(*
íd
 == 'K' || *end == 'k')

1101 
fs
->
max_th
 *= 1024;

1103 i‡((
íd
 = 
	`°r£p
(&
av
[0], "/"))) {

1104 
max_p
 = 
	`°πod
(
íd
, 
NULL
);

1105 i‡(
max_p
 > 1 || max_p <= 0)

1106 
	`îrx
(
EX_DATAERR
, "0 < max_p <= 1");

1107 
fs
->
max_p
 = ()(max_∞* (1 << 
SCALE_RED
));

1109 
ac
--; 
av
++;

1112 
TOK_DROPTAIL
:

1113 
	`NEED
(
fs
, "droptail is only for flowsets");

1114 
fs
->
Êags
 &~(
DN_IS_RED
|
DN_IS_GENTLE_RED
);

1117 
TOK_BW
:

1118 
	`NEED
(
p
, "bw is only forÜinks");

1119 
	`NEED1
("bwÇeeds bandwidth or interface\n");

1120 
	`ªad_b™dwidth
(
av
[0], &
p
->
b™dwidth
, 
NULL
, 0);

1121 
ac
--; 
av
++;

1124 
TOK_DELAY
:

1125 
	`NEED
(
p
, "delay is only forÜinks");

1126 
	`NEED1
("delayÇeedsárgument 0..10000ms\n");

1127 
p
->
dñay
 = 
	`°πoul
(
av
[0], 
NULL
, 0);

1128 
ac
--; 
av
++;

1131 
TOK_TYPE
: {

1132 
l
;

1133 
	`NEED
(
sch
, "type is only for schedulers");

1134 
	`NEED1
("typeÇeedsá string");

1135 
l
 = 
	`°æí
(
av
[0]);

1136 i‡(
l
 == 0 ||Ü > 15)

1137 
	`îrx
(1, "ty≥ %†toÿl⁄g\n", 
av
[0]);

1138 
	`°r˝y
(
sch
->
«me
, 
av
[0]);

1139 
sch
->
oid
.
subty≥
 = 0;

1140 
ac
--; 
av
++;

1144 
TOK_WEIGHT
:

1145 
	`NEED
(
fs
, "weight is only for flowsets");

1146 
	`NEED1
("weightÇeedsárgument\n");

1147 
fs
->
∑r
[0] = 
	`°πﬁ
(
av
[0], &
íd
, 0);

1148 
ac
--; 
av
++;

1151 
TOK_LMAX
:

1152 
	`NEED
(
fs
, "lmax is only for flowsets");

1153 
	`NEED1
("lmaxÇeedsárgument\n");

1154 
fs
->
∑r
[1] = 
	`°πﬁ
(
av
[0], &
íd
, 0);

1155 
ac
--; 
av
++;

1158 
TOK_PRI
:

1159 
	`NEED
(
fs
, "priority is only for flowsets");

1160 
	`NEED1
("priorityÇeedsárgument\n");

1161 
fs
->
∑r
[2] = 
	`°πﬁ
(
av
[0], &
íd
, 0);

1162 
ac
--; 
av
++;

1165 
TOK_SCHED
:

1166 
TOK_PIPE
:

1167 
	`NEED
(
fs
, "pipe/sched");

1168 
	`NEED1
("pipe/link/schedÇeedsÇumber\n");

1169 
fs
->
sched_ƒ
 = 
	`°πoul
(
av
[0], &
íd
, 0);

1170 
ac
--; 
av
++;

1173 
TOK_PROFILE
:

1175 
size_t
 
ªÆ_Àngth
;

1177 
	`NEED
((!
pf
), "profileálready set");

1178 
	`NEED
(
p
, "profile");

1179 
	`NEED1
("extra delayÇeedsÅhe fileÇame\n");

1182 
pf
 = 
	`o_√xt
(&
buf
, 
max_pf_size
, 
DN_PROFILE
);

1183 
	`lﬂd_exåa_dñays
(
av
[0], 
pf
, 
p
);

1186 
ªÆ_Àngth
 = (
dn_¥ofûe
) +

1187 
pf
->
ßm∂es_no
 * ();

1188 
	`o_com∑˘
(&
buf
, 
max_pf_size
, 
ªÆ_Àngth
, 
DN_PROFILE
);

1189 --
ac
; ++
av
;

1193 
TOK_BURST
:

1194 
	`NEED
(
p
, "burst");

1195 
	`NEED1
("burstÇeedsárgument\n");

1196 
î∫o
 = 0;

1197 i‡(
	`ex∑nd_numbî
(
av
[0], (
öt64_t
 *)&
p
->
bur°
) < 0)

1198 i‡(
î∫o
 !
ERANGE
)

1199 
	`îrx
(
EX_DATAERR
,

1201 i‡(
î∫o
 || 
p
->
bur°
 > (1ULL << 48) - 1)

1202 
	`îrx
(
EX_DATAERR
,

1204 
ac
--; 
av
++;

1208 
	`îrx
(
EX_DATAERR
, "uƒecogni£d o±i⁄ ``%s''", 
av
[-1]);

1213 i‡(
p
) {

1214 i‡(
p
->
dñay
 > 10000)

1215 
	`îrx
(
EX_DATAERR
, "delay must be < 10000");

1216 i‡(
p
->
b™dwidth
 == -1)

1217 
p
->
b™dwidth
 = 0;

1219 i‡(
fs
) {

1221 i‡(
fs
->
Êags
 & 
DN_QSIZE_BYTES
) {

1222 
size_t
 
Àn
;

1223 
limô
;

1225 
Àn
 = (
limô
);

1226 i‡(
	`sys˘lby«me
("net.inet.ip.dummynet.pipe_byte_limit",

1227 &
limô
, &
Àn
, 
NULL
, 0) == -1)

1228 
limô
 = 1024*1024;

1229 i‡(
fs
->
qsize
 > 
limô
)

1230 
	`îrx
(
EX_DATAERR
, "queuêsizêmu° bê< %ldB", 
limô
);

1232 
size_t
 
Àn
;

1233 
limô
;

1235 
Àn
 = (
limô
);

1236 i‡(
	`sys˘lby«me
("net.inet.ip.dummynet.pipe_slot_limit",

1237 &
limô
, &
Àn
, 
NULL
, 0) == -1)

1238 
limô
 = 100;

1239 i‡(
fs
->
qsize
 > 
limô
)

1240 
	`îrx
(
EX_DATAERR
, "2 <queuêsizê<%ld", 
limô
);

1243 i‡(
fs
->
Êags
 & 
DN_IS_RED
) {

1244 
size_t
 
Àn
;

1245 
lookup_dïth
, 
avg_pkt_size
;

1246 
w_q
;

1248 i‡(
fs
->
mö_th
 >fs->
max_th
)

1249 
	`îrx
(
EX_DATAERR
, "min_th %d must be <Åhan max_th %d",

1250 
fs
->
mö_th
, fs->
max_th
);

1251 i‡(
fs
->
max_th
 == 0)

1252 
	`îrx
(
EX_DATAERR
, "max_th must be > 0");

1254 
Àn
 = ();

1255 i‡(
	`sys˘lby«me
("net.inet.ip.dummynet.red_lookup_depth",

1256 &
lookup_dïth
, &
Àn
, 
NULL
, 0) == -1)

1257 
lookup_dïth
 = 256;

1258 i‡(
lookup_dïth
 == 0)

1259 
	`îrx
(
EX_DATAERR
, "net.inet.ip.dummynet.red_lookup_depth"

1262 
Àn
 = ();

1263 i‡(
	`sys˘lby«me
("net.inet.ip.dummynet.red_avg_pkt_size",

1264 &
avg_pkt_size
, &
Àn
, 
NULL
, 0) == -1)

1265 
avg_pkt_size
 = 512;

1267 i‡(
avg_pkt_size
 == 0)

1268 
	`îrx
(
EX_DATAERR
,

1282 i‡(
p
.
b™dwidth
==0)

1283 
s
 = 0;

1285 
s
 = ()
ck
.
hz
 * 
avg_pkt_size
 * 8 / 
p
.
b™dwidth
;

1292 
w_q
 = (()
fs
->w_qË/ (1 << 
SCALE_RED
);

1294 
idÀ
 = 
s
 * 3. / 
w_q
;

1295 
fs
->
lookup_°ï
 = ()
idÀ
 / 
lookup_dïth
;

1296 i‡(!
fs
->
lookup_°ï
)

1297 
fs
->
lookup_°ï
 = 1;

1298 
weight
 = 1 - 
w_q
;

1299 
t
 = 
fs
->
lookup_°ï
;Å > 1; --t)

1300 
weight
 *1 - 
w_q
;

1301 
fs
->
lookup_weight
 = ()(
weight
 * (1 << 
SCALE_RED
));

1306 
i
 = 
	`do_cmd
(
IP_DUMMYNET3
, 
ba£
, (*)
buf
 - (*)base);

1308 i‡(
i
)

1309 
	`îr
(1, "setsockopt(%s)", "IP_DUMMYNET_CONFIGURE");

1310 
	}
}

1313 
	$dummy√t_Êush
()

1315 
dn_id
 
oid
;

1316 
	`oid_fûl
(&
oid
, (oid), 
DN_CMD_FLUSH
, 
DN_API_VERSION
);

1317 
	`do_cmd
(
IP_DUMMYNET3
, &
oid
, oid.
Àn
);

1318 
	}
}

1325 
	$∑r£_ønge
(
ac
, *
av
[], 
uöt32_t
 *
v
, 
Àn
)

1327 
n
 = 0;

1328 *
íd±r
, *
s
;

1329 
uöt32_t
 
ba£
[2];

1331 i‡(
v
 =
NULL
 || 
Àn
 < 2) {

1332 
v
 = 
ba£
;

1333 
Àn
 = 2;

1336 
s
 = *
av
; s !
NULL
;áv++, 
ac
--) {

1337 
v
[0] = 
	`°πoul
(
s
, &
íd±r
, 10);

1338 
v
[1] = (*
íd±r
 != '-') ? v[0] :

1339 
	`°πoul
(
íd±r
+1, &endptr, 10);

1340 i‡(*
íd±r
 == '\0') {

1341 
s
 = (
ac
 > 0Ë? *(
av
+1Ë: 
NULL
;

1343 i‡(*
íd±r
 != ',') {

1344 
	`w¨n
("övÆidÇumbî: %s", 
s
);

1345 
s
 = ++
íd±r
;

1349 
s
 = ++
íd±r
;

1350 
ac
++;

1351 
av
--;

1353 i‡(
v
[1] < v[0] ||

1354 
v
[1] >
DN_MAX_ID
-1 ||

1355 
v
[1] >
DN_MAX_ID
-1) {

1358 
n
++;

1360 i‡(
co
.
do_pùe
 == 1) {

1361 
v
[0] +
DN_MAX_ID
;

1362 
v
[1] +
DN_MAX_ID
;

1364 
v
 = (
n
*2 < 
Àn
Ë? v + 2 : 
ba£
;

1366  
n
;

1367 
	}
}

1379 
	$dummy√t_li°
(
ac
, *
av
[], 
show_cou¡îs
)

1381 
dn_id
 *
oid
, *
x
 = 
NULL
;

1382 
ªt
, 
i
;

1383 
n
;

1384 
u_öt
 
buÊí
, 
l
;

1385 
u_öt
 
max_size
;

1387 ()
show_cou¡îs
;

1388 
ac
--;

1389 
av
++;

1391 
n
 = 
	`∑r£_ønge
(
ac
, 
av
, 
NULL
, 0);

1394 
l
 = (*
oid
Ë+ (
uöt32_t
Ë* 
n
 * 2;

1395 
oid
 = 
	`ß„_ˇŒoc
(1, 
l
);

1396 
	`oid_fûl
(
oid
, 
l
, 
DN_CMD_GET
, 
DN_API_VERSION
);

1398 i‡(
n
 > 0)

1399 
	`∑r£_ønge
(
ac
, 
av
, (
uöt32_t
 *)(
oid
 + 1), 
n
*2);

1408 
max_size
 = (
dn_fs
);

1409 i‡(
max_size
 < (
dn_sch
))

1410 
max_size
 = (
dn_sch
);

1411 i‡(
max_size
 < (
dn_Êow
))

1412 
max_size
 = (
dn_Êow
);

1414 
co
.
do_pùe
) {

1416 
oid
->
subty≥
 = 
DN_LINK
;

1419 
oid
->
subty≥
 = 
DN_FS
;

1422 
oid
->
subty≥
 = 
DN_SCH
;

1433 i‡(
n
 > 0) {

1434 
buÊí
 = 4*1024;

1436 
ªt
 = 
	`do_cmd
(-
IP_DUMMYNET3
, 
oid
, (
uöçå_t
)&
l
);

1437 i‡(
ªt
 !0 || 
oid
->
id
 <= (*oid))

1438 
d⁄e
;

1439 
buÊí
 = 
oid
->
id
 + 
max_size
;

1440 
oid
->
Àn
 = (*oid);

1443 
i
 = 0; i < 20; i++) {

1444 
l
 = 
buÊí
;

1445 
x
 = 
	`ß„_ªÆloc
(x, 
l
);

1446 
	`bc›y
(
oid
, 
x
, oid->
Àn
);

1447 
ªt
 = 
	`do_cmd
(-
IP_DUMMYNET3
, 
x
, (
uöçå_t
)&
l
);

1448 i‡(
ªt
 !0 || 
x
->
id
 <(*
oid
))

1449 
d⁄e
;

1450 i‡(
l
 + 
max_size
 <
buÊí
)

1452 
buÊí
 *= 2;

1454 
	`li°_pùes
(
x
, 
	`O_NEXT
(x, 
l
));

1455 
d⁄e
:

1456 i‡(
x
)

1457 
	`‰ì
(
x
);

1458 
	`‰ì
(
oid
);

1459 
	}
}

	@ipfw/expand_number.c

29 
__FBSDID
("$FreeBSD: src/lib/libutil/expand_number.c,v 1.2.4.2 2009/06/10 14:52:34 des Exp $");

31 
	~<sys/ty≥s.h
>

32 
	~<˘y≥.h
>

33 
	~<î∫o.h
>

34 
	~<öây≥s.h
>

36 
	~<°döt.h
>

50 
	$ex∑nd_numbî
(c⁄° *
buf
, 
öt64_t
 *
num
)

52 c⁄° 
unô
[] = "bkmgtpe";

53 *
íd±r
, 
s
;

54 
öt64_t
 
numbî
;

55 
i
;

57 
numbî
 = 
	`°πoimax
(
buf
, &
íd±r
, 0);

59 i‡(
íd±r
 =
buf
) {

61 
î∫o
 = 
EINVAL
;

65 i‡(*
íd±r
 == '\0') {

67 *
num
 = 
numbî
;

71 
s
 = 
	`tﬁowî
(*
íd±r
);

72 
s
) {

83 
î∫o
 = 
EINVAL
;

87 
i
 = 0; 
unô
[i] != '\0'; i++) {

88 i‡(
s
 =
unô
[
i
])

90 i‡((
numbî
 < 0 && (number << 10) >Çumber) ||

91 (
numbî
 >= 0 && (number << 10) <Çumber)) {

92 
î∫o
 = 
ERANGE
;

95 
numbî
 <<= 10;

98 *
num
 = 
numbî
;

100 
	}
}

	@ipfw/glue.c

32 
	~<°dlib.h
>

33 
	~<°dio.h
>

34 
	~<°rög.h
>

36 #ifde‡
_WIN32


37 
	~<√tdb.h
>

38 
	~<wödows.h
>

41 #i‚de‡
HAVE_NAT


44 
	$ùfw_show_«t
(
ac
, **
av
)

46 
	`Ârötf
(
°dîr
, "%†unsuµ‹ãd\n", 
__FUNCTION__
);

47 
	}
}

50 
	$ùfw_c⁄fig_«t
(
ac
, **
av
)

52 
	`Ârötf
(
°dîr
, "%†unsuµ‹ãd\n", 
__FUNCTION__
);

53 
	}
}

56 #ifde‡
__löux__


57 
	g›åe£t
;

64 
size_t


65 
	$°æ˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
siz
)

67 *
d
 = 
d°
;

68 c⁄° *
s
 = 
§c
;

69 
size_t
 
n
 = 
siz
;

72 i‡(
n
 != 0 && --n != 0) {

74 i‡((*
d
++ = *
s
++) == 0)

76 } --
n
 != 0);

80 i‡(
n
 == 0) {

81 i‡(
siz
 != 0)

82 *
d
 = '\0';

83 *
s
++)

87 (
s
 - 
§c
 - 1);

88 
	}
}

93 
	$°π⁄um
(c⁄° *
≈å
, 
mövÆ
, 
maxvÆ
,

94 c⁄° **
îr°r
)

96 
ªt
;

97 
î∫o_c
 = 
î∫o
;

99 
î∫o
 = 0;

100 #ifde‡
TCC


101 
ªt
 = 
	`°πﬁ
(
≈å
, (**)
îr°r
, 0);

103 
ªt
 = 
	`°πﬁl
(
≈å
, (**)
îr°r
, 0);

112 i‡(
î∫o
 !0 || 
≈å
 =*
îr°r
 || **errstr != '\0')

113 *
îr°r
 = "invalid";

115 *
îr°r
 = 
NULL
;

116 
î∫o
 = 
î∫o_c
;

118  
ªt
;

119 
	}
}

121 #i‡
deföed
 (
_WIN32
Ë|| deföed (
EMULATE_SYSCTL
)

123 
	~<√t/if.h
>

124 
	~<√töë/ù.h
>

125 
	~<√töë/ù_fw.h
>

126 
	~<√töë/ù_dummy√t.h
>

151 
	$sys˘lby«me
(c⁄° *
«me
, *
ﬁdp
, 
size_t
 *
ﬁdÀ≈
, *
√wp
,

152 
size_t
 
√wÀn
)

154 #i‡
	`deföed
 (
_WIN32
Ë|| deföed (
EMULATE_SYSCTL
)

178 
l
;

179 
ªt
;

180 
dn_id
* 
oid
;

181 
sys˘lhód
* 
íåy
;

182 * 
p°rög
;

183 * 
pd©a
;

184 
FILE
* 
Â
;

186 if((
ﬁdÀ≈
 !
NULL
) && (*oldlenp < 0))

187 
Â
 = (
FILE
*)
ﬁdp
;

189 
Â
 = 
°dout
;

190 if(
√wp
 !
NULL
 && 
√wÀn
 != 0)

193 
l
 = (
dn_id
Ë+ (
sys˘lhód
Ë+ 
	`°æí
(
«me
)+1 + 
√wÀn
;

194 
oid
 = 
	`mÆloc
(
l
);

195 i‡(
oid
 =
NULL
)

197 
oid
->
Àn
 = 
l
;

198 
oid
->
ty≥
 = 
DN_SYSCTL_SET
;

199 
oid
->
id
 = 
DN_API_VERSION
;

201 
íåy
 = (
sys˘lhód
*)(
oid
+1);

202 
pd©a
 = (*)(
íåy
+1);

203 
p°rög
 = 
pd©a
 + 
√wÀn
;

205 
íåy
->
blockÀn
 = (((
sys˘lhód
Ë+ 
	`°æí
(
«me
)+1 + 
√wÀn
) + 3) & ~3;

206 
íåy
->
«mñí
 = 
	`°æí
(
«me
)+1;

207 
íåy
->
Êags
 = 0;

208 
íåy
->
d©Æí
 = 
√wÀn
;

210 
	`bc›y
(
√wp
, 
pd©a
, 
√wÀn
);

211 
	`bc›y
(
«me
, 
p°rög
, 
	`°æí
(name)+1);

213 
ªt
 = 
	`do_cmd
(
IP_DUMMYNET3
, 
oid
, (
uöçå_t
)
l
);

214 i‡(
ªt
 != 0)

220 
l
 = (
dn_id
);

221 
oid
 = 
	`mÆloc
(
l
);

222 i‡(
oid
 =
NULL
)

224 
oid
->
Àn
 = 
l
;

225 
oid
->
ty≥
 = 
DN_SYSCTL_GET
;

226 
oid
->
id
 = 
DN_API_VERSION
;

228 
ªt
 = 
	`do_cmd
(-
IP_DUMMYNET3
, 
oid
, (
uöçå_t
)&
l
);

229 i‡(
ªt
 != 0)

232 
l
=
oid
->
id
;

233 
	`‰ì
(
oid
);

234 
oid
 = 
	`mÆloc
(
l
);

235 i‡(
oid
 =
NULL
)

237 
oid
->
Àn
 = 
l
;

238 
oid
->
ty≥
 = 
DN_SYSCTL_GET
;

239 
oid
->
id
 = 
DN_API_VERSION
;

241 
ªt
 = 
	`do_cmd
(-
IP_DUMMYNET3
, 
oid
, (
uöçå_t
)&
l
);

242 i‡(
ªt
 != 0)

245 
íåy
 = (
sys˘lhód
*)(
oid
+1);

246 
íåy
->
blockÀn
 != 0)

248 
pd©a
 = (*)(
íåy
+1);

249 
p°rög
 = 
pd©a
+
íåy
->
d©Æí
;

252 if(
«me
 !
NULL
 && 
ﬁdp
 !NULL && *
ﬁdÀ≈
 > 0)

255 if(
	`°rcmp
(
«me
,
p°rög
) == 0)

258 if(*
ﬁdÀ≈
 < 
íåy
->
d©Æí
)

260 
	`¥ötf
("%†îr‹: buf„∏toÿsmÆl\n",
__FUNCTION__
);

263 *
ﬁdÀ≈
 = 
íåy
->
d©Æí
;

264 
	`bc›y
(
pd©a
, 
ﬁdp
, *
ﬁdÀ≈
);

271 if–
«me
 =
NULL
 )

272 
¥öt
;

273 i‡–(
	`°∫cmp
(
p°rög
,
«me
,
	`°æí
(name)) == 0) && (Östring[strlen(name)]=='\0' ||Östring[strlen(name)]=='.' ) )

274 
¥öt
;

276 
skù
;

277 
¥öt
:

278 
	`Ârötf
(
Â
, "%s: ",
p°rög
);

279  
íåy
->
Êags
 >> 2 )

281 
SYSCTLTYPE_LONG
:

282 
	`Ârötf
(
Â
, "%lò", *(*)(
pd©a
));

284 
SYSCTLTYPE_UINT
:

285 
	`Ârötf
(
Â
, "%u ", *(*)(
pd©a
));

287 
SYSCTLTYPE_ULONG
:

288 
	`Ârötf
(
Â
, "%lu ", *(*)(
pd©a
));

290 
SYSCTLTYPE_INT
:

292 
	`Ârötf
(
Â
, "%ò", *(*)(
pd©a
));

294 if–(
íåy
->
Êags
 & 0x00000003Ë=
CTLFLAG_RD
 )

295 
	`Ârötf
(
Â
, "\t(read only)\n");

297 
	`Ârötf
(
Â
, "\n");

298 
skù
: ;

300 
íåy
 = (
sys˘lhód
*)((*Î¡ry +É¡ry->
blockÀn
);

302 
	`‰ì
(
oid
);

309 
FILE
 *
Â
;

310 *
ba£«me
 = "/sys/module/ipfw_mod/parameters/";

311 
fûíame
[256];

312 *
v¨p
;

313 
ªt
 = 0;

314 
d
;

316 i‡(
«me
 =
NULL
)

320 
v¨p
 = 
	`°ºchr
(
«me
, '.');

321 i‡(
v¨p
 =
NULL
)

324 
	`¢¥ötf
(
fûíame
, (fûíame), "%s%s", 
ba£«me
, 
v¨p
+1);

333 i‡(
ﬁdp
 && 
ﬁdÀ≈
) {

334 
Â
 = 
	`f›í
(
fûíame
, "r");

335 i‡(
Â
 =
NULL
) {

336 
	`Ârötf
(
°dîr
, "%†f›íÉº‹Ñódög fûíamê%s\n", 
__FUNCTION__
, 
fûíame
);

339 i‡(
	`fsˇnf
(
Â
, "%ld", &
d
) != 1) {

340 
ªt
 = -1;

341 } i‡(*
ﬁdÀ≈
 == ()) {

342 
d°
 = 
d
;

343 
	`mem˝y
(
ﬁdp
, &
d°
, *
ﬁdÀ≈
);

344 } i‡(*
ﬁdÀ≈
 == ()) {

345 
	`mem˝y
(
ﬁdp
, &
d
, *
ﬁdÀ≈
);

347 
	`Ârötf
(
°dîr
, "unknownÖaramererÜen %d\n",

348 ()*
ﬁdÀ≈
);

350 
	`f˛o£
(
Â
);

353 i‡(
√wp
 && 
√wÀn
) {

354 
Â
 = 
	`f›í
(
fûíame
, "w");

355 i‡(
Â
 =
NULL
) {

356 
	`Ârötf
(
°dîr
, "%†f›íÉº‹ wrôög fûíamê%s\n", 
__FUNCTION__
, 
fûíame
);

359 i‡(
√wÀn
 == ()) {

360 i‡(
	`Ârötf
(
Â
, "%d", *(*)
√wp
) < 1)

361 
ªt
 = -1;

362 } i‡(
√wÀn
 == ()) {

363 i‡(
	`Ârötf
(
Â
, "%ld", *(*)
√wp
) < 1)

364 
ªt
 = -1;

366 
	`Ârötf
(
°dîr
, "unknownÖaramererÜen %d\n",

367 ()
√wÀn
);

370 
	`f˛o£
(
Â
);

373  
ªt
;

375 
	}
}

377 #ifde‡
_WIN32


382 
	$wnd_£tsock›t
(
s
, 
Àvñ
, 
s›t_«me
, c⁄° *
›tvÆ
,

383 
sockÀn_t
 
›éí
)

385 
size_t
 
Àn
 =  (
sock›t
Ë+ 
›éí
;

386 
sock›t
 *
sock
;

387 
DWORD
 
n
;

388 
BOOL
 
ªsu…
;

389 
HANDLE
 
_dev_h
 = (HANDLE)
s
;

392 
sock
 = 
	`mÆloc
(
Àn
);

393 i‡(
sock
 =
NULL
)

396 
sock
->
s›t_dú
 = 
SOPT_SET
;

397 
sock
->
s›t_«me
 = sopt_name;

398 
sock
->
s›t_vÆsize
 = 
›éí
;

399 
sock
->
s›t_vÆ
 = (*)(sock+1);

401 
	`mem˝y
(
sock
->
s›t_vÆ
, 
›tvÆ
, 
›éí
);

402 
ªsu…
 = 
	`Devi˚IoC⁄åﬁ
 (
_dev_h
, 
IP_FW_SETSOCKOPT
, 
sock
, 
Àn
,

403 
NULL
, 0, &
n
, NULL);

404 
	`‰ì
 (
sock
);

406  (
ªsu…
 ? 0 : -1);

407 
	}
}

410 
	$wnd_gësock›t
(
s
, 
Àvñ
, 
s›t_«me
, *
›tvÆ
,

411 
sockÀn_t
 *
›éí
)

413 
size_t
 
Àn
 =  (
sock›t
Ë+ *
›éí
;

414 
sock›t
 *
sock
;

415 
DWORD
 
n
;

416 
BOOL
 
ªsu…
;

417 
HANDLE
 
_dev_h
 = (HANDLE)
s
;

419 
sock
 = 
	`mÆloc
(
Àn
);

420 i‡(
sock
 =
NULL
)

423 
sock
->
s›t_dú
 = 
SOPT_GET
;

424 
sock
->
s›t_«me
 = sopt_name;

425 
sock
->
s›t_vÆsize
 = *
›éí
;

426 
sock
->
s›t_vÆ
 = (*)(sock+1);

428 
	`mem˝y
 (
sock
->
s›t_vÆ
, 
›tvÆ
, *
›éí
);

430 
ªsu…
 = 
	`Devi˚IoC⁄åﬁ
 (
_dev_h
, 
IP_FW_GETSOCKOPT
, 
sock
, 
Àn
,

431 
sock
, 
Àn
, &
n
, 
NULL
);

433 *
›éí
 = 
sock
->
s›t_vÆsize
;

434 
	`mem˝y
 (
›tvÆ
, 
sock
->
s›t_vÆ
, *
›éí
);

435 
	`‰ì
 (
sock
);

436  (
ªsu…
 ? 0 : -1);

437 
	}
}

440 
	$my_sockë
(
domaö
, 
ty
, 
¥Ÿo
)

442 
TCHAR
 *
pcCommP‹t
 = 
	`TEXT
("\\\\.\\Ipfw");

443 
HANDLE
 
_dev_h
 = 
INVALID_HANDLE_VALUE
;

447 i‡(
_dev_h
 =
INVALID_HANDLE_VALUE
) {

448 
_dev_h
 = 
	`Cª©eFûe
 (
pcCommP‹t
,

449 
GENERIC_READ
 | 
GENERIC_WRITE
,

450 0, 
NULL
,

451 
OPEN_EXISTING
, 
FILE_ATTRIBUTE_NORMAL
, 
NULL
);

453 i‡(
_dev_h
 =
INVALID_HANDLE_VALUE
) {

454 
	`¥ötf
("%s failed %u, cannotÅalkÅo kernel module\n",

455 
__FUNCTION__
, ()
	`GëLa°Eº‹
());

458  ()
_dev_h
;

459 
	}
}

461 
ho°ít
* 
	$gëho°by«me2
(c⁄° *
«me
, 
af
)

463  
	`gëho°by«me
(
«me
);

464 
	}
}

466 
ëhî_addr
* 
	$ëhî_©⁄
(c⁄° *
a
)

468 
	`Ârötf
(
°dîr
, "%†em±y\n", 
__FUNCTION__
);

469  
NULL
;

470 
	}
}

472 #ifde‡
TCC


473 
	g›ãº
 = 1,

474 
	g›töd
 = 1,

475 
	g›t›t
,

476 
	g›åe£t
;

477 *
	g›èrg
;

479 
	#BADCH
 ()'?'

	)

480 
	#BADARG
 ()':'

	)

481 
	#EMSG
 ""

	)

483 
	#PROGNAME
 "ùfw"

	)

489 
	$gë›t
(
«rgc
, 
«rgv
, 
o°r
)

490 
«rgc
;

491 * c⁄° 
«rgv
[];

492 c⁄° *
o°r
;

494 *
∂a˚
 = 
EMSG
;

495 *
ﬁi
;

497 i‡(
›åe£t
 || *
∂a˚
 == 0) {

498 
›åe£t
 = 0;

499 
∂a˚
 = 
«rgv
[
›töd
];

500 i‡(
›töd
 >
«rgc
 || *
∂a˚
++ != '-') {

502 
∂a˚
 = 
EMSG
;

505 
›t›t
 = *
∂a˚
++;

506 i‡(
›t›t
 ='-' && *
∂a˚
 == 0) {

508 ++
›töd
;

509 
∂a˚
 = 
EMSG
;

512 i‡(
›t›t
 == 0) {

515 
∂a˚
 = 
EMSG
;

516 i‡(
	`°rchr
(
o°r
, '-'Ë=
NULL
)

518 
›t›t
 = '-';

521 
›t›t
 = *
∂a˚
++;

524 i‡(
›t›t
 =':' || (
ﬁi
 = 
	`°rchr
(
o°r
, o±›t)Ë=
NULL
) {

525 i‡(*
∂a˚
 == 0)

526 ++
›töd
;

527 i‡(
›ãº
 && *
o°r
 != ':')

528 ()
	`Ârötf
(
°dîr
,

529 "%s: iŒegÆ o±i⁄ -- %c\n", 
PROGNAME
,

530 
›t›t
);

531  (
BADCH
);

535 i‡(
ﬁi
[1] != ':') {

537 
›èrg
 = 
NULL
;

538 i‡(*
∂a˚
 == 0)

539 ++
›töd
;

543 i‡(*
∂a˚
)

544 
›èrg
 = 
∂a˚
;

545 i‡(
«rgc
 > ++
›töd
)

546 
›èrg
 = 
«rgv
[
›töd
];

549 
∂a˚
 = 
EMSG
;

550 i‡(*
o°r
 == ':')

551  (
BADARG
);

552 i‡(
›ãº
)

553 ()
	`Ârötf
(
°dîr
,

555 
PROGNAME
, 
›t›t
);

556  (
BADCH
);

558 
∂a˚
 = 
EMSG
;

559 ++
›töd
;

561  (
›t›t
);

562 
	}
}

566 
	$vîrx
(
ex
, 
evÆ
, c⁄° *
fmt
, 
va_li°
 
≠
)

568 
	`Ârötf
(
°dîr
, "%s: ", 
PROGNAME
);

569 i‡(
fmt
 !
NULL
)

570 
	`vÂrötf
(
°dîr
, 
fmt
, 
≠
);

571 
	`Ârötf
(
°dîr
, "\n");

572 i‡(
ex
)

573 
	`exô
(
evÆ
);

574 
	}
}

576 
	$îrx
(
evÆ
, c⁄° *
fmt
, ...)

578 
va_li°
 
≠
;

579 
	`va_°¨t
(
≠
, 
fmt
);

580 
	`vîrx
(1, 
evÆ
, 
fmt
, 
≠
);

581 
	`va_íd
(
≠
);

582 
	}
}

585 
	$w¨nx
(c⁄° *
fmt
, ...)

587 
va_li°
 
≠
;

588 
	`va_°¨t
(
≠
, 
fmt
);

589 
	`vîrx
(0, 0, 
fmt
, 
≠
);

590 
	`va_íd
(
≠
);

591 
	}
}

594 
	$°r£p
(**
°rögp
, c⁄° *
dñim
)

596 *
s
;

597 c⁄° *
•™p
;

598 
c
, 
sc
;

599 *
tok
;

601 i‡((
s
 = *
°rögp
Ë=
NULL
)

602  (
NULL
);

603 
tok
 = 
s
;;) {

604 
c
 = *
s
++;

605 
•™p
 = 
dñim
;

607 i‡((
sc
 = *
•™p
++Ë=
c
) {

608 i‡(
c
 == 0)

609 
s
 = 
NULL
;

611 
s
[-1] = 0;

612 *
°rögp
 = 
s
;

613  (
tok
);

615 } 
sc
 != 0);

618 
	}
}

621 
	$tﬁowî
(
c
)

623  (
c
 >= 'A' && c <= 'Z') ? c + 'a' - 'A' : c;

624 
	}
}

626 
	$isdigô
(
c
)

628  (
c
 >= '0' && c <= '9');

629 
	}
}

631 
	$isxdigô
(
c
)

633  (
	`°rchr
("0123456789ABCDEFabcdef", 
c
) ? 1 : 0);

634 
	}
}

636 
	$is•a˚
(
c
)

638  (
	`°rchr
(" \t\n\r", 
c
) ? 1 : 0);

639 
	}
}

641 
	$ißscii
(
c
)

643  (
c
 < 128);

644 
	}
}

646 
	$i¶owî
(
c
)

648  (
c
 >= 'a' && c <= 'z');

649 
	}
}

652 
	$°rˇ£cmp
(c⁄° *
s1
, c⁄° *
s2
)

655 *
us1
 = (c⁄° *)
s1
,

656 *
us2
 = (c⁄° *)
s2
;

658 
	`tﬁowî
(*
us1
Ë=tﬁowî(*
us2
++))

659 i‡(*
us1
++ == '\0')

661  (
	`tﬁowî
(*
us1
Ë-Åﬁowî(*--
us2
));

662 
	}
}

664 
ötmax_t


665 
	$°πoimax
(c⁄° * 
ª°ri˘
 
≈å
, **Ñe°ri˘ 
íd±r
, 
ba£
)

667  
	`°πﬁ
(
≈å
, 
íd±r
,
ba£
);

668 
	}
}

671 
	$£t£rvít
(
a
)

673 
	}
}

675 
	#NS_INADDRSZ
 128

	)

678 
	$öë_±⁄
(
af
, c⁄° *
§c
, *
d°
)

680 c⁄° 
digôs
[] = "0123456789";

681 
ßw_digô
, 
o˘ës
, 
ch
;

682 
u_ch¨
 
tmp
[
NS_INADDRSZ
], *
ç
;

684 i‡(
af
 !
AF_INET
) {

685 
î∫o
 = 
EINVAL
;

689 
ßw_digô
 = 0;

690 
o˘ës
 = 0;

691 *(
ç
 = 
tmp
) = 0;

692 (
ch
 = *
§c
++) != '\0') {

693 c⁄° *
pch
;

695 i‡((
pch
 = 
	`°rchr
(
digôs
, 
ch
)Ë!
NULL
) {

696 
u_öt
 
√w
 = *
ç
 * 10 + (
pch
 - 
digôs
);

698 i‡(
ßw_digô
 && *
ç
 == 0)

700 i‡(
√w
 > 255)

702 *
ç
 = 
√w
;

703 i‡(!
ßw_digô
) {

704 i‡(++
o˘ës
 > 4)

706 
ßw_digô
 = 1;

708 } i‡(
ch
 ='.' && 
ßw_digô
) {

709 i‡(
o˘ës
 == 4)

711 *++
ç
 = 0;

712 
ßw_digô
 = 0;

716 i‡(
o˘ës
 < 4)

718 
	`mem˝y
(
d°
, 
tmp
, 
NS_INADDRSZ
);

720 
	}
}

723 
	$öë_¡›
(
af
, c⁄° *
_§c
, *
d°
, 
sockÀn_t
 
size
)

725 c⁄° 
fmt
[] = "%u.%u.%u.%u";

726 
tmp
[ "255.255.255.255"];

727 c⁄° 
u_ch¨
 *
§c
 = 
_§c
;

728 
l
;

729 i‡(
af
 !
AF_INET
) {

730 
î∫o
 = 
EINVAL
;

731  
NULL
;

734 
l
 = 
	`¢¥ötf
(
tmp
, —mp), 
fmt
, 
§c
[0], src[1], src[2], src[3]);

735 i‡(
l
 <0 || (
sockÀn_t
Ë»>
size
) {

736 
î∫o
 = 
ENOSPC
;

737  (
NULL
);

739 
	`°æ˝y
(
d°
, 
tmp
, 
size
);

740  (
d°
);

741 
	}
}

751 
	$öë_©⁄
(c⁄° *
˝
, 
ö_addr
 *
addr
) {

752 
u_l⁄g
 
vÆ
;

753 
ba£
, 
n
;

754 
c
;

755 
u_öt8_t
 
∑πs
[4];

756 
u_öt8_t
 *
µ
 = 
∑πs
;

757 
digô
;

759 
c
 = *
˝
;

766 i‡(!
	`isdigô
(()
c
))

768 
vÆ
 = 0; 
ba£
 = 10; 
digô
 = 0;

769 i‡(
c
 == '0') {

770 
c
 = *++
˝
;

771 i‡(
c
 == 'x' || c == 'X')

772 
ba£
 = 16, 
c
 = *++
˝
;

774 
ba£
 = 8;

775 
digô
 = 1 ;

779 i‡(
	`ißscii
(
c
Ë&& 
	`isdigô
(()c)) {

780 i‡(
ba£
 =8 && (
c
 == '8' || c == '9'))

782 
vÆ
 = (vÆ * 
ba£
Ë+ (
c
 - '0');

783 
c
 = *++
˝
;

784 
digô
 = 1;

785 } i‡(
ba£
 =16 && 
	`ißscii
(
c
) &&

786 
	`isxdigô
(()
c
)) {

787 
vÆ
 = (val << 4) |

788 (
c
 + 10 - (
	`i¶owî
(()c) ? 'a' : 'A'));

789 
c
 = *++
˝
;

790 
digô
 = 1;

794 i‡(
c
 == '.') {

801 i‡(
µ
 >
∑πs
 + 3 || 
vÆ
 > 0xffU)

803 *
µ
++ = 
vÆ
;

804 
c
 = *++
˝
;

811 i‡(
c
 !'\0' && (!
	`ißscii
(cË|| !
	`is•a˚
(()c)))

816 i‡(!
digô
)

822 
n
 = 
µ
 - 
∑πs
 + 1;

823 
n
) {

828 i‡(
vÆ
 > 0xffffffU)

830 
vÆ
 |
∑πs
[0] << 24;

834 i‡(
vÆ
 > 0xffffU)

836 
vÆ
 |(
∑πs
[0] << 24) | (parts[1] << 16);

840 i‡(
vÆ
 > 0xffU)

842 
vÆ
 |(
∑πs
[0] << 24) | (parts[1] << 16) | (parts[2] << 8);

845 i‡(
addr
 !
NULL
)

846 
addr
->
s_addr
 = 
	`ht⁄l
(
vÆ
);

848 
	}
}

	@ipfw/humanize_number.c

41 
__FBSDID
("$FreeBSD: src/lib/libutil/humanize_number.c,v 1.2.10.1 2008/04/20 16:29:01ántoine Exp $");

43 
	~<sys/ty≥s.h
>

44 
	~<as£π.h
>

45 
	~<öây≥s.h
>

46 
	~<°dio.h
>

47 
	~<°dlib.h
>

48 
	~<°rög.h
>

53 
	$hum™ize_numbî
(*
buf
, 
size_t
 
Àn
, 
öt64_t
 
byãs
,

54 c⁄° *
suffix
, 
sˇÀ
, 
Êags
)

56 c⁄° *
¥efixes
, *
£p
;

57 
b
, 
i
, 
r
, 
maxsˇÀ
, 
s1
, 
s2
, 
sign
;

58 
öt64_t
 
divis‹
, 
max
;

59 
size_t
 
ba£Àn
;

61 
	`as£π
(
buf
 !
NULL
);

62 
	`as£π
(
suffix
 !
NULL
);

63 
	`as£π
(
sˇÀ
 >= 0);

65 i‡(
Êags
 & 
HN_DIVISOR_1000
) {

67 
divis‹
 = 1000;

68 i‡(
Êags
 & 
HN_B
)

69 
¥efixes
 = "B\0k\0M\0G\0T\0P\0E";

71 
¥efixes
 = "\0\0k\0M\0G\0T\0P\0E";

77 
divis‹
 = 1024;

78 i‡(
Êags
 & 
HN_B
)

79 
¥efixes
 = "B\0K\0M\0G\0T\0P\0E";

81 
¥efixes
 = "\0\0K\0M\0G\0T\0P\0E";

84 
	#SCALE2PREFIX
(
sˇÀ
Ë(&
¥efixes
[(sˇÀË<< 1])

	)

85 
maxsˇÀ
 = 7;

87 i‡(
sˇÀ
 >
maxsˇÀ
 &&

88 (
sˇÀ
 & (
HN_AUTOSCALE
 | 
HN_GETSCALE
)) == 0)

91 i‡(
buf
 =
NULL
 || 
suffix
 == NULL)

94 i‡(
Àn
 > 0)

95 
buf
[0] = '\0';

96 i‡(
byãs
 < 0) {

97 
sign
 = -1;

98 
byãs
 *= -100;

99 
ba£Àn
 = 3;

101 
sign
 = 1;

102 
byãs
 *= 100;

103 
ba£Àn
 = 2;

105 i‡(
Êags
 & 
HN_NOSPACE
)

106 
£p
 = "";

108 
£p
 = " ";

109 
ba£Àn
++;

111 
ba£Àn
 +
	`°æí
(
suffix
);

114 i‡(
Àn
 < 
ba£Àn
 + 1)

117 i‡(
sˇÀ
 & (
HN_AUTOSCALE
 | 
HN_GETSCALE
)) {

119 
max
 = 100, 
i
 = 
Àn
 - 
ba£Àn
; i-- > 0;)

120 
max
 *= 10;

127 
i
 = 0; 
byãs
 >
max
 - 50 && i < 
maxsˇÀ
; i++)

128 
byãs
 /
divis‹
;

130 i‡(
sˇÀ
 & 
HN_GETSCALE
)

131  (
i
);

133 
i
 = 0; i < 
sˇÀ
 && i < 
maxsˇÀ
; i++)

134 
byãs
 /
divis‹
;

137 i‡(
byãs
 < 995 && 
i
 > 0 && 
Êags
 & 
HN_DECIMAL
) {

139 i‡(
Àn
 < 
ba£Àn
 + 1 + 2)

141 
b
 = (()
byãs
 + 5) / 10;

142 
s1
 = 
b
 / 10;

143 
s2
 = 
b
 % 10;

144 
r
 = 
	`¢¥ötf
(
buf
, 
Àn
, "%d%s%d%s%s%s",

145 
sign
 * 
s1
, ".", 
s2
,

146 
£p
, 
	`SCALE2PREFIX
(
i
), 
suffix
);

148 
r
 = 
	`¢¥ötf
(
buf
, 
Àn
, "%" 
PRId64
 "%s%s%s",

149 
sign
 * ((
byãs
 + 50) / 100),

150 
£p
, 
	`SCALE2PREFIX
(
i
), 
suffix
);

152  (
r
);

153 
	}
}

	@ipfw/include/alias.h

1 #i‚de‡
_ALIAS_H_


2 
	#_ALIAS_H_


	)

4 
	#LIBALIAS_BUF_SIZE
 128

	)

10 
	#PKT_ALIAS_LOG
 0x01

	)

16 
	#PKT_ALIAS_DENY_INCOMING
 0x02

	)

25 
	#PKT_ALIAS_SAME_PORTS
 0x04

	)

35 #i‚def 
NO_USE_SOCKETS


36 
	#PKT_ALIAS_USE_SOCKETS
 0x08

	)

47 
	#PKT_ALIAS_UNREGISTERED_ONLY
 0x10

	)

56 
	#PKT_ALIAS_RESET_ON_ADDR_CHANGE
 0x20

	)

63 
	#PKT_ALIAS_PROXY_ONLY
 0x40

	)

69 
	#PKT_ALIAS_REVERSE
 0x80

	)

	@ipfw/include/net/if_dl.h

33 #i‚de‡
_NET_IF_DL_H_


34 
	#_NET_IF_DL_H_


	)

57 
	ssockaddr_dl
 {

58 
u_ch¨
 
	msdl_Àn
;

59 
u_ch¨
 
	msdl_Ámûy
;

60 
u_sh‹t
 
	msdl_ödex
;

61 
u_ch¨
 
	msdl_ty≥
;

62 
u_ch¨
 
	msdl_∆í
;

63 
u_ch¨
 
	msdl_Æí
;

64 
u_ch¨
 
	msdl_¶í
;

65 
	msdl_d©a
[46];

69 
	#LLADDR
(
s
Ë((
ˇddr_t
)((s)->
sdl_d©a
 + (s)->
sdl_∆í
))

	)

71 #i‚de‡
_KERNEL


73 
	~<sys/cdefs.h
>

75 
__BEGIN_DECLS


76 
lök_addr
(c⁄° *, 
sockaddr_dl
 *);

77 *
lök_¡ﬂ
(c⁄° 
sockaddr_dl
 *);

78 
	g__END_DECLS


	@ipfw/include/net/pfvar.h

1 #i‚de‡
_PF_VAR_H_


2 
	#_PF_VAR_H_


	)

7 
	~<sys/queue.h
>

9 
	#DIOCSTARTALTQ
 
	`_IO
 ('D', 42)

	)

10 
	#DIOCSTOPALTQ
 
	`_IO
 ('D', 43)

	)

12 
	spf_Ætq
 {

13 
TAILQ_ENTRY
(
pf_Ætq
Ë
	míåõs
;

15 
u_öt32_t
 
	mqid
;

17 
	#PF_QNAME_SIZE
 64

	)

18 
	mq«me
[
PF_QNAME_SIZE
];

22 
	spfioc_Ætq
 {

23 
u_öt32_t
 
	ma˘i⁄
;

24 
u_öt32_t
 
	mtickë
;

25 
u_öt32_t
 
	mƒ
;

26 
pf_Ætq
 
	mÆtq
;

29 
	#DIOCGETALTQS
 
	`_IOWR
('D', 47, 
pfioc_Ætq
)

	)

30 
	#DIOCGETALTQ
 
	`_IOWR
('D', 48, 
pfioc_Ætq
)

	)

	@ipfw/include/timeconv.h

4 #i‚de‡
_TIMECONV_H_


5 
	#_TIMECONV_H_


	)

6 
__ölöe
 
time_t


7 
	$_l⁄g_to_time
(
é⁄g
)

9 i‡((Ë=(
__öt32_t
))

10 ((
time_t
)(
__öt32_t
)(
é⁄g
));

11 ((
time_t
)
é⁄g
);

12 
	}
}

	@ipfw/include_e/libutil.h

	@ipfw/include_e/netinet/__emtpy.h

	@ipfw/include_e/netinet/ip_dummynet.h

30 #i‚de‡
_IP_DUMMYNET_H


31 
	#_IP_DUMMYNET_H


	)

49 
	#DN_API_VERSION
 12500000

	)

50 
	#DN_MAX_ID
 0x10000

	)

52 
	sdn_id
 {

53 
uöt16_t
 
	mÀn
;

54 
uöt8_t
 
	mty≥
;

55 
uöt8_t
 
	msubty≥
;

56 
uöt32_t
 
	mid
;

65 
	mDN_NONE
 = 0,

66 
	mDN_LINK
 = 1,

67 
	mDN_FS
,

68 
	mDN_SCH
,

69 
	mDN_SCH_I
,

70 
	mDN_QUEUE
,

71 
	mDN_DELAY_LINE
,

72 
	mDN_PROFILE
,

73 
	mDN_FLOW
,

74 
	mDN_TEXT
,

76 
	mDN_CMD_CONFIG
 = 0x80,

77 
	mDN_CMD_DELETE
,

78 
	mDN_CMD_GET
,

79 
	mDN_CMD_FLUSH
,

81 
	mDN_COMPAT_PIPE
,

82 
	mDN_COMPAT_QUEUE
,

83 
	mDN_GET_COMPAT
,

86 
	mDN_SYSCTL_GET
,

87 
	mDN_SYSCTL_SET
,

89 
	mDN_LAST
,

93 
	mDN_SCHED_UNKNOWN
 = 0,

94 
	mDN_SCHED_FIFO
 = 1,

95 
	mDN_SCHED_WF2QP
 = 2,

100 
	mDN_HAVE_MASK
 = 0x0001,

101 
	mDN_NOERROR
 = 0x0002,

102 
	mDN_QHT_HASH
 = 0x0004,

103 
	mDN_QSIZE_BYTES
 = 0x0008,

104 
	mDN_HAS_PROFILE
 = 0x0010,

105 
	mDN_IS_RED
 = 0x0020,

106 
	mDN_IS_GENTLE_RED
= 0x0040,

107 
	mDN_PIPE_CMD
 = 0x1000,

113 
	sdn_lök
 {

114 
dn_id
 
	moid
;

121 
öt32_t
 
	mlök_ƒ
;

122 
	mb™dwidth
;

123 
	mdñay
;

124 
uöt64_t
 
	mbur°
;

133 
	sdn_fs
 {

134 
dn_id
 
	moid
;

135 
uöt32_t
 
	mfs_ƒ
;

136 
uöt32_t
 
	mÊags
;

137 
	mqsize
;

138 
öt32_t
 
	m∂r
;

139 
uöt32_t
 
	mbuckës
;

141 
ùfw_Êow_id
 
	mÊow_mask
;

142 
uöt32_t
 
	msched_ƒ
;

146 
	m∑r
[4];

152 
	#SCALE_RED
 16

	)

153 
	#SCALE
(
x
Ë–(xË<< 
SCALE_RED
 )

	)

154 
	#SCALE_VAL
(
x
Ë–(xË>> 
SCALE_RED
 )

	)

155 
	#SCALE_MUL
(
x
,
y
Ë––(xË* (yËË>> 
SCALE_RED
 )

	)

156 
	mw_q
 ;

157 
	mmax_th
 ;

158 
	mmö_th
 ;

159 
	mmax_p
 ;

169 
	sdn_Êow
 {

170 
dn_id
 
	moid
;

171 
ùfw_Êow_id
 
	mfid
;

172 
uöt64_t
 
	mtŸ_pkts
;

173 
uöt64_t
 
	mtŸ_byãs
;

174 
uöt32_t
 
	mÀngth
;

175 
uöt32_t
 
	mÀn_byãs
;

176 
uöt32_t
 
	mdr›s
;

184 
	sdn_sch
 {

185 
dn_id
 
	moid
;

186 
uöt32_t
 
	msched_ƒ
;

187 
uöt32_t
 
	mbuckës
;

188 
uöt32_t
 
	mÊags
;

190 
	m«me
[16];

192 
ùfw_Êow_id
 
	msched_mask
;

199 
	#ED_MAX_SAMPLES_NO
 1024

	)

200 
	sdn_¥ofûe
 {

201 
dn_id
 
	moid
;

203 
	#ED_MAX_NAME_LEN
 32

	)

204 
	m«me
[
ED_MAX_NAME_LEN
];

205 
	mlök_ƒ
;

206 
	mloss_Àvñ
;

207 
	mb™dwidth
;

208 
	mßm∂es_no
;

209 
	mßm∂es
[0];

	@ipfw/include_e/netinet/ip_fw.h

28 #i‚de‡
_IPFW2_H


29 
	#_IPFW2_H


	)

37 
	#IPFW_DEFAULT_RULE
 65535

	)

43 
	#IPFW_TABLES_MAX
 128

	)

55 
	#IPFW_ARG_MIN
 1

	)

56 
	#IPFW_ARG_MAX
 65534

	)

57 
	#IP_FW_TABLEARG
 65535

	)

63 
	#IPFW_CALLSTACK_SIZE
 16

	)

66 
	s_ù_fw3_›hódî
 {

67 
uöt16_t
 
	m›code
;

68 
uöt16_t
 
	mª£rved
[3];

69 } 
	tù_fw3_›hódî
;

73 
	#IP_FW_TABLE_XADD
 86

	)

74 
	#IP_FW_TABLE_XDEL
 87

	)

75 
	#IP_FW_TABLE_XGETSIZE
 88

	)

76 
	#IP_FW_TABLE_XLIST
 89

	)

100 
	eùfw_›codes
 {

101 
	mO_NOP
,

103 
	mO_IP_SRC
,

104 
	mO_IP_SRC_MASK
,

105 
	mO_IP_SRC_ME
,

106 
	mO_IP_SRC_SET
,

108 
	mO_IP_DST
,

109 
	mO_IP_DST_MASK
,

110 
	mO_IP_DST_ME
,

111 
	mO_IP_DST_SET
,

113 
	mO_IP_SRCPORT
,

114 
	mO_IP_DSTPORT
,

115 
	mO_PROTO
,

117 
	mO_MACADDR2
,

118 
	mO_MAC_TYPE
,

120 
	mO_LAYER2
,

121 
	mO_IN
,

122 
	mO_FRAG
,

124 
	mO_RECV
,

125 
	mO_XMIT
,

126 
	mO_VIA
,

128 
	mO_IPOPT
,

129 
	mO_IPLEN
,

130 
	mO_IPID
,

132 
	mO_IPTOS
,

133 
	mO_IPPRECEDENCE
,

134 
	mO_IPTTL
,

136 
	mO_IPVER
,

137 
	mO_UID
,

138 
	mO_GID
,

139 
	mO_ESTAB
,

140 
	mO_TCPFLAGS
,

141 
	mO_TCPWIN
,

142 
	mO_TCPSEQ
,

143 
	mO_TCPACK
,

144 
	mO_ICMPTYPE
,

145 
	mO_TCPOPTS
,

147 
	mO_VERREVPATH
,

148 
	mO_VERSRCREACH
,

150 
	mO_PROBE_STATE
,

151 
	mO_KEEP_STATE
,

152 
	mO_LIMIT
,

153 
	mO_LIMIT_PARENT
,

159 
	mO_LOG
,

160 
	mO_PROB
,

162 
	mO_CHECK_STATE
,

163 
	mO_ACCEPT
,

164 
	mO_DENY
,

165 
	mO_REJECT
,

166 
	mO_COUNT
,

167 
	mO_SKIPTO
,

168 
	mO_PIPE
,

169 
	mO_QUEUE
,

170 
	mO_DIVERT
,

171 
	mO_TEE
,

172 
	mO_FORWARD_IP
,

173 
	mO_FORWARD_MAC
,

174 
	mO_NAT
,

175 
	mO_REASS
,

180 
	mO_IPSEC
,

181 
	mO_IP_SRC_LOOKUP
,

182 
	mO_IP_DST_LOOKUP
,

183 
	mO_ANTISPOOF
,

184 
	mO_JAIL
,

185 
	mO_ALTQ
,

186 
	mO_DIVERTED
,

187 
	mO_TCPDATALEN
,

188 
	mO_IP6_SRC
,

189 
	mO_IP6_SRC_ME
,

190 
	mO_IP6_SRC_MASK
,

191 
	mO_IP6_DST
,

192 
	mO_IP6_DST_ME
,

193 
	mO_IP6_DST_MASK
,

194 
	mO_FLOW6ID
,

195 
	mO_ICMP6TYPE
,

196 
	mO_EXT_HDR
,

197 
	mO_IP6
,

202 
	mO_NETGRAPH
,

203 
	mO_NGTEE
,

205 
	mO_IP4
,

207 
	mO_UNREACH6
,

209 
	mO_TAG
,

210 
	mO_TAGGED
,

212 
	mO_SETFIB
,

213 
	mO_FIB
,

215 
	mO_SOCKARG
,

217 
	mO_CALLRETURN
,

219 
	mO_FORWARD_IP6
,

221 
	mO_LAST_OPCODE


229 
	#EXT_FRAGMENT
 0x1

	)

230 
	#EXT_HOPOPTS
 0x2

	)

231 
	#EXT_ROUTING
 0x4

	)

232 
	#EXT_AH
 0x8

	)

233 
	#EXT_ESP
 0x10

	)

234 
	#EXT_DSTOPTS
 0x20

	)

235 
	#EXT_RTHDR0
 0x40

	)

236 
	#EXT_RTHDR2
 0x80

	)

265 
	s_ùfw_ö¢
 {

266 
u_öt8_t
 
	m›code
;

267 
u_öt8_t
 
	mÀn
;

268 
	#F_NOT
 0x80

	)

269 
	#F_OR
 0x40

	)

270 
	#F_LEN_MASK
 0x3f

	)

271 
	#F_LEN
(
cmd
Ë((cmd)->
Àn
 & 
F_LEN_MASK
)

	)

273 
u_öt16_t
 
	m¨g1
;

274 } 
	tùfw_ö¢
;

280 
	#F_INSN_SIZE
(
t
Ë(( (t))/(
u_öt32_t
))

	)

285 
	s_ùfw_ö¢_u16
 {

286 
ùfw_ö¢
 
	mo
;

287 
u_öt16_t
 
	mp‹ts
[2];

288 } 
	tùfw_ö¢_u16
;

294 
	s_ùfw_ö¢_u32
 {

295 
ùfw_ö¢
 
	mo
;

296 
u_öt32_t
 
	md
[1];

297 } 
	tùfw_ö¢_u32
;

302 
	s_ùfw_ö¢_ù
 {

303 
ùfw_ö¢
 
	mo
;

304 
ö_addr
 
	maddr
;

305 
ö_addr
 
	mmask
;

306 } 
	tùfw_ö¢_ù
;

311 
	s_ùfw_ö¢_ß
 {

312 
ùfw_ö¢
 
	mo
;

313 
sockaddr_ö
 
	mß
;

314 } 
	tùfw_ö¢_ß
;

319 
	s_ùfw_ö¢_ß6
 {

320 
ùfw_ö¢
 
	mo
;

321 
sockaddr_ö6
 
	mß
;

322 } 
	tùfw_ö¢_ß6
;

327 
	s_ùfw_ö¢_mac
 {

328 
ùfw_ö¢
 
	mo
;

329 
u_ch¨
 
	maddr
[12];

330 
u_ch¨
 
	mmask
[12];

331 } 
	tùfw_ö¢_mac
;

336 
	s_ùfw_ö¢_if
 {

337 
ùfw_ö¢
 
	mo
;

339 
ö_addr
 
	mù
;

340 
	mglob
;

341 } 
	mp
;

342 
	m«me
[
IFNAMSIZ
];

343 } 
	tùfw_ö¢_if
;

348 
	s_ùfw_ö¢_Ætq
 {

349 
ùfw_ö¢
 
	mo
;

350 
u_öt32_t
 
	mqid
;

351 } 
	tùfw_ö¢_Ætq
;

356 
	s_ùfw_ö¢_limô
 {

357 
ùfw_ö¢
 
	mo
;

358 
u_öt8_t
 
	m_∑d
;

359 
u_öt8_t
 
	mlimô_mask
;

360 
	#DYN_SRC_ADDR
 0x1

	)

361 
	#DYN_SRC_PORT
 0x2

	)

362 
	#DYN_DST_ADDR
 0x4

	)

363 
	#DYN_DST_PORT
 0x8

	)

365 
u_öt16_t
 
	mc⁄n_limô
;

366 } 
	tùfw_ö¢_limô
;

371 
	s_ùfw_ö¢_log
 {

372 
ùfw_ö¢
 
	mo
;

373 
u_öt32_t
 
	mmax_log
;

374 
u_öt32_t
 
	mlog_À·
;

375 } 
	tùfw_ö¢_log
;

381 #ifde‡
IPFW_INTERNAL


383 
	scfg_•oﬁ
 {

384 
LIST_ENTRY
(
cfg_•oﬁ
Ë
	m_√xt
;

385 
ö_addr
 
	maddr
;

386 
u_sh‹t
 
	mp‹t
;

391 
	#REDIR_ADDR
 0x01

	)

392 
	#REDIR_PORT
 0x02

	)

393 
	#REDIR_PROTO
 0x04

	)

395 #ifde‡
IPFW_INTERNAL


397 
	scfg_ªdú
 {

398 
LIST_ENTRY
(
cfg_ªdú
Ë
	m_√xt
;

399 
u_öt16_t
 
	mmode
;

400 
ö_addr
 
	mœddr
;

401 
ö_addr
 
	m∑ddr
;

402 
ö_addr
 
	møddr
;

403 
u_sh‹t
 
	mÕ‹t
;

404 
u_sh‹t
 
	mµ‹t
;

405 
u_sh‹t
 
	mΩ‹t
;

406 
u_sh‹t
 
	mµ‹t_˙t
;

407 
u_sh‹t
 
	mΩ‹t_˙t
;

408 
	m¥Ÿo
;

409 
Æüs_lök
 **
	mÆök
;

411 
u_öt16_t
 
	m•oﬁ_˙t
;

413 
LIST_HEAD
(
•oﬁ_chaö
, 
cfg_•oﬁ
Ë
	m•oﬁ_chaö
;

417 
	#NAT_BUF_LEN
 1024

	)

419 #ifde‡
IPFW_INTERNAL


421 
	scfg_«t
 {

423 
LIST_ENTRY
(
cfg_«t
Ë
	m_√xt
;

424 
	mid
;

425 
ö_addr
 
	mù
;

426 
	mif_«me
[
IF_NAMESIZE
];

427 
	mmode
;

428 
libÆüs
 *
	mlib
;

430 
	mªdú_˙t
;

432 
LIST_HEAD
(
ªdú_chaö
, 
cfg_ªdú
Ë
	mªdú_chaö
;

436 
	#SOF_NAT
 (
cfg_«t
)

	)

437 
	#SOF_REDIR
 (
cfg_ªdú
)

	)

438 
	#SOF_SPOOL
 (
cfg_•oﬁ
)

	)

441 
	s_ùfw_ö¢_«t
 {

442 
ùfw_ö¢
 
	mo
;

443 
cfg_«t
 *
	m«t
;

444 } 
	tùfw_ö¢_«t
;

447 
	#APPLY_MASK
(
addr
,
mask
) \

448 (
addr
)->
__u6_addr
.
__u6_addr32
[0] &(
mask
)->__u6_addr.__u6_addr32[0]; \

449 (
addr
)->
__u6_addr
.
__u6_addr32
[1] &(
mask
)->__u6_addr.__u6_addr32[1]; \

450 (
addr
)->
__u6_addr
.
__u6_addr32
[2] &(
mask
)->__u6_addr.__u6_addr32[2]; \

451 (
addr
)->
__u6_addr
.
__u6_addr32
[3] &(
mask
)->__u6_addr.__u6_addr32[3];

	)

454 
	s_ùfw_ö¢_ù6
 {

455 
ùfw_ö¢
 
	mo
;

456 
ö6_addr
 
	maddr6
;

457 
ö6_addr
 
	mmask6
;

458 } 
	tùfw_ö¢_ù6
;

461 
	s_ùfw_ö¢_icmp6
 {

462 
ùfw_ö¢
 
	mo
;

463 
uöt32_t
 
	md
[7];

468 } 
	tùfw_ö¢_icmp6
;

497 
	sù_fw
 {

498 #ifde‡
_X64EMU


499 
öt32_t
 
	m∑d1
;

501 
ù_fw
 *
	mx_√xt
;

502 #ifde‡
_X64EMU


503 
öt32_t
 
	m∑d2
;

505 
ù_fw
 *
	m√xt_ruÀ
;

508 
uöt16_t
 
	ma˘_ofs
;

509 
uöt16_t
 
	mcmd_Àn
;

510 
uöt16_t
 
	mruÀnum
;

511 
uöt8_t
 
	m£t
;

512 
	#RESVD_SET
 31

	)

513 
uöt8_t
 
	m_∑d
;

514 
uöt32_t
 
	mid
;

517 
uöt64_t
 
	mp˙t
;

518 
uöt64_t
 
	mb˙t
;

519 
uöt32_t
 
	mtime°amp
;

521 
ùfw_ö¢
 
	mcmd
[1];

524 
	#ACTION_PTR
(
ruÀ
) \

525 (
ùfw_ö¢
 *)–(
u_öt32_t
 *)((
ruÀ
)->
cmd
Ë+ (‘uÀ)->
a˘_ofs
Ë)

	)

527 
	#RULESIZE
(
ruÀ
Ë((
ù_fw
) + \

528 ((
ù_fw
 *)(
ruÀ
))->
cmd_Àn
 * 4 - 4)

	)

538 
	sùfw_Êow_id
 {

539 
uöt32_t
 
	md°_ù
;

540 
uöt32_t
 
	m§c_ù
;

541 
uöt16_t
 
	md°_p‹t
;

542 
uöt16_t
 
	m§c_p‹t
;

543 
uöt8_t
 
	mfib
;

544 
uöt8_t
 
	m¥Ÿo
;

545 
uöt8_t
 
	m_Êags
;

546 
uöt8_t
 
	maddr_ty≥
;

547 
ö6_addr
 
	md°_ù6
;

548 
ö6_addr
 
	m§c_ù6
;

549 
uöt32_t
 
	mÊow_id6
;

550 
uöt32_t
 
	mexåa
;

554 
	#IS_IP6_FLOW_ID
(
id
Ë((id)->
addr_ty≥
 =6)

	)

559 
_ùfw_dyn_ruÀ
 
	tùfw_dyn_ruÀ
;

561 
	s_ùfw_dyn_ruÀ
 {

562 
ùfw_dyn_ruÀ
 *
	m√xt
;

563 
ù_fw
 *
	mruÀ
;

566 
ùfw_dyn_ruÀ
 *
	m∑ª¡
;

567 
u_öt64_t
 
	mp˙t
;

568 
u_öt64_t
 
	mb˙t
;

569 
ùfw_Êow_id
 
	mid
;

570 
u_öt32_t
 
	mexpúe
;

571 
u_öt32_t
 
	mbuckë
;

572 
u_öt32_t
 
	m°©e
;

575 
u_öt32_t
 
	mack_fwd
;

576 
u_öt32_t
 
	mack_ªv
;

578 
u_öt16_t
 
	mdyn_ty≥
;

579 
u_öt16_t
 
	mcou¡
;

585 
	#IP_FW_IPOPT_LSRR
 0x01

	)

586 
	#IP_FW_IPOPT_SSRR
 0x02

	)

587 
	#IP_FW_IPOPT_RR
 0x04

	)

588 
	#IP_FW_IPOPT_TS
 0x08

	)

593 
	#IP_FW_TCPOPT_MSS
 0x01

	)

594 
	#IP_FW_TCPOPT_WINDOW
 0x02

	)

595 
	#IP_FW_TCPOPT_SACK
 0x04

	)

596 
	#IP_FW_TCPOPT_TS
 0x08

	)

597 
	#IP_FW_TCPOPT_CC
 0x10

	)

599 
	#ICMP_REJECT_RST
 0x100

	)

600 
	#ICMP6_UNREACH_RST
 0x100

	)

606 
	#IPFW_TABLE_CIDR
 1

	)

607 
	#IPFW_TABLE_INTERFACE
 2

	)

608 
	#IPFW_TABLE_MAXTYPE
 2

	)

610 
	s_ùfw_èbÀ_íåy
 {

611 
ö_addr_t
 
	maddr
;

612 
u_öt32_t
 
	mvÆue
;

613 
u_öt16_t
 
	mtbl
;

614 
u_öt8_t
 
	mmaskÀn
;

615 } 
	tùfw_èbÀ_íåy
;

617 
	s_ùfw_èbÀ_xíåy
 {

618 
uöt16_t
 
	mÀn
;

619 
uöt8_t
 
	mty≥
;

620 
uöt8_t
 
	mmaskÀn
;

621 
uöt16_t
 
	mtbl
;

622 
uöt32_t
 
	mvÆue
;

625 
ö6_addr
 
	maddr6
;

626 
	miÁ˚
[
IF_NAMESIZE
];

627 } 
	mk
;

628 } 
	tùfw_èbÀ_xíåy
;

630 
	s_ùfw_èbÀ
 {

631 
u_öt32_t
 
	msize
;

632 
u_öt32_t
 
	m˙t
;

633 
u_öt16_t
 
	mtbl
;

634 
ùfw_èbÀ_íåy
 
	mít
[0];

635 } 
	tùfw_èbÀ
;

637 
	s_ùfw_xèbÀ
 {

638 
ù_fw3_›hódî
 
	m›hódî
;

639 
uöt32_t
 
	msize
;

640 
uöt32_t
 
	m˙t
;

641 
uöt16_t
 
	mtbl
;

642 
uöt8_t
 
	mty≥
;

643 
ùfw_èbÀ_xíåy
 
	mxít
[0];

644 } 
	tùfw_xèbÀ
;

	@ipfw/include_e/netinet/tcp.h

33 #i‚de‡
_NETINET_TCP_H_


34 
	#_NETINET_TCP_H_


	)

36 
	~<sys/cdefs.h
>

38 
	#__BSD_VISIBLE
 1

	)

40 #i‡
__BSD_VISIBLE


42 
u_öt32_t
 
	tt˝_£q
;

44 
	#t˝6_£q
 
t˝_£q


	)

45 
	#t˝6hdr
 
t˝hdr


	)

51 
	st˝hdr
 {

52 
u_sh‹t
 
	mth_•‹t
;

53 
u_sh‹t
 
	mth_dp‹t
;

54 
t˝_£q
 
	mth_£q
;

55 
t˝_£q
 
	mth_ack
;

56 #i‡
BYTE_ORDER
 =
LITTLE_ENDIAN


57 
u_ch¨
 
	mth_x2
:4,

58 
	mth_off
:4;

60 #i‡
BYTE_ORDER
 =
BIG_ENDIAN


61 
u_ch¨
 
	mth_off
:4,

62 
	mth_x2
:4;

64 
u_ch¨
 
	mth_Êags
;

65 
	#TH_FIN
 0x01

	)

66 
	#TH_SYN
 0x02

	)

67 
	#TH_RST
 0x04

	)

68 
	#TH_PUSH
 0x08

	)

69 
	#TH_ACK
 0x10

	)

70 
	#TH_URG
 0x20

	)

71 
	#TH_ECE
 0x40

	)

72 
	#TH_CWR
 0x80

	)

73 
	#TH_FLAGS
 (
TH_FIN
|
TH_SYN
|
TH_RST
|
TH_PUSH
|
TH_ACK
|
TH_URG
|
TH_ECE
|
TH_CWR
)

	)

74 
	#PRINT_TH_FLAGS
 "\20\1FIN\2SYN\3RST\4PUSH\5ACK\6URG\7ECE\10CWR"

	)

76 
u_sh‹t
 
	mth_wö
;

77 
u_sh‹t
 
	mth_sum
;

78 
u_sh‹t
 
	mth_uΩ
;

81 
	#TCPOPT_EOL
 0

	)

82 
	#TCPOLEN_EOL
 1

	)

83 
	#TCPOPT_PAD
 0

	)

84 
	#TCPOLEN_PAD
 1

	)

85 
	#TCPOPT_NOP
 1

	)

86 
	#TCPOLEN_NOP
 1

	)

87 
	#TCPOPT_MAXSEG
 2

	)

88 
	#TCPOLEN_MAXSEG
 4

	)

89 
	#TCPOPT_WINDOW
 3

	)

90 
	#TCPOLEN_WINDOW
 3

	)

91 
	#TCPOPT_SACK_PERMITTED
 4

	)

92 
	#TCPOLEN_SACK_PERMITTED
 2

	)

93 
	#TCPOPT_SACK
 5

	)

94 
	#TCPOLEN_SACKHDR
 2

	)

95 
	#TCPOLEN_SACK
 8

	)

96 
	#TCPOPT_TIMESTAMP
 8

	)

97 
	#TCPOLEN_TIMESTAMP
 10

	)

98 
	#TCPOLEN_TSTAMP_APPA
 (
TCPOLEN_TIMESTAMP
+2Ë

	)

99 
	#TCPOPT_SIGNATURE
 19

	)

100 
	#TCPOLEN_SIGNATURE
 18

	)

103 
	#MAX_SACK_BLKS
 6

	)

104 
	#TCP_MAX_SACK
 4

	)

113 
	#TCP_MSS
 512

	)

122 
	#TCP_MINMSS
 216

	)

130 
	#TCP6_MSS
 1024

	)

132 
	#TCP_MAXWIN
 65535

	)

133 
	#TTCP_CLIENT_SND_WND
 4096

	)

135 
	#TCP_MAX_WINSHIFT
 14

	)

137 
	#TCP_MAXBURST
 4

	)

139 
	#TCP_MAXHLEN
 (0xf<<2Ë

	)

140 
	#TCP_MAXOLEN
 (
TCP_MAXHLEN
 - (
t˝hdr
))

	)

147 
	#TCP_NODELAY
 0x01

	)

148 #i‡
__BSD_VISIBLE


149 
	#TCP_MAXSEG
 0x02

	)

150 
	#TCP_NOPUSH
 0x04

	)

151 
	#TCP_NOOPT
 0x08

	)

152 
	#TCP_MD5SIG
 0x10

	)

153 
	#TCP_INFO
 0x20

	)

154 
	#TCP_CONGESTION
 0x40

	)

156 
	#TCP_CA_NAME_MAX
 16

	)

158 
	#TCPI_OPT_TIMESTAMPS
 0x01

	)

159 
	#TCPI_OPT_SACK
 0x02

	)

160 
	#TCPI_OPT_WSCALE
 0x04

	)

161 
	#TCPI_OPT_ECN
 0x08

	)

162 
	#TCPI_OPT_TOE
 0x10

	)

176 
	st˝_öfo
 {

177 
u_öt8_t
 
	mt˝i_°©e
;

178 
u_öt8_t
 
	m__t˝i_ˇ_°©e
;

179 
u_öt8_t
 
	m__t˝i_ªå™smôs
;

180 
u_öt8_t
 
	m__t˝i_¥obes
;

181 
u_öt8_t
 
	m__t˝i_backoff
;

182 
u_öt8_t
 
	mt˝i_›ti⁄s
;

183 
u_öt8_t
 
	mt˝i_¢d_wsˇÀ
:4,

184 
	mt˝i_rcv_wsˇÀ
:4;

186 
u_öt32_t
 
	m__t˝i_πo
;

187 
u_öt32_t
 
	m__t˝i_©o
;

188 
u_öt32_t
 
	m__t˝i_¢d_mss
;

189 
u_öt32_t
 
	m__t˝i_rcv_mss
;

191 
u_öt32_t
 
	m__t˝i_u«cked
;

192 
u_öt32_t
 
	m__t˝i_ßcked
;

193 
u_öt32_t
 
	m__t˝i_lo°
;

194 
u_öt32_t
 
	m__t˝i_ªå™s
;

195 
u_öt32_t
 
	m__t˝i_Áckës
;

198 
u_öt32_t
 
	m__t˝i_œ°_d©a_£¡
;

199 
u_öt32_t
 
	m__t˝i_œ°_ack_£¡
;

200 
u_öt32_t
 
	m__t˝i_œ°_d©a_ªcv
;

201 
u_öt32_t
 
	m__t˝i_œ°_ack_ªcv
;

204 
u_öt32_t
 
	m__t˝i_pmtu
;

205 
u_öt32_t
 
	m__t˝i_rcv_s°hªsh
;

206 
u_öt32_t
 
	mt˝i_πt
;

207 
u_öt32_t
 
	mt˝i_πtv¨
;

208 
u_öt32_t
 
	mt˝i_¢d_s°hªsh
;

209 
u_öt32_t
 
	mt˝i_¢d_cwnd
;

210 
u_öt32_t
 
	m__t˝i_advmss
;

211 
u_öt32_t
 
	m__t˝i_ª‹dîög
;

213 
u_öt32_t
 
	m__t˝i_rcv_πt
;

214 
u_öt32_t
 
	mt˝i_rcv_•a˚
;

217 
u_öt32_t
 
	mt˝i_¢d_wnd
;

218 
u_öt32_t
 
	mt˝i_¢d_bwnd
;

219 
u_öt32_t
 
	mt˝i_¢d_nxt
;

220 
u_öt32_t
 
	mt˝i_rcv_nxt
;

221 
u_öt32_t
 
	mt˝i_t€_tid
;

224 
u_öt32_t
 
	m__t˝i_∑d
[29];

	@ipfw/include_e/sys/sockio.h

	@ipfw/ipfw2.c

23 
	~<sys/ty≥s.h
>

24 
	~<sys/∑øm.h
>

25 
	~<sys/sockë.h
>

26 
	~<sys/sockio.h
>

27 
	~<sys/sys˘l.h
>

29 
	~"ùfw2.h
"

31 
	~<˘y≥.h
>

32 
	~<îr.h
>

33 
	~<î∫o.h
>

34 
	~<gΩ.h
>

35 
	~<√tdb.h
>

36 
	~<pwd.h
>

37 
	~<°dio.h
>

38 
	~<°dlib.h
>

39 
	~<°rög.h
>

40 
	~<sy£xôs.h
>

41 
	~<time.h
>

42 
	~<timec⁄v.h
>

43 
	~<uni°d.h
>

44 
	~<f˙é.h
>

45 
	~<°ddef.h
>

47 
	~<√t/ëhî√t.h
>

48 
	~<√t/if.h
>

49 
	~<√töë/ö.h
>

50 
	~<√töë/ö_sy°m.h
>

51 
	~<√töë/ù.h
>

52 
	~<√töë/ù_icmp.h
>

53 
	~<√töë/ù_fw.h
>

54 
	~<√töë/t˝.h
>

55 
	~<¨∑/öë.h
>

57 
cmdlöe_›ts
 
	gco
;

59 
	gªsvd_£t_numbî
 = 
RESVD_SET
;

61 
	gùfw_sockë
 = -1;

63 #i‚de‡
s6_addr32


64 
	#s6_addr32
 
__u6_addr
.
__u6_addr32


	)

67 
	#GET_UINT_ARG
(
¨g
, 
mö
, 
max
, 
tok
, 
s_x
) do { \

68 i‡(!
av
[0]) \

69 
	`îrx
(
EX_USAGE
, "%s: missögárgumít", 
	`m©ch_vÆue
(
s_x
, 
tok
)); \

70 i‡(
	`_sub°rcmp
(*
av
, "tablearg") == 0) { \

71 
¨g
 = 
IP_FW_TABLEARG
; \

76 
_xvÆ
; \

77 *
íd
; \

79 
_xvÆ
 = 
	`°πﬁ
(*
av
, &
íd
, 10); \

81 i‡(!
	`isdigô
(**
av
Ë|| *
íd
 !'\0' || (
_xvÆ
 =0 && 
î∫o
 =
EINVAL
)) \

82 
	`îrx
(
EX_DATAERR
, "%s: invalidárgument: %s", \

83 
	`m©ch_vÆue
(
s_x
, 
tok
), *
av
); \

85 i‡(
î∫o
 =
ERANGE
 || 
_xvÆ
 < 
mö
 || _xvÆ > 
max
) \

86 
	`îrx
(
EX_DATAERR
, "%s:árgument is out ofÑange (%u..%u): %s", \

87 
	`m©ch_vÆue
(
s_x
, 
tok
), 
mö
, 
max
, *
av
); \

89 i‡(
_xvÆ
 =
IP_FW_TABLEARG
) \

90 
	`îrx
(
EX_DATAERR
, "%s: illegalárgument value: %s", \

91 
	`m©ch_vÆue
(
s_x
, 
tok
), *
av
); \

92 
¨g
 = 
_xvÆ
; \

94 } 0)

	)

97 
	$PRINT_UINT_ARG
(c⁄° *
°r
, 
uöt32_t
 
¨g
)

99 i‡(
°r
 !
NULL
)

100 
	`¥ötf
("%s",
°r
);

101 i‡(
¨g
 =
IP_FW_TABLEARG
)

102 
	`¥ötf
("tablearg");

104 
	`¥ötf
("%u", 
¨g
);

105 
	}
}

107 
_s_x
 
	gf_t˝Êags
[] = {

108 { "syn", 
TH_SYN
 },

109 { "fö", 
TH_FIN
 },

110 { "ack", 
TH_ACK
 },

111 { "psh", 
TH_PUSH
 },

112 { "r°", 
TH_RST
 },

113 { "urg", 
TH_URG
 },

115 { 
NULL
, 0 }

118 
_s_x
 
	gf_t˝›ts
[] = {

119 { "mss", 
IP_FW_TCPOPT_MSS
 },

120 { "max£g", 
IP_FW_TCPOPT_MSS
 },

121 { "wödow", 
IP_FW_TCPOPT_WINDOW
 },

122 { "ßck", 
IP_FW_TCPOPT_SACK
 },

123 { "ts", 
IP_FW_TCPOPT_TS
 },

124 { "time°amp", 
IP_FW_TCPOPT_TS
 },

125 { "cc", 
IP_FW_TCPOPT_CC
 },

127 { 
NULL
, 0 }

134 
_s_x
 
	gf_ù›ts
[] = {

135 { "s§r", 
IP_FW_IPOPT_SSRR
},

136 { "l§r", 
IP_FW_IPOPT_LSRR
},

137 { "º", 
IP_FW_IPOPT_RR
},

138 { "ts", 
IP_FW_IPOPT_TS
},

140 { 
NULL
, 0 }

143 
_s_x
 
	gf_ùtos
[] = {

144 { "lowdñay", 
IPTOS_LOWDELAY
},

145 { "throughput", 
IPTOS_THROUGHPUT
},

146 { "ªlübûôy", 
IPTOS_RELIABILITY
},

147 { "möco°", 
IPTOS_MINCOST
},

148 { "c⁄ge°i⁄", 
IPTOS_ECN_CE
},

149 { "e˙å™•‹t", 
IPTOS_ECN_ECT0
},

151 { 
NULL
, 0 }

154 
_s_x
 
	glimô_masks
[] = {

155 {"Æl", 
DYN_SRC_ADDR
|
DYN_SRC_PORT
|
DYN_DST_ADDR
|
DYN_DST_PORT
},

156 {"§c-addr", 
DYN_SRC_ADDR
},

157 {"§c-p‹t", 
DYN_SRC_PORT
},

158 {"d°-addr", 
DYN_DST_ADDR
},

159 {"d°-p‹t", 
DYN_DST_PORT
},

160 {
NULL
, 0}

167 
	#IPPROTO_ETHERTYPE
 0x1000

	)

168 
_s_x
 
	gëhî_ty≥s
[] = {

193 { 
NULL
, 0 }

197 
_s_x
 
	gruÀ_a˘i⁄s
[] = {

198 { "ac˚±", 
TOK_ACCEPT
 },

199 { "∑ss", 
TOK_ACCEPT
 },

200 { "Ælow", 
TOK_ACCEPT
 },

201 { "≥rmô", 
TOK_ACCEPT
 },

202 { "cou¡", 
TOK_COUNT
 },

203 { "pùe", 
TOK_PIPE
 },

204 { "queue", 
TOK_QUEUE
 },

205 { "divît", 
TOK_DIVERT
 },

206 { "ãe", 
TOK_TEE
 },

207 { "√tgøph", 
TOK_NETGRAPH
 },

208 { "ngãe", 
TOK_NGTEE
 },

209 { "fwd", 
TOK_FORWARD
 },

210 { "f‹w¨d", 
TOK_FORWARD
 },

211 { "skùto", 
TOK_SKIPTO
 },

212 { "díy", 
TOK_DENY
 },

213 { "dr›", 
TOK_DENY
 },

214 { "ªje˘", 
TOK_REJECT
 },

215 { "ª£t6", 
TOK_RESET6
 },

216 { "ª£t", 
TOK_RESET
 },

217 { "uƒóch6", 
TOK_UNREACH6
 },

218 { "uƒóch", 
TOK_UNREACH
 },

219 { "check-°©e", 
TOK_CHECKSTATE
 },

220 { "//", 
TOK_COMMENT
 },

221 { "«t", 
TOK_NAT
 },

222 { "ªass", 
TOK_REASS
 },

223 { "£tfib", 
TOK_SETFIB
 },

224 { "ˇŒ", 
TOK_CALL
 },

225 { "ªtu∫", 
TOK_RETURN
 },

226 { 
NULL
, 0 }

229 
_s_x
 
	gruÀ_a˘i⁄_∑øms
[] = {

230 { "Ætq", 
TOK_ALTQ
 },

231 { "log", 
TOK_LOG
 },

232 { "èg", 
TOK_TAG
 },

233 { "u¡ag", 
TOK_UNTAG
 },

234 { 
NULL
, 0 }

242 
	glookup_key
[] = {

243 
TOK_DSTIP
, 
TOK_SRCIP
, 
TOK_DSTPORT
, 
TOK_SRCPORT
,

244 
TOK_UID
, 
TOK_JAIL
, 
TOK_DSCP
, -1 };

246 
_s_x
 
	gruÀ_›ti⁄s
[] = {

247 { "ègged", 
TOK_TAGGED
 },

248 { "uid", 
TOK_UID
 },

249 { "gid", 
TOK_GID
 },

250 { "jaû", 
TOK_JAIL
 },

251 { "ö", 
TOK_IN
 },

252 { "limô", 
TOK_LIMIT
 },

253 { "kìp-°©e", 
TOK_KEEPSTATE
 },

254 { "bridged", 
TOK_LAYER2
 },

255 { "œyî2", 
TOK_LAYER2
 },

256 { "out", 
TOK_OUT
 },

257 { "divîãd", 
TOK_DIVERTED
 },

258 { "divîãd-lo›back", 
TOK_DIVERTEDLOOPBACK
 },

259 { "divîãd-ouçut", 
TOK_DIVERTEDOUTPUT
 },

260 { "xmô", 
TOK_XMIT
 },

261 { "ªcv", 
TOK_RECV
 },

262 { "vü", 
TOK_VIA
 },

263 { "‰agmít", 
TOK_FRAG
 },

264 { "‰ag", 
TOK_FRAG
 },

265 { "fib", 
TOK_FIB
 },

266 { "ù›ti⁄s", 
TOK_IPOPTS
 },

267 { "ù›ts", 
TOK_IPOPTS
 },

268 { "ùÀn", 
TOK_IPLEN
 },

269 { "ùid", 
TOK_IPID
 },

270 { "ù¥e˚dí˚", 
TOK_IPPRECEDENCE
 },

271 { "ds˝", 
TOK_DSCP
 },

272 { "ùtos", 
TOK_IPTOS
 },

273 { "ùâl", 
TOK_IPTTL
 },

274 { "ùvîsi⁄", 
TOK_IPVER
 },

275 { "ùvî", 
TOK_IPVER
 },

276 { "e°ab", 
TOK_ESTAB
 },

277 { "e°ablished", 
TOK_ESTAB
 },

278 { "£tup", 
TOK_SETUP
 },

279 { "sock¨g", 
TOK_SOCKARG
 },

280 { "t˝d©Æí", 
TOK_TCPDATALEN
 },

281 { "t˝Êags", 
TOK_TCPFLAGS
 },

282 { "t˝Êgs", 
TOK_TCPFLAGS
 },

283 { "t˝›ti⁄s", 
TOK_TCPOPTS
 },

284 { "t˝›ts", 
TOK_TCPOPTS
 },

285 { "t˝£q", 
TOK_TCPSEQ
 },

286 { "t˝ack", 
TOK_TCPACK
 },

287 { "t˝wö", 
TOK_TCPWIN
 },

288 { "icm±y≥", 
TOK_ICMPTYPES
 },

289 { "icm±y≥s", 
TOK_ICMPTYPES
 },

290 { "d°-ù", 
TOK_DSTIP
 },

291 { "§c-ù", 
TOK_SRCIP
 },

292 { "d°-p‹t", 
TOK_DSTPORT
 },

293 { "§c-p‹t", 
TOK_SRCPORT
 },

294 { "¥Ÿo", 
TOK_PROTO
 },

295 { "MAC", 
TOK_MAC
 },

296 { "mac", 
TOK_MAC
 },

297 { "mac-ty≥", 
TOK_MACTYPE
 },

298 { "vîªv∑th", 
TOK_VERREVPATH
 },

299 { "vî§¸óch", 
TOK_VERSRCREACH
 },

300 { "™ti•oof", 
TOK_ANTISPOOF
 },

301 { "ù£c", 
TOK_IPSEC
 },

302 { "icmp6ty≥", 
TOK_ICMP6TYPES
 },

303 { "icmp6ty≥s", 
TOK_ICMP6TYPES
 },

304 { "ext6hdr", 
TOK_EXT6HDR
},

305 { "Êow-id", 
TOK_FLOWID
},

306 { "ùv6", 
TOK_IPV6
},

307 { "ù6", 
TOK_IPV6
},

308 { "ùv4", 
TOK_IPV4
},

309 { "ù4", 
TOK_IPV4
},

310 { "d°-ùv6", 
TOK_DSTIP6
},

311 { "d°-ù6", 
TOK_DSTIP6
},

312 { "§c-ùv6", 
TOK_SRCIP6
},

313 { "§c-ù6", 
TOK_SRCIP6
},

314 { "lookup", 
TOK_LOOKUP
},

315 { "//", 
TOK_COMMENT
 },

317 { "nŸ", 
TOK_NOT
 },

318 { "!", 
TOK_NOT
 },

319 { "‹", 
TOK_OR
 },

320 { "|", 
TOK_OR
 },

321 { "{", 
TOK_STARTBRACE
 },

322 { "(", 
TOK_STARTBRACE
 },

323 { "}", 
TOK_ENDBRACE
 },

324 { ")", 
TOK_ENDBRACE
 },

325 { 
NULL
, 0 }

335 
	$¥_u64
(
uöt64_t
 *
pd
, 
width
)

337 #ifde‡
TCC


338 
	#U64_FMT
 "I64"

	)

340 
	#U64_FMT
 "Œu"

	)

342 
uöt64_t
 
u
;

343 
d
;

345 
	`bc›y
 (
pd
, &
u
, (u));

346 
d
 = 
u
;

347  (
width
 > 0) ?

348 
	`¥ötf
("%*" 
U64_FMT
 " ", 
width
, 
d
) :

349 
	`¢¥ötf
(
NULL
, 0, "%" 
U64_FMT
, 
d
) ;

350 #unde‡
U64_FMT


351 
	}
}

354 
	$ß„_ˇŒoc
(
size_t
 
numbî
, size_à
size
)

356 *
ªt
 = 
	`ˇŒoc
(
numbî
, 
size
);

358 i‡(
ªt
 =
NULL
)

359 
	`îr
(
EX_OSERR
, "calloc");

360  
ªt
;

361 
	}
}

364 
	$ß„_ªÆloc
(*
±r
, 
size_t
 
size
)

366 *
ªt
 = 
	`ªÆloc
(
±r
, 
size
);

368 i‡(
ªt
 =
NULL
)

369 
	`îr
(
EX_OSERR
, "realloc");

370  
ªt
;

371 
	}
}

378 
	$do_cmd
(
›äame
, *
›tvÆ
, 
uöçå_t
 
›éí
)

380 
i
;

382 i‡(
co
.
ã°_⁄ly
)

385 i‡(
ùfw_sockë
 == -1)

386 
ùfw_sockë
 = 
	`sockë
(
AF_INET
, 
SOCK_RAW
, 
IPPROTO_RAW
);

387 i‡(
ùfw_sockë
 < 0)

388 
	`îr
(
EX_UNAVAILABLE
, "socket");

390 i‡(
›äame
 =
IP_FW_GET
 || o±«mê=
IP_DUMMYNET_GET
 ||

391 
›äame
 =
IP_FW_ADD
 || o±«mê=
IP_FW_TABLE_LIST
 ||

392 
›äame
 =
IP_FW_TABLE_GETSIZE
 ||

393 
›äame
 =
IP_FW_NAT_GET_CONFIG
 ||

394 
›äame
 < 0 ||

395 
›äame
 =
IP_FW_NAT_GET_LOG
) {

396 i‡(
›äame
 < 0)

397 
›äame
 = -optname;

398 
i
 = 
	`gësock›t
(
ùfw_sockë
, 
IPPROTO_IP
, 
›äame
, 
›tvÆ
,

399 (
sockÀn_t
 *)
›éí
);

401 
i
 = 
	`£tsock›t
(
ùfw_sockë
, 
IPPROTO_IP
, 
›äame
, 
›tvÆ
, 
›éí
);

403  
i
;

404 
	}
}

418 
	$do_£tcmd3
(
›äame
, *
›tvÆ
, 
sockÀn_t
 
›éí
)

420 
sockÀn_t
 
Àn
;

421 
ù_fw3_›hódî
 *
›3
;

423 i‡(
co
.
ã°_⁄ly
)

426 i‡(
ùfw_sockë
 == -1)

427 
ùfw_sockë
 = 
	`sockë
(
AF_INET
, 
SOCK_RAW
, 
IPPROTO_RAW
);

428 i‡(
ùfw_sockë
 < 0)

429 
	`îr
(
EX_UNAVAILABLE
, "socket");

431 
Àn
 = (
ù_fw3_›hódî
Ë+ 
›éí
;

432 
›3
 = 
	`Æloˇ
(
Àn
);

434 
	`mem£t
(
›3
, 0, (
ù_fw3_›hódî
));

435 
	`mem˝y
(
›3
 + 1, 
›tvÆ
, 
›éí
);

436 
›3
->
›code
 = 
›äame
;

438  
	`£tsock›t
(
ùfw_sockë
, 
IPPROTO_IP
, 
IP_FW3
, 
›3
, 
Àn
);

439 
	}
}

447 
	$m©ch_tokí
(
_s_x
 *
èbÀ
, *
°rög
)

449 
_s_x
 *
±
;

450 
uöt
 
i
 = 
	`°æí
(
°rög
);

452 
±
 = 
èbÀ
 ; 
i
 &&Öt->
s
 !
NULL
 ;Öt++)

453 i‡(
	`°æí
(
±
->
s
Ë=
i
 && !
	`bcmp
(
°rög
,Öt->s, i))

454  
±
->
x
;

456 
	}
}

463 
	$m©ch_vÆue
(
_s_x
 *
p
, 
vÆue
)

465 ; 
p
->
s
 !
NULL
;Ö++)

466 i‡(
p
->
x
 =
vÆue
)

467  
p
->
s
;

468  
NULL
;

469 
	}
}

481 
	$_sub°rcmp
(c⁄° *
°r1
, c⁄° * 
°r2
)

484 i‡(
	`°∫cmp
(
°r1
, 
°r2
, 
	`°æí
(str1)) != 0)

487 i‡(
	`°æí
(
°r1
Ë!°æí(
°r2
))

488 
	`w¨nx
("DEPRECATED: '%s' matched '%s'ásá sub-string",

489 
°r1
, 
°r2
);

491 
	}
}

509 
	$_sub°rcmp2
(c⁄° *
°r1
, c⁄° * 
°r2
, c⁄° * 
°r3
)

512 i‡(
	`°∫cmp
(
°r1
, 
°r2
, 
	`°æí
(str2)) != 0)

515 i‡(
	`°rcmp
(
°r1
, 
°r3
) != 0)

516 
	`w¨nx
("DEPRECATED: '%s' matched '%s'",

517 
°r1
, 
°r3
);

519 
	}
}

525 
	$¥öt_p‹t
(
¥Ÿo
, 
uöt16_t
 
p‹t
)

528 i‡(
¥Ÿo
 =
IPPROTO_ETHERTYPE
) {

529 c⁄° *
s
;

531 i‡(
co
.
do_ªsﬁv
 && (
s
 = 
	`m©ch_vÆue
(
ëhî_ty≥s
, 
p‹t
)) )

532 
	`¥ötf
("%s", 
s
);

534 
	`¥ötf
("0x%04x", 
p‹t
);

536 
£rvít
 *
£
 = 
NULL
;

537 i‡(
co
.
do_ªsﬁv
) {

538 
¥Ÿ€¡
 *
≥
 = 
	`gë¥Ÿobynumbî
(
¥Ÿo
);

540 
£
 = 
	`gë£rvbyp‹t
(
	`ht⁄s
(
p‹t
), 
≥
 ?Öe->
p_«me
 : 
NULL
);

542 i‡(
£
)

543 
	`¥ötf
("%s", 
£
->
s_«me
);

545 
	`¥ötf
("%d", 
p‹t
);

547 
	}
}

549 
_s_x
 
	g_p‹t_«me
[] = {

550 {"d°-p‹t", 
O_IP_DSTPORT
},

551 {"§c-p‹t", 
O_IP_SRCPORT
},

552 {"ùid", 
O_IPID
},

553 {"ùÀn", 
O_IPLEN
},

554 {"ùâl", 
O_IPTTL
},

555 {"mac-ty≥", 
O_MAC_TYPE
},

556 {"t˝d©Æí", 
O_TCPDATALEN
},

557 {"t˝wö", 
O_TCPWIN
},

558 {"ègged", 
O_TAGGED
},

559 {
NULL
, 0}

567 
	$¥öt_√wp‹ts
(
ùfw_ö¢_u16
 *
cmd
, 
¥Ÿo
, 
›code
)

569 
uöt16_t
 *
p
 = 
cmd
->
p‹ts
;

570 
i
;

571 c⁄° *
£p
;

573 i‡(
›code
 != 0) {

574 
£p
 = 
	`m©ch_vÆue
(
_p‹t_«me
, 
›code
);

575 i‡(
£p
 =
NULL
)

576 
£p
 = "???";

577 
	`¥ötf
 (" %s", 
£p
);

579 
£p
 = " ";

580 
i
 = 
	`F_LEN
((
ùfw_ö¢
 *)
cmd
Ë- 1; i > 0; i--, 
p
 += 2) {

581 
	`¥ötf
("%s", 
£p
);

582 
	`¥öt_p‹t
(
¥Ÿo
, 
p
[0]);

583 i‡(
p
[0] !=Ö[1]) {

584 
	`¥ötf
("-");

585 
	`¥öt_p‹t
(
¥Ÿo
, 
p
[1]);

587 
£p
 = ",";

589 
	}
}

601 
	$°π›‹t
(*
s
, **
íd
, 
ba£
, 
¥Ÿo
)

603 *
p
, *
buf
;

604 *
s1
;

605 
i
;

607 *
íd
 = 
s
;

608 i‡(*
s
 == '\0')

611 i‡(
	`isdigô
(*
s
))

612  
	`°πﬁ
(
s
, 
íd
, 
ba£
);

617 
s1
 = 
s
; *s1 && (
	`iß um
(*s1) || *s1 == '\\') ; s1++)

618 i‡(*
s1
 == '\\' && s1[1] != '\0')

619 
s1
++;

621 
buf
 = 
	`ß„_ˇŒoc
(
s1
 - 
s
 + 1, 1);

626 
p
 = 
s
, 
i
 = 0;Ö !
s1
 ;Ö++)

627 i‡(*
p
 != '\\')

628 
buf
[
i
++] = *
p
;

629 
buf
[
i
++] = '\0';

631 i‡(
¥Ÿo
 =
IPPROTO_ETHERTYPE
) {

632 
i
 = 
	`m©ch_tokí
(
ëhî_ty≥s
, 
buf
);

633 
	`‰ì
(
buf
);

634 i‡(
i
 != -1) {

635 *
íd
 = 
s1
;

636  
i
;

639 
¥Ÿ€¡
 *
≥
 = 
NULL
;

640 
£rvít
 *
£
;

642 i‡(
¥Ÿo
 != 0)

643 
≥
 = 
	`gë¥Ÿobynumbî
(
¥Ÿo
);

644 
	`£t£rvít
(1);

645 
£
 = 
	`gë£rvby«me
(
buf
, 
≥
 ?Öe->
p_«me
 : 
NULL
);

646 
	`‰ì
(
buf
);

647 i‡(
£
 !
NULL
) {

648 *
íd
 = 
s1
;

649  
	`¡ohs
(
£
->
s_p‹t
);

653 
	}
}

659 
	$fûl_√wp‹ts
(
ùfw_ö¢_u16
 *
cmd
, *
av
, 
¥Ÿo
)

661 
uöt16_t
 
a
, 
b
, *
p
 = 
cmd
->
p‹ts
;

662 
i
 = 0;

663 *
s
 = 
av
;

665 *
s
) {

666 
a
 = 
	`°π›‹t
(
av
, &
s
, 0, 
¥Ÿo
);

667 i‡(
s
 =
av
)

670 *
s
) {

672 
av
 = 
s
 + 1;

673 
b
 = 
	`°π›‹t
(
av
, &
s
, 0, 
¥Ÿo
);

675 i‡(
s
 =
av
 || (*s != ',' && *s != '\0'))

677 
p
[0] = 
a
;

678 
p
[1] = 
b
;

682 
p
[0] =Ö[1] = 
a
;

685 
	`w¨nx
("portÜist: invalid separator <%c> in <%s>",

686 *
s
, 
av
);

690 
i
++;

691 
p
 += 2;

692 
av
 = 
s
 + 1;

694 i‡(
i
 > 0) {

695 i‡(
i
 + 1 > 
F_LEN_MASK
)

696 
	`îrx
(
EX_DATAERR
, "too manyÖorts/ranges\n");

697 
cmd
->
o
.
Àn
 |
i
 + 1;

699  (
i
);

700 
	}
}

702 
_s_x
 
	gicmpcodes
[] = {

703 { "√t", 
ICMP_UNREACH_NET
 },

704 { "ho°", 
ICMP_UNREACH_HOST
 },

705 { "¥Ÿocﬁ", 
ICMP_UNREACH_PROTOCOL
 },

706 { "p‹t", 
ICMP_UNREACH_PORT
 },

707 { "√ed‰ag", 
ICMP_UNREACH_NEEDFRAG
 },

708 { "§cÁû", 
ICMP_UNREACH_SRCFAIL
 },

709 { "√t-unknown", 
ICMP_UNREACH_NET_UNKNOWN
 },

710 { "ho°-unknown", 
ICMP_UNREACH_HOST_UNKNOWN
 },

711 { "isﬁ©ed", 
ICMP_UNREACH_ISOLATED
 },

712 { "√t-¥ohib", 
ICMP_UNREACH_NET_PROHIB
 },

713 { "ho°-¥ohib", 
ICMP_UNREACH_HOST_PROHIB
 },

714 { "to¢ë", 
ICMP_UNREACH_TOSNET
 },

715 { "tosho°", 
ICMP_UNREACH_TOSHOST
 },

716 { "fûãr-¥ohib", 
ICMP_UNREACH_FILTER_PROHIB
 },

717 { "ho°-¥e˚dí˚", 
ICMP_UNREACH_HOST_PRECEDENCE
 },

718 { "¥e˚dí˚-cutoff", 
ICMP_UNREACH_PRECEDENCE_CUTOFF
 },

719 { 
NULL
, 0 }

723 
	$fûl_ªje˘_code
(
u_sh‹t
 *
codï
, *
°r
)

725 
vÆ
;

726 *
s
;

728 
vÆ
 = 
	`°πoul
(
°r
, &
s
, 0);

729 i‡(
s
 =
°r
 || *†!'\0' || 
vÆ
 >= 0x100)

730 
vÆ
 = 
	`m©ch_tokí
(
icmpcodes
, 
°r
);

731 i‡(
vÆ
 < 0)

732 
	`îrx
(
EX_DATAERR
, "unknow¿ICMP uƒóchabÀ codê``%s''", 
°r
);

733 *
codï
 = 
vÆ
;

735 
	}
}

738 
	$¥öt_ªje˘_code
(
uöt16_t
 
code
)

740 c⁄° *
s
 = 
	`m©ch_vÆue
(
icmpcodes
, 
code
);

742 i‡(
s
 !
NULL
)

743 
	`¥ötf
("uƒóch %s", 
s
);

745 
	`¥ötf
("uƒóch %u", 
code
);

746 
	}
}

760 
	$c⁄tigmask
(
uöt8_t
 *
p
, 
Àn
)

762 
i
, 
n
;

764 
i
=0; i<
Àn
 ; i++)

765 i‡–(
p
[
i
/8] & (1 << (7 - (i%8)))) == 0)

767 
n
=
i
+1;Ç < 
Àn
;Ç++)

768 i‡–(
p
[
n
/8] & (1 << (7 - (n%8)))) != 0)

770  
i
;

771 
	}
}

778 
	$¥öt_Êags
(c⁄° *
«me
, 
ùfw_ö¢
 *
cmd
, 
_s_x
 *
li°
)

780 c⁄° *
comma
 = "";

781 
i
;

782 
uöt8_t
 
£t
 = 
cmd
->
¨g1
 & 0xff;

783 
uöt8_t
 
˛ór
 = (
cmd
->
¨g1
 >> 8) & 0xff;

785 i‡(
li°
 =
f_t˝Êags
 && 
£t
 =
TH_SYN
 && 
˛ór
 =
TH_ACK
) {

786 
	`¥ötf
(" setup");

790 
	`¥ötf
(" %†", 
«me
);

791 
i
=0; 
li°
[i].
x
 != 0; i++) {

792 i‡(
£t
 & 
li°
[
i
].
x
) {

793 
£t
 &~
li°
[
i
].
x
;

794 
	`¥ötf
("%s%s", 
comma
, 
li°
[
i
].
s
);

795 
comma
 = ",";

797 i‡(
˛ór
 & 
li°
[
i
].
x
) {

798 
˛ór
 &~
li°
[
i
].
x
;

799 
	`¥ötf
("%s!%s", 
comma
, 
li°
[
i
].
s
);

800 
comma
 = ",";

803 
	}
}

809 
	$¥öt_ù
(
ùfw_ö¢_ù
 *
cmd
, c⁄° *
s
)

811 
ho°ít
 *
he
 = 
NULL
;

812 
uöt32_t
 
Àn
 = 
	`F_LEN
((
ùfw_ö¢
 *)
cmd
);

813 
uöt32_t
 *
a
 = ((
ùfw_ö¢_u32
 *)
cmd
)->
d
;

815 i‡(
cmd
->
o
.
›code
 =
O_IP_DST_LOOKUP
 && 
Àn
 > 
	`F_INSN_SIZE
(
ùfw_ö¢_u32
)) {

816 
uöt32_t
 
d
 = 
a
[1];

817 c⁄° *
¨g
 = "<invalid>";

819 i‡(
d
 < (
lookup_key
)/(lookup_key[0]))

820 
¨g
 = 
	`m©ch_vÆue
(
ruÀ_›ti⁄s
, 
lookup_key
[
d
]);

821 
	`¥ötf
("%†looku∞%†%d", 
cmd
->
o
.
Àn
 & 
F_NOT
 ? "Çot": "",

822 
¨g
, 
cmd
->
o
.
¨g1
);

825 
	`¥ötf
("%s%†", 
cmd
->
o
.
Àn
 & 
F_NOT
 ? "ÇŸ": "", 
s
);

827 i‡(
cmd
->
o
.
›code
 =
O_IP_SRC_ME
 || cmd->o.›codê=
O_IP_DST_ME
) {

828 
	`¥ötf
("me");

831 i‡(
cmd
->
o
.
›code
 =
O_IP_SRC_LOOKUP
 ||

832 
cmd
->
o
.
›code
 =
O_IP_DST_LOOKUP
) {

833 
	`¥ötf
("èbÀ(%u", ((
ùfw_ö¢
 *)
cmd
)->
¨g1
);

834 i‡(
Àn
 =
	`F_INSN_SIZE
(
ùfw_ö¢_u32
))

835 
	`¥ötf
(",%u", *
a
);

836 
	`¥ötf
(")");

839 i‡(
cmd
->
o
.
›code
 =
O_IP_SRC_SET
 || cmd->o.›codê=
O_IP_DST_SET
) {

840 
uöt32_t
 
x
, *
m≠
 = (uöt32_à*)&(
cmd
->
mask
);

841 
i
, 
j
;

842 
comma
 = '{';

844 
x
 = 
cmd
->
o
.
¨g1
 - 1;

845 
x
 = 
	`ht⁄l
( ~x );

846 
cmd
->
addr
.
s_addr
 = 
	`ht⁄l
(cmd->addr.s_addr);

847 
	`¥ötf
("%s/%d", 
	`öë_¡ﬂ
(
cmd
->
addr
),

848 
	`c⁄tigmask
((
uöt8_t
 *)&
x
, 32));

849 
x
 = 
cmd
->
addr
.
s_addr
 = 
	`ht⁄l
(cmd->addr.s_addr);

850 
x
 &= 0xff;

857 
i
=0; i < 
cmd
->
o
.
¨g1
; i++)

858 i‡(
m≠
[
i
/32] & (1<<(i & 31))) {

859 
j
=
i
+1; j < 
cmd
->
o
.
¨g1
; j++)

860 i‡(!(
m≠
[ 
j
/32] & (1<<(j & 31))))

862 
	`¥ötf
("%c%d", 
comma
, 
i
+
x
);

863 i‡(
j
>
i
+2) {

864 
	`¥ötf
("-%d", 
j
-1+
x
);

865 
i
 = 
j
-1;

867 
comma
 = ',';

869 
	`¥ötf
("}");

877 
Àn
 =Üí / 2;Üí > 0;Üí--, 
a
 += 2) {

878 
mb
 =

879 (
cmd
->
o
.
›code
 =
O_IP_SRC
 || cmd->o.›codê=
O_IP_DST
) ?

880 32 : 
	`c⁄tigmask
((
uöt8_t
 *)&(
a
[1]), 32);

881 i‡(
mb
 =32 && 
co
.
do_ªsﬁv
)

882 
he
 = 
	`gëho°byaddr
((*)&(
a
[0]), (
u_l⁄g
), 
AF_INET
);

883 i‡(
he
 !
NULL
)

884 
	`¥ötf
("%s", 
he
->
h_«me
);

885 i‡(
mb
 == 0)

886 
	`¥ötf
("any");

888 
	`¥ötf
("%s", 
	`öë_¡ﬂ
–*((
ö_addr
 *)&
a
[0]) ) );

889 i‡(
mb
 < 0)

890 
	`¥ötf
(":%s", 
	`öë_¡ﬂ
–*((
ö_addr
 *)&
a
[1]) ) );

891 i‡(
mb
 < 32)

892 
	`¥ötf
("/%d", 
mb
);

894 i‡(
Àn
 > 1)

895 
	`¥ötf
(",");

897 
	}
}

903 
	$¥öt_mac
(
uöt8_t
 *
addr
, uöt8_à*
mask
)

905 
l
 = 
	`c⁄tigmask
(
mask
, 48);

907 i‡(
l
 == 0)

908 
	`¥ötf
("ány");

910 
	`¥ötf
(" %02x:%02x:%02x:%02x:%02x:%02x",

911 
addr
[0],áddr[1],áddr[2],áddr[3],áddr[4],áddr[5]);

912 i‡(
l
 == -1)

913 
	`¥ötf
("&%02x:%02x:%02x:%02x:%02x:%02x",

914 
mask
[0], mask[1], mask[2],

915 
mask
[3], mask[4], mask[5]);

916 i‡(
l
 < 48)

917 
	`¥ötf
("/%d", 
l
);

919 
	}
}

922 
	$fûl_icm±y≥s
(
ùfw_ö¢_u32
 *
cmd
, *
av
)

924 
uöt8_t
 
ty≥
;

926 
cmd
->
d
[0] = 0;

927 *
av
) {

928 i‡(*
av
 == ',')

929 
av
++;

931 
ty≥
 = 
	`°πoul
(
av
, &av, 0);

933 i‡(*
av
 != ',' && *av != '\0')

934 
	`îrx
(
EX_DATAERR
, "invalid ICMPÅype");

936 i‡(
ty≥
 > 31)

937 
	`îrx
(
EX_DATAERR
, "ICMPÅype out ofÑange");

939 
cmd
->
d
[0] |1 << 
ty≥
;

941 
cmd
->
o
.
›code
 = 
O_ICMPTYPE
;

942 
cmd
->
o
.
Àn
 |
	`F_INSN_SIZE
(
ùfw_ö¢_u32
);

943 
	}
}

946 
	$¥öt_icm±y≥s
(
ùfw_ö¢_u32
 *
cmd
)

948 
i
;

949 
£p
= ' ';

951 
	`¥ötf
(" icmptypes");

952 
i
 = 0; i < 32; i++) {

953 i‡–(
cmd
->
d
[0] & (1 << (
i
))) == 0)

955 
	`¥ötf
("%c%d", 
£p
, 
i
);

956 
£p
 = ',';

958 
	}
}

973 
	#HAVE_PROTO
 0x0001

	)

974 
	#HAVE_SRCIP
 0x0002

	)

975 
	#HAVE_DSTIP
 0x0004

	)

976 
	#HAVE_PROTO4
 0x0008

	)

977 
	#HAVE_PROTO6
 0x0010

	)

978 
	#HAVE_IP
 0x0100

	)

979 
	#HAVE_OPTIONS
 0x8000

	)

982 
	$show_¥îequisôes
(*
Êags
, 
w™t
, 
cmd
)

984 ()
cmd
;

985 i‡(
co
.
commít_⁄ly
)

987 i‡–(*
Êags
 & 
HAVE_IP
) == HAVE_IP)

988 *
Êags
 |
HAVE_OPTIONS
;

990 i‡–!(*
Êags
 & 
HAVE_OPTIONS
)) {

991 i‡–!(*
Êags
 & 
HAVE_PROTO
Ë&& (
w™t
 & HAVE_PROTO)) {

992 i‡–(*
Êags
 & 
HAVE_PROTO4
))

993 
	`¥ötf
(" ip4");

994 i‡–(*
Êags
 & 
HAVE_PROTO6
))

995 
	`¥ötf
(" ip6");

997 
	`¥ötf
(" ip");

999 i‡–!(*
Êags
 & 
HAVE_SRCIP
Ë&& (
w™t
 & HAVE_SRCIP))

1000 
	`¥ötf
(" fromány");

1001 i‡–!(*
Êags
 & 
HAVE_DSTIP
Ë&& (
w™t
 & HAVE_DSTIP))

1002 
	`¥ötf
("Åoány");

1004 *
Êags
 |
w™t
;

1005 
	}
}

1008 
	$show_ùfw
(
ù_fw
 *
ruÀ
, 
pcwidth
, 
bcwidth
)

1010 
twidth
 = 0;

1011 
l
;

1012 
ùfw_ö¢
 *
cmd
, *
èg±r
 = 
NULL
;

1013 c⁄° *
commít
 = 
NULL
;

1014 
¥Ÿo
 = 0;

1015 
Êags
 = 0;

1016 
ùfw_ö¢_log
 *
log±r
 = 
NULL
;

1017 
ùfw_ö¢_Ætq
 *
Ætq±r
 = 
NULL
;

1018 
‹_block
 = 0;

1019 
uöt32_t
 
£t_dißbÀ
;

1021 
	`bc›y
(&
ruÀ
->
√xt_ruÀ
, &
£t_dißbÀ
, (set_disable));

1023 i‡(
£t_dißbÀ
 & (1 << 
ruÀ
->
£t
)) {

1024 i‡(!
co
.
show_£ts
)

1027 
	`¥ötf
("# DISABLED ");

1029 
	`¥ötf
("%05u ", 
ruÀ
->
ruÀnum
);

1031 i‡(
pcwidth
 > 0 || 
bcwidth
 > 0) {

1032 
	`¥_u64
(&
ruÀ
->
p˙t
, 
pcwidth
);

1033 
	`¥_u64
(&
ruÀ
->
b˙t
, 
bcwidth
);

1036 i‡(
co
.
do_time
 == 2)

1037 
	`¥ötf
("%10u ", 
ruÀ
->
time°amp
);

1038 i‡(
co
.
do_time
 == 1) {

1039 
time°r
[30];

1040 
time_t
 
t
 = (time_t)0;

1042 i‡(
twidth
 == 0) {

1043 
	`°r˝y
(
time°r
, 
	`˘ime
(&
t
));

1044 *
	`°rchr
(
time°r
, '\n') = '\0';

1045 
twidth
 = 
	`°æí
(
time°r
);

1047 i‡(
ruÀ
->
time°amp
) {

1048 
t
 = 
	`_l⁄g_to_time
(
ruÀ
->
time°amp
);

1050 
	`°r˝y
(
time°r
, 
	`˘ime
(&
t
));

1051 *
	`°rchr
(
time°r
, '\n') = '\0';

1052 
	`¥ötf
("%†", 
time°r
);

1054 
	`¥ötf
("%*s", 
twidth
, " ");

1058 i‡(
co
.
show_£ts
)

1059 
	`¥ötf
("£à%d ", 
ruÀ
->
£t
);

1064 i‡(
ruÀ
->
cmd_Àn
 > 0) {

1065 
cmd
 = 
ruÀ
->cmd ;

1066 i‡(
cmd
->
›code
 =
O_PROB
) {

1067 
ùfw_ö¢_u32
 *
p
 = (ùfw_ö¢_u32 *)
cmd
;

1068 
d
 = 1.0 * 
p
->d[0];

1070 
d
 = (d / 0x7fffffff);

1071 
	`¥ötf
("¥ob %‡", 
d
);

1078 
l
 = 
ruÀ
->
cmd_Àn
 -ÑuÀ->
a˘_ofs
, 
cmd
 = 
	`ACTION_PTR
(rule);

1079 
l
 > 0 ;Ü -
	`F_LEN
(
cmd
), cmd += F_LEN(cmd)) {

1080 
cmd
->
›code
) {

1081 
O_CHECK_STATE
:

1082 
	`¥ötf
("check-state");

1084 
Êags
 = 
HAVE_PROTO
 | 
HAVE_SRCIP
 |

1085 
HAVE_DSTIP
 | 
HAVE_IP
;

1088 
O_ACCEPT
:

1089 
	`¥ötf
("allow");

1092 
O_COUNT
:

1093 
	`¥ötf
("count");

1096 
O_DENY
:

1097 
	`¥ötf
("deny");

1100 
O_REJECT
:

1101 i‡(
cmd
->
¨g1
 =
ICMP_REJECT_RST
)

1102 
	`¥ötf
("reset");

1103 i‡(
cmd
->
¨g1
 =
ICMP_UNREACH_HOST
)

1104 
	`¥ötf
("reject");

1106 
	`¥öt_ªje˘_code
(
cmd
->
¨g1
);

1109 
O_UNREACH6
:

1110 i‡(
cmd
->
¨g1
 =
ICMP6_UNREACH_RST
)

1111 
	`¥ötf
("reset6");

1113 
	`¥öt_uƒóch6_code
(
cmd
->
¨g1
);

1116 
O_SKIPTO
:

1117 
	`PRINT_UINT_ARG
("skùtÿ", 
cmd
->
¨g1
);

1120 
O_PIPE
:

1121 
	`PRINT_UINT_ARG
("pùê", 
cmd
->
¨g1
);

1124 
O_QUEUE
:

1125 
	`PRINT_UINT_ARG
("queuê", 
cmd
->
¨g1
);

1128 
O_DIVERT
:

1129 
	`PRINT_UINT_ARG
("divîà", 
cmd
->
¨g1
);

1132 
O_TEE
:

1133 
	`PRINT_UINT_ARG
("ãê", 
cmd
->
¨g1
);

1136 
O_NETGRAPH
:

1137 
	`PRINT_UINT_ARG
("√tgøph ", 
cmd
->
¨g1
);

1140 
O_NGTEE
:

1141 
	`PRINT_UINT_ARG
("ngãê", 
cmd
->
¨g1
);

1144 
O_FORWARD_IP
:

1146 
ùfw_ö¢_ß
 *
s
 = (ùfw_ö¢_ß *)
cmd
;

1148 i‡(
s
->
ß
.
sö_addr
.
s_addr
 =
INADDR_ANY
) {

1149 
	`¥ötf
("fwdÅablearg");

1151 
	`¥ötf
("fwd %s", 
	`öë_¡ﬂ
(
s
->
ß
.
sö_addr
));

1153 i‡(
s
->
ß
.
sö_p‹t
)

1154 
	`¥ötf
(",%d", 
s
->
ß
.
sö_p‹t
);

1159 
O_FORWARD_IP6
:

1161 
buf
[4 + 
INET6_ADDRSTRLEN
 + 1];

1162 
ùfw_ö¢_ß6
 *
s
 = (ùfw_ö¢_ß6 *)
cmd
;

1164 
	`¥ötf
("fwd %s", 
	`öë_¡›
(
AF_INET6
, &
s
->
ß
.
sö6_addr
,

1165 
buf
, (buf)));

1166 i‡(
s
->
ß
.
sö6_p‹t
)

1167 
	`¥ötf
(",%d", 
s
->
ß
.
sö6_p‹t
);

1173 
O_LOG
:

1174 
log±r
 = (
ùfw_ö¢_log
 *)
cmd
;

1177 
O_ALTQ
:

1178 
Ætq±r
 = (
ùfw_ö¢_Ætq
 *)
cmd
;

1181 
O_TAG
:

1182 
èg±r
 = 
cmd
;

1185 
O_NAT
:

1186 i‡(
cmd
->
¨g1
 != 0)

1187 
	`PRINT_UINT_ARG
("«à", 
cmd
->
¨g1
);

1189 
	`¥ötf
("nat global");

1192 
O_SETFIB
:

1193 
	`PRINT_UINT_ARG
("£tfib ", 
cmd
->
¨g1
);

1196 
O_REASS
:

1197 
	`¥ötf
("reass");

1200 
O_CALLRETURN
:

1201 i‡(
cmd
->
Àn
 & 
F_NOT
)

1202 
	`¥ötf
("return");

1204 
	`PRINT_UINT_ARG
("ˇŒ ", 
cmd
->
¨g1
);

1208 
	`¥ötf
("** unrecognizedáction %dÜen %d ",

1209 
cmd
->
›code
, cmd->
Àn
);

1212 i‡(
log±r
) {

1213 i‡(
log±r
->
max_log
 > 0)

1214 
	`¥ötf
("ÜogÜogamou¡ %d", 
log±r
->
max_log
);

1216 
	`¥ötf
("Üog");

1218 #i‚de‡
NO_ALTQ


1219 i‡(
Ætq±r
) {

1220 
	`¥öt_Ætq_cmd
(
Ætq±r
);

1223 i‡(
èg±r
) {

1224 i‡(
èg±r
->
Àn
 & 
F_NOT
)

1225 
	`PRINT_UINT_ARG
(" u¡ag ", 
èg±r
->
¨g1
);

1227 
	`PRINT_UINT_ARG
("Åag ", 
èg±r
->
¨g1
);

1233 
l
 = 
ruÀ
->
a˘_ofs
, 
cmd
 =Ñule->cmd ;

1234 
l
 > 0 ;Ü -
	`F_LEN
(
cmd
) , cmd += F_LEN(cmd)) {

1235 i‡((
cmd
->
Àn
 & 
F_OR
Ë|| (cmd->À¿& 
F_NOT
))

1237 i‡(
cmd
->
›code
 =
O_IP4
) {

1238 
Êags
 |
HAVE_PROTO4
;

1240 } i‡(
cmd
->
›code
 =
O_IP6
) {

1241 
Êags
 |
HAVE_PROTO6
;

1245 i‡(
ruÀ
->
_∑d
 & 1) {

1246 i‡(!
co
.
do_com∑˘
) {

1247 
	`show_¥îequisôes
(&
Êags
, 
HAVE_PROTO
, 0);

1248 
	`¥ötf
(" frományÅoány");

1250 
Êags
 |
HAVE_IP
 | 
HAVE_OPTIONS
 | 
HAVE_PROTO
 |

1251 
HAVE_SRCIP
 | 
HAVE_DSTIP
;

1254 i‡(
co
.
commít_⁄ly
)

1255 
commít
 = "...";

1257 
l
 = 
ruÀ
->
a˘_ofs
, 
cmd
 =Ñule->cmd ;

1258 
l
 > 0 ;Ü -
	`F_LEN
(
cmd
) , cmd += F_LEN(cmd)) {

1260 
ùfw_ö¢_u32
 *
cmd32
 = (ùfw_ö¢_u32 *)
cmd
;

1262 i‡(
co
.
commít_⁄ly
) {

1263 i‡(
cmd
->
›code
 !
O_NOP
)

1265 
	`¥ötf
(" // %s\n", (*)(
cmd
 + 1));

1269 
	`show_¥îequisôes
(&
Êags
, 0, 
cmd
->
›code
);

1271 
cmd
->
›code
) {

1272 
O_PROB
:

1275 
O_PROBE_STATE
:

1278 
O_IP_SRC
:

1279 
O_IP_SRC_LOOKUP
:

1280 
O_IP_SRC_MASK
:

1281 
O_IP_SRC_ME
:

1282 
O_IP_SRC_SET
:

1283 
	`show_¥îequisôes
(&
Êags
, 
HAVE_PROTO
, 0);

1284 i‡(!(
Êags
 & 
HAVE_SRCIP
))

1285 
	`¥ötf
(" from");

1286 i‡((
cmd
->
Àn
 & 
F_OR
Ë&& !
‹_block
)

1287 
	`¥ötf
(" {");

1288 
	`¥öt_ù
((
ùfw_ö¢_ù
 *)
cmd
,

1289 (
Êags
 & 
HAVE_OPTIONS
) ? " src-ip" : "");

1290 
Êags
 |
HAVE_SRCIP
;

1293 
O_IP_DST
:

1294 
O_IP_DST_LOOKUP
:

1295 
O_IP_DST_MASK
:

1296 
O_IP_DST_ME
:

1297 
O_IP_DST_SET
:

1298 
	`show_¥îequisôes
(&
Êags
, 
HAVE_PROTO
|
HAVE_SRCIP
, 0);

1299 i‡(!(
Êags
 & 
HAVE_DSTIP
))

1300 
	`¥ötf
("Åo");

1301 i‡((
cmd
->
Àn
 & 
F_OR
Ë&& !
‹_block
)

1302 
	`¥ötf
(" {");

1303 
	`¥öt_ù
((
ùfw_ö¢_ù
 *)
cmd
,

1304 (
Êags
 & 
HAVE_OPTIONS
) ? " dst-ip" : "");

1305 
Êags
 |
HAVE_DSTIP
;

1308 
O_IP6_SRC
:

1309 
O_IP6_SRC_MASK
:

1310 
O_IP6_SRC_ME
:

1311 
	`show_¥îequisôes
(&
Êags
, 
HAVE_PROTO
, 0);

1312 i‡(!(
Êags
 & 
HAVE_SRCIP
))

1313 
	`¥ötf
(" from");

1314 i‡((
cmd
->
Àn
 & 
F_OR
Ë&& !
‹_block
)

1315 
	`¥ötf
(" {");

1316 
	`¥öt_ù6
((
ùfw_ö¢_ù6
 *)
cmd
,

1317 (
Êags
 & 
HAVE_OPTIONS
) ? " src-ip6" : "");

1318 
Êags
 |
HAVE_SRCIP
 | 
HAVE_PROTO
;

1321 
O_IP6_DST
:

1322 
O_IP6_DST_MASK
:

1323 
O_IP6_DST_ME
:

1324 
	`show_¥îequisôes
(&
Êags
, 
HAVE_PROTO
|
HAVE_SRCIP
, 0);

1325 i‡(!(
Êags
 & 
HAVE_DSTIP
))

1326 
	`¥ötf
("Åo");

1327 i‡((
cmd
->
Àn
 & 
F_OR
Ë&& !
‹_block
)

1328 
	`¥ötf
(" {");

1329 
	`¥öt_ù6
((
ùfw_ö¢_ù6
 *)
cmd
,

1330 (
Êags
 & 
HAVE_OPTIONS
) ? " dst-ip6" : "");

1331 
Êags
 |
HAVE_DSTIP
;

1334 
O_FLOW6ID
:

1335 
	`¥öt_Êow6id
–(
ùfw_ö¢_u32
 *Ë
cmd
 );

1336 
Êags
 |
HAVE_OPTIONS
;

1339 
O_IP_DSTPORT
:

1340 
	`show_¥îequisôes
(&
Êags
,

1341 
HAVE_PROTO
 | 
HAVE_SRCIP
 |

1342 
HAVE_DSTIP
 | 
HAVE_IP
, 0);

1343 
O_IP_SRCPORT
:

1344 i‡(
Êags
 & 
HAVE_DSTIP
)

1345 
Êags
 |
HAVE_IP
;

1346 
	`show_¥îequisôes
(&
Êags
,

1347 
HAVE_PROTO
 | 
HAVE_SRCIP
, 0);

1348 i‡((
cmd
->
Àn
 & 
F_OR
Ë&& !
‹_block
)

1349 
	`¥ötf
(" {");

1350 i‡(
cmd
->
Àn
 & 
F_NOT
)

1351 
	`¥ötf
("Çot");

1352 
	`¥öt_√wp‹ts
((
ùfw_ö¢_u16
 *)
cmd
, 
¥Ÿo
,

1353 (
Êags
 & 
HAVE_OPTIONS
Ë? 
cmd
->
›code
 : 0);

1356 
O_PROTO
: {

1357 
¥Ÿ€¡
 *
≥
 = 
NULL
;

1359 i‡((
cmd
->
Àn
 & 
F_OR
Ë&& !
‹_block
)

1360 
	`¥ötf
(" {");

1361 i‡(
cmd
->
Àn
 & 
F_NOT
)

1362 
	`¥ötf
("Çot");

1363 
¥Ÿo
 = 
cmd
->
¨g1
;

1364 
≥
 = 
	`gë¥Ÿobynumbî
(
cmd
->
¨g1
);

1365 i‡((
Êags
 & (
HAVE_PROTO4
 | 
HAVE_PROTO6
)) &&

1366 !(
Êags
 & 
HAVE_PROTO
))

1367 
	`show_¥îequisôes
(&
Êags
,

1368 
HAVE_PROTO
 | 
HAVE_IP
 | 
HAVE_SRCIP
 |

1369 
HAVE_DSTIP
 | 
HAVE_OPTIONS
, 0);

1370 i‡(
Êags
 & 
HAVE_OPTIONS
)

1371 
	`¥ötf
("Öroto");

1372 i‡(
≥
)

1373 
	`¥ötf
(" %s", 
≥
->
p_«me
);

1375 
	`¥ötf
(" %u", 
cmd
->
¨g1
);

1377 
Êags
 |
HAVE_PROTO
;

1381 i‡(!(
cmd
->
Àn
 & (
F_OR
|
F_NOT
)))

1382 i‡(((
cmd
->
›code
 =
O_IP6
) &&

1383 (
Êags
 & 
HAVE_PROTO6
)) ||

1384 ((
cmd
->
›code
 =
O_IP4
) &&

1385 (
Êags
 & 
HAVE_PROTO4
)))

1387 
	`show_¥îequisôes
(&
Êags
, 
HAVE_PROTO
 | 
HAVE_SRCIP
 |

1388 
HAVE_DSTIP
 | 
HAVE_IP
 | 
HAVE_OPTIONS
, 0);

1389 i‡((
cmd
->
Àn
 & 
F_OR
Ë&& !
‹_block
)

1390 
	`¥ötf
(" {");

1391 i‡(
cmd
->
Àn
 & 
F_NOT
 && cmd->
›code
 !
O_IN
)

1392 
	`¥ötf
("Çot");

1393 
cmd
->
›code
) {

1394 
O_MACADDR2
: {

1395 
ùfw_ö¢_mac
 *
m
 = (ùfw_ö¢_ma¯*)
cmd
;

1397 
	`¥ötf
(" MAC");

1398 
	`¥öt_mac
(
m
->
addr
, m->
mask
);

1399 
	`¥öt_mac
(
m
->
addr
 + 6, m->
mask
 + 6);

1403 
O_MAC_TYPE
:

1404 
	`¥öt_√wp‹ts
((
ùfw_ö¢_u16
 *)
cmd
,

1405 
IPPROTO_ETHERTYPE
, 
cmd
->
›code
);

1409 
O_FRAG
:

1410 
	`¥ötf
(" frag");

1413 
O_FIB
:

1414 
	`¥ötf
(" fib %u", 
cmd
->
¨g1
 );

1416 
O_SOCKARG
:

1417 
	`¥ötf
(" sockarg");

1420 
O_IN
:

1421 
	`¥ötf
(
cmd
->
Àn
 & 
F_NOT
 ? " out" : " in");

1424 
O_DIVERTED
:

1425 
cmd
->
¨g1
) {

1427 
	`¥ötf
(" diverted");

1430 
	`¥ötf
(" diverted-loopback");

1433 
	`¥ötf
(" diverted-output");

1436 
	`¥ötf
(" divîãd-?<%u>", 
cmd
->
¨g1
);

1441 
O_LAYER2
:

1442 
	`¥ötf
("Üayer2");

1444 
O_XMIT
:

1445 
O_RECV
:

1446 
O_VIA
:

1448 c⁄° *
s
;

1449 
ùfw_ö¢_if
 *
cmdif
 = (ùfw_ö¢_i‡*)
cmd
;

1451 i‡(
cmd
->
›code
 =
O_XMIT
)

1452 
s
 = "xmit";

1453 i‡(
cmd
->
›code
 =
O_RECV
)

1454 
s
 = "recv";

1456 
s
 = "via";

1457 i‡(
cmdif
->
«me
[0] == '\0')

1458 
	`¥ötf
(" %†%s", 
s
,

1459 
	`öë_¡ﬂ
(
cmdif
->
p
.
ù
));

1461 
	`¥ötf
(" %†%s", 
s
, 
cmdif
->
«me
);

1465 
O_IPID
:

1466 i‡(
	`F_LEN
(
cmd
) == 1)

1467 
	`¥ötf
(" ipid %u", 
cmd
->
¨g1
 );

1469 
	`¥öt_√wp‹ts
((
ùfw_ö¢_u16
 *)
cmd
, 0,

1470 
O_IPID
);

1473 
O_IPTTL
:

1474 i‡(
	`F_LEN
(
cmd
) == 1)

1475 
	`¥ötf
(" i±é %u", 
cmd
->
¨g1
 );

1477 
	`¥öt_√wp‹ts
((
ùfw_ö¢_u16
 *)
cmd
, 0,

1478 
O_IPTTL
);

1481 
O_IPVER
:

1482 
	`¥ötf
(" ipvî %u", 
cmd
->
¨g1
 );

1485 
O_IPPRECEDENCE
:

1486 
	`¥ötf
(" iµª˚dí˚ %u", (
cmd
->
¨g1
) >> 5 );

1489 
O_IPLEN
:

1490 i‡(
	`F_LEN
(
cmd
) == 1)

1491 
	`¥ötf
(" i∂í %u", 
cmd
->
¨g1
 );

1493 
	`¥öt_√wp‹ts
((
ùfw_ö¢_u16
 *)
cmd
, 0,

1494 
O_IPLEN
);

1497 
O_IPOPT
:

1498 
	`¥öt_Êags
("ù›ti⁄s", 
cmd
, 
f_ù›ts
);

1501 
O_IPTOS
:

1502 
	`¥öt_Êags
("ùtos", 
cmd
, 
f_ùtos
);

1505 
O_ICMPTYPE
:

1506 
	`¥öt_icm±y≥s
((
ùfw_ö¢_u32
 *)
cmd
);

1509 
O_ESTAB
:

1510 
	`¥ötf
("Éstablished");

1513 
O_TCPDATALEN
:

1514 i‡(
	`F_LEN
(
cmd
) == 1)

1515 
	`¥ötf
("Å˝d©Æí %u", 
cmd
->
¨g1
 );

1517 
	`¥öt_√wp‹ts
((
ùfw_ö¢_u16
 *)
cmd
, 0,

1518 
O_TCPDATALEN
);

1521 
O_TCPFLAGS
:

1522 
	`¥öt_Êags
("t˝Êags", 
cmd
, 
f_t˝Êags
);

1525 
O_TCPOPTS
:

1526 
	`¥öt_Êags
("t˝›ti⁄s", 
cmd
, 
f_t˝›ts
);

1529 
O_TCPWIN
:

1530 
	`¥ötf
("Å˝wö %d", 
	`¡ohs
(
cmd
->
¨g1
));

1533 
O_TCPACK
:

1534 
	`¥ötf
("Å˝ack %d", 
	`¡ohl
(
cmd32
->
d
[0]));

1537 
O_TCPSEQ
:

1538 
	`¥ötf
("Å˝£q %d", 
	`¡ohl
(
cmd32
->
d
[0]));

1541 
O_UID
:

1543 
∑sswd
 *
pwd
 = 
	`gëpwuid
(
cmd32
->
d
[0]);

1545 i‡(
pwd
)

1546 
	`¥ötf
(" uid %s", 
pwd
->
pw_«me
);

1548 
	`¥ötf
(" uid %u", 
cmd32
->
d
[0]);

1552 
O_GID
:

1554 
group
 *
gΩ
 = 
	`gëgrgid
(
cmd32
->
d
[0]);

1556 i‡(
gΩ
)

1557 
	`¥ötf
(" gid %s", 
gΩ
->
gr_«me
);

1559 
	`¥ötf
(" gid %u", 
cmd32
->
d
[0]);

1563 
O_JAIL
:

1564 
	`¥ötf
(" jaû %d", 
cmd32
->
d
[0]);

1567 
O_VERREVPATH
:

1568 
	`¥ötf
(" verrevpath");

1571 
O_VERSRCREACH
:

1572 
	`¥ötf
(" versrcreach");

1575 
O_ANTISPOOF
:

1576 
	`¥ötf
("ántispoof");

1579 
O_IPSEC
:

1580 
	`¥ötf
(" ipsec");

1583 
O_NOP
:

1584 
commít
 = (*)(
cmd
 + 1);

1587 
O_KEEP_STATE
:

1588 
	`¥ötf
(" keep-state");

1591 
O_LIMIT
: {

1592 
_s_x
 *
p
 = 
limô_masks
;

1593 
ùfw_ö¢_limô
 *
c
 = (ùfw_ö¢_limô *)
cmd
;

1594 
uöt8_t
 
x
 = 
c
->
limô_mask
;

1595 c⁄° *
comma
 = " ";

1597 
	`¥ötf
("Üimit");

1598 ; 
p
->
x
 != 0 ;Ö++)

1599 i‡((
x
 & 
p
->x) ==Ö->x) {

1600 
x
 &~
p
->x;

1601 
	`¥ötf
("%s%s", 
comma
, 
p
->
s
);

1602 
comma
 = ",";

1604 
	`PRINT_UINT_ARG
(" ", 
c
->
c⁄n_limô
);

1608 
O_IP6
:

1609 
	`¥ötf
(" ip6");

1612 
O_IP4
:

1613 
	`¥ötf
(" ip4");

1616 
O_ICMP6TYPE
:

1617 
	`¥öt_icmp6ty≥s
((
ùfw_ö¢_u32
 *)
cmd
);

1620 
O_EXT_HDR
:

1621 
	`¥öt_ext6hdr
–(
ùfw_ö¢
 *Ë
cmd
 );

1624 
O_TAGGED
:

1625 i‡(
	`F_LEN
(
cmd
) == 1)

1626 
	`PRINT_UINT_ARG
("Åagged ", 
cmd
->
¨g1
);

1628 
	`¥öt_√wp‹ts
((
ùfw_ö¢_u16
 *)
cmd
, 0,

1629 
O_TAGGED
);

1633 
	`¥ötf
(" [opcode %dÜen %d]",

1634 
cmd
->
›code
, cmd->
Àn
);

1637 i‡(
cmd
->
Àn
 & 
F_OR
) {

1638 
	`¥ötf
(" or");

1639 
‹_block
 = 1;

1640 } i‡(
‹_block
) {

1641 
	`¥ötf
(" }");

1642 
‹_block
 = 0;

1645 
	`show_¥îequisôes
(&
Êags
, 
HAVE_PROTO
 | 
HAVE_SRCIP
 | 
HAVE_DSTIP


1646 | 
HAVE_IP
, 0);

1647 i‡(
commít
)

1648 
	`¥ötf
(" // %s", 
commít
);

1649 
	`¥ötf
("\n");

1650 
	}
}

1653 
	$show_dyn_ùfw
(
ùfw_dyn_ruÀ
 *
d
, 
pcwidth
, 
bcwidth
)

1655 
¥Ÿ€¡
 *
≥
;

1656 
ö_addr
 
a
;

1657 
uöt16_t
 
ruÀnum
;

1658 
buf
[
INET6_ADDRSTRLEN
];

1660 i‡(!
co
.
do_expúed
) {

1661 i‡(!
d
->
expúe
 && !(d->
dyn_ty≥
 =
O_LIMIT_PARENT
))

1664 
	`bc›y
(&
d
->
ruÀ
, &
ruÀnum
, (rulenum));

1665 
	`¥ötf
("%05d", 
ruÀnum
);

1666 i‡(
pcwidth
 > 0 || 
bcwidth
 > 0) {

1667 
	`¥ötf
(" ");

1668 
	`¥_u64
(&
d
->
p˙t
, 
pcwidth
);

1669 
	`¥_u64
(&
d
->
b˙t
, 
bcwidth
);

1670 
	`¥ötf
("(%ds)", 
d
->
expúe
);

1672 
d
->
dyn_ty≥
) {

1673 
O_LIMIT_PARENT
:

1674 
	`¥ötf
(" PARENT %d", 
d
->
cou¡
);

1676 
O_LIMIT
:

1677 
	`¥ötf
(" LIMIT");

1679 
O_KEEP_STATE
:

1680 
	`¥ötf
(" STATE");

1684 i‡((
≥
 = 
	`gë¥Ÿobynumbî
(
d
->
id
.
¥Ÿo
)Ë!
NULL
)

1685 
	`¥ötf
(" %s", 
≥
->
p_«me
);

1687 
	`¥ötf
("ÖrŸÿ%u", 
d
->
id
.
¥Ÿo
);

1689 i‡(
d
->
id
.
addr_ty≥
 == 4) {

1690 
a
.
s_addr
 = 
	`ht⁄l
(
d
->
id
.
§c_ù
);

1691 
	`¥ötf
(" %†%d", 
	`öë_¡ﬂ
(
a
), 
d
->
id
.
§c_p‹t
);

1693 
a
.
s_addr
 = 
	`ht⁄l
(
d
->
id
.
d°_ù
);

1694 
	`¥ötf
(" <-> %†%d", 
	`öë_¡ﬂ
(
a
), 
d
->
id
.
d°_p‹t
);

1695 } i‡(
d
->
id
.
addr_ty≥
 == 6) {

1696 
	`¥ötf
(" %†%d", 
	`öë_¡›
(
AF_INET6
, &
d
->
id
.
§c_ù6
, 
buf
,

1697 (
buf
)), 
d
->
id
.
§c_p‹t
);

1698 
	`¥ötf
(" <-> %†%d", 
	`öë_¡›
(
AF_INET6
, &
d
->
id
.
d°_ù6
, 
buf
,

1699 (
buf
)), 
d
->
id
.
d°_p‹t
);

1701 
	`¥ötf
(" UNKNOWN <-> UNKNOWN\n");

1703 
	`¥ötf
("\n");

1704 
	}
}

1714 
	$ùfw_£ts_h™dÀr
(*
av
[])

1716 
uöt32_t
 
£t_dißbÀ
, 
masks
[2];

1717 
i
, 
nbyãs
;

1718 
uöt16_t
 
ruÀnum
;

1719 
uöt8_t
 
cmd
, 
√w_£t
;

1721 
av
++;

1723 i‡(
av
[0] =
NULL
)

1724 
	`îrx
(
EX_USAGE
, "setÇeeds command");

1725 i‡(
	`_sub°rcmp
(*
av
, "show") == 0) {

1726 *
d©a
 = 
NULL
;

1727 c⁄° *
msg
;

1728 
«Œoc
;

1730 
«Œoc
 = 
nbyãs
 = (
ù_fw
);

1731 
nbyãs
 >
«Œoc
) {

1732 i‡(
d©a
)

1733 
	`‰ì
(
d©a
);

1734 
«Œoc
 =Çalloc * 2 + 200;

1735 
nbyãs
 = 
«Œoc
;

1736 
d©a
 = 
	`ß„_ˇŒoc
(1, 
nbyãs
);

1737 i‡(
	`do_cmd
(
IP_FW_GET
, 
d©a
, (
uöçå_t
)&
nbyãs
) < 0)

1738 
	`îr
(
EX_OSERR
, "getsockopt(IP_FW_GET)");

1741 
	`bc›y
(&((
ù_fw
 *)
d©a
)->
√xt_ruÀ
,

1742 &
£t_dißbÀ
, (set_disable));

1744 
i
 = 0, 
msg
 = "dißbÀ" ; i < 
RESVD_SET
; i++)

1745 i‡((
£t_dißbÀ
 & (1<<
i
))) {

1746 
	`¥ötf
("%†%d", 
msg
, 
i
);

1747 
msg
 = "";

1749 
msg
 = (
£t_dißbÀ
) ? "Énable" : "enable";

1750 
i
 = 0; i < 
RESVD_SET
; i++)

1751 i‡(!(
£t_dißbÀ
 & (1<<
i
))) {

1752 
	`¥ötf
("%†%d", 
msg
, 
i
);

1753 
msg
 = "";

1755 
	`¥ötf
("\n");

1756 } i‡(
	`_sub°rcmp
(*
av
, "swap") == 0) {

1757 
av
++;

1758 i‡–
av
[0] =
NULL
 ||áv[1] == NULL )

1759 
	`îrx
(
EX_USAGE
, "set swapÇeeds 2 setÇumbers\n");

1760 
ruÀnum
 = 
	`©oi
(
av
[0]);

1761 
√w_£t
 = 
	`©oi
(
av
[1]);

1762 i‡(!
	`isdigô
(*(
av
[0])Ë|| 
ruÀnum
 > 
RESVD_SET
)

1763 
	`îrx
(
EX_DATAERR
, "övÆid sëÇumbî %s\n", 
av
[0]);

1764 i‡(!
	`isdigô
(*(
av
[1])Ë|| 
√w_£t
 > 
RESVD_SET
)

1765 
	`îrx
(
EX_DATAERR
, "övÆid sëÇumbî %s\n", 
av
[1]);

1766 
masks
[0] = (4 << 24Ë| (
√w_£t
 << 16Ë| (
ruÀnum
);

1767 
i
 = 
	`do_cmd
(
IP_FW_DEL
, 
masks
, (
uöt32_t
));

1768 } i‡(
	`_sub°rcmp
(*
av
, "move") == 0) {

1769 
av
++;

1770 i‡(
av
[0] && 
	`_sub°rcmp
(*av, "rule") == 0) {

1771 
cmd
 = 2;

1772 
av
++;

1774 
cmd
 = 3;

1775 i‡(
av
[0] =
NULL
 ||áv[1] == NULL ||áv[2] == NULL ||

1776 
av
[3] !
NULL
 || 
	`_sub°rcmp
(av[1], "to") != 0)

1777 
	`îrx
(
EX_USAGE
, "syntax: set move [rule] XÅo Y\n");

1778 
ruÀnum
 = 
	`©oi
(
av
[0]);

1779 
√w_£t
 = 
	`©oi
(
av
[2]);

1780 i‡(!
	`isdigô
(*(
av
[0])Ë|| (
cmd
 =3 && 
ruÀnum
 > 
RESVD_SET
) ||

1781 (
cmd
 =2 && 
ruÀnum
 =
IPFW_DEFAULT_RULE
) )

1782 
	`îrx
(
EX_DATAERR
, "övÆid sour˚Çumbî %s\n", 
av
[0]);

1783 i‡(!
	`isdigô
(*(
av
[2])Ë|| 
√w_£t
 > 
RESVD_SET
)

1784 
	`îrx
(
EX_DATAERR
, "övÆid de°. së %s\n", 
av
[1]);

1785 
masks
[0] = (
cmd
 << 24Ë| (
√w_£t
 << 16Ë| (
ruÀnum
);

1786 
i
 = 
	`do_cmd
(
IP_FW_DEL
, 
masks
, (
uöt32_t
));

1787 } i‡(
	`_sub°rcmp
(*
av
, "disable") == 0 ||

1788 
	`_sub°rcmp
(*
av
, "enable") == 0 ) {

1789 
which
 = 
	`_sub°rcmp
(*
av
, "enable") == 0 ? 1 : 0;

1791 
av
++;

1792 
masks
[0] = masks[1] = 0;

1794 
av
[0]) {

1795 i‡(
	`isdigô
(**
av
)) {

1796 
i
 = 
	`©oi
(*
av
);

1797 i‡(
i
 < 0 || i > 
RESVD_SET
)

1798 
	`îrx
(
EX_DATAERR
,

1799 "övÆid sëÇumbî %d\n", 
i
);

1800 
masks
[
which
] |(1<<
i
);

1801 } i‡(
	`_sub°rcmp
(*
av
, "disable") == 0)

1802 
which
 = 0;

1803 i‡(
	`_sub°rcmp
(*
av
, "enable") == 0)

1804 
which
 = 1;

1806 
	`îrx
(
EX_DATAERR
,

1807 "övÆid së comm™d %s\n", *
av
);

1808 
av
++;

1810 i‡–(
masks
[0] & masks[1]) != 0 )

1811 
	`îrx
(
EX_DATAERR
,

1814 
i
 = 
	`do_cmd
(
IP_FW_DEL
, 
masks
, (masks));

1815 i‡(
i
)

1816 
	`w¨n
("setÉnable/disable: setsockopt(IP_FW_DEL)");

1818 
	`îrx
(
EX_USAGE
, "övÆid së comm™d %s\n", *
av
);

1819 
	}
}

1822 
	$ùfw_sys˘l_h™dÀr
(*
av
[], 
which
)

1824 
av
++;

1826 i‡(
av
[0] =
NULL
) {

1827 
	`w¨nx
("missing keywordÅoÉnable/disable\n");

1828 } i‡(
	`_sub°rcmp
(*
av
, "firewall") == 0) {

1829 
	`sys˘lby«me
("√t.öë.ù.fw.íabÀ", 
NULL
, 0,

1830 &
which
, (which));

1831 
	`sys˘lby«me
("√t.öë6.ù6.fw.íabÀ", 
NULL
, 0,

1832 &
which
, (which));

1833 } i‡(
	`_sub°rcmp
(*
av
, "one_pass") == 0) {

1834 
	`sys˘lby«me
("√t.öë.ù.fw.⁄e_∑ss", 
NULL
, 0,

1835 &
which
, (which));

1836 } i‡(
	`_sub°rcmp
(*
av
, "debug") == 0) {

1837 
	`sys˘lby«me
("√t.öë.ù.fw.debug", 
NULL
, 0,

1838 &
which
, (which));

1839 } i‡(
	`_sub°rcmp
(*
av
, "verbose") == 0) {

1840 
	`sys˘lby«me
("√t.öë.ù.fw.vîbo£", 
NULL
, 0,

1841 &
which
, (which));

1842 } i‡(
	`_sub°rcmp
(*
av
, "dyn_keepalive") == 0) {

1843 
	`sys˘lby«me
("√t.öë.ù.fw.dyn_kì∑live", 
NULL
, 0,

1844 &
which
, (which));

1845 #i‚de‡
NO_ALTQ


1846 } i‡(
	`_sub°rcmp
(*
av
, "altq") == 0) {

1847 
	`Ætq_£t_íabÀd
(
which
);

1850 
	`w¨nx
("uƒecognizêíabÀ/dißbÀ keyw‹d: %s\n", *
av
);

1852 
	}
}

1855 
	$ùfw_li°
(
ac
, *
av
[], 
show_cou¡îs
)

1857 
ù_fw
 *
r
;

1858 
ùfw_dyn_ruÀ
 *
dyƒuÀs
, *
d
;

1860 
	#NEXT
(
r
Ë((
ù_fw
 *)((*Ï + 
	`RULESIZE
‘)))

	)

1861 *
lim
;

1862 *
d©a
 = 
NULL
;

1863 
bcwidth
, 
n
, 
nbyãs
, 
n°©
, 
ndyn
, 
pcwidth
, 
width
;

1864 
exôvÆ
 = 
EX_OK
;

1865 
œc
;

1866 **
œv
;

1867 
u_l⁄g
 
∫um
, 
œ°
;

1868 *
íd±r
;

1869 
£í
 = 0;

1870 
uöt8_t
 
£t
;

1872 c⁄° 
ocmd
 = 
co
.
do_pùe
 ? 
IP_DUMMYNET_GET
 : 
IP_FW_GET
;

1873 
«Œoc
 = 1024;

1875 
œ°
 = 0;

1877 i‡(
co
.
ã°_⁄ly
) {

1878 
	`Ârötf
(
°dîr
, "Testing only,Üist disabled\n");

1881 i‡(
co
.
do_pùe
) {

1882 
	`dummy√t_li°
(
ac
, 
av
, 
show_cou¡îs
);

1886 
ac
--;

1887 
av
++;

1890 
nbyãs
 = 
«Œoc
;

1892 
nbyãs
 >
«Œoc
) {

1893 
«Œoc
 =Çalloc * 2 + 200;

1894 
nbyãs
 = 
«Œoc
;

1895 
d©a
 = 
	`ß„_ªÆloc
(d©a, 
nbyãs
);

1896 i‡(
	`do_cmd
(
ocmd
, 
d©a
, (
uöçå_t
)&
nbyãs
) < 0)

1897 
	`îr
(
EX_OSERR
, "getsockopt(IP_%s_GET)",

1898 
co
.
do_pùe
 ? "DUMMYNET" : "FW");

1905 
n°©
 = 1, 
r
 = 
d©a
, 
lim
 = (*)d©®+ 
nbyãs
;

1906 
r
->
ruÀnum
 < 
IPFW_DEFAULT_RULE
 && (*Ï < 
lim
;

1907 ++
n°©
, 
r
 = 
	`NEXT
(r) )

1914 
r
 = 
	`NEXT
(r);

1915 
dyƒuÀs
 = (
ùfw_dyn_ruÀ
 *)
r
 ;

1916 
n
 = (*)
r
 - (*)
d©a
;

1917 
ndyn
 = (
nbyãs
 - 
n
Ë/  *
dyƒuÀs
;

1920 
bcwidth
 = 
pcwidth
 = 0;

1921 i‡(
show_cou¡îs
) {

1922 
n
 = 0, 
r
 = 
d©a
;Ç < 
n°©
;Ç++,Ñ = 
	`NEXT
(r)) {

1924 i‡(
co
.
u£_£t
 && 
r
->
£t
 != co.use_set - 1)

1928 
width
 = 
	`¥_u64
(&
r
->
p˙t
, 0);

1929 i‡(
width
 > 
pcwidth
)

1930 
pcwidth
 = 
width
;

1933 
width
 = 
	`¥_u64
(&
r
->
b˙t
, 0);

1934 i‡(
width
 > 
bcwidth
)

1935 
bcwidth
 = 
width
;

1938 i‡(
co
.
do_dy«mic
 && 
ndyn
) {

1939 
n
 = 0, 
d
 = 
dyƒuÀs
;Ç < 
ndyn
;Ç++, d++) {

1940 i‡(
co
.
u£_£t
) {

1942 
	`bc›y
((*)&
d
->
ruÀ
 + (
uöt16_t
),

1943 &
£t
, (
uöt8_t
));

1944 i‡(
£t
 !
co
.
u£_£t
 - 1)

1947 
width
 = 
	`¥_u64
(&
d
->
p˙t
, 0);

1948 i‡(
width
 > 
pcwidth
)

1949 
pcwidth
 = 
width
;

1951 
width
 = 
	`¥_u64
(&
d
->
b˙t
, 0);

1952 i‡(
width
 > 
bcwidth
)

1953 
bcwidth
 = 
width
;

1957 i‡(
ac
 == 0) {

1958 
n
 = 0, 
r
 = 
d©a
;Ç < 
n°©
;Ç++,Ñ = 
	`NEXT
(r)) {

1959 i‡(
co
.
u£_£t
 && 
r
->
£t
 != co.use_set - 1)

1961 
	`show_ùfw
(
r
, 
pcwidth
, 
bcwidth
);

1964 i‡(
co
.
do_dy«mic
 && 
ndyn
) {

1965 
	`¥ötf
("## Dy«mi¯ruÀ†(%d):\n", 
ndyn
);

1966 
n
 = 0, 
d
 = 
dyƒuÀs
;Ç < 
ndyn
;Ç++, d++) {

1967 i‡(
co
.
u£_£t
) {

1968 
	`bc›y
((*)&
d
->
ruÀ
 + (
uöt16_t
),

1969 &
£t
, (
uöt8_t
));

1970 i‡(
£t
 !
co
.
u£_£t
 - 1)

1973 
	`show_dyn_ùfw
(
d
, 
pcwidth
, 
bcwidth
);

1976 
d⁄e
;

1981 
œc
 = 
ac
, 
œv
 = 
av
;Üac != 0;Üac--) {

1983 
œ°
 = 
∫um
 = 
	`°πoul
(*
œv
++, &
íd±r
, 10);

1984 i‡(*
íd±r
 == '-')

1985 
œ°
 = 
	`°πoul
(
íd±r
+1, &endptr, 10);

1986 i‡(*
íd±r
) {

1987 
exôvÆ
 = 
EX_USAGE
;

1988 
	`w¨nx
("övÆidÑuÀÇumbî: %s", *(
œv
 - 1));

1991 
n
 = 
£í
 = 0, 
r
 = 
d©a
;Ç < 
n°©
;Ç++,Ñ = 
	`NEXT
(r) ) {

1992 i‡(
r
->
ruÀnum
 > 
œ°
)

1994 i‡(
co
.
u£_£t
 && 
r
->
£t
 != co.use_set - 1)

1996 i‡(
r
->
ruÀnum
 >
∫um
 &&Ñ->ruÀnum <
œ°
) {

1997 
	`show_ùfw
(
r
, 
pcwidth
, 
bcwidth
);

1998 
£í
 = 1;

2001 i‡(!
£í
) {

2003 i‡(
exôvÆ
 =
EX_OK
)

2004 
exôvÆ
 = 
EX_UNAVAILABLE
;

2005 
	`w¨nx
("ruÀ %lu d€†nŸÉxi°", 
∫um
);

2009 i‡(
co
.
do_dy«mic
 && 
ndyn
) {

2010 
	`¥ötf
("## DynamicÑules:\n");

2011 
œc
 = 
ac
, 
œv
 = 
av
;Üac != 0;Üac--) {

2012 
œ°
 = 
∫um
 = 
	`°πoul
(*
œv
++, &
íd±r
, 10);

2013 i‡(*
íd±r
 == '-')

2014 
œ°
 = 
	`°πoul
(
íd±r
+1, &endptr, 10);

2015 i‡(*
íd±r
)

2018 
n
 = 0, 
d
 = 
dyƒuÀs
;Ç < 
ndyn
;Ç++, d++) {

2019 
uöt16_t
 
ruÀnum
;

2021 
	`bc›y
(&
d
->
ruÀ
, &
ruÀnum
, (rulenum));

2022 i‡(
ruÀnum
 > 
∫um
)

2024 i‡(
co
.
u£_£t
) {

2025 
	`bc›y
((*)&
d
->
ruÀ
 + (
uöt16_t
),

2026 &
£t
, (
uöt8_t
));

2027 i‡(
£t
 !
co
.
u£_£t
 - 1)

2030 i‡(
r
->
ruÀnum
 >
∫um
 &&Ñ->ruÀnum <
œ°
)

2031 
	`show_dyn_ùfw
(
d
, 
pcwidth
, 
bcwidth
);

2036 
ac
 = 0;

2038 
d⁄e
:

2039 
	`‰ì
(
d©a
);

2041 i‡(
exôvÆ
 !
EX_OK
)

2042 
	`exô
(
exôvÆ
);

2043 #unde‡
NEXT


2044 
	}
}

2047 
	$lookup_ho°
 (*
ho°
, 
ö_addr
 *
ùaddr
)

2049 
ho°ít
 *
he
;

2051 i‡(!
	`öë_©⁄
(
ho°
, 
ùaddr
)) {

2052 i‡((
he
 = 
	`gëho°by«me
(
ho°
)Ë=
NULL
)

2054 *
ùaddr
 = *(
ö_addr
 *)
he
->
h_addr_li°
[0];

2057 
	}
}

2071 
	$fûl_ù
(
ùfw_ö¢_ù
 *
cmd
, *
av
)

2073 
Àn
 = 0;

2074 
uöt32_t
 *
d
 = ((
ùfw_ö¢_u32
 *)
cmd
)->d;

2076 
cmd
->
o
.
Àn
 &~
F_LEN_MASK
;

2078 i‡(
	`_sub°rcmp
(
av
, "any") == 0)

2081 i‡(
	`_sub°rcmp
(
av
, "me") == 0) {

2082 
cmd
->
o
.
Àn
 |
	`F_INSN_SIZE
(
ùfw_ö¢
);

2086 i‡(
	`°∫cmp
(
av
, "table(", 6) == 0) {

2087 *
p
 = 
	`°rchr
(
av
 + 6, ',');

2089 i‡(
p
)

2090 *
p
++ = '\0';

2091 
cmd
->
o
.
›code
 = 
O_IP_DST_LOOKUP
;

2092 
cmd
->
o
.
¨g1
 = 
	`°πoul
(
av
 + 6, 
NULL
, 0);

2093 i‡(
p
) {

2094 
cmd
->
o
.
Àn
 |
	`F_INSN_SIZE
(
ùfw_ö¢_u32
);

2095 
d
[0] = 
	`°πoul
(
p
, 
NULL
, 0);

2097 
cmd
->
o
.
Àn
 |
	`F_INSN_SIZE
(
ùfw_ö¢
);

2101 
av
) {

2107 *
t
 = 
NULL
, *
p
 = 
	`°Ωbrk
(
av
, "/:,{");

2108 
maskÀn
;

2109 
md
, 
nd
 = '\0';

2111 i‡(
p
) {

2112 
md
 = *
p
;

2113 *
p
++ = '\0';

2114 i‡((
t
 = 
	`°Ωbrk
(
p
, ",{")Ë!
NULL
) {

2115 
nd
 = *
t
;

2116 *
t
 = '\0';

2119 
md
 = '\0';

2121 i‡(
	`lookup_ho°
(
av
, (
ö_addr
 *)&
d
[0]) != 0)

2122 
	`îrx
(
EX_NOHOST
, "ho°«mê``%s'' unknown", 
av
);

2123 
md
) {

2125 i‡(!
	`öë_©⁄
(
p
, (
ö_addr
 *)&
d
[1]))

2126 
	`îrx
(
EX_DATAERR
, "badÇëmask ``%s''", 
p
);

2129 
maskÀn
 = 
	`©oi
(
p
);

2130 i‡(
maskÀn
 == 0)

2131 
d
[1] = 
	`ht⁄l
(0);

2132 i‡(
maskÀn
 > 32)

2133 
	`îrx
(
EX_DATAERR
, "bad width ``%s''", 
p
);

2135 
d
[1] = 
	`ht⁄l
(~0 << (32 - 
maskÀn
));

2138 
d
[1] = 
	`ht⁄l
(~0 << (32 - 24));

2139 *(--
p
Ë
md
;

2143 *(--
p
Ë
md
;

2147 
d
[1] = 
	`ht⁄l
(~0);

2150 
d
[0] &= d[1];

2151 i‡(
t
)

2152 *
t
 = 
nd
;

2154 i‡(
p
)

2155 
p
 = 
	`°Ωbrk
(p, ",{");

2156 i‡(
p
 && *p == '{') {

2165 
uöt32_t
 *
m≠
 = (uöt32_à*)&
cmd
->
mask
;

2166 
low
, 
high
;

2167 
i
 = 
	`c⁄tigmask
((
uöt8_t
 *)&(
d
[1]), 32);

2169 i‡(
Àn
 > 0)

2170 
	`îrx
(
EX_DATAERR
, "address set cannot be ináÜist");

2171 i‡(
i
 < 24 || i > 31)

2172 
	`îrx
(
EX_DATAERR
, "övÆid së wôh mask %d\n", 
i
);

2173 
cmd
->
o
.
¨g1
 = 1<<(32-
i
);

2174 
d
[0] = 
	`¡ohl
(d[0]);

2175 
cmd
->
o
.
›code
 = 
O_IP_DST_SET
;

2176 
cmd
->
o
.
Àn
 |
	`F_INSN_SIZE
(
ùfw_ö¢_u32
Ë+ (cmd->o.
¨g1
+31)/32;

2177 
i
 = 0; i < (
cmd
->
o
.
¨g1
+31)/32 ; i++)

2178 
m≠
[
i
] = 0;

2180 
av
 = 
p
 + 1;

2181 
low
 = 
d
[0] & 0xff;

2182 
high
 = 
low
 + 
cmd
->
o
.
¨g1
 - 1;

2188 
i
 = -1;

2189 
	`isdigô
(*
av
)) {

2190 *
s
;

2191 
a
 = 
	`°πﬁ
(
av
, &
s
, 0);

2193 i‡(
s
 =
av
) {

2194 i‡(*
av
 != '}')

2195 
	`îrx
(
EX_DATAERR
, "setÇot closed\n");

2196 i‡(
i
 != -1)

2197 
	`îrx
(
EX_DATAERR
, "öcom∂ëêøngê%d-", 
i
);

2200 i‡(
a
 < 
low
 ||á > 
high
)

2201 
	`îrx
(
EX_DATAERR
, "addr %d out ofÑange [%d-%d]\n",

2202 
a
, 
low
, 
high
);

2203 
a
 -
low
;

2204 i‡(
i
 == -1)

2205 
i
 = 
a
;

2207 i‡(
i
 > 
a
)

2208 
	`îrx
(
EX_DATAERR
, "invalidÑange %d-%d",

2209 
i
+
low
, 
a
+low);

2210 i‡(*
s
 == '-')

2211 
	`îrx
(
EX_DATAERR
, "double '-' inÑange");

2213 ; 
i
 <
a
; i++)

2214 
m≠
[
i
/32] |= 1<<(i & 31);

2215 
i
 = -1;

2216 i‡(*
s
 == '-')

2217 
i
 = 
a
;

2218 i‡(*
s
 == '}')

2220 
av
 = 
s
+1;

2224 
av
 = 
p
;

2225 i‡(
av
)

2226 
av
++;

2229 i‡(
d
[1] == 0) {

2236 i‡(
cmd
->
o
.
Àn
 & 
F_NOT
) {

2237 i‡(
av
 =
NULL
 && 
Àn
 == 0)

2238 
	`îrx
(
EX_DATAERR
, "notányÇever matches");

2244 i‡(
d
[1] =(
uöt32_t
)~0 && 
av
 =
NULL
 && 
Àn
 == 0) {

2245 
cmd
->
o
.
Àn
 |
	`F_INSN_SIZE
(
ùfw_ö¢_u32
);

2248 
Àn
 += 2;

2249 
d
 += 2;

2251 i‡(
Àn
 + 1 > 
F_LEN_MASK
)

2252 
	`îrx
(
EX_DATAERR
, "addressÜistÅooÜong");

2253 
cmd
->
o
.
Àn
 |=Üen+1;

2254 
	}
}

2259 
	$n2mask
(
ö6_addr
 *
mask
, 
n
)

2261 
möimask
[9] =

2263 
u_ch¨
 *
p
;

2265 
	`mem£t
(
mask
, 0, (
ö6_addr
));

2266 
p
 = (
u_ch¨
 *Ë
mask
;

2267 ; 
n
 > 0; 
p
++,Ç -= 8) {

2268 i‡(
n
 >= 8)

2269 *
p
 = 0xff;

2271 *
p
 = 
möimask
[
n
];

2274 
	}
}

2281 
	$fûl_Êags
(
ùfw_ö¢
 *
cmd
, 
ùfw_›codes
 
›code
,

2282 
_s_x
 *
Êags
, *
p
)

2284 
uöt8_t
 
£t
=0, 
˛ór
=0;

2286 
p
 && *p) {

2287 *
q
;

2288 
vÆ
;

2289 
uöt8_t
 *
which
;

2291 i‡(*
p
 == '!') {

2292 
p
++;

2293 
which
 = &
˛ór
;

2295 
which
 = &
£t
;

2296 
q
 = 
	`°rchr
(
p
, ',');

2297 i‡(
q
)

2298 *
q
++ = '\0';

2299 
vÆ
 = 
	`m©ch_tokí
(
Êags
, 
p
);

2300 i‡(
vÆ
 <= 0)

2301 
	`îrx
(
EX_DATAERR
, "övÆid fœg %s", 
p
);

2302 *
which
 |(
uöt8_t
)
vÆ
;

2303 
p
 = 
q
;

2305 
cmd
->
›code
 = opcode;

2306 
cmd
->
Àn
 = (cmd->À¿& (
F_NOT
 | 
F_OR
)) | 1;

2307 
cmd
->
¨g1
 = (
£t
 & 0xffË| ( (
˛ór
 & 0xff) << 8);

2308 
	}
}

2312 
	$ùfw_dñëe
(*
av
[])

2314 
uöt32_t
 
ruÀnum
;

2315 
i
;

2316 
exôvÆ
 = 
EX_OK
;

2317 
do_£t
 = 0;

2319 
av
++;

2320 
	`NEED1
("missingÑule specification");

2321 i‡–*
av
 && 
	`_sub°rcmp
(*av, "set") == 0) {

2325 i‡(
co
.
u£_£t
)

2326 
	`îrx
(
EX_DATAERR
, "invalid syntax");

2327 
do_£t
 = 1;

2328 
av
++;

2332 *
av
 && 
	`isdigô
(**av)) {

2333 
i
 = 
	`©oi
(*
av
);áv++;

2334 i‡(
co
.
do_«t
) {

2335 
exôvÆ
 = 
	`do_cmd
(
IP_FW_NAT_DEL
, &
i
,  i);

2336 i‡(
exôvÆ
) {

2337 
exôvÆ
 = 
EX_UNAVAILABLE
;

2338 
	`w¨n
("ruÀ %uÇŸávaûabÀ", 
i
);

2340 } i‡(
co
.
do_pùe
) {

2341 
exôvÆ
 = 
	`ùfw_dñëe_pùe
(
co
.
do_pùe
, 
i
);

2343 i‡(
co
.
u£_£t
)

2344 
ruÀnum
 = (
i
 & 0xffff) | (5 << 24) |

2345 ((
co
.
u£_£t
 - 1) << 16);

2347 
ruÀnum
 = (
i
 & 0xffffË| (
do_£t
 << 24);

2348 
i
 = 
	`do_cmd
(
IP_FW_DEL
, &
ruÀnum
, Ñulenum);

2349 i‡(
i
) {

2350 
exôvÆ
 = 
EX_UNAVAILABLE
;

2351 
	`w¨n
("rule %u: setsockopt(IP_FW_DEL)",

2352 
ruÀnum
);

2356 i‡(
exôvÆ
 !
EX_OK
)

2357 
	`exô
(
exôvÆ
);

2358 
	}
}

2369 
	$fûl_iÁ˚
(
ùfw_ö¢_if
 *
cmd
, *
¨g
)

2371 
cmd
->
«me
[0] = '\0';

2372 
cmd
->
o
.
Àn
 |
	`F_INSN_SIZE
(
ùfw_ö¢_if
);

2375 i‡(
	`°rcmp
(
¨g
, "any") == 0)

2376 
cmd
->
o
.
Àn
 = 0;

2377 i‡(!
	`isdigô
(*
¨g
)) {

2378 
	`°æ˝y
(
cmd
->
«me
, 
¨g
, (cmd->name));

2379 
cmd
->
p
.
glob
 = 
	`°Ωbrk
(
¨g
, "*?["Ë!
NULL
 ? 1 : 0;

2380 } i‡(!
	`öë_©⁄
(
¨g
, &
cmd
->
p
.
ù
))

2381 
	`îrx
(
EX_DATAERR
, "bad i∞addªs†``%s''", 
¨g
);

2382 
	}
}

2385 
	$gë_mac_addr_mask
(c⁄° *
p
, 
uöt8_t
 *
addr
, uöt8_à*
mask
)

2387 
i
;

2388 
size_t
 
l
;

2389 *
≠
, *
±r
, *
›å
;

2390 
ëhî_addr
 *
mac
;

2391 c⁄° *
mac£t
 = "0123456789abcdefABCDEF:";

2393 i‡(
	`°rcmp
(
p
, "any") == 0) {

2394 
i
 = 0; i < 
ETHER_ADDR_LEN
; i++)

2395 
addr
[
i
] = 
mask
[i] = 0;

2399 
›å
 = 
±r
 = 
	`°rdup
(
p
);

2400 i‡((
≠
 = 
	`°r£p
(&
±r
, "&/")Ë!
NULL
 && *ap != 0) {

2401 
l
 = 
	`°æí
(
≠
);

2402 i‡(
	`°r•n
(
≠
, 
mac£t
Ë!
l
 || (
mac
 = 
	`ëhî_©⁄
◊p)Ë=
NULL
)

2403 
	`îrx
(
EX_DATAERR
, "Incorrect MACáddress");

2404 
	`bc›y
(
mac
, 
addr
, 
ETHER_ADDR_LEN
);

2406 
	`îrx
(
EX_DATAERR
, "Incorrect MACáddress");

2408 i‡(
±r
 !
NULL
) {

2409 i‡(
p
[
±r
 - 
›å
 - 1] == '/') {

2410 
ml
 = 
	`°πﬁ
(
±r
, &
≠
, 10);

2411 i‡(*
≠
 !0 || 
ml
 > 
ETHER_ADDR_LEN
 * 8 || ml < 0)

2412 
	`îrx
(
EX_DATAERR
, "Incorrect maskÜength");

2413 
i
 = 0; 
ml
 > 0 && i < 
ETHER_ADDR_LEN
; ml -= 8, i++)

2414 
mask
[
i
] = (
ml
 >= 8) ? 0xff: (~0) << (8 - ml);

2416 
l
 = 
	`°æí
(
±r
);

2417 i‡(
	`°r•n
(
±r
, 
mac£t
Ë!
l
 ||

2418 (
mac
 = 
	`ëhî_©⁄
(
±r
)Ë=
NULL
)

2419 
	`îrx
(
EX_DATAERR
, "Incorrect mask");

2420 
	`bc›y
(
mac
, 
mask
, 
ETHER_ADDR_LEN
);

2423 
i
 = 0; i < 
ETHER_ADDR_LEN
; i++)

2424 
mask
[
i
] = 0xff;

2426 
i
 = 0; i < 
ETHER_ADDR_LEN
; i++)

2427 
addr
[
i
] &
mask
[i];

2429 
	`‰ì
(
›å
);

2430 
	}
}

2437 
ùfw_ö¢
 *

2438 
	$√xt_cmd
(
ùfw_ö¢
 *
cmd
)

2440 
cmd
 +
	`F_LEN
(cmd);

2441 
	`bzîo
(
cmd
, (*cmd));

2442  
cmd
;

2443 
	}
}

2449 
	$fûl_commít
(
ùfw_ö¢
 *
cmd
, **
av
)

2451 
i
, 
l
;

2452 *
p
 = (*)(
cmd
 + 1);

2454 
cmd
->
›code
 = 
O_NOP
;

2455 
cmd
->
Àn
 = (cmd->À¿& (
F_NOT
 | 
F_OR
));

2458 
i
 = 0, 
l
 = 0; 
av
[i] !
NULL
; i++)

2459 
l
 +
	`°æí
(
av
[
i
]) + 1;

2460 i‡(
l
 == 0)

2462 i‡(
l
 > 84)

2463 
	`îrx
(
EX_DATAERR
,

2465 
l
 = 1 + (l+3)/4;

2466 
cmd
->
Àn
 = (cmd->À¿& (
F_NOT
 | 
F_OR
)Ë| 
l
;

2467 
i
 = 0; 
av
[i] !
NULL
; i++) {

2468 
	`°r˝y
(
p
, 
av
[
i
]);

2469 
p
 +
	`°æí
(
av
[
i
]);

2470 *
p
++ = ' ';

2472 *(--
p
) = '\0';

2473 
	}
}

2480 
	$fûl_cmd
(
ùfw_ö¢
 *
cmd
, 
ùfw_›codes
 
›code
, 
Êags
, 
uöt16_t
 
¨g
)

2482 
cmd
->
›code
 = opcode;

2483 
cmd
->
Àn
 = ((cmd->À¿| 
Êags
Ë& (
F_NOT
 | 
F_OR
)) | 1;

2484 
cmd
->
¨g1
 = 
¨g
;

2485 
	}
}

2491 
ùfw_ö¢
 *

2492 
	$add_mac
(
ùfw_ö¢
 *
cmd
, *
av
[])

2494 
ùfw_ö¢_mac
 *
mac
;

2496 i‡––
av
[0] =
NULL
 ) || (áv[1] == NULL ) )

2497 
	`îrx
(
EX_DATAERR
, "MAC dst src");

2499 
cmd
->
›code
 = 
O_MACADDR2
;

2500 
cmd
->
Àn
 = (cmd->À¿& (
F_NOT
 | 
F_OR
)Ë| 
	`F_INSN_SIZE
(
ùfw_ö¢_mac
);

2502 
mac
 = (
ùfw_ö¢_mac
 *)
cmd
;

2503 
	`gë_mac_addr_mask
(
av
[0], 
mac
->
addr
, mac->
mask
);

2504 
	`gë_mac_addr_mask
(
av
[1], &(
mac
->
addr
[
ETHER_ADDR_LEN
]),

2505 &(
mac
->
mask
[
ETHER_ADDR_LEN
]));

2506  
cmd
;

2507 
	}
}

2509 
ùfw_ö¢
 *

2510 
	$add_ma˘y≥
(
ùfw_ö¢
 *
cmd
, *
av
)

2512 i‡(!
av
)

2513 
	`îrx
(
EX_DATAERR
, "missing MACÅype");

2514 i‡(
	`°rcmp
(
av
, "any") != 0) {

2515 
	`fûl_√wp‹ts
((
ùfw_ö¢_u16
 *)
cmd
, 
av
, 
IPPROTO_ETHERTYPE
);

2516 
cmd
->
›code
 = 
O_MAC_TYPE
;

2517  
cmd
;

2519  
NULL
;

2520 
	}
}

2522 
ùfw_ö¢
 *

2523 
	$add_¥Ÿo0
(
ùfw_ö¢
 *
cmd
, *
av
, 
u_ch¨
 *
¥Ÿ›
)

2525 
¥Ÿ€¡
 *
≥
;

2526 *
ï
;

2527 
¥Ÿo
;

2529 
¥Ÿo
 = 
	`°πﬁ
(
av
, &
ï
, 10);

2530 i‡(*
ï
 !'\0' || 
¥Ÿo
 <= 0) {

2531 i‡((
≥
 = 
	`gë¥Ÿoby«me
(
av
)Ë=
NULL
)

2532  
NULL
;

2533 
¥Ÿo
 = 
≥
->
p_¥Ÿo
;

2536 
	`fûl_cmd
(
cmd
, 
O_PROTO
, 0, 
¥Ÿo
);

2537 *
¥Ÿ›
 = 
¥Ÿo
;

2538  
cmd
;

2539 
	}
}

2541 
ùfw_ö¢
 *

2542 
	$add_¥Ÿo
(
ùfw_ö¢
 *
cmd
, *
av
, 
u_ch¨
 *
¥Ÿ›
)

2544 
u_ch¨
 
¥Ÿo
 = 
IPPROTO_IP
;

2546 i‡(
	`_sub°rcmp
(
av
, "Æl"Ë=0 || 
	`°rcmp
(av, "ip") == 0)

2548 i‡(
	`°rcmp
(
av
, "ip4") == 0)

2550 
	`fûl_cmd
(
cmd
, 
O_IP4
, 0, 0);

2551 i‡(
	`°rcmp
(
av
, "ip6") == 0) {

2553 
¥Ÿo
 = 
IPPROTO_IPV6
;

2554 
	`fûl_cmd
(
cmd
, 
O_IP6
, 0, 0);

2556  
	`add_¥Ÿo0
(
cmd
, 
av
, 
¥Ÿ›
);

2558 *
¥Ÿ›
 = 
¥Ÿo
;

2559  
cmd
;

2560 
	}
}

2562 
ùfw_ö¢
 *

2563 
	$add_¥Ÿo_com∑t
(
ùfw_ö¢
 *
cmd
, *
av
, 
u_ch¨
 *
¥Ÿ›
)

2565 
u_ch¨
 
¥Ÿo
 = 
IPPROTO_IP
;

2567 i‡(
	`_sub°rcmp
(
av
, "Æl"Ë=0 || 
	`°rcmp
(av, "ip") == 0)

2569 i‡(
	`°rcmp
(
av
, "ipv4") == 0 || strcmp(av, "ip4") == 0)

2571 
	`fûl_cmd
(
cmd
, 
O_IP4
, 0, 0);

2572 i‡(
	`°rcmp
(
av
, "ipv6") == 0 || strcmp(av, "ip6") == 0) {

2574 
¥Ÿo
 = 
IPPROTO_IPV6
;

2575 
	`fûl_cmd
(
cmd
, 
O_IP6
, 0, 0);

2577  
	`add_¥Ÿo0
(
cmd
, 
av
, 
¥Ÿ›
);

2579 *
¥Ÿ›
 = 
¥Ÿo
;

2580  
cmd
;

2581 
	}
}

2583 
ùfw_ö¢
 *

2584 
	$add_§cù
(
ùfw_ö¢
 *
cmd
, *
av
)

2586 
	`fûl_ù
((
ùfw_ö¢_ù
 *)
cmd
, 
av
);

2587 i‡(
cmd
->
›code
 =
O_IP_DST_SET
)

2588 
cmd
->
›code
 = 
O_IP_SRC_SET
;

2589 i‡(
cmd
->
›code
 =
O_IP_DST_LOOKUP
)

2590 
cmd
->
›code
 = 
O_IP_SRC_LOOKUP
;

2591 i‡(
	`F_LEN
(
cmd
Ë=
	`F_INSN_SIZE
(
ùfw_ö¢
))

2592 
cmd
->
›code
 = 
O_IP_SRC_ME
;

2593 i‡(
	`F_LEN
(
cmd
Ë=
	`F_INSN_SIZE
(
ùfw_ö¢_u32
))

2594 
cmd
->
›code
 = 
O_IP_SRC
;

2596 
cmd
->
›code
 = 
O_IP_SRC_MASK
;

2597  
cmd
;

2598 
	}
}

2600 
ùfw_ö¢
 *

2601 
	$add_d°ù
(
ùfw_ö¢
 *
cmd
, *
av
)

2603 
	`fûl_ù
((
ùfw_ö¢_ù
 *)
cmd
, 
av
);

2604 i‡(
cmd
->
›code
 =
O_IP_DST_SET
)

2606 i‡(
cmd
->
›code
 =
O_IP_DST_LOOKUP
)

2608 i‡(
	`F_LEN
(
cmd
Ë=
	`F_INSN_SIZE
(
ùfw_ö¢
))

2609 
cmd
->
›code
 = 
O_IP_DST_ME
;

2610 i‡(
	`F_LEN
(
cmd
Ë=
	`F_INSN_SIZE
(
ùfw_ö¢_u32
))

2611 
cmd
->
›code
 = 
O_IP_DST
;

2613 
cmd
->
›code
 = 
O_IP_DST_MASK
;

2614  
cmd
;

2615 
	}
}

2617 
ùfw_ö¢
 *

2618 
	$add_p‹ts
(
ùfw_ö¢
 *
cmd
, *
av
, 
u_ch¨
 
¥Ÿo
, 
›code
)

2621 i‡(
	`_sub°rcmp
(
av
, "any") == 0) {

2622  
NULL
;

2623 } i‡(
	`fûl_√wp‹ts
((
ùfw_ö¢_u16
 *)
cmd
, 
av
, 
¥Ÿo
)) {

2625 
cmd
->
›code
 = opcode;

2626  
cmd
;

2628  
NULL
;

2629 
	}
}

2631 
ùfw_ö¢
 *

2632 
	$add_§c
(
ùfw_ö¢
 *
cmd
, *
av
, 
u_ch¨
 
¥Ÿo
)

2634 
ö6_addr
 
a
;

2635 *
ho°
, *
ch
;

2636 
ùfw_ö¢
 *
ªt
 = 
NULL
;

2638 i‡((
ho°
 = 
	`°rdup
(
av
)Ë=
NULL
)

2639  
NULL
;

2640 i‡((
ch
 = 
	`°ºchr
(
ho°
, '/')Ë!
NULL
)

2641 *
ch
 = '\0';

2643 i‡(
¥Ÿo
 =
IPPROTO_IPV6
 || 
	`°rcmp
(
av
, "me6") == 0 ||

2644 
	`öë_±⁄
(
AF_INET6
, 
ho°
, &
a
) == 1)

2645 
ªt
 = 
	`add_§cù6
(
cmd
, 
av
);

2647 i‡(
ªt
 =
NULL
 && (
¥Ÿo
 =
IPPROTO_IP
 || 
	`°rcmp
(
av
, "me") == 0 ||

2648 
	`öë_±⁄
(
AF_INET6
, 
ho°
, &
a
) != 1))

2649 
ªt
 = 
	`add_§cù
(
cmd
, 
av
);

2650 i‡(
ªt
 =
NULL
 && 
	`°rcmp
(
av
, "any") != 0)

2651 
ªt
 = 
cmd
;

2653 
	`‰ì
(
ho°
);

2654  
ªt
;

2655 
	}
}

2657 
ùfw_ö¢
 *

2658 
	$add_d°
(
ùfw_ö¢
 *
cmd
, *
av
, 
u_ch¨
 
¥Ÿo
)

2660 
ö6_addr
 
a
;

2661 *
ho°
, *
ch
;

2662 
ùfw_ö¢
 *
ªt
 = 
NULL
;

2664 i‡((
ho°
 = 
	`°rdup
(
av
)Ë=
NULL
)

2665  
NULL
;

2666 i‡((
ch
 = 
	`°ºchr
(
ho°
, '/')Ë!
NULL
)

2667 *
ch
 = '\0';

2669 i‡(
¥Ÿo
 =
IPPROTO_IPV6
 || 
	`°rcmp
(
av
, "me6") == 0 ||

2670 
	`öë_±⁄
(
AF_INET6
, 
ho°
, &
a
) == 1)

2671 
ªt
 = 
	`add_d°ù6
(
cmd
, 
av
);

2673 i‡(
ªt
 =
NULL
 && (
¥Ÿo
 =
IPPROTO_IP
 || 
	`°rcmp
(
av
, "me") == 0 ||

2674 
	`öë_±⁄
(
AF_INET6
, 
ho°
, &
a
) != 1))

2675 
ªt
 = 
	`add_d°ù
(
cmd
, 
av
);

2676 i‡(
ªt
 =
NULL
 && 
	`°rcmp
(
av
, "any") != 0)

2677 
ªt
 = 
cmd
;

2679 
	`‰ì
(
ho°
);

2680  
ªt
;

2681 
	}
}

2696 
	$ùfw_add
(*
av
[])

2704 
uöt32_t
 
ruÀbuf
[255], 
a˘buf
[255], 
cmdbuf
[255];

2706 
ùfw_ö¢
 *
§c
, *
d°
, *
cmd
, *
a˘i⁄
, *
¥ev
=
NULL
;

2707 
ùfw_ö¢
 *
fú°_cmd
;

2709 
ù_fw
 *
ruÀ
;

2714 
ùfw_ö¢
 *
have_°©e
 = 
NULL
;

2715 
ùfw_ö¢
 *
have_log
 = 
NULL
, *
have_Ætq
 = NULL, *
have_èg
 = NULL;

2716 
size_t
 
Àn
;

2718 
i
;

2720 
›í_∑r
 = 0;

2723 
u_ch¨
 
¥Ÿo
 = 
IPPROTO_IP
;

2725 
m©ch_¥ob
 = 1;

2727 
	`bzîo
(
a˘buf
, (actbuf));

2728 
	`bzîo
(
cmdbuf
, (cmdbuf));

2729 
	`bzîo
(
ruÀbuf
, (rulebuf));

2731 
ruÀ
 = (
ù_fw
 *)
ruÀbuf
;

2732 
cmd
 = (
ùfw_ö¢
 *)
cmdbuf
;

2733 
a˘i⁄
 = (
ùfw_ö¢
 *)
a˘buf
;

2735 
av
++;

2738 i‡(
av
[0] && 
	`isdigô
(**av)) {

2739 
ruÀ
->
ruÀnum
 = 
	`©oi
(*
av
);

2740 
av
++;

2744 i‡(
av
[0] &&áv[1] && 
	`_sub°rcmp
(*av, "set") == 0) {

2745 
£t
 = 
	`°πoul
(
av
[1], 
NULL
, 10);

2746 i‡(
£t
 < 0 || së > 
RESVD_SET
)

2747 
	`îrx
(
EX_DATAERR
, "ûÀgÆ së %s", 
av
[1]);

2748 
ruÀ
->
£t
 = set;

2749 
av
 += 2;

2753 i‡(
av
[0] &&áv[1] && 
	`_sub°rcmp
(*av, "prob") == 0) {

2754 
m©ch_¥ob
 = 
	`°πod
(
av
[1], 
NULL
);

2756 i‡(
m©ch_¥ob
 <= 0 || match_prob > 1)

2757 
	`îrx
(
EX_DATAERR
, "ûÀgÆ m©chÖrob. %s", 
av
[1]);

2758 
av
 += 2;

2762 
	`NEED1
("missingáction");

2763 
i
 = 
	`m©ch_tokí
(
ruÀ_a˘i⁄s
, *
av
);

2764 
av
++;

2765 
a˘i⁄
->
Àn
 = 1;

2766 
i
) {

2767 
TOK_CHECKSTATE
:

2768 
have_°©e
 = 
a˘i⁄
;

2769 
a˘i⁄
->
›code
 = 
O_CHECK_STATE
;

2772 
TOK_ACCEPT
:

2773 
a˘i⁄
->
›code
 = 
O_ACCEPT
;

2776 
TOK_DENY
:

2777 
a˘i⁄
->
›code
 = 
O_DENY
;

2778 
a˘i⁄
->
¨g1
 = 0;

2781 
TOK_REJECT
:

2782 
a˘i⁄
->
›code
 = 
O_REJECT
;

2783 
a˘i⁄
->
¨g1
 = 
ICMP_UNREACH_HOST
;

2786 
TOK_RESET
:

2787 
a˘i⁄
->
›code
 = 
O_REJECT
;

2788 
a˘i⁄
->
¨g1
 = 
ICMP_REJECT_RST
;

2791 
TOK_RESET6
:

2792 
a˘i⁄
->
›code
 = 
O_UNREACH6
;

2793 
a˘i⁄
->
¨g1
 = 
ICMP6_UNREACH_RST
;

2796 
TOK_UNREACH
:

2797 
a˘i⁄
->
›code
 = 
O_REJECT
;

2798 
	`NEED1
("missingÑeject code");

2799 
	`fûl_ªje˘_code
(&
a˘i⁄
->
¨g1
, *
av
);

2800 
av
++;

2803 
TOK_UNREACH6
:

2804 
a˘i⁄
->
›code
 = 
O_UNREACH6
;

2805 
	`NEED1
("missing unreach code");

2806 
	`fûl_uƒóch6_code
(&
a˘i⁄
->
¨g1
, *
av
);

2807 
av
++;

2810 
TOK_COUNT
:

2811 
a˘i⁄
->
›code
 = 
O_COUNT
;

2814 
TOK_NAT
:

2815 
a˘i⁄
->
›code
 = 
O_NAT
;

2816 
a˘i⁄
->
Àn
 = 
	`F_INSN_SIZE
(
ùfw_ö¢_«t
);

2817 
chk¨g
;

2819 
TOK_QUEUE
:

2820 
a˘i⁄
->
›code
 = 
O_QUEUE
;

2821 
chk¨g
;

2822 
TOK_PIPE
:

2823 
a˘i⁄
->
›code
 = 
O_PIPE
;

2824 
chk¨g
;

2825 
TOK_SKIPTO
:

2826 
a˘i⁄
->
›code
 = 
O_SKIPTO
;

2827 
chk¨g
;

2828 
TOK_NETGRAPH
:

2829 
a˘i⁄
->
›code
 = 
O_NETGRAPH
;

2830 
chk¨g
;

2831 
TOK_NGTEE
:

2832 
a˘i⁄
->
›code
 = 
O_NGTEE
;

2833 
chk¨g
;

2834 
TOK_DIVERT
:

2835 
a˘i⁄
->
›code
 = 
O_DIVERT
;

2836 
chk¨g
;

2837 
TOK_TEE
:

2838 
a˘i⁄
->
›code
 = 
O_TEE
;

2839 
chk¨g
;

2840 
TOK_CALL
:

2841 
a˘i⁄
->
›code
 = 
O_CALLRETURN
;

2842 
chk¨g
:

2843 i‡(!
av
[0])

2844 
	`îrx
(
EX_USAGE
, "missögárgumíàf‹ %s", *(
av
 - 1));

2845 i‡(
	`isdigô
(**
av
)) {

2846 
a˘i⁄
->
¨g1
 = 
	`°πoul
(*
av
, 
NULL
, 10);

2847 i‡(
a˘i⁄
->
¨g1
 <0 ||á˘i⁄->¨g1 >
IP_FW_TABLEARG
)

2848 
	`îrx
(
EX_DATAERR
, "illegalárgument for %s",

2849 *(
av
 - 1));

2850 } i‡(
	`_sub°rcmp
(*
av
, "tablearg") == 0) {

2851 
a˘i⁄
->
¨g1
 = 
IP_FW_TABLEARG
;

2852 } i‡(
i
 =
TOK_DIVERT
 || i =
TOK_TEE
) {

2853 
£rvít
 *
s
;

2854 
	`£t£rvít
(1);

2855 
s
 = 
	`gë£rvby«me
(
av
[0], "divert");

2856 i‡(
s
 !
NULL
)

2857 
a˘i⁄
->
¨g1
 = 
	`¡ohs
(
s
->
s_p‹t
);

2859 
	`îrx
(
EX_DATAERR
, "illegal divert/teeÖort");

2861 
	`îrx
(
EX_DATAERR
, "ûÀgÆárgumíàf‹ %s", *(
av
 - 1));

2862 
av
++;

2865 
TOK_FORWARD
: {

2866 
ùfw_ö¢_ß
 *
p
 = (ùfw_ö¢_ß *)
a˘i⁄
;

2867 *
s
, *
íd
;

2869 
	`NEED1
("missing forwardáddress[:port]");

2871 
a˘i⁄
->
›code
 = 
O_FORWARD_IP
;

2872 
a˘i⁄
->
Àn
 = 
	`F_INSN_SIZE
(
ùfw_ö¢_ß
);

2879 
p
->
ß
.
sö_Ámûy
 = 
AF_INET
;

2880 
p
->
ß
.
sö_Àn
 = (
sockaddr_ö
);

2881 
p
->
ß
.
sö_p‹t
 = 0;

2885 
s
 = 
	`°rchr
(*
av
, ':');

2886 i‡(
s
 =
NULL
)

2887 
s
 = 
	`°rchr
(*
av
, ',');

2888 i‡(
s
 !
NULL
) {

2889 *(
s
++) = '\0';

2890 
i
 = 
	`°π›‹t
(
s
, &
íd
, 0 , 0 );

2891 i‡(
s
 =
íd
)

2892 
	`îrx
(
EX_DATAERR
,

2893 "ûÀgÆ f‹w¨dögÖ‹à``%s''", 
s
);

2894 
p
->
ß
.
sö_p‹t
 = (
u_sh‹t
)
i
;

2896 i‡(
	`_sub°rcmp
(*
av
, "tablearg") == 0)

2897 
p
->
ß
.
sö_addr
.
s_addr
 = 
INADDR_ANY
;

2899 
	`lookup_ho°
(*
av
, &(
p
->
ß
.
sö_addr
));

2900 
av
++;

2903 
TOK_COMMENT
:

2905 
a˘i⁄
->
›code
 = 
O_COUNT
;

2906 
av
--;

2909 
TOK_SETFIB
:

2911 
numfibs
;

2912 
size_t
 
ötsize
 = ();

2914 
a˘i⁄
->
›code
 = 
O_SETFIB
;

2915 
	`NEED1
("missing fibÇumber");

2916 
a˘i⁄
->
¨g1
 = 
	`°πoul
(*
av
, 
NULL
, 10);

2917 i‡(
	`sys˘lby«me
("√t.fibs", &
numfibs
, &
ötsize
, 
NULL
, 0) == -1)

2918 
	`îrx
(
EX_DATAERR
, "fibsÇot suported.\n");

2919 i‡(
a˘i⁄
->
¨g1
 >
numfibs
)

2920 
	`îrx
(
EX_DATAERR
, "fibÅooÜarge.\n");

2921 
av
++;

2925 
TOK_REASS
:

2926 
a˘i⁄
->
›code
 = 
O_REASS
;

2929 
TOK_RETURN
:

2930 
	`fûl_cmd
(
a˘i⁄
, 
O_CALLRETURN
, 
F_NOT
, 0);

2934 
	`îrx
(
EX_DATAERR
, "övÆidá˘i⁄ %s\n", 
av
[-1]);

2936 
a˘i⁄
 = 
	`√xt_cmd
(action);

2945 
av
[0] !
NULL
 && (
i
 = 
	`m©ch_tokí
(
ruÀ_a˘i⁄_∑øms
, *av)) != -1) {

2946 
av
++;

2947 
i
) {

2948 
TOK_LOG
:

2950 
ùfw_ö¢_log
 *
c
 = (ùfw_ö¢_log *)
cmd
;

2951 
l
;

2953 i‡(
have_log
)

2954 
	`îrx
(
EX_DATAERR
,

2956 
have_log
 = (
ùfw_ö¢
 *)
c
;

2957 
cmd
->
Àn
 = 
	`F_INSN_SIZE
(
ùfw_ö¢_log
);

2958 
cmd
->
›code
 = 
O_LOG
;

2959 i‡(
av
[0] && 
	`_sub°rcmp
(*av, "logamount") == 0) {

2960 
av
++;

2961 
	`NEED1
("logamountÑequiresárgument");

2962 
l
 = 
	`©oi
(*
av
);

2963 i‡(
l
 < 0)

2964 
	`îrx
(
EX_DATAERR
,

2966 
c
->
max_log
 = 
l
;

2967 
av
++;

2969 
Àn
 = (
c
->
max_log
);

2970 i‡(
	`sys˘lby«me
("net.inet.ip.fw.verbose_limit",

2971 &
c
->
max_log
, &
Àn
, 
NULL
, 0) == -1)

2972 
	`îrx
(1, "sysctlbyname(\"%s\")",

2978 #i‚de‡
NO_ALTQ


2979 
TOK_ALTQ
:

2981 
ùfw_ö¢_Ætq
 *
a
 = (ùfw_ö¢_Ætq *)
cmd
;

2983 
	`NEED1
("missingáltq queueÇame");

2984 i‡(
have_Ætq
)

2985 
	`îrx
(
EX_DATAERR
,

2987 
have_Ætq
 = (
ùfw_ö¢
 *)
a
;

2988 
cmd
->
Àn
 = 
	`F_INSN_SIZE
(
ùfw_ö¢_Ætq
);

2989 
cmd
->
›code
 = 
O_ALTQ
;

2990 
a
->
qid
 = 
	`Ætq_«me_to_qid
(*
av
);

2991 
av
++;

2996 
TOK_TAG
:

2997 
TOK_UNTAG
: {

2998 
uöt16_t
 
èg
;

3000 i‡(
have_èg
)

3001 
	`îrx
(
EX_USAGE
, "tagánd untag cannot be "

3003 
	`GET_UINT_ARG
(
èg
, 
IPFW_ARG_MIN
, 
IPFW_ARG_MAX
, 
i
,

3004 
ruÀ_a˘i⁄_∑øms
);

3005 
have_èg
 = 
cmd
;

3006 
	`fûl_cmd
(
cmd
, 
O_TAG
, (
i
 =
TOK_TAG
Ë? 0: 
F_NOT
, 
èg
);

3007 
av
++;

3012 
	`ab‹t
();

3014 
cmd
 = 
	`√xt_cmd
(cmd);

3017 i‡(
have_°©e
)

3018 
d⁄e
;

3020 
	#OR_START
(
èrgë
) \

3021 i‡(
av
[0] && (*av[0] == '(' || *av[0] == '{')) { \

3022 i‡(
›í_∑r
) \

3023 
	`îrx
(
EX_USAGE
, "nested \"(\"Çotállowed\n"); \

3024 
¥ev
 = 
NULL
; \

3025 
›í_∑r
 = 1; \

3026 i‡–(
av
[0])[1] == '\0') { \

3027 
av
++; \

3029 (*
av
)++; \

3031 
èrgë
: \

3032 

	)

3034 
	#CLOSE_PAR
 \

3035 i‡(
›í_∑r
) { \

3036 i‡(
av
[0] && ( \

3037 
	`°rcmp
(*
av
, ")") == 0 || \

3038 
	`°rcmp
(*
av
, "}") == 0)) { \

3039 
¥ev
 = 
NULL
; \

3040 
›í_∑r
 = 0; \

3041 
av
++; \

3043 
	`îrx
(
EX_USAGE
, "missing \")\"\n"); \

3044 }

	)

3046 
	#NOT_BLOCK
 \

3047 i‡(
av
[0] && 
	`_sub°rcmp
(*av, "not") == 0) { \

3048 i‡(
cmd
->
Àn
 & 
F_NOT
) \

3049 
	`îrx
(
EX_USAGE
, "double \"not\"Çotállowed\n"); \

3050 
cmd
->
Àn
 |
F_NOT
; \

3051 
av
++; \

3052 }

	)

3054 
	#OR_BLOCK
(
èrgë
) \

3055 i‡(
av
[0] && 
	`_sub°rcmp
(*av, "or") == 0) { \

3056 i‡(
¥ev
 =
NULL
 || 
›í_∑r
 == 0) \

3057 
	`îrx
(
EX_DATAERR
, "invalid OR block"); \

3058 
¥ev
->
Àn
 |
F_OR
; \

3059 
av
++; \

3060 
èrgë
; \

3062 
CLOSE_PAR
;

	)

3064 
fú°_cmd
 = 
cmd
;

3072 
NOT_BLOCK
;

3073 
	`NEED1
("missingÖrotocol");

3074 i‡(
	`_sub°rcmp
(*
av
, "MAC") == 0 ||

3075 
	`_sub°rcmp
(*
av
, "mac") == 0) {

3076 
av
++;

3077 
	`add_mac
(
cmd
, 
av
);

3078 
cmd
 = 
	`√xt_cmd
(cmd);

3079 
av
 += 2;

3080 
NOT_BLOCK
;

3081 
	`NEED1
("missing macÅype");

3082 i‡(
	`add_ma˘y≥
(
cmd
, 
av
[0]))

3083 
cmd
 = 
	`√xt_cmd
(cmd);

3084 
av
++;

3085 
ªad_›ti⁄s
;

3092 
	`OR_START
(
gë_¥Ÿo
);

3093 
NOT_BLOCK
;

3094 
	`NEED1
("missingÖrotocol");

3095 i‡(
	`add_¥Ÿo_com∑t
(
cmd
, *
av
, &
¥Ÿo
)) {

3096 
av
++;

3097 i‡(
	`F_LEN
(
cmd
) != 0) {

3098 
¥ev
 = 
cmd
;

3099 
cmd
 = 
	`√xt_cmd
(cmd);

3101 } i‡(
fú°_cmd
 !
cmd
) {

3102 
	`îrx
(
EX_DATAERR
, "övÆidÖrŸocﬁ ``%s''", *
av
);

3104 
ªad_›ti⁄s
;

3105 
	`OR_BLOCK
(
gë_¥Ÿo
);

3110 i‡((
av
[0] =
NULL
Ë|| 
	`_sub°rcmp
(*av, "from") != 0)

3111 
	`îrx
(
EX_USAGE
, "missing ``from''");

3112 
av
++;

3117 
	`OR_START
(
sour˚_ù
);

3118 
NOT_BLOCK
;

3119 
	`NEED1
("missing sourceáddress");

3120 i‡(
	`add_§c
(
cmd
, *
av
, 
¥Ÿo
)) {

3121 
av
++;

3122 i‡(
	`F_LEN
(
cmd
) != 0) {

3123 
¥ev
 = 
cmd
;

3124 
cmd
 = 
	`√xt_cmd
(cmd);

3127 
	`îrx
(
EX_USAGE
, "bad sour˚áddªs†%s", *
av
);

3128 
	`OR_BLOCK
(
sour˚_ù
);

3133 
NOT_BLOCK
;

3134 i‡–
av
[0] !
NULL
 ) {

3135 i‡(
	`_sub°rcmp
(*
av
, "any") == 0 ||

3136 
	`add_p‹ts
(
cmd
, *
av
, 
¥Ÿo
, 
O_IP_SRCPORT
)) {

3137 
av
++;

3138 i‡(
	`F_LEN
(
cmd
) != 0)

3139 
cmd
 = 
	`√xt_cmd
(cmd);

3146 i‡–(
av
[0] =
NULL
Ë|| 
	`_sub°rcmp
(*av, "to") != 0 )

3147 
	`îrx
(
EX_USAGE
, "missing ``to''");

3148 
av
++;

3153 
	`OR_START
(
de°_ù
);

3154 
NOT_BLOCK
;

3155 
	`NEED1
("missing dstáddress");

3156 i‡(
	`add_d°
(
cmd
, *
av
, 
¥Ÿo
)) {

3157 
av
++;

3158 i‡(
	`F_LEN
(
cmd
) != 0) {

3159 
¥ev
 = 
cmd
;

3160 
cmd
 = 
	`√xt_cmd
(cmd);

3163 
	`îrx
–
EX_USAGE
, "bad de°ö©i⁄áddªs†%s", *
av
);

3164 
	`OR_BLOCK
(
de°_ù
);

3169 
NOT_BLOCK
;

3170 i‡(
av
[0]) {

3171 i‡(
	`_sub°rcmp
(*
av
, "any") == 0 ||

3172 
	`add_p‹ts
(
cmd
, *
av
, 
¥Ÿo
, 
O_IP_DSTPORT
)) {

3173 
av
++;

3174 i‡(
	`F_LEN
(
cmd
) != 0)

3175 
cmd
 = 
	`√xt_cmd
(cmd);

3179 
ªad_›ti⁄s
:

3180 i‡(
av
[0] && 
fú°_cmd
 =
cmd
) {

3185 
ruÀ
->
_∑d
 = 1;

3187 
¥ev
 = 
NULL
;

3188  
av
[0] !
NULL
 ) {

3189 *
s
;

3190 
ùfw_ö¢_u32
 *
cmd32
;

3192 
s
 = *
av
;

3193 
cmd32
 = (
ùfw_ö¢_u32
 *)
cmd
;

3195 i‡(*
s
 == '!') {

3196 i‡(
cmd
->
Àn
 & 
F_NOT
)

3197 
	`îrx
(
EX_USAGE
, "double \"not\"Çotállowed\n");

3198 
cmd
->
Àn
 = 
F_NOT
;

3199 
s
++;

3201 
i
 = 
	`m©ch_tokí
(
ruÀ_›ti⁄s
, 
s
);

3202 
av
++;

3203 
i
) {

3204 
TOK_NOT
:

3205 i‡(
cmd
->
Àn
 & 
F_NOT
)

3206 
	`îrx
(
EX_USAGE
, "double \"not\"Çotállowed\n");

3207 
cmd
->
Àn
 = 
F_NOT
;

3210 
TOK_OR
:

3211 i‡(
›í_∑r
 =0 || 
¥ev
 =
NULL
)

3212 
	`îrx
(
EX_USAGE
, "invalid \"or\" block\n");

3213 
¥ev
->
Àn
 |
F_OR
;

3216 
TOK_STARTBRACE
:

3217 i‡(
›í_∑r
)

3218 
	`îrx
(
EX_USAGE
, "+nested \"(\"Çotállowed\n");

3219 
›í_∑r
 = 1;

3222 
TOK_ENDBRACE
:

3223 i‡(!
›í_∑r
)

3224 
	`îrx
(
EX_USAGE
, "+missing \")\"\n");

3225 
›í_∑r
 = 0;

3226 
¥ev
 = 
NULL
;

3229 
TOK_IN
:

3230 
	`fûl_cmd
(
cmd
, 
O_IN
, 0, 0);

3233 
TOK_OUT
:

3234 
cmd
->
Àn
 ^
F_NOT
;

3235 
	`fûl_cmd
(
cmd
, 
O_IN
, 0, 0);

3238 
TOK_DIVERTED
:

3239 
	`fûl_cmd
(
cmd
, 
O_DIVERTED
, 0, 3);

3242 
TOK_DIVERTEDLOOPBACK
:

3243 
	`fûl_cmd
(
cmd
, 
O_DIVERTED
, 0, 1);

3246 
TOK_DIVERTEDOUTPUT
:

3247 
	`fûl_cmd
(
cmd
, 
O_DIVERTED
, 0, 2);

3250 
TOK_FRAG
:

3251 
	`fûl_cmd
(
cmd
, 
O_FRAG
, 0, 0);

3254 
TOK_LAYER2
:

3255 
	`fûl_cmd
(
cmd
, 
O_LAYER2
, 0, 0);

3258 
TOK_XMIT
:

3259 
TOK_RECV
:

3260 
TOK_VIA
:

3261 
	`NEED1
("recv, xmit, viaÑequire interfaceÇame"

3263 
	`fûl_iÁ˚
((
ùfw_ö¢_if
 *)
cmd
, 
av
[0]);

3264 
av
++;

3265 i‡(
	`F_LEN
(
cmd
) == 0)

3267 i‡(
i
 =
TOK_XMIT
)

3268 
cmd
->
›code
 = 
O_XMIT
;

3269 i‡(
i
 =
TOK_RECV
)

3270 
cmd
->
›code
 = 
O_RECV
;

3271 i‡(
i
 =
TOK_VIA
)

3272 
cmd
->
›code
 = 
O_VIA
;

3275 
TOK_ICMPTYPES
:

3276 
	`NEED1
("icmptypesÑequiresÜist ofÅypes");

3277 
	`fûl_icm±y≥s
((
ùfw_ö¢_u32
 *)
cmd
, *
av
);

3278 
av
++;

3281 
TOK_ICMP6TYPES
:

3282 
	`NEED1
("icmptypesÑequiresÜist ofÅypes");

3283 
	`fûl_icmp6ty≥s
((
ùfw_ö¢_icmp6
 *)
cmd
, *
av
);

3284 
av
++;

3287 
TOK_IPTTL
:

3288 
	`NEED1
("ipttlÑequires TTL");

3289 i‡(
	`°Ωbrk
(*
av
, "-,")) {

3290 i‡(!
	`add_p‹ts
(
cmd
, *
av
, 0, 
O_IPTTL
))

3291 
	`îrx
(
EX_DATAERR
, "övÆid i±é %s", *
av
);

3293 
	`fûl_cmd
(
cmd
, 
O_IPTTL
, 0, 
	`°πoul
(*
av
, 
NULL
, 0));

3294 
av
++;

3297 
TOK_IPID
:

3298 
	`NEED1
("ipidÑequires id");

3299 i‡(
	`°Ωbrk
(*
av
, "-,")) {

3300 i‡(!
	`add_p‹ts
(
cmd
, *
av
, 0, 
O_IPID
))

3301 
	`îrx
(
EX_DATAERR
, "övÆid ipid %s", *
av
);

3303 
	`fûl_cmd
(
cmd
, 
O_IPID
, 0, 
	`°πoul
(*
av
, 
NULL
, 0));

3304 
av
++;

3307 
TOK_IPLEN
:

3308 
	`NEED1
("iplenÑequiresÜength");

3309 i‡(
	`°Ωbrk
(*
av
, "-,")) {

3310 i‡(!
	`add_p‹ts
(
cmd
, *
av
, 0, 
O_IPLEN
))

3311 
	`îrx
(
EX_DATAERR
, "övÆid i∞À¿%s", *
av
);

3313 
	`fûl_cmd
(
cmd
, 
O_IPLEN
, 0, 
	`°πoul
(*
av
, 
NULL
, 0));

3314 
av
++;

3317 
TOK_IPVER
:

3318 
	`NEED1
("ipverÑequires version");

3319 
	`fûl_cmd
(
cmd
, 
O_IPVER
, 0, 
	`°πoul
(*
av
, 
NULL
, 0));

3320 
av
++;

3323 
TOK_IPPRECEDENCE
:

3324 
	`NEED1
("ipprecedenceÑequires value");

3325 
	`fûl_cmd
(
cmd
, 
O_IPPRECEDENCE
, 0,

3326 (
	`°πoul
(*
av
, 
NULL
, 0) & 7) << 5);

3327 
av
++;

3330 
TOK_IPOPTS
:

3331 
	`NEED1
("missingárgument for ipoptions");

3332 
	`fûl_Êags
(
cmd
, 
O_IPOPT
, 
f_ù›ts
, *
av
);

3333 
av
++;

3336 
TOK_IPTOS
:

3337 
	`NEED1
("missingárgument for iptos");

3338 
	`fûl_Êags
(
cmd
, 
O_IPTOS
, 
f_ùtos
, *
av
);

3339 
av
++;

3342 
TOK_UID
:

3343 
	`NEED1
("uidÑequiresárgument");

3345 *
íd
;

3346 
uid_t
 
uid
;

3347 
∑sswd
 *
pwd
;

3349 
cmd
->
›code
 = 
O_UID
;

3350 
uid
 = 
	`°πoul
(*
av
, &
íd
, 0);

3351 
pwd
 = (*
íd
 ='\0'Ë? 
	`gëpwuid
(
uid
Ë: 
	`gëpw«m
(*
av
);

3352 i‡(
pwd
 =
NULL
)

3353 
	`îrx
(
EX_DATAERR
, "uid \"%s\"Ç⁄exi°ít", *
av
);

3354 
cmd32
->
d
[0] = 
pwd
->
pw_uid
;

3355 
cmd
->
Àn
 |
	`F_INSN_SIZE
(
ùfw_ö¢_u32
);

3356 
av
++;

3360 
TOK_GID
:

3361 
	`NEED1
("gidÑequiresárgument");

3363 *
íd
;

3364 
gid_t
 
gid
;

3365 
group
 *
gΩ
;

3367 
cmd
->
›code
 = 
O_GID
;

3368 
gid
 = 
	`°πoul
(*
av
, &
íd
, 0);

3369 
gΩ
 = (*
íd
 ='\0'Ë? 
	`gëgrgid
(
gid
Ë: 
	`gëg∫am
(*
av
);

3370 i‡(
gΩ
 =
NULL
)

3371 
	`îrx
(
EX_DATAERR
, "gid \"%s\"Ç⁄exi°ít", *
av
);

3372 
cmd32
->
d
[0] = 
gΩ
->
gr_gid
;

3373 
cmd
->
Àn
 |
	`F_INSN_SIZE
(
ùfw_ö¢_u32
);

3374 
av
++;

3378 
TOK_JAIL
:

3379 
	`NEED1
("jailÑequiresárgument");

3381 *
íd
;

3382 
jid
;

3384 
cmd
->
›code
 = 
O_JAIL
;

3385 
jid
 = ()
	`°πﬁ
(*
av
, &
íd
, 0);

3386 i‡(
jid
 < 0 || *
íd
 != '\0')

3387 
	`îrx
(
EX_DATAERR
, "jailÑequiresÖrison ID");

3388 
cmd32
->
d
[0] = (
uöt32_t
)
jid
;

3389 
cmd
->
Àn
 |
	`F_INSN_SIZE
(
ùfw_ö¢_u32
);

3390 
av
++;

3394 
TOK_ESTAB
:

3395 
	`fûl_cmd
(
cmd
, 
O_ESTAB
, 0, 0);

3398 
TOK_SETUP
:

3399 
	`fûl_cmd
(
cmd
, 
O_TCPFLAGS
, 0,

3400 (
TH_SYN
Ë| ( (
TH_ACK
) & 0xff) <<8 );

3403 
TOK_TCPDATALEN
:

3404 
	`NEED1
("tcpdatalenÑequiresÜength");

3405 i‡(
	`°Ωbrk
(*
av
, "-,")) {

3406 i‡(!
	`add_p‹ts
(
cmd
, *
av
, 0, 
O_TCPDATALEN
))

3407 
	`îrx
(
EX_DATAERR
, "övÆidÅ˝d©®À¿%s", *
av
);

3409 
	`fûl_cmd
(
cmd
, 
O_TCPDATALEN
, 0,

3410 
	`°πoul
(*
av
, 
NULL
, 0));

3411 
av
++;

3414 
TOK_TCPOPTS
:

3415 
	`NEED1
("missingárgument forÅcpoptions");

3416 
	`fûl_Êags
(
cmd
, 
O_TCPOPTS
, 
f_t˝›ts
, *
av
);

3417 
av
++;

3420 
TOK_TCPSEQ
:

3421 
TOK_TCPACK
:

3422 
	`NEED1
("tcpseq/tcpackÑequiresárgument");

3423 
cmd
->
Àn
 = 
	`F_INSN_SIZE
(
ùfw_ö¢_u32
);

3424 
cmd
->
›code
 = (
i
 =
TOK_TCPSEQ
Ë? 
O_TCPSEQ
 : 
O_TCPACK
;

3425 
cmd32
->
d
[0] = 
	`ht⁄l
(
	`°πoul
(*
av
, 
NULL
, 0));

3426 
av
++;

3429 
TOK_TCPWIN
:

3430 
	`NEED1
("tcpwinÑequiresÜength");

3431 
	`fûl_cmd
(
cmd
, 
O_TCPWIN
, 0,

3432 
	`ht⁄s
(
	`°πoul
(*
av
, 
NULL
, 0)));

3433 
av
++;

3436 
TOK_TCPFLAGS
:

3437 
	`NEED1
("missingárgument forÅcpflags");

3438 
cmd
->
›code
 = 
O_TCPFLAGS
;

3439 
	`fûl_Êags
(
cmd
, 
O_TCPFLAGS
, 
f_t˝Êags
, *
av
);

3440 
av
++;

3443 
TOK_KEEPSTATE
:

3444 i‡(
›í_∑r
)

3445 
	`îrx
(
EX_USAGE
, "keep-state cannot beÖart "

3447 i‡(
have_°©e
)

3448 
	`îrx
(
EX_USAGE
, "only one of keep-state "

3450 
have_°©e
 = 
cmd
;

3451 
	`fûl_cmd
(
cmd
, 
O_KEEP_STATE
, 0, 0);

3454 
TOK_LIMIT
: {

3455 
ùfw_ö¢_limô
 *
c
 = (ùfw_ö¢_limô *)
cmd
;

3456 
vÆ
;

3458 i‡(
›í_∑r
)

3459 
	`îrx
(
EX_USAGE
,

3461 i‡(
have_°©e
)

3462 
	`îrx
(
EX_USAGE
, "only one of keep-stateánd "

3464 
have_°©e
 = 
cmd
;

3466 
cmd
->
Àn
 = 
	`F_INSN_SIZE
(
ùfw_ö¢_limô
);

3467 
cmd
->
›code
 = 
O_LIMIT
;

3468 
c
->
limô_mask
 = c->
c⁄n_limô
 = 0;

3470  
av
[0] !
NULL
 ) {

3471 i‡((
vÆ
 = 
	`m©ch_tokí
(
limô_masks
, *
av
)) <= 0)

3473 
c
->
limô_mask
 |
vÆ
;

3474 
av
++;

3477 i‡(
c
->
limô_mask
 == 0)

3478 
	`îrx
(
EX_USAGE
, "limit: missingÜimit mask");

3480 
	`GET_UINT_ARG
(
c
->
c⁄n_limô
, 
IPFW_ARG_MIN
, 
IPFW_ARG_MAX
,

3481 
TOK_LIMIT
, 
ruÀ_›ti⁄s
);

3483 
av
++;

3487 
TOK_PROTO
:

3488 
	`NEED1
("missingÖrotocol");

3489 i‡(
	`add_¥Ÿo
(
cmd
, *
av
, &
¥Ÿo
)) {

3490 
av
++;

3492 
	`îrx
(
EX_DATAERR
, "invalidÖrotocol ``%s''",

3493 *
av
);

3496 
TOK_SRCIP
:

3497 
	`NEED1
("missing source IP");

3498 i‡(
	`add_§cù
(
cmd
, *
av
)) {

3499 
av
++;

3503 
TOK_DSTIP
:

3504 
	`NEED1
("missing destination IP");

3505 i‡(
	`add_d°ù
(
cmd
, *
av
)) {

3506 
av
++;

3510 
TOK_SRCIP6
:

3511 
	`NEED1
("missing source IP6");

3512 i‡(
	`add_§cù6
(
cmd
, *
av
)) {

3513 
av
++;

3517 
TOK_DSTIP6
:

3518 
	`NEED1
("missing destination IP6");

3519 i‡(
	`add_d°ù6
(
cmd
, *
av
)) {

3520 
av
++;

3524 
TOK_SRCPORT
:

3525 
	`NEED1
("missing sourceÖort");

3526 i‡(
	`_sub°rcmp
(*
av
, "any") == 0 ||

3527 
	`add_p‹ts
(
cmd
, *
av
, 
¥Ÿo
, 
O_IP_SRCPORT
)) {

3528 
av
++;

3530 
	`îrx
(
EX_DATAERR
, "övÆid sour˚Ö‹à%s", *
av
);

3533 
TOK_DSTPORT
:

3534 
	`NEED1
("missing destinationÖort");

3535 i‡(
	`_sub°rcmp
(*
av
, "any") == 0 ||

3536 
	`add_p‹ts
(
cmd
, *
av
, 
¥Ÿo
, 
O_IP_DSTPORT
)) {

3537 
av
++;

3539 
	`îrx
(
EX_DATAERR
, "invalid destinationÖort %s",

3540 *
av
);

3543 
TOK_MAC
:

3544 i‡(
	`add_mac
(
cmd
, 
av
))

3545 
av
 += 2;

3548 
TOK_MACTYPE
:

3549 
	`NEED1
("missing macÅype");

3550 i‡(!
	`add_ma˘y≥
(
cmd
, *
av
))

3551 
	`îrx
(
EX_DATAERR
, "övÆid ma¯ty≥ %s", *
av
);

3552 
av
++;

3555 
TOK_VERREVPATH
:

3556 
	`fûl_cmd
(
cmd
, 
O_VERREVPATH
, 0, 0);

3559 
TOK_VERSRCREACH
:

3560 
	`fûl_cmd
(
cmd
, 
O_VERSRCREACH
, 0, 0);

3563 
TOK_ANTISPOOF
:

3564 
	`fûl_cmd
(
cmd
, 
O_ANTISPOOF
, 0, 0);

3567 
TOK_IPSEC
:

3568 
	`fûl_cmd
(
cmd
, 
O_IPSEC
, 0, 0);

3571 
TOK_IPV6
:

3572 
	`fûl_cmd
(
cmd
, 
O_IP6
, 0, 0);

3575 
TOK_IPV4
:

3576 
	`fûl_cmd
(
cmd
, 
O_IP4
, 0, 0);

3579 
TOK_EXT6HDR
:

3580 
	`fûl_ext6hdr
–
cmd
, *
av
 );

3581 
av
++;

3584 
TOK_FLOWID
:

3585 i‡(
¥Ÿo
 !
IPPROTO_IPV6
 )

3586 
	`îrx
–
EX_USAGE
, "flow-id filter isáctive "

3588 
	`fûl_Êow6
–(
ùfw_ö¢_u32
 *Ë
cmd
, *
av
 );

3589 
av
++;

3592 
TOK_COMMENT
:

3593 
	`fûl_commít
(
cmd
, 
av
);

3594 
av
[0]=
NULL
;

3597 
TOK_TAGGED
:

3598 i‡(
av
[0] && 
	`°Ωbrk
(*av, "-,")) {

3599 i‡(!
	`add_p‹ts
(
cmd
, *
av
, 0, 
O_TAGGED
))

3600 
	`îrx
(
EX_DATAERR
, "tagged: invalidÅag"

3601 "Üi°: %s", *
av
);

3604 
uöt16_t
 
èg
;

3606 
	`GET_UINT_ARG
(
èg
, 
IPFW_ARG_MIN
, 
IPFW_ARG_MAX
,

3607 
TOK_TAGGED
, 
ruÀ_›ti⁄s
);

3608 
	`fûl_cmd
(
cmd
, 
O_TAGGED
, 0, 
èg
);

3610 
av
++;

3613 
TOK_FIB
:

3614 
	`NEED1
("fibÑequires fibÇumber");

3615 
	`fûl_cmd
(
cmd
, 
O_FIB
, 0, 
	`°πoul
(*
av
, 
NULL
, 0));

3616 
av
++;

3618 
TOK_SOCKARG
:

3619 
	`fûl_cmd
(
cmd
, 
O_SOCKARG
, 0, 0);

3622 
TOK_LOOKUP
: {

3623 
ùfw_ö¢_u32
 *
c
 = (ùfw_ö¢_u32 *)
cmd
;

3624 *
p
;

3625 
j
;

3627 i‡(!
av
[0] || !av[1])

3628 
	`îrx
(
EX_USAGE
, "format:ÜookupárgumentÅablenum");

3629 
cmd
->
›code
 = 
O_IP_DST_LOOKUP
;

3630 
cmd
->
Àn
 |
	`F_INSN_SIZE
(
ùfw_ö¢
) + 2;

3631 
i
 = 
	`m©ch_tokí
(
ruÀ_›ti⁄s
, *
av
);

3632 
j
 = 0; 
lookup_key
[j] >= 0 ; j++) {

3633 i‡(
i
 =
lookup_key
[
j
])

3636 i‡(
lookup_key
[
j
] <= 0)

3637 
	`îrx
(
EX_USAGE
, "f‹m©: c™nŸÜooku∞⁄ %s", *
av
);

3638 
	`__PAST_END
(
c
->
d
, 1Ë
j
;

3639 
av
++;

3640 
cmd
->
¨g1
 = 
	`°πoul
(*
av
, &
p
, 0);

3641 i‡(
p
 && *p)

3642 
	`îrx
(
EX_USAGE
, "format:ÜookupárgumentÅablenum");

3643 
av
++;

3648 
	`îrx
(
EX_USAGE
, "uƒecogni£d o±i⁄ [%d] %s\n", 
i
, 
s
);

3650 i‡(
	`F_LEN
(
cmd
) > 0) {

3651 
¥ev
 = 
cmd
;

3652 
cmd
 = 
	`√xt_cmd
(cmd);

3656 
d⁄e
:

3664 
d°
 = (
ùfw_ö¢
 *)
ruÀ
->
cmd
;

3669 i‡(
m©ch_¥ob
 != 1) {

3670 
d°
->
›code
 = 
O_PROB
;

3671 
d°
->
Àn
 = 2;

3672 *((
öt32_t
 *)(
d°
+1)Ë(öt32_t)(
m©ch_¥ob
 * 0x7fffffff);

3673 
d°
 +d°->
Àn
;

3679 i‡(
have_°©e
 && have_°©e->
›code
 !
O_CHECK_STATE
) {

3680 
	`fûl_cmd
(
d°
, 
O_PROBE_STATE
, 0, 0);

3681 
d°
 = 
	`√xt_cmd
(dst);

3685 
§c
 = (
ùfw_ö¢
 *)
cmdbuf
; sr¯!
cmd
; sr¯+
i
) {

3686 
i
 = 
	`F_LEN
(
§c
);

3688 
§c
->
›code
) {

3689 
O_LOG
:

3690 
O_KEEP_STATE
:

3691 
O_LIMIT
:

3692 
O_ALTQ
:

3693 
O_TAG
:

3696 
	`bc›y
(
§c
, 
d°
, 
i
 * (
uöt32_t
));

3697 
d°
 +
i
;

3704 i‡(
have_°©e
 && have_°©e->
›code
 !
O_CHECK_STATE
) {

3705 
i
 = 
	`F_LEN
(
have_°©e
);

3706 
	`bc›y
(
have_°©e
, 
d°
, 
i
 * (
uöt32_t
));

3707 
d°
 +
i
;

3712 
ruÀ
->
a˘_ofs
 = 
d°
 -ÑuÀ->
cmd
;

3715 i‡(
have_log
) {

3716 
i
 = 
	`F_LEN
(
have_log
);

3717 
	`bc›y
(
have_log
, 
d°
, 
i
 * (
uöt32_t
));

3718 
d°
 +
i
;

3720 i‡(
have_Ætq
) {

3721 
i
 = 
	`F_LEN
(
have_Ætq
);

3722 
	`bc›y
(
have_Ætq
, 
d°
, 
i
 * (
uöt32_t
));

3723 
d°
 +
i
;

3725 i‡(
have_èg
) {

3726 
i
 = 
	`F_LEN
(
have_èg
);

3727 
	`bc›y
(
have_èg
, 
d°
, 
i
 * (
uöt32_t
));

3728 
d°
 +
i
;

3733 
§c
 = (
ùfw_ö¢
 *)
a˘buf
; sr¯!
a˘i⁄
; sr¯+
i
) {

3734 
i
 = 
	`F_LEN
(
§c
);

3735 
	`bc›y
(
§c
, 
d°
, 
i
 * (
uöt32_t
));

3736 
d°
 +
i
;

3739 
ruÀ
->
cmd_Àn
 = (
uöt32_t
 *)
d°
 - (uöt32_à*)‘uÀ->
cmd
);

3740 
i
 = (*)
d°
 - (*)
ruÀ
;

3741 i‡(
	`do_cmd
(
IP_FW_ADD
, 
ruÀ
, (
uöçå_t
)&
i
) == -1)

3742 
	`îr
(
EX_UNAVAILABLE
, "getsockopt(%s)", "IP_FW_ADD");

3743 i‡(!
co
.
do_quõt
)

3744 
	`show_ùfw
(
ruÀ
, 0, 0);

3745 
	}
}

3751 
	$ùfw_zîo
(
ac
, *
av
[], 
›äame
 )

3753 
uöt32_t
 
¨g
, 
ßved_¨g
;

3754 
Áûed
 = 
EX_OK
;

3755 c⁄° *
îr°r
;

3756 c⁄° *
«me
 = 
›äame
 ? "RESETLOG" : "ZERO";

3758 
›äame
 = o±«mê? 
IP_FW_RESETLOG
 : 
IP_FW_ZERO
;

3760 
av
++; 
ac
--;

3762 i‡(!
ac
) {

3764 i‡(
	`do_cmd
(
›äame
, 
NULL
, 0) < 0)

3765 
	`îr
(
EX_UNAVAILABLE
, "£tsock›t(IP_FW_%s)", 
«me
);

3766 i‡(!
co
.
do_quõt
)

3767 
	`¥ötf
("%s.\n", 
›äame
 =
IP_FW_ZERO
 ?

3773 
ac
) {

3775 i‡(
	`isdigô
(**
av
)) {

3776 
¨g
 = 
	`°π⁄um
(*
av
, 0, 0xffff, &
îr°r
);

3777 i‡(
îr°r
)

3778 
	`îrx
(
EX_DATAERR
,

3779 "övÆidÑuÀÇumbî %s\n", *
av
);

3780 
ßved_¨g
 = 
¨g
;

3781 i‡(
co
.
u£_£t
)

3782 
¨g
 |(1 << 24Ë| ((
co
.
u£_£t
 - 1) << 16);

3783 
av
++;

3784 
ac
--;

3785 i‡(
	`do_cmd
(
›äame
, &
¨g
, (arg))) {

3786 
	`w¨n
("rule %u: setsockopt(IP_FW_%s)",

3787 
ßved_¨g
, 
«me
);

3788 
Áûed
 = 
EX_UNAVAILABLE
;

3789 } i‡(!
co
.
do_quõt
)

3790 
	`¥ötf
("E¡ry %d %s.\n", 
ßved_¨g
,

3791 
›äame
 =
IP_FW_ZERO
 ?

3794 
	`îrx
(
EX_USAGE
, "övÆidÑuÀÇumbî ``%s''", *
av
);

3797 i‡(
Áûed
 !
EX_OK
)

3798 
	`exô
(
Áûed
);

3799 
	}
}

3802 
	$ùfw_Êush
(
f‹˚
)

3804 
cmd
 = 
co
.
do_pùe
 ? 
IP_DUMMYNET_FLUSH
 : 
IP_FW_FLUSH
;

3806 i‡(!
f‹˚
 && !
co
.
do_quõt
) {

3807 
c
;

3809 
	`¥ötf
("Are you sure? [yn] ");

3810 
	`fÊush
(
°dout
);

3812 
c
 = 
	`touµî
(
	`gëc
(
°dö
));

3813 
c
 !'\n' && 
	`gëc
(
°dö
) != '\n')

3814 i‡(
	`„of
(
°dö
))

3816 } 
c
 != 'Y' && c != 'N');

3817 
	`¥ötf
("\n");

3818 i‡(
c
 == 'N')

3821 i‡(
co
.
do_pùe
) {

3822 
	`dummy√t_Êush
();

3826 i‡(
co
.
u£_£t
) {

3827 
uöt32_t
 
¨g
 = ((
co
.
u£_£t
 - 1) & 0xffff) | (1 << 24);

3828 i‡(
	`do_cmd
(
IP_FW_DEL
, &
¨g
, (arg)) < 0)

3829 
	`îr
(
EX_UNAVAILABLE
, "setsockopt(IP_FW_DEL)");

3830 } i‡(
	`do_cmd
(
cmd
, 
NULL
, 0) < 0)

3831 
	`îr
(
EX_UNAVAILABLE
, "setsockopt(IP_%s_FLUSH)",

3832 
co
.
do_pùe
 ? "DUMMYNET" : "FW");

3833 i‡(!
co
.
do_quõt
)

3834 
	`¥ötf
("FlushedáŒ %s.\n", 
co
.
do_pùe
 ? "pipes" : "rules");

3835 
	}
}

3838 
èbÀ_li°
(
ùfw_èbÀ_íåy
 
ít
, 
√ed_hódî
);

3848 
	$ùfw_èbÀ_h™dÀr
(
ac
, *
av
[])

3850 
ùfw_èbÀ_íåy
 
ít
;

3851 
do_add
;

3852 
is_Æl
;

3853 
size_t
 
Àn
;

3854 *
p
;

3855 
uöt32_t
 
a
;

3856 
uöt32_t
 
èbÀs_max
;

3858 
Àn
 = (
èbÀs_max
);

3859 i‡(
	`sys˘lby«me
("√t.öë.ù.fw.èbÀs_max", &
èbÀs_max
, &
Àn
,

3860 
NULL
, 0) == -1) {

3861 #ifde‡
IPFW_TABLES_MAX


3862 
	`w¨n
("Warn: FailedÅo getÅhe maxÅablesÇumber via sysctl. "

3864 
èbÀs_max
 = 
IPFW_TABLES_MAX
;

3866 
	`îrx
(1, "Failed sysctlbyname(\"net.inet.ip.fw.tables_max\")");

3870 
ac
--; 
av
++;

3871 i‡(
ac
 && 
	`isdigô
(**
av
)) {

3872 
ít
.
tbl
 = 
	`©oi
(*
av
);

3873 
is_Æl
 = 0;

3874 
ac
--; 
av
++;

3875 } i‡(
ac
 && 
	`_sub°rcmp
(*
av
, "all") == 0) {

3876 
ít
.
tbl
 = 0;

3877 
is_Æl
 = 1;

3878 
ac
--; 
av
++;

3880 
	`îrx
(
EX_USAGE
, "tableÇumber or 'all' keywordÑequired");

3881 i‡(
ít
.
tbl
 >
èbÀs_max
)

3882 
	`îrx
(
EX_USAGE
, "TheÅableÇumberÉxceedsÅhe maximumállowed "

3883 "vÆuê(%d)", 
èbÀs_max
 - 1);

3884 
	`NEED1
("tableÇeeds command");

3885 i‡(
is_Æl
 && 
	`_sub°rcmp
(*
av
, "list") != 0

3886 && 
	`_sub°rcmp
(*
av
, "flush") != 0)

3887 
	`îrx
(
EX_USAGE
, "tableÇumberÑequired");

3889 i‡(
	`_sub°rcmp
(*
av
, "add") == 0 ||

3890 
	`_sub°rcmp
(*
av
, "delete") == 0) {

3891 
do_add
 = **
av
 == 'a';

3892 
ac
--; 
av
++;

3893 i‡(!
ac
)

3894 
	`îrx
(
EX_USAGE
, "IPáddressÑequired");

3895 
p
 = 
	`°rchr
(*
av
, '/');

3896 i‡(
p
) {

3897 *
p
++ = '\0';

3898 
ít
.
maskÀn
 = 
	`©oi
(
p
);

3899 i‡(
ít
.
maskÀn
 > 32)

3900 
	`îrx
(
EX_DATAERR
, "bad width ``%s''", 
p
);

3902 
ít
.
maskÀn
 = 32;

3903 i‡(
	`lookup_ho°
(*
av
, (
ö_addr
 *)&
ít
.
addr
) != 0)

3904 
	`îrx
(
EX_NOHOST
, "ho°«mê``%s'' unknown", *
av
);

3905 
ac
--; 
av
++;

3906 i‡(
do_add
 && 
ac
) {

3907 
tvÆ
;

3909 i‡(
	`°rchr
(*
av
, ()'.'Ë=
NULL
 && 
	`isdigô
(**av)) {

3910 
ít
.
vÆue
 = 
	`°πoul
(*
av
, 
NULL
, 0);

3912 i‡(
	`lookup_ho°
(*
av
, (
ö_addr
 *)&
tvÆ
) == 0) {

3915 
ít
.
vÆue
 = 
	`¡ohl
(
tvÆ
);

3917 
	`îrx
(
EX_NOHOST
, "ho°«mê``%s'' unknown", *
av
);

3921 
ít
.
vÆue
 = 0;

3922 i‡(
	`do_cmd
(
do_add
 ? 
IP_FW_TABLE_ADD
 : 
IP_FW_TABLE_DEL
,

3923 &
ít
, (ent)) < 0) {

3925 i‡(!(
co
.
do_quõt
 && (
î∫o
 =(
do_add
 ? 
EEXIST
 : 
ESRCH
))))

3926 
	`îr
(
EX_OSERR
, "setsockopt(IP_FW_TABLE_%s)",

3927 
do_add
 ? "ADD" : "DEL");

3929 i‡(
do_add
) {

3930 
	`do_cmd
(
IP_FW_TABLE_DEL
, &
ít
, (ent));

3931 i‡(
	`do_cmd
(
IP_FW_TABLE_ADD
,

3932 &
ít
, (ent)) < 0)

3933 
	`îr
(
EX_OSERR
,

3937 } i‡(
	`_sub°rcmp
(*
av
, "flush") == 0) {

3938 
a
 = 
is_Æl
 ? 
èbÀs_max
 : (
uöt32_t
)(
ít
.
tbl
 + 1);

3940 i‡(
	`do_cmd
(
IP_FW_TABLE_FLUSH
, &
ít
.
tbl
,

3941 (
ít
.
tbl
)) < 0)

3942 
	`îr
(
EX_OSERR
, "setsockopt(IP_FW_TABLE_FLUSH)");

3943 } ++
ít
.
tbl
 < 
a
);

3944 } i‡(
	`_sub°rcmp
(*
av
, "list") == 0) {

3945 
a
 = 
is_Æl
 ? 
èbÀs_max
 : (
uöt32_t
)(
ít
.
tbl
 + 1);

3947 
	`èbÀ_li°
(
ít
, 
is_Æl
);

3948 } ++
ít
.
tbl
 < 
a
);

3950 
	`îrx
(
EX_USAGE
, "övÆidÅabÀ comm™d %s", *
av
);

3951 
	}
}

3954 
	$èbÀ_li°
(
ùfw_èbÀ_íåy
 
ít
, 
√ed_hódî
)

3956 
ùfw_èbÀ
 *
tbl
;

3957 
sockÀn_t
 
l
;

3958 
uöt32_t
 
a
;

3960 
a
 = 
ít
.
tbl
;

3961 
l
 = (
a
);

3962 i‡(
	`do_cmd
(
IP_FW_TABLE_GETSIZE
, &
a
, (
uöçå_t
)&
l
) < 0)

3963 
	`îr
(
EX_OSERR
, "getsockopt(IP_FW_TABLE_GETSIZE)");

3966 i‡(
a
 == 0)

3969 
l
 = (*
tbl
Ë+ 
a
 * (
ùfw_èbÀ_íåy
);

3970 
tbl
 = 
	`ß„_ˇŒoc
(1, 
l
);

3971 
tbl
->tb»
ít
.tbl;

3972 i‡(
	`do_cmd
(
IP_FW_TABLE_LIST
, 
tbl
, (
uöçå_t
)&
l
) < 0)

3973 
	`îr
(
EX_OSERR
, "getsockopt(IP_FW_TABLE_LIST)");

3974 i‡(
tbl
->
˙t
 && 
√ed_hódî
)

3975 
	`¥ötf
("---èbÀ(%d)---\n", 
tbl
->tbl);

3976 
a
 = 0;á < 
tbl
->
˙t
;á++) {

3977 
tvÆ
;

3978 
tvÆ
 = 
tbl
->
ít
[
a
].
vÆue
;

3979 i‡(
co
.
do_vÆue_as_ù
) {

3980 
tbuf
[128];

3981 
	`°∫˝y
(
tbuf
, 
	`öë_¡ﬂ
(*(
ö_addr
 *)

3982 &
tbl
->
ít
[
a
].
addr
), 127);

3984 
tvÆ
 = 
	`ht⁄l
(tval);

3985 
	`¥ötf
("%s/%u %s\n", 
tbuf
, 
tbl
->
ít
[
a
].
maskÀn
,

3986 
	`öë_¡ﬂ
(*(
ö_addr
 *)&
tvÆ
));

3988 
	`¥ötf
("%s/%u %u\n",

3989 
	`öë_¡ﬂ
(*(
ö_addr
 *)&
tbl
->
ít
[
a
].
addr
),

3990 
tbl
->
ít
[
a
].
maskÀn
, 
tvÆ
);

3993 
	`‰ì
(
tbl
);

3994 
	}
}

	@ipfw/ipfw2.h

32 
	scmdlöe_›ts
 {

34 
	mdo_vÆue_as_ù
;

35 
	mdo_ªsﬁv
;

36 
	mdo_time
;

37 
	mdo_quõt
;

38 
	mdo_pùe
;

39 
	mdo_«t
;

40 
	mdo_dy«mic
;

41 
	mdo_expúed
;

42 
	mdo_com∑˘
;

43 
	mdo_f‹˚
;

44 
	mshow_£ts
;

45 
	mã°_⁄ly
;

46 
	mcommít_⁄ly
;

47 
	mvîbo£
;

51 
	mdo_s‹t
;

54 
	mu£_£t
;

59 
cmdlöe_›ts
 
co
;

69 
	s_s_x
 {

70 c⁄° *
	ms
;

71 
	mx
;

74 
	etokís
 {

75 
	mTOK_NULL
=0,

77 
	mTOK_OR
,

78 
	mTOK_NOT
,

79 
	mTOK_STARTBRACE
,

80 
	mTOK_ENDBRACE
,

82 
	mTOK_ACCEPT
,

83 
	mTOK_COUNT
,

84 
	mTOK_PIPE
,

85 
	mTOK_LINK
,

86 
	mTOK_QUEUE
,

87 
	mTOK_FLOWSET
,

88 
	mTOK_SCHED
,

89 
	mTOK_DIVERT
,

90 
	mTOK_TEE
,

91 
	mTOK_NETGRAPH
,

92 
	mTOK_NGTEE
,

93 
	mTOK_FORWARD
,

94 
	mTOK_SKIPTO
,

95 
	mTOK_DENY
,

96 
	mTOK_REJECT
,

97 
	mTOK_RESET
,

98 
	mTOK_UNREACH
,

99 
	mTOK_CHECKSTATE
,

100 
	mTOK_NAT
,

101 
	mTOK_REASS
,

102 
	mTOK_CALL
,

103 
	mTOK_RETURN
,

105 
	mTOK_ALTQ
,

106 
	mTOK_LOG
,

107 
	mTOK_TAG
,

108 
	mTOK_UNTAG
,

110 
	mTOK_TAGGED
,

111 
	mTOK_UID
,

112 
	mTOK_GID
,

113 
	mTOK_JAIL
,

114 
	mTOK_IN
,

115 
	mTOK_LIMIT
,

116 
	mTOK_KEEPSTATE
,

117 
	mTOK_LAYER2
,

118 
	mTOK_OUT
,

119 
	mTOK_DIVERTED
,

120 
	mTOK_DIVERTEDLOOPBACK
,

121 
	mTOK_DIVERTEDOUTPUT
,

122 
	mTOK_XMIT
,

123 
	mTOK_RECV
,

124 
	mTOK_VIA
,

125 
	mTOK_FRAG
,

126 
	mTOK_IPOPTS
,

127 
	mTOK_IPLEN
,

128 
	mTOK_IPID
,

129 
	mTOK_IPPRECEDENCE
,

130 
	mTOK_DSCP
,

131 
	mTOK_IPTOS
,

132 
	mTOK_IPTTL
,

133 
	mTOK_IPVER
,

134 
	mTOK_ESTAB
,

135 
	mTOK_SETUP
,

136 
	mTOK_TCPDATALEN
,

137 
	mTOK_TCPFLAGS
,

138 
	mTOK_TCPOPTS
,

139 
	mTOK_TCPSEQ
,

140 
	mTOK_TCPACK
,

141 
	mTOK_TCPWIN
,

142 
	mTOK_ICMPTYPES
,

143 
	mTOK_MAC
,

144 
	mTOK_MACTYPE
,

145 
	mTOK_VERREVPATH
,

146 
	mTOK_VERSRCREACH
,

147 
	mTOK_ANTISPOOF
,

148 
	mTOK_IPSEC
,

149 
	mTOK_COMMENT
,

151 
	mTOK_PLR
,

152 
	mTOK_NOERROR
,

153 
	mTOK_BUCKETS
,

154 
	mTOK_DSTIP
,

155 
	mTOK_SRCIP
,

156 
	mTOK_DSTPORT
,

157 
	mTOK_SRCPORT
,

158 
	mTOK_ALL
,

159 
	mTOK_MASK
,

160 
	mTOK_FLOW_MASK
,

161 
	mTOK_SCHED_MASK
,

162 
	mTOK_BW
,

163 
	mTOK_DELAY
,

164 
	mTOK_PROFILE
,

165 
	mTOK_BURST
,

166 
	mTOK_RED
,

167 
	mTOK_GRED
,

168 
	mTOK_DROPTAIL
,

169 
	mTOK_PROTO
,

171 
	mTOK_WEIGHT
,

172 
	mTOK_LMAX
,

173 
	mTOK_PRI
,

174 
	mTOK_TYPE
,

175 
	mTOK_SLOTSIZE
,

177 
	mTOK_IP
,

178 
	mTOK_IF
,

179 
	mTOK_ALOG
,

180 
	mTOK_DENY_INC
,

181 
	mTOK_SAME_PORTS
,

182 
	mTOK_UNREG_ONLY
,

183 
	mTOK_SKIP_GLOBAL
,

184 
	mTOK_RESET_ADDR
,

185 
	mTOK_ALIAS_REV
,

186 
	mTOK_PROXY_ONLY
,

187 
	mTOK_REDIR_ADDR
,

188 
	mTOK_REDIR_PORT
,

189 
	mTOK_REDIR_PROTO
,

191 
	mTOK_IPV6
,

192 
	mTOK_FLOWID
,

193 
	mTOK_ICMP6TYPES
,

194 
	mTOK_EXT6HDR
,

195 
	mTOK_DSTIP6
,

196 
	mTOK_SRCIP6
,

198 
	mTOK_IPV4
,

199 
	mTOK_UNREACH6
,

200 
	mTOK_RESET6
,

202 
	mTOK_FIB
,

203 
	mTOK_SETFIB
,

204 
	mTOK_LOOKUP
,

205 
	mTOK_SOCKARG
,

211 
	#NEED
(
_p
, 
msg
Ë{i‡(!_pË
	`îrx
(
EX_USAGE
, msg);}

	)

212 
	#NEED1
(
msg
Ë{i‡(!(*
av
)Ë
	`îrx
(
EX_USAGE
, msg);}

	)

214 
¥_u64
(
uöt64_t
 *
pd
, 
width
);

217 *
ß„_ˇŒoc
(
size_t
 
numbî
, size_à
size
);

218 *
ß„_ªÆloc
(*
±r
, 
size_t
 
size
);

221 
_sub°rcmp
(c⁄° *
°r1
, c⁄° * 
°r2
);

222 
_sub°rcmp2
(c⁄° *
°r1
, c⁄° * 
°r2
, c⁄° * 
°r3
);

225 
m©ch_tokí
(
_s_x
 *
èbÀ
, *
°rög
);

226 c⁄° *
m©ch_vÆue
(
_s_x
 *
p
, 
vÆue
);

228 
do_cmd
(
›äame
, *
›tvÆ
, 
uöçå_t
 
›éí
);

230 
	gö6_addr
;

231 
n2mask
(
ö6_addr
 *
mask
, 
n
);

232 
c⁄tigmask
(
uöt8_t
 *
p
, 
Àn
);

242 
	g_ùfw_ö¢
;

243 
	g_ùfw_ö¢_Ætq
;

244 
	g_ùfw_ö¢_u32
;

245 
	g_ùfw_ö¢_ù6
;

246 
	g_ùfw_ö¢_icmp6
;

253 
ªsvd_£t_numbî
;

256 
ùfw_add
(*
av
[]);

257 
ùfw_show_«t
(
ac
, **
av
);

258 
ùfw_c⁄fig_pùe
(
ac
, **
av
);

259 
ùfw_c⁄fig_«t
(
ac
, **
av
);

260 
ùfw_£ts_h™dÀr
(*
av
[]);

261 
ùfw_èbÀ_h™dÀr
(
ac
, *
av
[]);

262 
ùfw_sys˘l_h™dÀr
(*
av
[], 
which
);

263 
ùfw_dñëe
(*
av
[]);

264 
ùfw_Êush
(
f‹˚
);

265 
ùfw_zîo
(
ac
, *
av
[], 
›äame
);

266 
ùfw_li°
(
ac
, *
av
[], 
show_cou¡îs
);

269 
Ætq_£t_íabÀd
(
íabÀd
);

270 
u_öt32_t
 
Ætq_«me_to_qid
(c⁄° *
«me
);

272 
¥öt_Ætq_cmd
(
_ùfw_ö¢_Ætq
 *
Ætq±r
);

275 
dummy√t_li°
(
ac
, *
av
[], 
show_cou¡îs
);

276 
dummy√t_Êush
();

277 
ùfw_dñëe_pùe
(
pùe_‹_queue
, 
n
);

280 
¥öt_uƒóch6_code
(
uöt16_t
 
code
);

281 
¥öt_ù6
(
_ùfw_ö¢_ù6
 *
cmd
, c⁄° *
s
);

282 
¥öt_Êow6id
(
_ùfw_ö¢_u32
 *
cmd
);

283 
¥öt_icmp6ty≥s
(
_ùfw_ö¢_u32
 *
cmd
);

284 
¥öt_ext6hdr
(
_ùfw_ö¢
 *
cmd
 );

286 
_ùfw_ö¢
 *
add_§cù6
(_ùfw_ö¢ *
cmd
, *
av
);

287 
_ùfw_ö¢
 *
add_d°ù6
(_ùfw_ö¢ *
cmd
, *
av
);

289 
fûl_Êow6
(
_ùfw_ö¢_u32
 *
cmd
, *
av
 );

290 
fûl_uƒóch6_code
(
u_sh‹t
 *
codï
, *
°r
);

291 
fûl_icmp6ty≥s
(
_ùfw_ö¢_icmp6
 *
cmd
, *
av
);

292 
fûl_ext6hdr
(
_ùfw_ö¢
 *
cmd
, *
av
);

	@ipfw/ipv6.c

25 
	~<sys/ty≥s.h
>

26 
	~<sys/sockë.h
>

28 
	~"ùfw2.h
"

30 
	~<îr.h
>

31 
	~<√tdb.h
>

32 
	~<°dio.h
>

33 
	~<°dlib.h
>

34 
	~<°rög.h
>

35 
	~<sy£xôs.h
>

37 
	~<√t/if.h
>

38 
	~<√töë/ö.h
>

39 
	~<√töë/ö_sy°m.h
>

40 
	~<√töë/ù.h
>

41 
	~<√töë/icmp6.h
>

42 
	~<√töë/ù_fw.h
>

43 
	~<¨∑/öë.h
>

45 
_s_x
 
	gicmp6codes
[] = {

46 { "no-rouã", 
ICMP6_DST_UNREACH_NOROUTE
 },

47 { "admö-¥ohib", 
ICMP6_DST_UNREACH_ADMIN
 },

48 { "addªss", 
ICMP6_DST_UNREACH_ADDR
 },

49 { "p‹t", 
ICMP6_DST_UNREACH_NOPORT
 },

50 { 
NULL
, 0 }

54 
	$fûl_uƒóch6_code
(
u_sh‹t
 *
codï
, *
°r
)

56 
vÆ
;

57 *
s
;

59 
vÆ
 = 
	`°πoul
(
°r
, &
s
, 0);

60 i‡(
s
 =
°r
 || *†!'\0' || 
vÆ
 >= 0x100)

61 
vÆ
 = 
	`m©ch_tokí
(
icmp6codes
, 
°r
);

62 i‡(
vÆ
 < 0)

63 
	`îrx
(
EX_DATAERR
, "unknow¿ICMPv6 uƒóchabÀ codê``%s''", 
°r
);

64 *
codï
 = 
vÆ
;

66 
	}
}

69 
	$¥öt_uƒóch6_code
(
uöt16_t
 
code
)

71 c⁄° *
s
 = 
	`m©ch_vÆue
(
icmp6codes
, 
code
);

73 i‡(
s
 !
NULL
)

74 
	`¥ötf
("uƒóch6 %s", 
s
);

76 
	`¥ötf
("uƒóch6 %u", 
code
);

77 
	}
}

83 
	$¥öt_ù6
(
ùfw_ö¢_ù6
 *
cmd
, c⁄° *
s
)

85 
ho°ít
 *
he
 = 
NULL
;

86 
Àn
 = 
	`F_LEN
((
ùfw_ö¢
 *Ë
cmd
) - 1;

87 
ö6_addr
 *
a
 = &(
cmd
->
addr6
);

88 
åad
[255];

90 
	`¥ötf
("%s%†", 
cmd
->
o
.
Àn
 & 
F_NOT
 ? "ÇŸ": "", 
s
);

92 i‡(
cmd
->
o
.
›code
 =
O_IP6_SRC_ME
 || cmd->o.›codê=
O_IP6_DST_ME
) {

93 
	`¥ötf
("me6");

96 i‡(
cmd
->
o
.
›code
 =
O_IP6
) {

97 
	`¥ötf
(" ip6");

107 
Àn
 =Üí / 4;Üí > 0;Üí -2, 
a
 += 2) {

108 
mb
 =

109 (
cmd
->
o
.
›code
 =
O_IP6_SRC
 || cmd->o.›codê=
O_IP6_DST
) ?

110 128 : 
	`c⁄tigmask
((
uöt8_t
 *)&(
a
[1]), 128);

112 i‡(
mb
 =128 && 
co
.
do_ªsﬁv
)

113 
he
 = 
	`gëho°byaddr
((*)
a
, (*a), 
AF_INET6
);

114 i‡(
he
 !
NULL
)

115 
	`¥ötf
("%s", 
he
->
h_«me
);

116 i‡(
mb
 == 0)

117 
	`¥ötf
("any");

119 i‡(
	`öë_¡›
(
AF_INET6
, 
a
, 
åad
, –åad ) ) =
NULL
)

120 
	`¥ötf
("ErrorÇtop inÖrint_ip6\n");

121 
	`¥ötf
("%s", 
åad
 );

122 i‡(
mb
 < 0)

123 
	`¥ötf
(":%s",

124 
	`öë_¡›
(
AF_INET6
, &
a
[1], 
åad
, (trad)));

125 i‡(
mb
 < 128)

126 
	`¥ötf
("/%d", 
mb
);

128 i‡(
Àn
 > 2)

129 
	`¥ötf
(",");

131 
	}
}

134 
	$fûl_icmp6ty≥s
(
ùfw_ö¢_icmp6
 *
cmd
, *
av
)

136 
uöt8_t
 
ty≥
;

138 
	`bzîo
(
cmd
, (*cmd));

139 *
av
) {

140 i‡(*
av
 == ',')

141 
av
++;

142 
ty≥
 = 
	`°πoul
(
av
, &av, 0);

143 i‡(*
av
 != ',' && *av != '\0')

144 
	`îrx
(
EX_DATAERR
, "invalid ICMP6Åype");

151 i‡(
ty≥
 > 
ICMP6_MAXTYPE
)

152 
	`îrx
(
EX_DATAERR
, "ICMP6Åype out ofÑange");

153 
cmd
->
d
[
ty≥
 / 32] |= ( 1 << (type % 32));

155 
cmd
->
o
.
›code
 = 
O_ICMP6TYPE
;

156 
cmd
->
o
.
Àn
 |
	`F_INSN_SIZE
(
ùfw_ö¢_icmp6
);

157 
	}
}

161 
	$¥öt_icmp6ty≥s
(
ùfw_ö¢_u32
 *
cmd
)

163 
i
, 
j
;

164 
£p
= ' ';

166 
	`¥ötf
(" ip6 icmp6types");

167 
i
 = 0; i < 7; i++)

168 
j
=0; j < 32; ++j) {

169 i‡–(
cmd
->
d
[
i
] & (1 << (
j
))) == 0)

171 
	`¥ötf
("%c%d", 
£p
, (
i
*32 + 
j
));

172 
£p
 = ',';

174 
	}
}

177 
	$¥öt_Êow6id
–
ùfw_ö¢_u32
 *
cmd
)

179 
uöt16_t
 
i
, 
limô
 = 
cmd
->
o
.
¨g1
;

180 
£p
 = ',';

182 
	`¥ötf
(" flow-id ");

183  
i
=0; i < 
limô
; ++i) {

184 i‡(
i
 =
limô
 - 1)

185 
£p
 = ' ';

186 
	`¥ötf
("%d%c", 
cmd
->
d
[
i
], 
£p
);

188 
	}
}

191 
_s_x
 
	gext6hdrcodes
[] = {

192 { "‰ag", 
EXT_FRAGMENT
 },

193 { "h››t", 
EXT_HOPOPTS
 },

194 { "rouã", 
EXT_ROUTING
 },

195 { "d°›t", 
EXT_DSTOPTS
 },

196 { "ah", 
EXT_AH
 },

197 { "e•", 
EXT_ESP
 },

198 { "πhdr0", 
EXT_RTHDR0
 },

199 { "πhdr2", 
EXT_RTHDR2
 },

200 { 
NULL
, 0 }

205 
	$fûl_ext6hdr
–
ùfw_ö¢
 *
cmd
, *
av
)

207 
tok
;

208 *
s
 = 
av
;

210 
cmd
->
¨g1
 = 0;

212 
s
) {

213 
av
 = 
	`°r£p
–&
s
, ",") ;

214 
tok
 = 
	`m©ch_tokí
(
ext6hdrcodes
, 
av
);

215 
tok
) {

216 
EXT_FRAGMENT
:

217 
cmd
->
¨g1
 |
EXT_FRAGMENT
;

220 
EXT_HOPOPTS
:

221 
cmd
->
¨g1
 |
EXT_HOPOPTS
;

224 
EXT_ROUTING
:

225 
cmd
->
¨g1
 |
EXT_ROUTING
;

228 
EXT_DSTOPTS
:

229 
cmd
->
¨g1
 |
EXT_DSTOPTS
;

232 
EXT_AH
:

233 
cmd
->
¨g1
 |
EXT_AH
;

236 
EXT_ESP
:

237 
cmd
->
¨g1
 |
EXT_ESP
;

240 
EXT_RTHDR0
:

241 
cmd
->
¨g1
 |
EXT_RTHDR0
;

244 
EXT_RTHDR2
:

245 
cmd
->
¨g1
 |
EXT_RTHDR2
;

249 
	`îrx
–
EX_DATAERR
, "invalid option for ipv6Éxten header" );

253 i‡(
cmd
->
¨g1
 == 0 )

255 
cmd
->
›code
 = 
O_EXT_HDR
;

256 
cmd
->
Àn
 |
	`F_INSN_SIZE
–
ùfw_ö¢
 );

258 
	}
}

261 
	$¥öt_ext6hdr
–
ùfw_ö¢
 *
cmd
 )

263 
£p
 = ' ';

265 
	`¥ötf
("Éxtension header:");

266 i‡(
cmd
->
¨g1
 & 
EXT_FRAGMENT
 ) {

267 
	`¥ötf
("%c‰agmíèti⁄", 
£p
);

268 
£p
 = ',';

270 i‡(
cmd
->
¨g1
 & 
EXT_HOPOPTS
 ) {

271 
	`¥ötf
("%ch› o±i⁄s", 
£p
);

272 
£p
 = ',';

274 i‡(
cmd
->
¨g1
 & 
EXT_ROUTING
 ) {

275 
	`¥ötf
("%¸outög o±i⁄s", 
£p
);

276 
£p
 = ',';

278 i‡(
cmd
->
¨g1
 & 
EXT_RTHDR0
 ) {

279 
	`¥ötf
("%¸thdr0", 
£p
);

280 
£p
 = ',';

282 i‡(
cmd
->
¨g1
 & 
EXT_RTHDR2
 ) {

283 
	`¥ötf
("%¸thdr2", 
£p
);

284 
£p
 = ',';

286 i‡(
cmd
->
¨g1
 & 
EXT_DSTOPTS
 ) {

287 
	`¥ötf
("%cde°ö©i⁄ o±i⁄s", 
£p
);

288 
£p
 = ',';

290 i‡(
cmd
->
¨g1
 & 
EXT_AH
 ) {

291 
	`¥ötf
("%ˇuthítiˇti⁄ hódî", 
£p
);

292 
£p
 = ',';

294 i‡(
cmd
->
¨g1
 & 
EXT_ESP
 ) {

295 
	`¥ötf
("%˚nˇpsuœãd securôyÖaylﬂd", 
£p
);

297 
	}
}

301 
	$lookup_ho°6
 (*
ho°
, 
ö6_addr
 *
ù6addr
)

303 
ho°ít
 *
he
;

305 i‡(!
	`öë_±⁄
(
AF_INET6
, 
ho°
, 
ù6addr
)) {

306 i‡((
he
 = 
	`gëho°by«me2
(
ho°
, 
AF_INET6
)Ë=
NULL
)

308 
	`mem˝y
(
ù6addr
, 
he
->
h_addr_li°
[0], –
ö6_addr
));

311 
	}
}

330 
	$fûl_ù6
(
ùfw_ö¢_ù6
 *
cmd
, *
av
)

332 
Àn
 = 0;

333 
ö6_addr
 *
d
 = &(
cmd
->
addr6
);

339 
cmd
->
o
.
Àn
 &~
F_LEN_MASK
;

341 i‡(
	`°rcmp
(
av
, "any") == 0)

345 i‡(
	`°rcmp
(
av
, "me") == 0) {

346 
cmd
->
o
.
Àn
 |
	`F_INSN_SIZE
(
ùfw_ö¢
);

350 i‡(
	`°rcmp
(
av
, "me6") == 0) {

351 
cmd
->
o
.
Àn
 |
	`F_INSN_SIZE
(
ùfw_ö¢
);

355 
av
 = 
	`°rdup
(av);

356 
av
) {

362 *
p
;

363 
maskÀn
;

364 
md
 = '\0';

366 i‡((
p
 = 
	`°Ωbrk
(
av
, "/,")) ) {

367 
md
 = *
p
;

368 *
p
 = '\0';

369 
p
++;

374 i‡(
	`lookup_ho°6
(
av
, 
d
) != 0) {

376 
	`îrx
(
EX_DATAERR
, "badáddªs†\"%s\"", 
av
);

379 
maskÀn
 = (
md
 ='/'Ë? 
	`©oi
(
p
) : 128;

380 i‡(
maskÀn
 > 128 || masklen < 0)

381 
	`îrx
(
EX_DATAERR
, "bad width \"%s\''", 
p
);

383 
	`n2mask
(&
d
[1], 
maskÀn
);

385 
	`APPLY_MASK
(
d
, &d[1])

389 i‡(
md
 == '/') {

390 
p
 = 
	`°Ωbrk
(p, ",");

391 i‡(
p
 !
NULL
)

392 
p
++;

394 
av
 = 
p
;

397 i‡(
maskÀn
 == 0) {

404 i‡(
cmd
->
o
.
Àn
 & 
F_NOT
 && 
av
 =
NULL
 &&Üen == 0)

405 
	`îrx
(
EX_DATAERR
, "notányÇever matches");

412 i‡(
maskÀn
 =128 && 
av
 =
NULL
 && 
Àn
 == 0) {

413 
Àn
 = 
	`F_INSN_SIZE
(
ö6_addr
);

418 
Àn
 +
	`F_INSN_SIZE
(
ö6_addr
)*2;

419 
d
 += 2;

426 i‡(
Àn
 + 1 > 
F_LEN_MASK
)

427 
	`îrx
(
EX_DATAERR
, "addressÜistÅooÜong");

428 
cmd
->
o
.
Àn
 |=Üen+1;

429 
	`‰ì
(
av
);

431 
	}
}

440 
	$fûl_Êow6
–
ùfw_ö¢_u32
 *
cmd
, *
av
 )

442 
u_öt32_t
 
ty≥
;

443 
u_öt16_t
 
nÊow
 = 0;

444 *
s
 = 
av
;

445 
cmd
->
d
[0] = 0;

447 
s
) {

448 
av
 = 
	`°r£p
–&
s
, ",") ;

449 
ty≥
 = 
	`°πoul
(
av
, &av, 0);

450 i‡(*
av
 != ',' && *av != '\0')

451 
	`îrx
(
EX_DATAERR
, "övÆid ipv6 flowÇumbî %s", 
av
);

452 i‡(
ty≥
 > 0xfffff)

453 
	`îrx
(
EX_DATAERR
, "ÊowÇumbî ouào‡øngê%s", 
av
);

454 
cmd
->
d
[
nÊow
] |
ty≥
;

455 
nÊow
++;

457 if–
nÊow
 > 0 ) {

458 
cmd
->
o
.
›code
 = 
O_FLOW6ID
;

459 
cmd
->
o
.
Àn
 |
	`F_INSN_SIZE
(
ùfw_ö¢_u32
Ë+ 
nÊow
;

460 
cmd
->
o
.
¨g1
 = 
nÊow
;

463 
	`îrx
(
EX_DATAERR
, "övÆid ipv6 flowÇumbî %s", 
av
);

465 
	}
}

467 
ùfw_ö¢
 *

468 
	$add_§cù6
(
ùfw_ö¢
 *
cmd
, *
av
)

471 
	`fûl_ù6
((
ùfw_ö¢_ù6
 *)
cmd
, 
av
);

472 i‡(
	`F_LEN
(
cmd
) == 0) {

473 } i‡(
	`F_LEN
(
cmd
Ë=
	`F_INSN_SIZE
(
ùfw_ö¢
)) {

474 
cmd
->
›code
 = 
O_IP6_SRC_ME
;

475 } i‡(
	`F_LEN
(
cmd
) ==

476 (
	`F_INSN_SIZE
(
ö6_addr
Ë+ F_INSN_SIZE(
ùfw_ö¢
))) {

478 
cmd
->
›code
 = 
O_IP6_SRC
;

480 
cmd
->
›code
 = 
O_IP6_SRC_MASK
;

482  
cmd
;

483 
	}
}

485 
ùfw_ö¢
 *

486 
	$add_d°ù6
(
ùfw_ö¢
 *
cmd
, *
av
)

489 
	`fûl_ù6
((
ùfw_ö¢_ù6
 *)
cmd
, 
av
);

490 i‡(
	`F_LEN
(
cmd
) == 0) {

491 } i‡(
	`F_LEN
(
cmd
Ë=
	`F_INSN_SIZE
(
ùfw_ö¢
)) {

492 
cmd
->
›code
 = 
O_IP6_DST_ME
;

493 } i‡(
	`F_LEN
(
cmd
) ==

494 (
	`F_INSN_SIZE
(
ö6_addr
Ë+ F_INSN_SIZE(
ùfw_ö¢
))) {

496 
cmd
->
›code
 = 
O_IP6_DST
;

498 
cmd
->
›code
 = 
O_IP6_DST_MASK
;

500  
cmd
;

501 
	}
}

	@ipfw/main.c

23 
	~<sys/waô.h
>

24 
	~<˘y≥.h
>

25 
	~<îr.h
>

26 
	~<î∫o.h
>

27 
	~<sig«l.h
>

28 
	~<°dio.h
>

29 
	~<°dlib.h
>

30 
	~<°rög.h
>

31 
	~<sy£xôs.h
>

32 
	~<uni°d.h
>

34 
	~"ùfw2.h
"

37 
	$hñp
()

39 
	`Ârötf
(
°dîr
,

79 
	`exô
(0);

80 
	}
}

95 
	$ùfw_maö
(
ﬁdac
, **
ﬁdav
)

97 
ch
, 
ac
;

98 c⁄° *
îr°r
;

99 **
av
, **
ßve_av
;

100 
do_ac˘
 = 0;

101 
åy_√xt
 = 0;

102 
av_size
;

103 *
av_p
;

105 
	#WHITESP
 " \t\f\v\n\r"

	)

106 i‡(
ﬁdac
 < 2)

109 i‡(
ﬁdac
 == 2) {

115 *
¨g
 = 
ﬁdav
[1];

116 
l
 = 
	`°æí
(
¨g
);

117 
c›y
 = 0;

118 
i
, 
j
;

120 
i
 = 
j
 = 0; i < 
l
; i++) {

121 i‡(
¨g
[
i
] == '#')

123 i‡(
c›y
) {

124 
¨g
[
j
++] =árg[
i
];

125 
c›y
 = !
	`°rchr
("," 
WHITESP
, 
¨g
[
i
]);

127 
c›y
 = !
	`°rchr
(
WHITESP
, 
¨g
[
i
]);

128 i‡(
c›y
)

129 
¨g
[
j
++] =árg[
i
];

132 i‡(!
c›y
 && 
j
 > 0)

133 
j
--;

134 
l
 = 
j
;

135 
¨g
[
j
++] = '\0';

136 i‡(
l
 == 0)

143 
i
 = 0, 
ac
 = 1; i < 
l
; i++)

144 i‡(
	`°rchr
(
WHITESP
, 
¨g
[
i
]Ë!
NULL
)

145 
ac
++;

154 
ac
++;

155 
av_size
 = (
ac
+1Ë* (*Ë+ 
l
 + 1;

156 
av
 = 
	`ß„_ˇŒoc
(
av_size
, 1);

163 
av_p
 = (*)&
av
[
ac
+1];

164 
ac
 = 1, 
i
 = 
j
 = 0; i < 
l
; i++) {

165 i‡(
	`°rchr
(
WHITESP
, 
¨g
[
i
]Ë!
NULL
 || i =
l
-1) {

166 i‡(
i
 =
l
-1)

167 
i
++;

168 
	`bc›y
(
¨g
+
j
, 
av_p
, 
i
-j);

169 
av
[
ac
] = 
av_p
;

170 
av_p
 +
i
-
j
;

171 *
av_p
++ = '\0';

172 
ac
++;

173 
j
 = 
i
 + 1;

180 
fú°
, 
i
, 
l
=0;

190 
i
=0; i<
ﬁdac
; i++)

191 
l
 +
	`°æí
(
ﬁdav
[
i
]);

193 
av_size
 = (
ﬁdac
+1Ë* (*Ë+ 
l
 + oldac;

194 
av
 = 
	`ß„_ˇŒoc
(
av_size
, 1);

200 
av_p
 = (*)&
av
[
ﬁdac
+1];

201 
fú°
 = 
i
 = 
ac
 = 1, 
l
 = 0; i < 
ﬁdac
; i++) {

202 *
¨g
 = 
ﬁdav
[
i
];

203 
k
 = 
	`°æí
(
¨g
);

205 
l
 +
k
;

206 i‡(
¨g
[
k
-1] !',' || 
i
 =
ﬁdac
-1) {

208 
av
[
ac
] = 
av_p
;

209 
l
=0; 
fú°
 <
i
; first++) {

210 
	`°rˇt
(
av_p
, 
ﬁdav
[
fú°
]);

211 
av_p
 +
	`°æí
(
ﬁdav
[
fú°
]);

213 *
av_p
++ = '\0';

214 
ac
++;

215 
l
 = 0;

216 
fú°
 = 
i
+1;

225 
av
[0] = 
ﬁdav
[0];

226 
av
[
ac
] = 
NULL
;

229 i‡(!
co
.
do_f‹˚
)

230 
co
.
do_f‹˚
 = !
	`ißây
(
STDIN_FILENO
);

232 #ifde‡
EMULATE_SYSCTL


233 i‡–
ac
 >2 && !
	`°rcmp
(
av
[1], "sysctl")) {

234 *
s
;

235 
i
;

237 i‡(
ac
 != 3) {

238 
	`¥ötf
( "sysctlÉmulation usage:\n"

243 
s
 = 
	`°rchr
(
av
[2], '=');

244 i‡(
s
 =
NULL
) {

245 
s
 = !
	`°rcmp
(
av
[2], "-a"Ë? 
NULL
 :áv[2];

246 
	`sys˘lby«me
(
s
, 
NULL
, NULL, NULL, 0);

249 i‡(
s
[1] == '\0') {

250 
	`¥ötf
("ipfw sysctl: missing value\n\n");

253 *
s
 = '\0';

254 
i
 = 
	`°πﬁ
(
s
+1, 
NULL
, 0);

255 
	`sys˘lby«me
(
av
[2], 
NULL
, NULL, &
i
, ());

262 
ßve_av
 = 
av
;

264 
›töd
 = 
›åe£t
 = 1;

265 (
ch
 = 
	`gë›t
(
ac
, 
av
, "abcdefhinNp:qs:STtv")) != -1)

266 
ch
) {

268 
do_ac˘
 = 1;

272 
co
.
commít_⁄ly
 = 1;

273 
co
.
do_com∑˘
 = 1;

277 
co
.
do_com∑˘
 = 1;

281 
co
.
do_dy«mic
 = 1;

285 
co
.
do_expúed
 = 1;

289 
co
.
do_f‹˚
 = 1;

293 
	`‰ì
(
ßve_av
);

294 
	`hñp
();

298 
co
.
do_vÆue_as_ù
 = 1;

302 
co
.
ã°_⁄ly
 = 1;

306 
co
.
do_ªsﬁv
 = 1;

310 
co
.
do_quõt
 = 1;

314 
	`îrx
(
EX_USAGE
, "AnábsoluteÖathname must be used "

319 
co
.
do_s‹t
 = 
	`©oi
(
›èrg
);

323 
co
.
show_£ts
 = 1;

327 
co
.
do_time
 = 1;

331 
co
.
do_time
 = 2;

335 
co
.
vîbo£
 = 1;

339 
	`‰ì
(
ßve_av
);

343 
ac
 -
›töd
;

344 
av
 +
›töd
;

345 
	`NEED1
("badárguments, for usage summary ``ipfw''");

352 i‡(
ac
 > 1 && 
	`isdigô
(*
av
[0])) {

353 *
p
 = 
av
[0];

355 
av
[0] =áv[1];

356 
av
[1] = 
p
;

362 
co
.
do_«t
 = 0;

363 
co
.
do_pùe
 = 0;

364 
co
.
u£_£t
 = 0;

365 i‡(!
	`°∫cmp
(*
av
, "«t", 
	`°æí
(*av)))

366 
co
.
do_«t
 = 1;

367 i‡(!
	`°∫cmp
(*
av
, "pùe", 
	`°æí
(*av)))

368 
co
.
do_pùe
 = 1;

369 i‡(
	`_sub°rcmp
(*
av
, "queue") == 0)

370 
co
.
do_pùe
 = 2;

371 i‡(
	`_sub°rcmp
(*
av
, "flowset") == 0)

372 
co
.
do_pùe
 = 2;

373 i‡(
	`_sub°rcmp
(*
av
, "sched") == 0)

374 
co
.
do_pùe
 = 3;

375 i‡(!
	`°∫cmp
(*
av
, "£t", 
	`°æí
(*av))) {

376 i‡(
ac
 > 1 && 
	`isdigô
(
av
[1][0])) {

377 
co
.
u£_£t
 = 
	`°π⁄um
(
av
[1], 0, 
ªsvd_£t_numbî
,

378 &
îr°r
);

379 i‡(
îr°r
)

380 
	`îrx
(
EX_DATAERR
,

381 "övÆid sëÇumbî %s\n", 
av
[1]);

382 
ac
 -2; 
av
 +2; 
co
.
u£_£t
++;

386 i‡(
co
.
do_pùe
 || co.
do_«t
) {

387 
ac
--;

388 
av
++;

390 
	`NEED1
("missing command");

397 i‡((
co
.
do_pùe
 || co.
do_«t
Ë&& 
ac
 > 1 && 
	`isdigô
(*
av
[0])) {

398 *
p
 = 
av
[0];

400 
av
[0] =áv[1];

401 
av
[1] = 
p
;

404 i‡(
co
.
u£_£t
 == 0) {

405 i‡(
	`_sub°rcmp
(*
av
, "add") == 0)

406 
	`ùfw_add
(
av
);

407 i‡(
co
.
do_«t
 && 
	`_sub°rcmp
(*
av
, "show") == 0)

408 
	`ùfw_show_«t
(
ac
, 
av
);

409 i‡(
co
.
do_pùe
 && 
	`_sub°rcmp
(*
av
, "config") == 0)

410 
	`ùfw_c⁄fig_pùe
(
ac
, 
av
);

411 i‡(
co
.
do_«t
 && 
	`_sub°rcmp
(*
av
, "config") == 0)

412 
	`ùfw_c⁄fig_«t
(
ac
, 
av
);

413 i‡(
	`_sub°rcmp
(*
av
, "set") == 0)

414 
	`ùfw_£ts_h™dÀr
(
av
);

415 i‡(
	`_sub°rcmp
(*
av
, "table") == 0)

416 
	`ùfw_èbÀ_h™dÀr
(
ac
, 
av
);

417 i‡(
	`_sub°rcmp
(*
av
, "enable") == 0)

418 
	`ùfw_sys˘l_h™dÀr
(
av
, 1);

419 i‡(
	`_sub°rcmp
(*
av
, "disable") == 0)

420 
	`ùfw_sys˘l_h™dÀr
(
av
, 0);

422 
åy_√xt
 = 1;

425 i‡(
co
.
u£_£t
 || 
åy_√xt
) {

426 i‡(
	`_sub°rcmp
(*
av
, "delete") == 0)

427 
	`ùfw_dñëe
(
av
);

428 i‡(
	`_sub°rcmp
(*
av
, "flush") == 0)

429 
	`ùfw_Êush
(
co
.
do_f‹˚
);

430 i‡(
	`_sub°rcmp
(*
av
, "zero") == 0)

431 
	`ùfw_zîo
(
ac
, 
av
, 0 );

432 i‡(
	`_sub°rcmp
(*
av
, "resetlog") == 0)

433 
	`ùfw_zîo
(
ac
, 
av
, 1 );

434 i‡(
	`_sub°rcmp
(*
av
, "print") == 0 ||

435 
	`_sub°rcmp
(*
av
, "list") == 0)

436 
	`ùfw_li°
(
ac
, 
av
, 
do_ac˘
);

437 i‡(
	`_sub°rcmp
(*
av
, "show") == 0)

438 
	`ùfw_li°
(
ac
, 
av
, 1 );

440 
	`îrx
(
EX_USAGE
, "bad comm™d `%s'", *
av
);

444 
	`‰ì
(
ßve_av
);

446 
	}
}

450 
	$ùfw_ªadfûe
(
ac
, *
av
[])

452 
	#MAX_ARGS
 32

	)

453 
buf
[4096];

454 *
¥og«me
 = 
av
[0];

455 c⁄° *
cmd
 = 
NULL
;

456 c⁄° *
fûíame
 = 
av
[
ac
-1];

457 
c
, 
löío
=0;

458 
FILE
 *
f
 = 
NULL
;

459 
pid_t
 
¥ïroc
 = 0;

461 (
c
 = 
	`gë›t
(
ac
, 
av
, "cfNnp:qS")) != -1) {

462 
c
) {

464 
co
.
do_com∑˘
 = 1;

468 
co
.
do_f‹˚
 = 1;

472 
co
.
do_ªsﬁv
 = 1;

476 
co
.
ã°_⁄ly
 = 1;

495 i‡(
›töd
 =
ac
)

496 
	`îrx
(
EX_USAGE
, "no filenameárgument");

497 
cmd
 = 
›èrg
;

498 
av
[
ac
-1] = 
NULL
;

499 
av
 +
›töd
 - 1;

500 
ac
 -
›töd
;

501 
›töd
 = 
ac
;

505 
co
.
do_quõt
 = 1;

509 
co
.
show_£ts
 = 1;

513 
	`îrx
(
EX_USAGE
, "badárguments, for usage"

519 i‡(
cmd
 =
NULL
 && 
ac
 !
›töd
 + 1)

520 
	`îrx
(
EX_USAGE
, "exå™eou†fûíamê¨gumít†%s", 
av
[
ac
-1]);

522 i‡((
f
 = 
	`f›í
(
fûíame
, "r")Ë=
NULL
)

523 
	`îr
(
EX_UNAVAILABLE
, "f›í: %s", 
fûíame
);

525 i‡(
cmd
 !
NULL
) {

526 
pùedes
[2];

528 i‡(
	`pùe
(
pùedes
) == -1)

529 
	`îr
(
EX_OSERR
, "cannot createÖipe");

531 
¥ïroc
 = 
	`f‹k
();

532 i‡(
¥ïroc
 == -1)

533 
	`îr
(
EX_OSERR
, "cannot fork");

535 i‡(
¥ïroc
 == 0) {

540 i‡(
	`dup2
(
	`fûío
(
f
), 0) == -1

541 || 
	`dup2
(
pùedes
[1], 1) == -1)

542 
	`îr
(
EX_OSERR
, "dup2()");

543 
	`f˛o£
(
f
);

544 
	`˛o£
(
pùedes
[1]);

545 
	`˛o£
(
pùedes
[0]);

546 
	`execvp
(
cmd
, 
av
);

547 
	`îr
(
EX_OSERR
, "execvp(%sËÁûed", 
cmd
);

549 
	`f˛o£
(
f
);

550 
	`˛o£
(
pùedes
[1]);

551 i‡((
f
 = 
	`fd›í
(
pùedes
[0], "r")Ë=
NULL
) {

552 
ßvedî∫o
 = 
î∫o
;

554 ()
	`kûl
(
¥ïroc
, 
SIGTERM
);

555 
î∫o
 = 
ßvedî∫o
;

556 
	`îr
(
EX_OSERR
, "fdopen()");

561 
	`fgës
(
buf
, (buf), 
f
)) {

562 
löíame
[20];

563 *
¨gs
[2];

565 
löío
++;

566 
	`¢¥ötf
(
löíame
, ÷öíame), "Löê%d", 
löío
);

567 
	`£çrog«me
(
löíame
);

568 
¨gs
[0] = 
¥og«me
;

569 
¨gs
[1] = 
buf
;

570 
	`ùfw_maö
(2, 
¨gs
);

572 
	`f˛o£
(
f
);

573 i‡(
cmd
 !
NULL
) {

574 
°©us
;

576 i‡(
	`waôpid
(
¥ïroc
, &
°©us
, 0) == -1)

577 
	`îrx
(
EX_OSERR
, "waitpid()");

578 i‡(
	`WIFEXITED
(
°©us
Ë&& 
	`WEXITSTATUS
(°©usË!
EX_OK
)

579 
	`îrx
(
EX_UNAVAILABLE
,

581 
	`WEXITSTATUS
(
°©us
));

582 i‡(
	`WIFSIGNALED
(
°©us
))

583 
	`îrx
(
EX_UNAVAILABLE
,

585 
	`WTERMSIG
(
°©us
));

587 
	}
}

590 
	$maö
(
ac
, *
av
[])

592 #i‡
	`deföed
(
_WIN32
Ë&& deföed(
TCC
)

594 
WSADATA
 
wßD©a
;

595 
ªt
=0;

596 
wVîsi⁄Reque°ed
 = 
	`MAKEWORD
(2, 2);

597 
ªt
 = 
	`WSASèπup
(
wVîsi⁄Reque°ed
, &
wßD©a
);

598 i‡(
ªt
 != 0) {

601 
	`¥ötf
("WSASèπu∞Áûed wôhÉº‹: %d\n", 
ªt
);

611 i‡(
ac
 > 1 && 
av
[ac - 1][0] == '/') {

612 i‡(
	`ac˚ss
(
av
[
ac
 - 1], 
R_OK
) == 0)

613 
	`ùfw_ªadfûe
(
ac
, 
av
);

615 
	`îr
(
EX_USAGE
, "∑th«me: %s", 
av
[
ac
 - 1]);

617 i‡(
	`ùfw_maö
(
ac
, 
av
)) {

618 
	`îrx
(
EX_USAGE
,

623  
EX_OK
;

624 
	}
}

	@ipfw/qsort.c

30 #i‡
deföed
(
LIBC_SCCS
Ë&& !deföed(
löt
)

31 
	gsccsid
[] = "@(#)qsort.c 8.1 (Berkeley) 6/4/93";

33 
	~<sys/cdefs.h
>

34 
__FBSDID
("$FreeBSD: src/lib/libc/stdlib/qsort.c,v 1.15 2008/01/14 09:21:34 das Exp $");

36 
	~<°dlib.h
>

38 #ifde‡
I_AM_QSORT_R


39 
	tcmp_t
(*, const *, const *);

41 
	tcmp_t
(const *, const *);

43 
ölöe
 *
med3
(*, *, *, 
cmp_t
 *, *);

44 
ölöe
 
sw≠func
(*, *, , );

46 
	#mö
(
a
, 
b
Ë◊Ë< (bË?á : 
	)
b

51 
	#sw≠code
(
TYPE
, 
∑rmi
, 
∑rmj
, 
n
) { \

52 
i
 = (
n
Ë/  (
TYPE
); \

53 
TYPE
 *
pi
 = (TYPE *Ë(
∑rmi
); \

54 
TYPE
 *
pj
 = (TYPE *Ë(
∑rmj
); \

56 
TYPE
 
t
 = *
pi
; \

57 *
pi
++ = *
pj
; \

58 *
pj
++ = 
t
; \

59 } --
i
 > 0); \

60 }

	)

62 
	#SWAPINIT
(
a
, 
es
Ë
sw≠ty≥
 = ((*)a - (*)0) % () || \

63 
es
 % (Ë? 2 :É†=()? 0 : 1;

	)

65 
ölöe
 

66 
	$sw≠func
(
a
, 
b
, 
n
, 
sw≠ty≥
)

67 *
a
, *
b
;

68 
n
, 
sw≠ty≥
;

70 if(
sw≠ty≥
 <= 1)

71 
	`sw≠code
(, 
a
, 
b
, 
n
)

73 
	`sw≠code
(, 
a
, 
b
, 
n
)

74 
	}
}

76 
	#sw≠
(
a
, 
b
) \

77 i‡(
sw≠ty≥
 == 0) { \

78 
t
 = *(*)(
a
); \

79 *(*)(
a
Ë*(*)(
b
); \

80 *(*)(
b
Ë
t
; \

82 
	`sw≠func
(
a
, 
b
, 
es
, 
sw≠ty≥
)

	)

84 
	#vecsw≠
(
a
, 
b
, 
n
Ëi‡(“Ë> 0Ë
	`sw≠func
◊, b,Ç, 
sw≠ty≥
)

	)

86 #ifde‡
I_AM_QSORT_R


87 
	#CMP
(
t
, 
x
, 
y
Ë(
	`cmp
(—), (x), (y)))

	)

89 
	#CMP
(
t
, 
x
, 
y
Ë(
	`cmp
((x), (y)))

	)

92 
ölöe
 *

93 
med3
(*
a
, *
b
, *
c
, 
cmp_t
 *
cmp
, *
thunk


94 #i‚de‡
I_AM_QSORT_R


95 
__unu£d


99  
CMP
(
thunk
, 
a
, 
b
) < 0 ?

100 (
CMP
(
thunk
, 
b
, 
c
Ë< 0 ? 
	gb
 : (CMP—hunk, 
a
, cË< 0 ? 
	gc
 :á ))

101 :(
CMP
(
thunk
, 
b
, 
c
Ë> 0 ? 
	gb
 : (CMP—hunk, 
a
, cË< 0 ? 
	ga
 : c ));

104 #ifde‡
I_AM_QSORT_R


106 
	$qs‹t_r
(*
a
, 
size_t
 
n
, size_à
es
, *
thunk
, 
cmp_t
 *
cmp
)

108 
	#thunk
 
NULL


	)

110 
	$qs‹t
(*
a
, 
size_t
 
n
, size_à
es
, 
cmp_t
 *
cmp
)

113 *
∑
, *
pb
, *
pc
, *
pd
, *
∂
, *
pm
, *
≤
;

114 
size_t
 
d
, 
r
;

115 
cmp_ªsu…
;

116 
sw≠ty≥
, 
sw≠_˙t
;

118 
lo›
: 
	`SWAPINIT
(
a
, 
es
);

119 
sw≠_˙t
 = 0;

120 i‡(
n
 < 7) {

121 
pm
 = (*)
a
 + 
es
;Öm < (*Ô + 
n
 *És;Öm +=És)

122 
∂
 = 
pm
;

123 
∂
 > (*)
a
 && 
	`CMP
(
thunk
,Ö»- 
es
,Öl) > 0;

124 
∂
 -
es
)

125 
	`sw≠
(
∂
,Ö»- 
es
);

128 
pm
 = (*)
a
 + (
n
 / 2Ë* 
es
;

129 i‡(
n
 > 7) {

130 
∂
 = 
a
;

131 
≤
 = (*)
a
 + (
n
 - 1Ë* 
es
;

132 i‡(
n
 > 40) {

133 
d
 = (
n
 / 8Ë* 
es
;

134 
∂
 = 
	`med3
’l,Ö»+ 
d
,Ö»+ 2 * d, 
cmp
, 
thunk
);

135 
pm
 = 
	`med3
’m - 
d
,Öm,Öm + d, 
cmp
, 
thunk
);

136 
≤
 = 
	`med3
’¿- 2 * 
d
,Ö¿- d,Ön, 
cmp
, 
thunk
);

138 
pm
 = 
	`med3
(
∂
,Öm, 
≤
, 
cmp
, 
thunk
);

140 
	`sw≠
(
a
, 
pm
);

141 
∑
 = 
pb
 = (*)
a
 + 
es
;

143 
pc
 = 
pd
 = (*)
a
 + (
n
 - 1Ë* 
es
;

145 
pb
 <
pc
 && (
cmp_ªsu…
 = 
	`CMP
(
thunk
,Öb, 
a
)) <= 0) {

146 i‡(
cmp_ªsu…
 == 0) {

147 
sw≠_˙t
 = 1;

148 
	`sw≠
(
∑
, 
pb
);

149 
∑
 +
es
;

151 
pb
 +
es
;

153 
pb
 <
pc
 && (
cmp_ªsu…
 = 
	`CMP
(
thunk
,Öc, 
a
)) >= 0) {

154 i‡(
cmp_ªsu…
 == 0) {

155 
sw≠_˙t
 = 1;

156 
	`sw≠
(
pc
, 
pd
);

157 
pd
 -
es
;

159 
pc
 -
es
;

161 i‡(
pb
 > 
pc
)

163 
	`sw≠
(
pb
, 
pc
);

164 
sw≠_˙t
 = 1;

165 
pb
 +
es
;

166 
pc
 -
es
;

168 i‡(
sw≠_˙t
 == 0) {

169 
pm
 = (*)
a
 + 
es
;Öm < (*Ô + 
n
 *És;Öm +=És)

170 
∂
 = 
pm
;

171 
∂
 > (*)
a
 && 
	`CMP
(
thunk
,Ö»- 
es
,Öl) > 0;

172 
∂
 -
es
)

173 
	`sw≠
(
∂
,Ö»- 
es
);

177 
≤
 = (*)
a
 + 
n
 * 
es
;

178 
r
 = 
	`mö
(
∑
 - (*)
a
, 
pb
 -Öa);

179 
	`vecsw≠
(
a
, 
pb
 - 
r
,Ñ);

180 
r
 = 
	`mö
(
pd
 - 
pc
, 
≤
 -Öd - 
es
);

181 
	`vecsw≠
(
pb
, 
≤
 - 
r
,Ñ);

182 i‡((
r
 = 
pb
 - 
∑
Ë> 
es
)

183 #ifde‡
I_AM_QSORT_R


184 
	`qs‹t_r
(
a
, 
r
 / 
es
,És, 
thunk
, 
cmp
);

186 
	`qs‹t
(
a
, 
r
 / 
es
,És, 
cmp
);

188 i‡((
r
 = 
pd
 - 
pc
Ë> 
es
) {

190 
a
 = 
≤
 - 
r
;

191 
n
 = 
r
 / 
es
;

192 
lo›
;

195 
	}
}

	@ipfw/qsort_r.c

7 
	#I_AM_QSORT_R


	)

8 
	~"qs‹t.c
"

	@kipfw-mod/bsd_compat.c

32 
	~<sys/cdefs.h
>

33 
	~<asm/div64.h
>

34 
	~<löux/øndom.h
>

35 
	~<√töë/ù_fw.h
>

36 
	~<√töë/ù_dummy√t.h
>

37 
	~<sys/mÆloc.h
>

43 
gëtimeofday
(
timevÆ
 *, 
timez⁄e
 *);

45 
	gticks
;

46 
	ghz
 = 1000;

47 
	gtick
 = 1000;

48 
	gboŸvîbo£
 = 0;

49 
timevÆ
 
	gboŸtime
;

51 
	gù_de·é
 = 64;

52 
	gmax_lökhdr
 = 16;

53 
	gfw_⁄e_∑ss
 = 1;

54 
u_l⁄g
 
	gö_iÁddrhmask
;

55 
ö_iÁddrhashhód
 *
	gö_iÁddrhashtbl
;

57 
u_öt
 
	gπ_numfibs
 = 
RT_NUMFIBS
;

64 
	gpfû_hód
;

65 (
	tpfû_hook_t
)

66 (*, 
	tmbuf
 **, 
	ti‚ë
 *, , 
	töpcb
 *);

68 
pfû_hód
 *

69 
	$pfû_hód_gë
(
¥Ÿo
, 
u_l⁄g
 
Êags
)

71 
dummy
;

72  (
pfû_hód
 *)&
dummy
;

73 
	}
}

76 
	$pfû_add_hook
(
pfû_hook_t
 *
func
, *
¨g
, 
dú
, 
pfû_hód
 *
h
)

79 
	}
}

82 
	$pfû_ªmove_hook
(
pfû_hook_t
 *
func
, *
¨g
, 
dú
, 
pfû_hód
 *
h
)

85 
	}
}

89 
	$¥iv_check
(
thªad
 *
td
, 
¥iv
)

92 
	}
}

95 
	$£cuªÀvñ_ge
(
u¸ed
 *
¸
, 
Àvñ
)

98 
	}
}

101 
	$sys˘l_h™dÀ_öt
(
SYSCTL_HANDLER_ARGS
)

104 
	}
}

107 
	$sys˘l_h™dÀ_l⁄g
(
SYSCTL_HANDLER_ARGS
)

110 
	}
}

113 
	$ëhî_demux
(
i‚ë
 *
iÂ
, 
mbuf
 *
m
)

116 
	}
}

119 
	$ëhî_ouçut_‰ame
(
i‚ë
 *
iÂ
, 
mbuf
 *
m
)

122 
	}
}

125 
	$ö_πÆloc_ign
(
rouã
 *
ro
, 
u_l⁄g
 
ignÊags
, 
u_öt
 
fibnum
)

128 
	}
}

131 
	$icmp_îr‹
(
mbuf
 *
n
, 
ty≥
, 
code
, 
uöt32_t
 
de°
, 
mtu
)

134 
	}
}

136 
u_sh‹t


137 
	$ö_cksum_skù
(
mbuf
 *
m
, 
Àn
, 
skù
)

140 
	}
}

142 
u_sh‹t


143 
	$ö_cksum_hdr
(
ù
 *ip)

146 
	}
}

151 
mbuf
 *

152 
	$ù_ªass
(
mbuf
 *
˛⁄e
)

154  
˛⁄e
;

155 
	}
}

156 #ifde‡
INP_LOCK_ASSERT


157 #unde‡
INP_LOCK_ASSERT


158 
	#INP_LOCK_ASSERT
(
a
)

	)

162 
	~<√töë/ù_fw.h
>

163 #ifde‡
__löux__


165 
	$¸ed_check
(*
_ö¢
, 
¥Ÿo
, 
i‚ë
 *
oif
,

166 
ö_addr
 
d°_ù
, 
u_öt16_t
 
d°_p‹t
, ö_add∏
§c_ù
,

167 
u_öt16_t
 
§c_p‹t
, 
bsd_u¸ed
 *
u
, *
ugid_lookuµ
,

168 
sk_buff
 *
skb
)

170 
m©ch
 = 0;

171 
ùfw_ö¢_u32
 *
ö¢
 = (ùfw_ö¢_u32 *)
_ö¢
;

173 i‡(*
ugid_lookuµ
 == 0) {

177 *
ugid_lookuµ
 = 
	`löux_lookup
(
¥Ÿo
,

178 
§c_ù
.
s_addr
, 
	`ht⁄s
(
§c_p‹t
),

179 
d°_ù
.
s_addr
, 
	`ht⁄s
(
d°_p‹t
),

180 
skb
, 
oif
 ? 1 : 0, 
u
);

182 i‡(*
ugid_lookuµ
 < 0)

185 i‡(
ö¢
->
o
.
›code
 =
O_UID
)

186 
m©ch
 = (
u
->
uid
 =(
uid_t
)
ö¢
->
d
[0]);

187 i‡(
ö¢
->
o
.
›code
 =
O_JAIL
)

188 
m©ch
 = (
u
->
xid
 =(
uid_t
)
ö¢
->
d
[0]);

189 i‡(
ö¢
->
o
.
›code
 =
O_GID
)

190 
m©ch
 = (
u
->
gid
 =(
uid_t
)
ö¢
->
d
[0]);

191  
m©ch
;

192 
	}
}

196 
	$jaûed
(
u¸ed
 *
¸ed
)

199 
	}
}

208 
	$ö_loˇœddr
(
ö_addr
 
ö
)

211 
	}
}

214 
	$so›tc›yout
(
sock›t
 *
s›t
, c⁄° *
buf
, 
size_t
 
Àn
)

216 
size_t
 
vÆsize
 = 
s›t
->
s›t_vÆsize
;

218 i‡(
Àn
 < 
vÆsize
)

219 
s›t
->
s›t_vÆsize
 = 
vÆsize
 = 
Àn
;

221 
	`bc›y
(
buf
, 
s›t
->
s›t_vÆ
, 
vÆsize
);

223 
	}
}

229 
	$so›tc›yö
(
sock›t
 *
s›t
, *
buf
, 
size_t
 
Àn
, size_à
möÀn
)

231 
size_t
 
vÆsize
 = 
s›t
->
s›t_vÆsize
;

233 i‡(
vÆsize
 < 
möÀn
)

234  
EINVAL
;

235 i‡(
vÆsize
 > 
Àn
)

236 
s›t
->
s›t_vÆsize
 = 
vÆsize
 = 
Àn
;

238 
	`bc›y
(
s›t
->
s›t_vÆ
, 
buf
, 
vÆsize
);

240 
	}
}

243 
	$gëmi¸ou±ime
(
timevÆ
 *
tv
)

245 
	`do_gëtimeofday
(
tv
);

246 
	}
}

249 
	~<¨∑/öë.h
>

252 
	$öë_¡ﬂ_r
(
ö_addr
 
öa
, *
buf
)

254 #ifde‡
_WIN32


256 *
u˝
 = (*)&
öa
;

258 
	`•rötf
(
buf
, "%d.%d.%d.%d",

259 
u˝
[0] & 0xff,

260 
u˝
[1] & 0xff,

261 
u˝
[2] & 0xff,

262 
u˝
[3] & 0xff);

264  
buf
;

265 
	}
}

268 
	$öë_¡ﬂ
(
ö_addr
 
öa
)

270 
buf
[16];

271  
	`öë_¡ﬂ_r
(
öa
, 
buf
);

272 
	}
}

275 
	$øndom
()

277 #ifde‡
_WIN32


278 
£ed
;

279 i‡(
£ed
 == 0) {

280 
LARGE_INTEGER
 
tm
;

281 
	`KeQuîySy°emTime
(&
tm
);

282 
£ed
 = 
tm
.
LowP¨t
;

284  
	`RéR™domEx
(&
£ed
) & 0x7fffffff;

286 
r
;

287 
	`gë_øndom_byãs
(&
r
, (r));

288  
r
 & 0x7fffffff;

290 
	}
}

298 
öt64_t


299 
	$div64
(
öt64_t
 
a
, i¡64_à
b
)

301 #ifde‡
_WIN32


302 
a1
 = 
a
, 
b1
 = 
b
;

303  
a1
/
b1
;

305 
uöt64_t
 
ua
, 
ub
;

306 
sign
 = ((
a
>0)?1:-1Ë* ((
b
>0)?1:-1);

308 
ua
 = ((
a
>0)?a:-a);

309 
ub
 = ((
b
>0)?b:-b);

310 
	`do_div
(
ua
, 
ub
);

311  
sign
*
ua
;

313 
	}
}

315 #ifde‡
__MIPSEL__


316 
size_t


317 
	$°æ˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
siz
)

319 *
d
 = 
d°
;

320 c⁄° *
s
 = 
§c
;

321 
size_t
 
n
 = 
siz
;

324 i‡(
n
 != 0 && --n != 0) {

326 i‡((*
d
++ = *
s
++) == 0)

328 } --
n
 != 0);

332 i‡(
n
 == 0) {

333 i‡(
siz
 != 0)

334 *
d
 = '\0';

335 *
s
++)

339 (
s
 - 
§c
 - 1);

340 
	}
}

347 
	$‚m©ch
(c⁄° *
∑âîn
, c⁄° *
°rög
, 
Êags
)

349 
s
;

351 i‡(!
°rög
 || !
∑âîn
)

353  (
s
 = *
°rög
++) ) {

354 
p
 = *
∑âîn
++;

355 i‡(
p
 == '\0')

357 i‡(
p
 == '*')

359 i‡(
p
 ='.' ||Ö =
s
)

364 i‡(*
∑âîn
 == '\0' || *pattern == '*')

367 
	}
}

375 #ifde‡
löux


376 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,31)

377 
ölöe
 
	$skb_d°_£t
(
sk_buff
 *
skb
, 
d°_íåy
 *
d°
)

379 
skb
->
d°
 = dst;

380 
	}
}

382 
ölöe
 
d°_íåy
 *
	$skb_d°
(c⁄° 
sk_buff
 *
skb
)

384  (
d°_íåy
 *)
skb
->
d°
;

385 
	}
}

393 #ifde‡
EMULATE_SYSCTL


394 
sys˘…abÀ
 
	gGST
;

397 
	$kesys˘l_emu_gë
(
sock›t
* 
s›t
)

399 
dn_id
* 
oid
 = 
s›t
->
s›t_vÆ
;

400 
sys˘lhód
* 
íåy
;

401 
sizíìded
 = (
dn_id
Ë+ 
GST
.
tŸÆsize
 +

402 (
sys˘lhód
);

403 * 
p°rög
;

404 * 
pd©a
;

405 
i
;

407 i‡(
s›t
->
s›t_vÆsize
 < 
sizíìded
) {

410 
oid
->
id
 = 
sizíìded
;

411 
s›t
->
s›t_vÆsize
 = (
dn_id
);

415 
íåy
 = (
sys˘lhód
*)(
oid
+1);

416  
i
=0; i<
GST
.
cou¡
; i++) {

417 
íåy
->
blockÀn
 = 
GST
.íåy[
i
].
hód
.blocklen;

418 
íåy
->
«mñí
 = 
GST
.íåy[
i
].
hód
.namelen;

419 
íåy
->
Êags
 = 
GST
.íåy[
i
].
hód
.flags;

420 
íåy
->
d©Æí
 = 
GST
.íåy[
i
].
hód
.datalen;

421 
pd©a
 = (*)(
íåy
+1);

422 
p°rög
 = 
pd©a
+
GST
.
íåy
[
i
].
hód
.
d©Æí
;

423 
	`bc›y
(
GST
.
íåy
[
i
].
d©a
, 
pd©a
, GST.íåy[i].
hód
.
d©Æí
);

424 
	`bc›y
(
GST
.
íåy
[
i
].
«me
, 
p°rög
, GST.íåy[i].
hód
.
«mñí
);

425 
íåy
 = (
sys˘lhód
*)

426 ((*)(
íåy
Ë+ 
GST
.íåy[
i
].
hód
.
blockÀn
);

428 
s›t
->
s›t_vÆsize
 = 
sizíìded
;

430 
	}
}

433 
	$kesys˘l_emu_£t
(* 
p
, 
l
)

435 
sys˘lhód
* 
íåy
;

436 * 
pd©a
;

437 * 
p°rög
;

438 
i
 = 0;

440 
íåy
 = (
sys˘lhód
*)(((
dn_id
*)
p
)+1);

441 
pd©a
 = (*)(
íåy
+1);

442 
p°rög
 = 
pd©a
 + 
íåy
->
d©Æí
;

444 
i
=0; i<
GST
.
cou¡
; i++) {

445 i‡(
	`°rcmp
(
GST
.
íåy
[
i
].
«me
, 
p°rög
) != 0)

447 
	`¥ötf
("%s: m©ch found! %s\n",
__FUNCTION__
,
p°rög
);

450 i‡(
íåy
->
d©Æí
 !
GST
.íåy[
i
].
hód
.datalen) {

451 
	`¥ötf
("%s:Üen mismatch, user %d vs kernel %d\n",

452 
__FUNCTION__
, 
íåy
->
d©Æí
,

453 
GST
.
íåy
[
i
].
hód
.
d©Æí
);

458 if–(
GST
.
íåy
[
i
].
hód
.
Êags
 & 3Ë=
CTLFLAG_RD
) {

459 
	`¥ötf
("%s:ÅheÉntry %s isÑead only\n",

460 
__FUNCTION__
,
GST
.
íåy
[
i
].
«me
);

463 
	`bc›y
(
pd©a
, 
GST
.
íåy
[
i
].
d©a
, GST.íåy[i].
hód
.
d©Æí
);

466 
	`¥ötf
("%s: m©chÇŸ found\n",
__FUNCTION__
);

468 
	}
}

472 
	$undîsc‹ë›oöt
(* 
s
)

474 ; *
s
 && *s != '.'; s++)

475 i‡(*
s
 == '_')

476 *
s
 = '.';

477 
	}
}

480 
	$f‹m©«mes
()

482 
i
;

483 
size
=0;

484 * 
«me
;

486 
i
=0; i<
GST
.
cou¡
; i++)

487 
size
 +
GST
.
íåy
[
i
].
hód
.
«mñí
;

488 
GST
.
«mebuf„r
 = 
	`mÆloc
(
size
, 0, 0);

489 i‡(
GST
.
«mebuf„r
 =
NULL
)

491 
«me
 = 
GST
.
«mebuf„r
;

492 
i
=0; i<
GST
.
cou¡
; i++) {

493 
	`bc›y
(
GST
.
íåy
[
i
].
«me
,Çame, GST.íåy[i].
hód
.
«mñí
);

494 
	`undîsc‹ë›oöt
(
«me
);

495 
GST
.
íåy
[
i
].
«me
 =Çame;

496 
«me
 +
GST
.
íåy
[
i
].
hód
.
«mñí
;

499 
	}
}

502 
	$dumpGST
()

504 
i
;

506 
i
=0; i<
GST
.
cou¡
; i++) {

507 
	`¥ötf
("SYSCTL:É¡ry %i\n", 
i
);

508 
	`¥ötf
("«mê%s\n", 
GST
.
íåy
[
i
].
«me
);

509 
	`¥ötf
("«mñí %i\n", 
GST
.
íåy
[
i
].
hód
.
«mñí
);

510 
	`¥ötf
("type %iáccess %i\n",

511 
GST
.
íåy
[
i
].
hód
.
Êags
 >> 2,

512 
GST
.
íåy
[
i
].
hód
.
Êags
 & 0x00000003);

513 
	`¥ötf
("d©®%i\n", *(*)(
GST
.
íåy
[
i
].
d©a
));

514 
	`¥ötf
("d©Æí %i\n", 
GST
.
íåy
[
i
].
hód
.
d©Æí
);

515 
	`¥ötf
("blockÀ¿%i\n", 
GST
.
íåy
[
i
].
hód
.
blockÀn
);

517 
	}
}

519 
sys˘l_addgroup_f1
();

520 
sys˘l_addgroup_f2
();

521 
sys˘l_addgroup_f3
();

522 
sys˘l_addgroup_f4
();

525 
	$keöô_GST
()

527 
ªt
;

529 
	`sys˘l_addgroup_f1
();

530 
	`sys˘l_addgroup_f2
();

531 
	`sys˘l_addgroup_f3
();

532 
	`sys˘l_addgroup_f4
();

533 
ªt
 = 
	`f‹m©«mes
();

534 i‡(
ªt
 != 0)

535 
	`¥ötf
("conversion ofÇames failed for someÑeason\n");

537 
	`¥ötf
("*** Global Sysctl TableÉntries = %i,Åotal size = %i ***\n",

538 
GST
.
cou¡
, GST.
tŸÆsize
);

539 
	}
}

542 
	$kìxô_GST
()

544 i‡(
GST
.
«mebuf„r
 !
NULL
)

545 
	`‰ì
(
GST
.
«mebuf„r
,0);

546 
	`bzîo
(&
GST
, (GST));

547 
	}
}

550 
	$sys˘l_pushback
(* 
«me
, 
Êags
, 
d©Æí
, * 
d©a
)

552 i‡(
GST
.
cou¡
 >
GST_HARD_LIMIT
) {

553 
	`¥ötf
("WARNING: global sysctlÅable full,ÅhisÉntry willÇot beádded,"

557 
GST
.
íåy
[GST.
cou¡
].
hód
.
«mñí
 = 
	`°æí
(
«me
)+1;

558 
GST
.
íåy
[GST.
cou¡
].
«me
 =Çame;

559 
GST
.
íåy
[GST.
cou¡
].
hód
.
Êags
 = flags;

560 
GST
.
íåy
[GST.
cou¡
].
d©a
 = data;

561 
GST
.
íåy
[GST.
cou¡
].
hód
.
d©Æí
 = datalen;

562 
GST
.
íåy
[GST.
cou¡
].
hód
.
blockÀn
 =

563 (((
sys˘lhód
Ë+ 
GST
.
íåy
[GST.
cou¡
].
hód
.
«mñí
 +

564 
GST
.
íåy
[GST.
cou¡
].
hód
.
d©Æí
)+3) & ~3;

565 
GST
.
tŸÆsize
 +GST.
íåy
[GST.
cou¡
].
hód
.
blockÀn
;

566 
GST
.
cou¡
++;

567 
	}
}

	@kipfw-mod/debug.c

1 
	~<¡ddk.h
>

3 c⁄° * 
	$ãxify_cmd
(
i
)

5 i‡(
i
==110)

7 i‡(
i
==111)

9 i‡(
i
==112)

11 i‡(
i
==113)

13 i‡(
i
==114)

15 i‡(
i
==115)

17 i‡(
i
==116)

19 i‡(
i
==117)

21 i‡(
i
==118)

23 i‡(
i
==119)

25 i‡(
i
==120)

27 i‡(
i
==121)

29 i‡(
i
==122)

31 i‡(
i
==124)

33 i‡(
i
==108)

35 i‡(
i
==109)

38 
	}
}

40 c⁄° * 
	$ãxify_¥Ÿo
(
p
)

42 i‡(
p
==1)

44 i‡(
p
==6)

46 i‡(
p
==17)

49 
	}
}

51 
	$hexdump
(* 
addr
, 
Àn
, c⁄° *
msg
)

53 
i
;

54 c⁄° 
ci˛i
 = 
Àn
/8;

55 c⁄° 
ª°o
 = 
Àn
%8;

56 
d
[8];

58 
	`DbgPröt
("%†© %∞À¿%d\n", 
msg
, 
addr
, 
Àn
);

59 
i
=0; i<=
ci˛i
; i++) {

60 
	`bzîo
(
d
, 8);

61 
	`bc›y
(
addr
+
i
*8, 
d
, i < 
ci˛i
 ? 8 : 
ª°o
);

62 
	`DbgPröt
("%04X %02X %02X %02X %02X %02X %02X %02X %02X\n",

63 
i
*8, 
d
[0], d[1], d[2], d[3], d[4],

64 
d
[5], d[6], d[7]);

66 
	`DbgPröt
("\n");

67 
	}
}

	@kipfw-mod/dn_heap.c

33 
	~<sys/cdefs.h
>

34 
	~<sys/∑øm.h
>

35 #ifde‡
_KERNEL


36 
__FBSDID
("$FreeBSD: user/luigi/ipfw3-head/sys/netinet/ipfw/dn_heap.c 203279 2010-01-31 12:20:29ZÜuigi $");

37 
	~<sys/sy°m.h
>

38 
	~<sys/mÆloc.h
>

39 
	~<sys/kî√l.h
>

40 
	~<√töë/ùfw/dn_hóp.h
>

41 #i‚de‡
log


42 
	#log
(
x
, 
¨g
...)

	)

47 
	~<°dio.h
>

48 
	~<dn_ã°.h
>

49 
	~<°rögs.h
>

50 
	~<°dlib.h
>

52 
	~"dn_hóp.h
"

53 
	#log
(
x
, 
¨g
...Ë
	`Ârötf
(
°dîr
, ##árg)

	)

54 
	#∑nic
(
x
...Ë
	`Ârötf
(
°dîr
, ## x), 
	`exô
(1)

	)

55 
	#MALLOC_DEFINE
(
a
, 
b
, 
c
)

	)

56 *
	$my_mÆloc
(
s
Ë{  
	`mÆloc
(s); 
	}
}

57 
	$my_‰ì
(*
p
Ë{ 
	`‰ì
’); 
	}
}

58 
	#mÆloc
(
s
, 
t
, 
w
Ë
	`my_mÆloc
(s)

	)

59 
	#‰ì
(
p
, 
t
Ë
	`my_‰ì
’)

	)

62 
MALLOC_DEFINE
(
M_DN_HEAP
, "dummynet", "dummynet heap");

74 
	#HEAP_FATHER
(
x
Ë––(xË- 1 ) / 2 )

	)

75 
	#HEAP_LEFT
(
x
Ë–(x)+(xË+ 1 )

	)

76 
	#HEAP_SWAP
(
a
, 
b
, 
buf„r
Ë{ buf„∏®;á = b ; b = buf„∏; }

	)

77 
	#HEAP_INCREMENT
 15

	)

80 
	$hóp_ªsize
(
dn_hóp
 *
h
, 
√w_size
)

82 
dn_hóp_íåy
 *
p
;

84 i‡(
h
->
size
 >
√w_size
 )

87 
√w_size
 |=Çew_size >> 1;

88 
√w_size
 |=Çew_size >> 2;

89 
√w_size
 |=Çew_size >> 4;

90 
√w_size
 |=Çew_size >> 8;

91 
√w_size
 |=Çew_size >> 16;

93 
√w_size
 = (√w_sizê+ 
HEAP_INCREMENT
 ) & ~HEAP_INCREMENT;

95 
p
 = 
	`mÆloc
(
√w_size
 * (*p), 
M_DN_HEAP
, 
M_NOWAIT
);

96 i‡(
p
 =
NULL
) {

97 
	`¥ötf
("--- %s,Ñesizê%d faûed\n", 
__func__
, 
√w_size
 );

100 i‡(
h
->
size
 > 0) {

101 
	`bc›y
(
h
->
p
,Ö, h->
size
 * (*p) );

102 
	`‰ì
(
h
->
p
, 
M_DN_HEAP
);

104 
h
->
p
 =Ö;

105 
h
->
size
 = 
√w_size
;

107 
	}
}

110 
	$hóp_öô
(
dn_hóp
 *
h
, 
size
, 
ofs
)

112 i‡(
	`hóp_ªsize
(
h
, 
size
))

114 
h
->
ñemíts
 = 0;

115 
h
->
ofs
 = ofs;

117 
	}
}

129 
	#SET_OFFSET
(
h
, 
i
) do { \

130 i‡(
h
->
ofs
 > 0) \

131 *((
öt32_t
 *)((*)(
h
->
p
[
i
].
obje˘
Ë+ h->
ofs
)) = i; \

132 } 0)

	)

137 
	#RESET_OFFSET
(
h
, 
i
) do { \

138 i‡(
h
->
ofs
 > 0) \

139 *((
öt32_t
 *)((*)(
h
->
p
[
i
].
obje˘
Ë+ h->
ofs
)) = -16; \

140 } 0)

	)

143 
	$hóp_ö£π
(
dn_hóp
 *
h
, 
uöt64_t
 
key1
, *
p
)

145 
s⁄
 = 
h
->
ñemíts
;

148 i‡(
p
 =
NULL
) {

149 
s⁄
 = 
key1
;

151 
s⁄
 = 
h
->
ñemíts
;

152 i‡(
s⁄
 =
h
->
size
)

154 i‡(
	`hóp_ªsize
(
h
, h->
ñemíts
+16) )

156 
h
->
p
[
s⁄
].
obje˘
 =Ö;

157 
h
->
p
[
s⁄
].
key
 = 
key1
;

158 
h
->
ñemíts
++;

161 
s⁄
 > 0) {

162 
Áthî
 = 
	`HEAP_FATHER
(
s⁄
);

163 
dn_hóp_íåy
 
tmp
;

165 i‡(
	`DN_KEY_LT
–
h
->
p
[
Áthî
].
key
, h->p[
s⁄
].key ) )

168 
	`HEAP_SWAP
(
h
->
p
[
s⁄
], h->p[
Áthî
], 
tmp
);

169 
	`SET_OFFSET
(
h
, 
s⁄
);

170 
s⁄
 = 
Áthî
;

172 
	`SET_OFFSET
(
h
, 
s⁄
);

174 
	}
}

180 
	$hóp_exåa˘
(
dn_hóp
 *
h
, *
obj
)

182 
chûd
, 
Áthî
, 
max
 = 
h
->
ñemíts
 - 1;

184 i‡(
max
 < 0) {

185 
	`¥ötf
("--- %s:Ém±y hó∞0x%p\n", 
__FUNCTION__
, 
h
);

188 i‡(
obj
 =
NULL
)

189 
Áthî
 = 0;

191 i‡(
h
->
ofs
 <= 0)

192 
	`∑nic
("%s:Éxtract from middleÇot set on %p\n",

193 
__FUNCTION__
, 
h
);

194 
Áthî
 = *((*)((*)
obj
 + 
h
->
ofs
));

195 i‡(
Áthî
 < 0 || f©hî >
h
->
ñemíts
) {

196 
	`∑nic
("%s: father %d out of bound 0..%d\n",

197 
__FUNCTION__
, 
Áthî
, 
h
->
ñemíts
);

206 
	`RESET_OFFSET
(
h
, 
Áthî
);

207  (
chûd
 = 
	`HEAP_LEFT
(
Áthî
)Ë<
max
 ) {

208 i‡(
chûd
 !
max
 &&

209 
	`DN_KEY_LT
(
h
->
p
[
chûd
+1].
key
, h->p[child].key) )

210 
chûd
++;

211 
h
->
p
[
Áthî
] = h->p[
chûd
];

212 
	`SET_OFFSET
(
h
, 
Áthî
);

213 
Áthî
 = 
chûd
;

215 
h
->
ñemíts
--;

216 i‡(
Áthî
 !
max
) {

221 
h
->
p
[
Áthî
] = h->p[
max
];

222 
	`hóp_ö£π
(
h
, 
Áthî
, 
NULL
);

224 
	}
}

232 
	$hóp_move
(
dn_hóp
 *
h
, 
uöt64_t
 
√w_key
, *
obje˘
)

234 
ãmp
, 
i
, 
max
 = 
h
->
ñemíts
-1;

235 
dn_hóp_íåy
 *
p
, 
buf
;

237 i‡(
h
->
ofs
 <= 0)

238 
	`∑nic
("cannot move items onÅhis heap");

239 
p
 = 
h
->p;

241 
i
 = *((*)((*)
obje˘
 + 
h
->
ofs
));

242 i‡(
	`DN_KEY_LT
(
√w_key
, 
p
[
i
].
key
) ) {

243 
p
[
i
].
key
 = 
√w_key
;

244 ; 
i
>0 &&

245 
	`DN_KEY_LT
(
√w_key
, 
p
[(
ãmp
 = 
	`HEAP_FATHER
(
i
))].
key
);

246 
i
 = 
ãmp
 ) {

247 
	`HEAP_SWAP
(
p
[
i
],Ö[
ãmp
], 
buf
);

248 
	`SET_OFFSET
(
h
, 
i
);

251 
p
[
i
].
key
 = 
√w_key
;

252  (
ãmp
 = 
	`HEAP_LEFT
(
i
)Ë<
max
 ) {

254 i‡(
ãmp
 !
max
 &&

255 
	`DN_KEY_LT
(
p
[
ãmp
+1].
key
,Ö[temp].key))

256 
ãmp
++;

257 i‡(
	`DN_KEY_LT
(>
p
[
ãmp
].
key
, 
√w_key
)) {

259 
	`HEAP_SWAP
(
p
[
i
],Ö[
ãmp
], 
buf
);

260 
	`SET_OFFSET
(
h
, 
i
);

263 
i
 = 
ãmp
;

266 
	`SET_OFFSET
(
h
, 
i
);

267 
	}
}

275 
	$hópify
(
dn_hóp
 *
h
)

277 
i
;

279 
i
 = 0; i < 
h
->
ñemíts
; i++ )

280 
	`hóp_ö£π
(
h
, 
i
 , 
NULL
);

281 
	}
}

284 
hóp_sˇn
(
dn_hóp
 *
h
, (*
‚
)(*, 
uöçå_t
),

285 
uöçå_t
 
¨g
)

287 
i
, 
ªt
, 
found
;

289 
i
 = 
found
 = 0 ; i < 
h
->
ñemíts
 ;) {

290 
ªt
 = 
	`‚
(
h
->
p
[
i
].
obje˘
, 
¨g
);

291 i‡(
ªt
 & 
HEAP_SCAN_DEL
) {

292 
h
->
ñemíts
-- ;

293 
h
->
p
[
i
] = h->p[h->
ñemíts
] ;

294 
found
++ ;

296 
i
++ ;

297 i‡(
ªt
 & 
HEAP_SCAN_END
)

300 i‡(
found
)

301 
	`hópify
(
h
);

302  
found
;

303 
	}
}

309 
	$hóp_‰ì
(
dn_hóp
 *
h
)

311 i‡(
h
->
size
 >0 )

312 
	`‰ì
(
h
->
p
, 
M_DN_HEAP
);

313 
	`bzîo
(
h
, (*h) );

314 
	}
}

320 
	sdn_ht
 {

321 
	mbuckës
;

322 
	míåõs
;

323 
	mofs
;

324 
uöt32_t
 (*
hash
)(
	muöçå_t
, , *
	m¨g
);

325 (*
	mm©ch
)(*
	m_ñ
, 
uöçå_t
 
	mkey
, , *);

326 *(*
	m√wh
)(
	muöçå_t
, , *);

327 **
	mht
;

335 
dn_ht
 *

336 
dn_ht_öô
(
dn_ht
 *
ht
, 
buckës
, 
ofs
,

337 
	$uöt32_t
 (*
h
)(
uöçå_t
, , *),

338 (*
m©ch
)(*, 
uöçå_t
, , *),

339 *(*
√wh
)(
uöçå_t
, , *))

341 
l
;

361 
b_mö
;

362 
b_max
;

363 
b_‹i
;

365 i‡(
h
 =
NULL
 || 
m©ch
 == NULL) {

366 
	`¥ötf
("--- missing hash or match function");

367  
NULL
;

369 i‡(
buckës
 < 1 || buckets > 65536)

370  
NULL
;

372 
b_‹i
 = 
buckës
;

374 
buckës
 |= buckets >> 1;

375 
buckës
 |= buckets >> 2;

376 
buckës
 |= buckets >> 4;

377 
buckës
 |= buckets >> 8;

378 
buckës
 |= buckets >> 16;

380 
b_max
 = 
buckës
;

381 
b_mö
 = 
buckës
 >> 1;

384 i‡(
b_mö
 * 4000 / 3000 < 
b_‹i
)

385 
buckës
 = 
b_max
;

387 
buckës
 = 
b_mö
;

389 i‡(
ht
) {

390 i‡(
buckës
 <
ht
->buckets) {

391 
ht
->
buckës
 = buckets;

394 i‡(
ht
->ht != (*)(ht + 1))

395 
	`‰ì
(
ht
->ht, 
M_DN_HEAP
);

396 
	`‰ì
(
ht
, 
M_DN_HEAP
);

397 
ht
 = 
NULL
;

400 i‡(
ht
 =
NULL
) {

404 
l
 = (*
ht
Ë+ (
buckës
 + 1) * (**);

405 
ht
 = 
	`mÆloc
(
l
, 
M_DN_HEAP
, 
M_NOWAIT
 | 
M_ZERO
);

407 i‡(
ht
) {

408 
ht
->ht = (**)(ht + 1);

409 
ht
->
buckës
 = buckets;

410 
ht
->
ofs
 = ofs;

411 
ht
->
hash
 = 
h
;

412 
ht
->
m©ch
 = match;

413 
ht
->
√wh
 =Çewh;

415  
ht
;

416 
	}
}

420 
	$do_dñ
(*
obj
, *
¨g
)

422  
DNHT_SCAN_DEL
;

423 
	}
}

426 
	$dn_ht_‰ì
(
dn_ht
 *
ht
, 
Êags
)

428 i‡(
ht
 =
NULL
)

430 i‡(
Êags
 & 
DNHT_REMOVE
) {

431 ()
	`dn_ht_sˇn
(
ht
, 
do_dñ
, 
NULL
);

433 i‡(
ht
->ht && ht->ht != (*)(ht + 1))

434 
	`‰ì
(
ht
->ht, 
M_DN_HEAP
);

435 
	`‰ì
(
ht
, 
M_DN_HEAP
);

437 
	}
}

440 
	$dn_ht_íåõs
(
dn_ht
 *
ht
)

442  
ht
 ? ht->
íåõs
 : 0;

443 
	}
}

456 
	#NEXT
(
_h
, 
_p
Ë*((**)((*)(_pË+ (_h)->
ofs
))

	)

458 
dn_ht_sˇn_body
(
dn_ht
 *
ht
, *
buckë
,

459 (*
‚
)(*, *), *
¨g
)

461 
ªt
, 
found
 = 0, 
i
 = *
buckë
;

462 *
èû
, *
µ
, *
p
, *
√xç
;

464 
µ
 = 
èû
 = 
ht
->ht[
i
];

466 
p
 = 
	`NEXT
(
ht
, 
µ
);

467 
√xç
 = 
	`NEXT
(
ht
, 
p
);

468 
ªt
 = 
	`‚
(
p
, 
¨g
);

469 i‡((
ªt
 & 
DNHT_SCAN_DEL
) == 0) {

470 
µ
 = 
p
;

472 
found
++;

473 
ht
->
íåõs
--;

475 i‡(
µ
 !
p
)

477 
	`NEXT
(
ht
, 
µ
Ë
√xç
;

478 i‡(
p
 =
èû
)

479 
ht
->ht[
i
] = (
µ
 !
p
Ë?Ö∞: 
NULL
;

481 i‡(
ªt
 & 
DNHT_SCAN_END
) {

483 
ht
->ht[
i
] = (ht->ht[i] =
NULL
Ë? NULL : 
µ
;

484  
found
;

486 } 
p
 !
èû
);

488 (*
buckë
)++;

489  
found
;

490 
	}
}

498 
	$dn_ht_föd
(
dn_ht
 *
ht
, 
uöçå_t
 
key
, 
Êags
, *
¨g
)

500 
i
, 
found
;

501 *
èû
, *
µ
, *
p
;

503 i‡(
ht
 =
NULL
)

504  
NULL
;

505 
i
 = (
ht
->
buckës
 == 1) ? 0 :

506 (
ht
->
	`hash
(
key
, 
Êags
, 
¨g
Ë& ht->
buckës
);

508 
µ
 = 
èû
 = 
ht
->ht[
i
];

509 i‡(
èû
) {

511 
p
 = 
	`NEXT
(
ht
, 
µ
);

512 
found
 = (
Êags
 & 
DNHT_MATCH_PTR
Ë? 
key
 =(
uöçå_t
)
p
 :

513 
ht
->
	`m©ch
(
p
, 
key
, 
Êags
, 
¨g
);

514 i‡(!
found
)

516 i‡(
Êags
 & 
DNHT_REMOVE
) {

517 
ht
->
íåõs
--;

518 i‡(
p
 !
µ
)

519 
	`NEXT
(
ht
, 
µ
ËNEXT(ht, 
p
);

520 i‡(
p
 =
èû
)

521 
ht
->ht[
i
] = (
µ
 !
p
Ë?Ö∞: 
NULL
;

523  
p
;

524 }  (
µ
 = 
p
Ë!
èû
);

527 i‡((
Êags
 & 
DNHT_INSERT
) == 0)

528  
NULL
;

529 
p
 = 
ht
->
√wh
 ? ht->
	`√wh
(
key
, 
Êags
, 
¨g
) : (*)key;

530 i‡(
p
) {

531 
ht
->
íåõs
++;

532 i‡(
èû
 =
NULL
) {

533 
ht
->ht[
i
] = 
	`NEXT
(ht, 
p
) =Ö;

535 
	`NEXT
(
ht
, 
p
ËNEXT(ht, 
èû
);

536 
	`NEXT
(
ht
, 
èû
Ë
p
;

540  
p
;

541 
	}
}

550 
dn_ht_sˇn
(
dn_ht
 *
ht
, (*
‚
)(*, *), *
¨g
)

552 
i
, 
buckë
, 
found
 = 0;

554 i‡(
ht
 =
NULL
 || 
‚
 == NULL)

556 
i
 = 0; i <
ht
->
buckës
; i++) {

557 i‡(
ht
->ht[
i
] =
NULL
)

559 
buckë
 = 
i
;

560 
found
 +
	`dn_ht_sˇn_body
(
ht
, &
buckë
, 
‚
, 
¨g
);

561 i‡(
buckë
 =
i
)

562  
found
;

564  
found
;

565 
	}
}

576 
dn_ht_sˇn_buckë
(
dn_ht
 *
ht
, *
buckë
, (*
‚
)(*, *),

577 *
¨g
)

579 i‡(
ht
 =
NULL
 || 
‚
 == NULL)

581 i‡(*
buckë
 > 
ht
->
buckës
 || *bucket < 0)

582 *
buckë
 = 0;

583 i‡(
ht
->ht[*
buckë
] =
NULL
) {

584 (*
buckë
)++;

587  
	`dn_ht_sˇn_body
(
ht
, 
buckë
, 
‚
, 
¨g
);

588 
	}
}

	@kipfw-mod/dn_sched_fifo.c

31 #ifde‡
_KERNEL


32 
	~<sys/mÆloc.h
>

33 
	~<sys/sockë.h
>

34 
	~<sys/sockëv¨.h
>

35 
	~<sys/kî√l.h
>

36 
	~<sys/mbuf.h
>

37 
	~<sys/moduÀ.h
>

38 
	~<√t/if.h
>

39 
	~<√töë/ö.h
>

40 
	~<√töë/ù_v¨.h
>

41 
	~<√töë/ù_fw.h
>

42 
	~<√töë/ù_dummy√t.h
>

43 
	~<√töë/ùfw/dn_hóp.h
>

44 
	~<√töë/ùfw/ù_dn_¥iv©e.h
>

45 
	~<√töë/ùfw/dn_sched.h
>

47 
	~<dn_ã°.h
>

58 
	$fifo_íqueue
(
dn_sch_ö°
 *
si
, 
dn_queue
 *
q
, 
mbuf
 *
m
)

64  
	`dn_íqueue
((
dn_queue
 *)(
si
+1), 
m
, 0);

65 
	}
}

67 
mbuf
 *

68 
	$fifo_dequeue
(
dn_sch_ö°
 *
si
)

70  
	`dn_dequeue
((
dn_queue
 *)(
si
 + 1));

71 
	}
}

74 
	$fifo_√w_sched
(
dn_sch_ö°
 *
si
)

77 
dn_queue
 *
q
 = (dn_queuê*)(
si
 + 1);

79 
	`£t_oid
(&
q
->
ni
.
oid
, 
DN_QUEUE
, (*q));

80 
q
->
_si
 = 
si
;

81 
q
->
fs
 = 
si
->
sched
->fs;

83 
	}
}

86 
	$fifo_‰ì_sched
(
dn_sch_ö°
 *
si
)

88 
dn_queue
 *
q
 = (dn_queuê*)(
si
 + 1);

89 
	`dn_‰ì_pkts
(
q
->
mq
.
hód
);

90 
	`bzîo
(
q
, (*q));

92 
	}
}

99 
dn_Æg
 
	gfifo_desc
 = {

100 
_SI
–.
ty≥
 = ) 
DN_SCHED_FIFO
,

101 
_SI
–.
«me
 = ) "FIFO",

102 
_SI
–.
Êags
 = ) 0,

104 
_SI
–.
schk_d©Æí
 = ) 0,

105 
_SI
–.
si_d©Æí
 = ) (
dn_queue
),

106 
_SI
–.
q_d©Æí
 = ) 0,

108 
_SI
–.
íqueue
 = ) 
fifo_íqueue
,

109 
_SI
–.
dequeue
 = ) 
fifo_dequeue
,

110 
_SI
–.
c⁄fig
 = ) 
NULL
,

111 
_SI
–.
de°roy
 = ) 
NULL
,

112 
_SI
–.
√w_sched
 = ) 
fifo_√w_sched
,

113 
_SI
–.
‰ì_sched
 = ) 
fifo_‰ì_sched
,

114 
_SI
–.
√w_fsk
 = ) 
NULL
,

115 
_SI
–.
‰ì_fsk
 = ) 
NULL
,

116 
_SI
–.
√w_queue
 = ) 
NULL
,

117 
_SI
–.
‰ì_queue
 = ) 
NULL
,

120 
DECLARE_DNSCHED_MODULE
(
dn_fifo
, &
fifo_desc
);

	@kipfw-mod/dn_sched_prio.c

30 #ifde‡
_KERNEL


31 
	~<sys/mÆloc.h
>

32 
	~<sys/sockë.h
>

33 
	~<sys/sockëv¨.h
>

34 
	~<sys/kî√l.h
>

35 
	~<sys/mbuf.h
>

36 
	~<sys/moduÀ.h
>

37 
	~<√t/if.h
>

38 
	~<√töë/ö.h
>

39 
	~<√töë/ù_v¨.h
>

40 
	~<√töë/ù_fw.h
>

41 
	~<√töë/ù_dummy√t.h
>

42 
	~<√töë/ùfw/dn_hóp.h
>

43 
	~<√töë/ùfw/ù_dn_¥iv©e.h
>

44 
	~<√töë/ùfw/dn_sched.h
>

46 
	~<dn_ã°.h
>

49 
	#DN_SCHED_PRIO
 5

50 

	)

51 #i‡!
deföed
(
_KERNEL
Ë|| !deföed(
__löux__
)

52 
	#ã°_bô
(
ix
, 
pD©a
Ë((*pD©aË& (1<<(ix)))

	)

53 
	#__£t_bô
(
ix
, 
pD©a
Ë(*pD©aË|(1<<(ix))

	)

54 
	#__˛ór_bô
(
ix
, 
pD©a
Ë(*pD©aË&~(1<<(ix))

	)

57 #ifde‡
__MIPSEL__


58 
	#__˛ór_bô
(
ix
, 
pD©a
Ë(*pD©aË&~(1<<(ix))

	)

62 
	#BITMAP_T
 

	)

63 
	#MAXPRIO
 ((
BITMAP_T
Ë* 8)

	)

69 
	s¥io_si
 {

70 
BITMAP_T
 
	mbôm≠
;

71 
dn_queue
 *
	mq_¨øy
[
MAXPRIO
];

79 
	$¥io_íqueue
(
dn_sch_ö°
 *
_si
, 
dn_queue
 *
q
, 
mbuf
 *
m
)

81 
¥io_si
 *
si
 = (¥io_sò*)(
_si
 + 1);

82 
¥io
 = 
q
->
fs
->fs.
∑r
[0];

84 i‡(
	`ã°_bô
(
¥io
, &
si
->
bôm≠
) == 0) {

86 
	`__£t_bô
(
¥io
, &
si
->
bôm≠
);

87 
si
->
q_¨øy
[
¥io
] = 
q
;

89 
q
 = 
si
->
q_¨øy
[
¥io
];

91 i‡(
	`dn_íqueue
(
q
, 
m
, 0))

94 
	}
}

107 
mbuf
 *

108 
	$¥io_dequeue
(
dn_sch_ö°
 *
_si
)

110 
¥io_si
 *
si
 = (¥io_sò*)(
_si
 + 1);

111 
mbuf
 *
m
;

112 
dn_queue
 *
q
;

113 
¥io
;

115 i‡(
si
->
bôm≠
 == 0)

116  
NULL
;

118 
¥io
 = 
	`ffs
(
si
->
bôm≠
) - 1;

121 
q
 = 
si
->
q_¨øy
[
¥io
];

124 
m
 = 
	`dn_dequeue
(
q
);

125 i‡(
q
->
mq
.
hód
 =
NULL
) {

129 
si
->
q_¨øy
[
¥io
] = 
NULL
;

130 
	`__˛ór_bô
(
¥io
, &
si
->
bôm≠
);

132  
m
;

133 
	}
}

136 
	$¥io_√w_sched
(
dn_sch_ö°
 *
_si
)

138 
¥io_si
 *
si
 = (¥io_sò*)(
_si
 + 1);

140 
	`bzîo
(
si
->
q_¨øy
, (si->q_array));

141 
si
->
bôm≠
 = 0;

144 
	}
}

147 
	$¥io_√w_fsk
(
dn_fsk
 *
fs
)

150 
	`ùdn_bound_v¨
(&
fs
->fs.
∑r
[0], 0, 0, 
MAXPRIO
 - 1, "PRIOÖriority");

152 
	}
}

155 
	$¥io_√w_queue
(
dn_queue
 *
q
)

157 
¥io_si
 *
si
 = (¥io_sò*)(
q
->
_si
 + 1);

158 
¥io
 = 
q
->
fs
->fs.
∑r
[0];

159 
dn_queue
 *
ﬁdq
;

161 
q
->
ni
.
oid
.
subty≥
 = 
DN_SCHED_PRIO
;

163 i‡(
q
->
mq
.
hód
 =
NULL
)

169 i‡(
	`ã°_bô
(
¥io
, &
si
->
bôm≠
) == 0) {

171 
	`__£t_bô
(
¥io
, &
si
->
bôm≠
);

172 
si
->
q_¨øy
[
¥io
] = 
q
;

173 } i‡–(
ﬁdq
 = 
si
->
q_¨øy
[
¥io
]Ë!
q
) {

178 
ﬁdq
->
mq
.
èû
->
m_√xçkt
 = 
q
->mq.
hód
;

179 
ﬁdq
->
mq
.
èû
 = 
q
->mq.tail;

180 
ﬁdq
->
ni
.
Àngth
 +
q
->ni.length;

181 
q
->
ni
.
Àngth
 = 0;

182 
ﬁdq
->
ni
.
Àn_byãs
 +
q
->ni.len_bytes;

183 
q
->
ni
.
Àn_byãs
 = 0;

184 
q
->
mq
.
èû
 = q->mq.
hód
 = 
NULL
;

187 
	}
}

190 
	$¥io_‰ì_queue
(
dn_queue
 *
q
, 
ß„
)

192 
¥io
 = 
q
->
fs
->fs.
∑r
[0];

193 
¥io_si
 *
si
 = (¥io_sò*)(
q
->
_si
 + 1);

195 i‡(
si
->
q_¨øy
[
¥io
] =
q
) {

196 
si
->
q_¨øy
[
¥io
] = 
NULL
;

197 
	`__˛ór_bô
(
¥io
, &
si
->
bôm≠
);

200 
	}
}

203 
dn_Æg
 
	g¥io_desc
 = {

204 
_SI
–.
ty≥
 = ) 
DN_SCHED_PRIO
,

205 
_SI
–.
«me
 = ) "PRIO",

206 
_SI
–.
Êags
 = ) 
DN_MULTIQUEUE
,

209 
_SI
–.
schk_d©Æí
 = ) 0,

210 
_SI
–.
si_d©Æí
 = ) (
¥io_si
),

211 
_SI
–.
q_d©Æí
 = ) 0,

213 
_SI
–.
íqueue
 = ) 
¥io_íqueue
,

214 
_SI
–.
dequeue
 = ) 
¥io_dequeue
,

216 
_SI
–.
c⁄fig
 = ) 
NULL
,

217 
_SI
–.
de°roy
 = ) 
NULL
,

218 
_SI
–.
√w_sched
 = ) 
¥io_√w_sched
,

219 
_SI
–.
‰ì_sched
 = ) 
NULL
,

221 
_SI
–.
√w_fsk
 = ) 
¥io_√w_fsk
,

222 
_SI
–.
‰ì_fsk
 = ) 
NULL
,

224 
_SI
–.
√w_queue
 = ) 
¥io_√w_queue
,

225 
_SI
–.
‰ì_queue
 = ) 
¥io_‰ì_queue
,

229 
DECLARE_DNSCHED_MODULE
(
dn_¥io
, &
¥io_desc
);

	@kipfw-mod/dn_sched_qfq.c

31 #ifde‡
_KERNEL


32 
	~<sys/mÆloc.h
>

33 
	~<sys/sockë.h
>

34 
	~<sys/sockëv¨.h
>

35 
	~<sys/kî√l.h
>

36 
	~<sys/mbuf.h
>

37 
	~<sys/moduÀ.h
>

38 
	~<√t/if.h
>

39 
	~<√töë/ö.h
>

40 
	~<√töë/ù_v¨.h
>

41 
	~<√töë/ù_fw.h
>

42 
	~<√töë/ù_dummy√t.h
>

43 
	~<√töë/ùfw/dn_hóp.h
>

44 
	~<√töë/ùfw/ù_dn_¥iv©e.h
>

45 
	~<√töë/ùfw/dn_sched.h
>

47 
	~<dn_ã°.h
>

50 #ifde‡
QFQ_DEBUG


51 
	gqfq_sched
;

52 
dump_sched
(
qfq_sched
 *
q
, c⁄° *
msg
);

53 
	#NO
(
x
Ë
	)
x

55 
	#NO
(
x
)

	)

57 
	#DN_SCHED_QFQ
 4

58 
	tbôm≠
;

	)

64 #i‡
deföed
(
_WIN32
Ë|| (deföed(
__MIPSEL__
Ë&& deföed(
LINUX_24
))

65 
	$Ês
(
n
)

67 
i
 = 0;

68 
i
 = 0; 
n
 > 0;Ç >>= 1, i++)

70  
i
;

71 
	}
}

74 #i‡!
deföed
(
_KERNEL
Ë|| deföed–
__FªeBSD__
 ) || deföed(
_WIN32
Ë|| (deföed(
__MIPSEL__
Ë&& deföed(
LINUX_24
))

75 
ölöe
 
	$__Ês
(
w‹d
)

77  
	`Ês
(
w‹d
) - 1;

78 
	}
}

81 #i‡!
deföed
(
_KERNEL
Ë|| !deföed(
__löux__
)

82 #ifde‡
QFQ_DEBUG


83 
	$ã°_bô
(
ix
, 
bôm≠
 *
p
)

85 i‡(
ix
 < 0 || ix > 31)

86 
	`D
("bad index %d", 
ix
);

87  *
p
 & (1<<
ix
);

88 
	}
}

89 
	$__£t_bô
(
ix
, 
bôm≠
 *
p
)

91 i‡(
ix
 < 0 || ix > 31)

92 
	`D
("bad index %d", 
ix
);

93 *
p
 |(1<<
ix
);

94 
	}
}

95 
	$__˛ór_bô
(
ix
, 
bôm≠
 *
p
)

97 i‡(
ix
 < 0 || ix > 31)

98 
	`D
("bad index %d", 
ix
);

99 *
p
 &~(1<<
ix
);

100 
	}
}

103 
	#ã°_bô
(
ix
, 
pD©a
Ë((*pD©aË& (1<<(ix)))

	)

104 
	#__£t_bô
(
ix
, 
pD©a
Ë(*pD©aË|(1<<(ix))

	)

105 
	#__˛ór_bô
(
ix
, 
pD©a
Ë(*pD©aË&~(1<<(ix))

	)

109 #ifde‡
__MIPSEL__


110 
	#__˛ór_bô
(
ix
, 
pD©a
Ë(*pD©aË&~(1<<(ix))

	)

155 
	#QFQ_MAX_SLOTS
 32

	)

170 
	#QFQ_MAX_INDEX
 19

	)

171 
	#QFQ_MAX_WSHIFT
 16

	)

173 
	#QFQ_MAX_WEIGHT
 (1<<
QFQ_MAX_WSHIFT
)

	)

174 
	#QFQ_MAX_WSUM
 (2*
QFQ_MAX_WEIGHT
)

	)

176 
	#IWSUM
 ((1<<
FRAC_BITS
)/
QFQ_MAX_WSUM
)

	)

178 
	#FRAC_BITS
 30

	)

179 
	#ONE_FP
 (1UL << 
FRAC_BITS
)

	)

181 
	#QFQ_MTU_SHIFT
 11

	)

182 
	#QFQ_MIN_SLOT_SHIFT
 (
FRAC_BITS
 + 
QFQ_MTU_SHIFT
 - 
QFQ_MAX_INDEX
)

	)

188 
	eqfq_°©e
 { 
	mER
, 
	mIR
, 
	mEB
, 
	mIB
, 
	mQFQ_MAX_STATE
 };

190 
	gqfq_group
;

196 
	sqfq_˛ass
 {

197 
dn_queue
 
	m_q
;

198 
uöt64_t
 
	mS
, 
	mF
;

199 
qfq_˛ass
 *
	m√xt
;

205 
qfq_group
 *
	mgΩ
;

208 
uöt32_t
 
	möv_w
;

209 
uöt32_t
 
	mlmax
;

215 
	sqfq_group
 {

216 
uöt64_t
 
	mS
, 
	mF
;

217 
	m¶Ÿ_shi·
;

218 
	mödex
;

219 
	m‰⁄t
;

220 
bôm≠
 
	mfuŒ_¶Ÿs
;

223 
qfq_˛ass
 *
	m¶Ÿs
[
QFQ_MAX_SLOTS
];

227 
	sqfq_sched
 {

228 
uöt64_t
 
	mV
;

229 
uöt32_t
 
	mwsum
;

230 
NO
(
uöt32_t
 
i_wsum
;

231 
uöt32_t
 
_queued
;

232 
uöt32_t
 
lo›s
; )

233 
bôm≠
 
	mbôm≠s
[
QFQ_MAX_STATE
];

234 
qfq_group
 
	mgroups
[
QFQ_MAX_INDEX
 + 1];

240 
ölöe
 
	$qfq_gt
(
uöt64_t
 
a
, uöt64_à
b
)

242  (
öt64_t
)(
a
 - 
b
) > 0;

243 
	}
}

246 
ölöe
 
uöt64_t
 
	$qfq_round_down
(
uöt64_t
 
ts
, 
shi·
)

248  
ts
 & ~((1ULL << 
shi·
) - 1);

249 
	}
}

252 
ölöe
 
qfq_group
 *
	$qfq_ffs
(
qfq_sched
 *
q
,

253 
bôm≠
)

255 
ödex
 = 
	`ffs
(
bôm≠
) - 1;

256  &
q
->
groups
[
ödex
];

257 
	}
}

264 
	$qfq_ˇlc_ödex
(
uöt32_t
 
öv_w
, 
maxÀn
)

266 
uöt64_t
 
¶Ÿ_size
 = (uöt64_t)
maxÀn
 *
öv_w
;

267 
size_m≠
;

268 
ödex
 = 0;

270 
size_m≠
 = ()(
¶Ÿ_size
 >> 
QFQ_MIN_SLOT_SHIFT
);

271 i‡(!
size_m≠
)

272 
out
;

274 
ödex
 = 
	`__Ês
(
size_m≠
) + 1;

275 
ödex
 -!(
¶Ÿ_size
 - (1ULL << (ödex + 
QFQ_MIN_SLOT_SHIFT
 - 1)));

277 i‡(
ödex
 < 0)

278 
ödex
 = 0;

280 
out
:

281 
	`ND
("W = %d, L = %d, I = %d\n", 
ONE_FP
/
öv_w
, 
maxÀn
, 
ödex
);

282  
ödex
;

283 
	}
}

291 
	$qfq_√w_queue
(
dn_queue
 *
_q
)

293 
qfq_sched
 *
q
 = (qfq_sched *)(
_q
->
_si
 + 1);

294 
qfq_˛ass
 *
˛
 = (qfq_˛as†*)
_q
;

295 
i
;

296 
uöt32_t
 
w
;

301 
w
 = 
_q
->
fs
->fs.
∑r
[0];

302 
˛
->
lmax
 = 
_q
->
fs
->fs.
∑r
[1];

303 i‡(!
w
 || w > 
QFQ_MAX_WEIGHT
) {

304 
w
 = 1;

305 
	`D
("rounding weightÅo 1");

307 
˛
->
öv_w
 = 
ONE_FP
/
w
;

308 
w
 = 
ONE_FP
/
˛
->
öv_w
;

309 i‡(
q
->
wsum
 + 
w
 > 
QFQ_MAX_WSUM
)

310  
EINVAL
;

312 
i
 = 
	`qfq_ˇlc_ödex
(
˛
->
öv_w
, cl->
lmax
);

313 
˛
->
gΩ
 = &
q
->
groups
[
i
];

314 
q
->
wsum
 +
w
;

318 
	}
}

322 
	$qfq_‰ì_queue
(
dn_queue
 *
_q
, 
ß„
)

324 
qfq_sched
 *
q
 = (qfq_sched *)(
_q
->
_si
 + 1);

325 
qfq_˛ass
 *
˛
 = (qfq_˛as†*)
_q
;

326 i‡(
˛
->
öv_w
) {

327 
q
->
wsum
 -
ONE_FP
/
˛
->
öv_w
;

328 
˛
->
öv_w
 = 0;

331 
	}
}

334 
ölöe
 

335 
	$mask_‰om
(
bôm≠
, 
‰om
)

337  
bôm≠
 & ~((1UL << 
‰om
) - 1);

338 
	}
}

345 
ölöe
 

346 
	$qfq_ˇlc_°©e
(
qfq_sched
 *
q
, 
qfq_group
 *
gΩ
)

349 
°©e
 = 
	`qfq_gt
(
gΩ
->
S
, 
q
->
V
);

350 
mask
 = 
	`mask_‰om
(
q
->
bôm≠s
[
ER
], 
gΩ
->
ödex
);

351 
qfq_group
 *
√xt
;

353 i‡(
mask
) {

354 
√xt
 = 
	`qfq_ffs
(
q
, 
mask
);

355 i‡(
	`qfq_gt
(
gΩ
->
F
, 
√xt
->F))

356 
°©e
 |
EB
;

359  
°©e
;

360 
	}
}

368 
ölöe
 

369 
	$qfq_move_groups
(
qfq_sched
 *
q
, 
mask
, 
§c
, 
d°
)

371 
q
->
bôm≠s
[
d°
] |q->bôm≠s[
§c
] & 
mask
;

372 
q
->
bôm≠s
[
§c
] &~
mask
;

373 
	}
}

375 
ölöe
 

376 
	$qfq_unblock_groups
(
qfq_sched
 *
q
, 
ödex
, 
uöt64_t
 
ﬁd_föish
)

378 
mask
 = 
	`mask_‰om
(
q
->
bôm≠s
[
ER
], 
ödex
 + 1);

379 
qfq_group
 *
√xt
;

381 i‡(
mask
) {

382 
√xt
 = 
	`qfq_ffs
(
q
, 
mask
);

383 i‡(!
	`qfq_gt
(
√xt
->
F
, 
ﬁd_föish
))

387 
mask
 = (1UL << 
ödex
) - 1;

388 
	`qfq_move_groups
(
q
, 
mask
, 
EB
, 
ER
);

389 
	`qfq_move_groups
(
q
, 
mask
, 
IB
, 
IR
);

390 
	}
}

402 
ölöe
 

403 
	$qfq_make_ñigibÀ
(
qfq_sched
 *
q
, 
uöt64_t
 
ﬁd_V
)

405 
mask
, 
v¶Ÿ
, 
ﬁd_v¶Ÿ
;

407 
v¶Ÿ
 = 
q
->
V
 >> 
QFQ_MIN_SLOT_SHIFT
;

408 
ﬁd_v¶Ÿ
 = 
ﬁd_V
 >> 
QFQ_MIN_SLOT_SHIFT
;

410 i‡(
v¶Ÿ
 !
ﬁd_v¶Ÿ
) {

411 
mask
 = (2UL << (
	`__Ês
(
v¶Ÿ
 ^ 
ﬁd_v¶Ÿ
))) - 1;

412 
	`qfq_move_groups
(
q
, 
mask
, 
IR
, 
ER
);

413 
	`qfq_move_groups
(
q
, 
mask
, 
IB
, 
EB
);

415 
	}
}

422 
ölöe
 

423 
	$qfq_¶Ÿ_ö£π
(
qfq_group
 *
gΩ
, 
qfq_˛ass
 *
˛
, 
uöt64_t
 
roundedS
)

425 
uöt64_t
 
¶Ÿ
 = (
roundedS
 - 
gΩ
->
S
Ë>> gΩ->
¶Ÿ_shi·
;

426 
i
 = (
gΩ
->
‰⁄t
 + 
¶Ÿ
Ë% 
QFQ_MAX_SLOTS
;

428 
˛
->
√xt
 = 
gΩ
->
¶Ÿs
[
i
];

429 
gΩ
->
¶Ÿs
[
i
] = 
˛
;

430 
	`__£t_bô
(
¶Ÿ
, &
gΩ
->
fuŒ_¶Ÿs
);

431 
	}
}

436 
ölöe
 

437 
	$qfq_‰⁄t_¶Ÿ_ªmove
(
qfq_group
 *
gΩ
)

439 
qfq_˛ass
 **
h
 = &
gΩ
->
¶Ÿs
[gΩ->
‰⁄t
];

441 *
h
 = (*h)->
√xt
;

442 i‡(!*
h
)

443 
	`__˛ór_bô
(0, &
gΩ
->
fuŒ_¶Ÿs
);

444 
	}
}

451 
ölöe
 
qfq_˛ass
 *

452 
	$qfq_¶Ÿ_sˇn
(
qfq_group
 *
gΩ
)

454 
i
;

456 
	`ND
("gΩ %d fuŒ %x", 
gΩ
->
ödex
, gΩ->
fuŒ_¶Ÿs
);

457 i‡(!
gΩ
->
fuŒ_¶Ÿs
)

458  
NULL
;

460 
i
 = 
	`ffs
(
gΩ
->
fuŒ_¶Ÿs
) - 1;

461 i‡(
i
 > 0) {

462 
gΩ
->
‰⁄t
 = (gΩ->‰⁄à+ 
i
Ë% 
QFQ_MAX_SLOTS
;

463 
gΩ
->
fuŒ_¶Ÿs
 >>
i
;

466  
gΩ
->
¶Ÿs
[gΩ->
‰⁄t
];

467 
	}
}

478 
ölöe
 

479 
	$qfq_¶Ÿ_rŸ©e
(
qfq_sched
 *
q
, 
qfq_group
 *
gΩ
, 
uöt64_t
 
roundedS
)

481 
i
 = (
gΩ
->
S
 - 
roundedS
Ë>> gΩ->
¶Ÿ_shi·
;

483 
gΩ
->
fuŒ_¶Ÿs
 <<
i
;

484 
gΩ
->
‰⁄t
 = (gΩ->‰⁄à- 
i
Ë% 
QFQ_MAX_SLOTS
;

485 
	}
}

488 
ölöe
 

489 
	$qfq_upd©e_ñigibÀ
(
qfq_sched
 *
q
, 
uöt64_t
 
ﬁd_V
)

491 
bôm≠
 
öñigibÀ
;

493 
öñigibÀ
 = 
q
->
bôm≠s
[
IR
] | q->bôm≠s[
IB
];

494 i‡(
öñigibÀ
) {

495 i‡(!
q
->
bôm≠s
[
ER
]) {

496 
qfq_group
 *
gΩ
;

497 
gΩ
 = 
	`qfq_ffs
(
q
, 
öñigibÀ
);

498 i‡(
	`qfq_gt
(
gΩ
->
S
, 
q
->
V
))

499 
q
->
V
 = 
gΩ
->
S
;

501 
	`qfq_make_ñigibÀ
(
q
, 
ﬁd_V
);

503 
	}
}

508 
ölöe
 

509 
	$qfq_upd©e_˛ass
(
qfq_sched
 *
q
, 
qfq_group
 *
gΩ
,

510 
qfq_˛ass
 *
˛
)

513 
˛
->
S
 = cl->
F
;

514 i‡(
˛
->
_q
.
mq
.
hód
 =
NULL
) {

515 
	`qfq_‰⁄t_¶Ÿ_ªmove
(
gΩ
);

517 
Àn
;

518 
uöt64_t
 
roundedS
;

520 
Àn
 = 
˛
->
_q
.
mq
.
hód
->
m_pkthdr
.len;

521 
˛
->
F
 = cl->
S
 + (
uöt64_t
)
Àn
 * cl->
öv_w
;

522 
roundedS
 = 
	`qfq_round_down
(
˛
->
S
, 
gΩ
->
¶Ÿ_shi·
);

523 i‡(
roundedS
 =
gΩ
->
S
)

526 
	`qfq_‰⁄t_¶Ÿ_ªmove
(
gΩ
);

527 
	`qfq_¶Ÿ_ö£π
(
gΩ
, 
˛
, 
roundedS
);

530 
	}
}

532 
mbuf
 *

533 
	$qfq_dequeue
(
dn_sch_ö°
 *
si
)

535 
qfq_sched
 *
q
 = (qfq_sched *)(
si
 + 1);

536 
qfq_group
 *
gΩ
;

537 
qfq_˛ass
 *
˛
;

538 
mbuf
 *
m
;

539 
uöt64_t
 
ﬁd_V
;

541 
	`NO
(
q
->
lo›s
++;)

542 i‡(!
q
->
bôm≠s
[
ER
]) {

543 
	`NO
(i‡(
q
->
queued
)

544 
	`dump_sched
(
q
, "start dequeue");)

545  
NULL
;

548 
gΩ
 = 
	`qfq_ffs
(
q
, q->
bôm≠s
[
ER
]);

550 
˛
 = 
gΩ
->
¶Ÿs
[gΩ->
‰⁄t
];

552 
m
 = 
	`dn_dequeue
(&
˛
->
_q
);

554 i‡(!
m
) {

555 
	`D
("BUG/*Çon-workconservingÜeaf */");

556  
NULL
;

558 
	`NO
(
q
->
queued
--;)

559 
ﬁd_V
 = 
q
->
V
;

560 
q
->
V
 +(
uöt64_t
)
m
->
m_pkthdr
.
Àn
 * 
IWSUM
;

561 
	`ND
("m i†%∞F 0x%Œx VÇow 0x%Œx", 
m
, 
˛
->
F
, 
q
->
V
);

563 i‡(
	`qfq_upd©e_˛ass
(
q
, 
gΩ
, 
˛
)) {

564 
uöt64_t
 
ﬁd_F
 = 
gΩ
->
F
;

565 
˛
 = 
	`qfq_¶Ÿ_sˇn
(
gΩ
);

566 i‡(!
˛
) {

567 
	`__˛ór_bô
(
gΩ
->
ödex
, &
q
->
bôm≠s
[
ER
]);

570 
uöt64_t
 
roundedS
 = 
	`qfq_round_down
(
˛
->
S
, 
gΩ
->
¶Ÿ_shi·
);

571 
s
;

573 i‡(
gΩ
->
S
 =
roundedS
)

574 
skù_unblock
;

575 
gΩ
->
S
 = 
roundedS
;

576 
gΩ
->
F
 = 
roundedS
 + (2ULL << gΩ->
¶Ÿ_shi·
);

578 
	`__˛ór_bô
(
gΩ
->
ödex
, &
q
->
bôm≠s
[
ER
]);

579 
s
 = 
	`qfq_ˇlc_°©e
(
q
, 
gΩ
);

580 
	`__£t_bô
(
gΩ
->
ödex
, &
q
->
bôm≠s
[
s
]);

583 
	`qfq_unblock_groups
(
q
, 
gΩ
->
ödex
, 
ﬁd_F
);

586 
skù_unblock
:

587 
	`qfq_upd©e_ñigibÀ
(
q
, 
ﬁd_V
);

588 
	`NO
(i‡(!
q
->
bôm≠s
[
ER
] && q->
queued
)

589 
	`dump_sched
(
q
, "end dequeue");)

591  
m
;

592 
	}
}

607 
ölöe
 

608 
	$qfq_upd©e_°¨t
(
qfq_sched
 *
q
, 
qfq_˛ass
 *
˛
)

610 
mask
;

611 
uöt64_t
 
limô
, 
roundedF
;

612 
¶Ÿ_shi·
 = 
˛
->
gΩ
->slot_shift;

614 
roundedF
 = 
	`qfq_round_down
(
˛
->
F
, 
¶Ÿ_shi·
);

615 
limô
 = 
	`qfq_round_down
(
q
->
V
, 
¶Ÿ_shi·
) + (1UL << slot_shift);

617 i‡(!
	`qfq_gt
(
˛
->
F
, 
q
->
V
Ë|| qfq_gt(
roundedF
, 
limô
)) {

619 
mask
 = 
	`mask_‰om
(
q
->
bôm≠s
[
ER
], 
˛
->
gΩ
->
ödex
);

620 i‡(
mask
) {

621 
qfq_group
 *
√xt
 = 
	`qfq_ffs
(
q
, 
mask
);

622 i‡(
	`qfq_gt
(
roundedF
, 
√xt
->
F
)) {

623 
˛
->
S
 = 
√xt
->
F
;

627 
˛
->
S
 = 
q
->
V
;

629 
˛
->
S
 = cl->
F
;

631 
	}
}

634 
	$qfq_íqueue
(
dn_sch_ö°
 *
si
, 
dn_queue
 *
_q
, 
mbuf
 *
m
)

636 
qfq_sched
 *
q
 = (qfq_sched *)(
si
 + 1);

637 
qfq_group
 *
gΩ
;

638 
qfq_˛ass
 *
˛
 = (qfq_˛as†*)
_q
;

639 
uöt64_t
 
roundedS
;

640 
s
;

642 
	`NO
(
q
->
lo›s
++;)

643 
	`DX
(4, "À¿%d flow %∞öv_w 0x%x gΩ %d", 
m
->
m_pkthdr
.
Àn
,

644 
_q
, 
˛
->
öv_w
, cl->
gΩ
->
ödex
);

646 i‡(
m
 !
_q
->
mq
.
hód
) {

647 i‡(
	`dn_íqueue
(
_q
, 
m
, 0))

649 
	`NO
(
q
->
queued
++;)

650 i‡(
m
 !
_q
->
mq
.
hód
)

654 
gΩ
 = 
˛
->grp;

655 
	`qfq_upd©e_°¨t
(
q
, 
˛
);

657 
˛
->
F
 = cl->
S
 + (
uöt64_t
)(
m
->
m_pkthdr
.
Àn
Ë* cl->
öv_w
;

658 
roundedS
 = 
	`qfq_round_down
(
˛
->
S
, 
gΩ
->
¶Ÿ_shi·
);

669 i‡(
gΩ
->
fuŒ_¶Ÿs
) {

670 i‡(!
	`qfq_gt
(
gΩ
->
S
, 
˛
->S))

671 
skù_upd©e
;

673 
	`qfq_¶Ÿ_rŸ©e
(
q
, 
gΩ
, 
roundedS
);

675 
	`__˛ór_bô
(
gΩ
->
ödex
, &
q
->
bôm≠s
[
IR
]);

676 
	`__˛ór_bô
(
gΩ
->
ödex
, &
q
->
bôm≠s
[
IB
]);

677 } i‡(!
q
->
bôm≠s
[
ER
] && 
	`qfq_gt
(
roundedS
, q->
V
))

678 
q
->
V
 = 
roundedS
;

680 
gΩ
->
S
 = 
roundedS
;

681 
gΩ
->
F
 = 
roundedS
 + (2ULL << gΩ->
¶Ÿ_shi·
);

682 
s
 = 
	`qfq_ˇlc_°©e
(
q
, 
gΩ
);

683 
	`__£t_bô
(
gΩ
->
ödex
, &
q
->
bôm≠s
[
s
]);

684 
	`ND
("√w sèã %d 0x%x", 
s
, 
q
->
bôm≠s
[s]);

685 
	`ND
("S %Œx F %Œx V %Œx", 
˛
->
S
, cl->
F
, 
q
->
V
);

686 
skù_upd©e
:

687 
	`qfq_¶Ÿ_ö£π
(
gΩ
, 
˛
, 
roundedS
);

690 
	}
}

694 
ölöe
 

695 
	$qfq_¶Ÿ_ªmove
(
qfq_sched
 *
q
, 
qfq_group
 *
gΩ
,

696 
qfq_˛ass
 *
˛
, qfq_˛as†**
µªv
)

698 
i
, 
off£t
;

699 
uöt64_t
 
roundedS
;

701 
roundedS
 = 
	`qfq_round_down
(
˛
->
S
, 
gΩ
->
¶Ÿ_shi·
);

702 
off£t
 = (
roundedS
 - 
gΩ
->
S
Ë>> gΩ->
¶Ÿ_shi·
;

703 
i
 = (
gΩ
->
‰⁄t
 + 
off£t
Ë% 
QFQ_MAX_SLOTS
;

705 #ifde‡
nŸyë


706 i‡(!
µªv
) {

707 
µªv
 = &
gΩ
->
¶Ÿs
[
i
];

708 *
µªv
 && *µªv !
˛
)

709 
µªv
 = &(*µªv)->
√xt
;

713 *
µªv
 = 
˛
->
√xt
;

714 i‡(!
gΩ
->
¶Ÿs
[
i
])

715 
	`__˛ór_bô
(
off£t
, &
gΩ
->
fuŒ_¶Ÿs
);

716 
	}
}

727 
	$qfq_dó˘iv©e_˛ass
(
qfq_sched
 *
q
, 
qfq_˛ass
 *
˛
,

728 
qfq_˛ass
 **
µªv
)

730 
qfq_group
 *
gΩ
 = &
q
->
groups
[
˛
->
ödex
];

731 
mask
;

732 
uöt64_t
 
roundedS
;

733 
s
;

735 
˛
->
F
 = cl->
S
;

736 
	`qfq_¶Ÿ_ªmove
(
q
, 
gΩ
, 
˛
, 
µªv
);

738 i‡(!
gΩ
->
fuŒ_¶Ÿs
) {

743 
	`__˛ór_bô
(
gΩ
->
ödex
, &
q
->
bôm≠s
[
IR
]);

744 
	`__˛ór_bô
(
gΩ
->
ödex
, &
q
->
bôm≠s
[
EB
]);

745 
	`__˛ór_bô
(
gΩ
->
ödex
, &
q
->
bôm≠s
[
IB
]);

747 i‡(
	`ã°_bô
(
gΩ
->
ödex
, &
q
->
bôm≠s
[
ER
]) &&

748 !(
q
->
bôm≠s
[
ER
] & ~((1UL << 
gΩ
->
ödex
) - 1))) {

749 
mask
 = 
q
->
bôm≠s
[
ER
] & ((1UL << 
gΩ
->
ödex
) - 1);

750 i‡(
mask
)

751 
mask
 = ~((1UL << 
	`__Ês
(mask)) - 1);

753 
mask
 = ~0UL;

754 
	`qfq_move_groups
(
q
, 
mask
, 
EB
, 
ER
);

755 
	`qfq_move_groups
(
q
, 
mask
, 
IB
, 
IR
);

757 
	`__˛ór_bô
(
gΩ
->
ödex
, &
q
->
bôm≠s
[
ER
]);

758 } i‡(!
gΩ
->
¶Ÿs
[gΩ->
‰⁄t
]) {

759 
˛
 = 
	`qfq_¶Ÿ_sˇn
(
gΩ
);

760 
roundedS
 = 
	`qfq_round_down
(
˛
->
S
, 
gΩ
->
¶Ÿ_shi·
);

761 i‡(
gΩ
->
S
 !
roundedS
) {

762 
	`__˛ór_bô
(
gΩ
->
ödex
, &
q
->
bôm≠s
[
ER
]);

763 
	`__˛ór_bô
(
gΩ
->
ödex
, &
q
->
bôm≠s
[
IR
]);

764 
	`__˛ór_bô
(
gΩ
->
ödex
, &
q
->
bôm≠s
[
EB
]);

765 
	`__˛ór_bô
(
gΩ
->
ödex
, &
q
->
bôm≠s
[
IB
]);

766 
gΩ
->
S
 = 
roundedS
;

767 
gΩ
->
F
 = 
roundedS
 + (2ULL << gΩ->
¶Ÿ_shi·
);

768 
s
 = 
	`qfq_ˇlc_°©e
(
q
, 
gΩ
);

769 
	`__£t_bô
(
gΩ
->
ödex
, &
q
->
bôm≠s
[
s
]);

772 
	`qfq_upd©e_ñigibÀ
(
q
, q->
V
);

773 
	}
}

777 
	$qfq_√w_fsk
(
dn_fsk
 *
f
)

779 
	`ùdn_bound_v¨
(&
f
->
fs
.
∑r
[0], 1, 1, 
QFQ_MAX_WEIGHT
, "qfq weight");

780 
	`ùdn_bound_v¨
(&
f
->
fs
.
∑r
[1], 1500, 1, 2000, "qfq maxlen");

781 
	`ND
("weighà%dÜí %d\n", 
f
->
fs
.
∑r
[0], f->fs.par[1]);

783 
	}
}

789 
	$qfq_√w_sched
(
dn_sch_ö°
 *
si
)

791 
qfq_sched
 *
q
 = (qfq_sched *)(
si
 + 1);

792 
qfq_group
 *
gΩ
;

793 
i
;

795 
i
 = 0; i <
QFQ_MAX_INDEX
; i++) {

796 
gΩ
 = &
q
->
groups
[
i
];

797 
gΩ
->
ödex
 = 
i
;

798 
gΩ
->
¶Ÿ_shi·
 = 
QFQ_MTU_SHIFT
 + 
FRAC_BITS
 -

799 (
QFQ_MAX_INDEX
 - 
i
);

802 
	}
}

807 
dn_Æg
 
	gqfq_desc
 = {

808 
_SI
–.
ty≥
 = ) 
DN_SCHED_QFQ
,

809 
_SI
–.
«me
 = ) "QFQ",

810 
_SI
–.
Êags
 = ) 
DN_MULTIQUEUE
,

812 
_SI
–.
schk_d©Æí
 = ) 0,

813 
_SI
–.
si_d©Æí
 = ) (
qfq_sched
),

814 
_SI
–.
q_d©Æí
 = ) (
qfq_˛ass
Ë- (
dn_queue
),

816 
_SI
–.
íqueue
 = ) 
qfq_íqueue
,

817 
_SI
–.
dequeue
 = ) 
qfq_dequeue
,

819 
_SI
–.
c⁄fig
 = ) 
NULL
,

820 
_SI
–.
de°roy
 = ) 
NULL
,

821 
_SI
–.
√w_sched
 = ) 
qfq_√w_sched
,

822 
_SI
–.
‰ì_sched
 = ) 
NULL
,

823 
_SI
–.
√w_fsk
 = ) 
qfq_√w_fsk
,

824 
_SI
–.
‰ì_fsk
 = ) 
NULL
,

825 
_SI
–.
√w_queue
 = ) 
qfq_√w_queue
,

826 
_SI
–.
‰ì_queue
 = ) 
qfq_‰ì_queue
,

829 
DECLARE_DNSCHED_MODULE
(
dn_qfq
, &
qfq_desc
);

831 #ifde‡
QFQ_DEBUG


833 
	$dump_groups
(
qfq_sched
 *
q
, 
uöt32_t
 
mask
)

835 
i
, 
j
;

837 
i
 = 0; i < 
QFQ_MAX_INDEX
 + 1; i++) {

838 
qfq_group
 *
g
 = &
q
->
groups
[
i
];

840 i‡(0 =(
mask
 & (1<<
i
)))

842 
j
 = 0; j < 
QFQ_MAX_SLOTS
; j++) {

843 i‡(
g
->
¶Ÿs
[
j
])

844 
	`D
(" buckë %d %p", 
j
, 
g
->
¶Ÿs
[j]);

846 
	`D
("fuŒ_¶Ÿ†0x%x", 
g
->
fuŒ_¶Ÿs
);

847 
	`D
(" %2d S 0x%20Œx F 0x%Œx %c", 
i
,

848 
g
->
S
, g->
F
,

849 
mask
 & (1<<
i
) ? '1' : '0');

851 
	}
}

854 
	$dump_sched
(
qfq_sched
 *
q
, c⁄° *
msg
)

856 
	`D
("--- i¿%s: ---", 
msg
);

857 
	`ND
("lo›†%d queued %d V 0x%Œx", 
q
->
lo›s
, q->
queued
, q->
V
);

858 
	`D
(" ER 0x%08x", 
q
->
bôm≠s
[
ER
]);

859 
	`D
(" EB 0x%08x", 
q
->
bôm≠s
[
EB
]);

860 
	`D
(" IR 0x%08x", 
q
->
bôm≠s
[
IR
]);

861 
	`D
(" IB 0x%08x", 
q
->
bôm≠s
[
IB
]);

862 
	`dump_groups
(
q
, 0xffffffff);

863 
	}
};

	@kipfw-mod/dn_sched_rr.c

31 #ifde‡
_KERNEL


32 
	~<sys/mÆloc.h
>

33 
	~<sys/sockë.h
>

34 
	~<sys/sockëv¨.h
>

35 
	~<sys/kî√l.h
>

36 
	~<sys/mbuf.h
>

37 
	~<sys/moduÀ.h
>

38 
	~<√t/if.h
>

39 
	~<√töë/ö.h
>

40 
	~<√töë/ù_v¨.h
>

41 
	~<√töë/ù_fw.h
>

42 
	~<√töë/ù_dummy√t.h
>

43 
	~<√töë/ùfw/dn_hóp.h
>

44 
	~<√töë/ùfw/ù_dn_¥iv©e.h
>

45 
	~<√töë/ùfw/dn_sched.h
>

47 
	~<dn_ã°.h
>

50 
	#DN_SCHED_RR
 3

51 

	)

52 
	sº_queue
 {

53 
dn_queue
 
	mq
;

54 
	m°©us
;

55 
	m¸edô
;

56 
	mqu™tum
;

57 
º_queue
 *
	mq√xt
;

63 
	sº_schk
 {

64 
	mmö_q
;

65 
	mmax_q
;

66 
	mq_byãs
;

70 
	sº_si
 {

71 
º_queue
 *
	mhód
, *
	mèû
;

75 
ölöe
 

76 
	$º_≠≥nd
(
º_queue
 *
q
, 
º_si
 *
si
)

78 
q
->
°©us
 = 1;

79 
q
->
¸edô
 = q->
qu™tum
;

82 i‡(
si
->
hód
 =
NULL
)

83 
si
->
hód
 = 
q
;

85 
si
->
èû
->
q√xt
 = 
q
;

86 
si
->
èû
 = 
q
;

87 
q
->
q√xt
 = 
si
->
hód
;

88 
	}
}

91 
ölöe
 

92 
	$º_ªmove_hód
(
º_si
 *
si
)

94 i‡(
si
->
hód
 =
NULL
)

96 
si
->
hód
->
°©us
 = 0;

98 i‡(
si
->
hód
 =si->
èû
) {

99 
si
->
hód
 = si->
èû
 = 
NULL
;

103 
si
->
hód
 = si->hód->
q√xt
;

104 
si
->
èû
->
q√xt
 = si->
hód
;

105 
	}
}

110 
ölöe
 

111 
	$ªmove_queue_q
(
º_queue
 *
q
, 
º_si
 *
si
)

113 
º_queue
 *
¥ev
;

115 i‡(
q
->
°©us
 != 1)

117 i‡(
q
 =
si
->
hód
) {

118 
	`º_ªmove_hód
(
si
);

122 
¥ev
 = 
si
->
hód
;Öªv;Öªv =Öªv->
q√xt
) {

123 i‡(
¥ev
->
q√xt
 !
q
)

125 
¥ev
->
q√xt
 = 
q
->qnext;

126 i‡(
q
 =
si
->
èû
)

127 
si
->
èû
 = 
¥ev
;

128 
q
->
°©us
 = 0;

131 
	}
}

134 
ölöe
 

135 
	$√xt_poöãr
(
º_si
 *
si
)

137 i‡(
si
->
hód
 =
NULL
)

140 
si
->
hód
 = si->hód->
q√xt
;

141 
si
->
èû
 = si->èû->
q√xt
;

142 
	}
}

145 
	$º_íqueue
(
dn_sch_ö°
 *
_si
, 
dn_queue
 *
q
, 
mbuf
 *
m
)

147 
º_si
 *
si
;

148 
º_queue
 *
ºq
;

150 i‡(
m
 !
q
->
mq
.
hód
) {

151 i‡(
	`dn_íqueue
(
q
, 
m
, 0))

153 i‡(
m
 !
q
->
mq
.
hód
)

158 
si
 = (
º_si
 *)(
_si
 + 1);

159 
ºq
 = (
º_queue
 *)
q
;

161 i‡(
ºq
->
°©us
 == 1)

165 
	`º_≠≥nd
(
ºq
, 
si
);

168 
	}
}

170 
mbuf
 *

171 
	$º_dequeue
(
dn_sch_ö°
 *
_si
)

174 
º_si
 *
si
 = (º_sò*)(
_si
 + 1);

175 
º_queue
 *
ºq
;

176 
uöt64_t
 
Àn
;

178  (
ºq
 = 
si
->
hód
) ) {

179 
mbuf
 *
m
 = 
ºq
->
q
.
mq
.
hód
;

180 i‡–
m
 =
NULL
) {

182 
	`º_ªmove_hód
(
si
);

185 
Àn
 = 
m
->
m_pkthdr
.len;

187 i‡(
Àn
 > 
ºq
->
¸edô
) {

189 
ºq
->
¸edô
 +ºq->
qu™tum
;

191 
	`√xt_poöãr
(
si
);

193 
ºq
->
¸edô
 -
Àn
;

194  
	`dn_dequeue
(&
ºq
->
q
);

199  
NULL
;

200 
	}
}

203 
	$º_c⁄fig
(
dn_schk
 *
_schk
)

205 
º_schk
 *
schk
 = (º_schk *)(
_schk
 + 1);

206 
	`ND
("called");

209 
schk
->
mö_q
 = 64;

210 
schk
->
max_q
 = 2048;

211 
schk
->
q_byãs
 = 1500;

214 
	}
}

217 
	$º_√w_sched
(
dn_sch_ö°
 *
_si
)

219 
º_si
 *
si
 = (º_sò*)(
_si
 + 1);

221 
	`ND
("called");

222 
si
->
hód
 = si->
èû
 = 
NULL
;

225 
	}
}

228 
	$º_‰ì_sched
(
dn_sch_ö°
 *
_si
)

230 
	`ND
("called");

233 
	}
}

236 
	$º_√w_fsk
(
dn_fsk
 *
fs
)

238 
º_schk
 *
schk
 = (º_schk *)(
fs
->
sched
 + 1);

240 
	`ùdn_bound_v¨
(&
fs
->fs.
∑r
[0], 1,

242 
	`ùdn_bound_v¨
(&
fs
->fs.
∑r
[1], 
schk
->
q_byãs
,

243 
schk
->
mö_q
, schk->
max_q
, "RR quantum");

245 
	}
}

248 
	$º_√w_queue
(
dn_queue
 *
_q
)

250 
º_queue
 *
q
 = (º_queuê*)
_q
;

252 
_q
->
ni
.
oid
.
subty≥
 = 
DN_SCHED_RR
;

254 
q
->
qu™tum
 = 
_q
->
fs
->fs.
∑r
[0] * _q->fs->fs.par[1];

255 
	`ND
("ˇŒed, q->qu™tum %d", 
q
->
qu™tum
);

256 
q
->
¸edô
 = q->
qu™tum
;

257 
q
->
°©us
 = 0;

259 i‡(
_q
->
mq
.
hód
 !
NULL
) {

261 
	`º_≠≥nd
(
q
, (
º_si
 *)(
_q
->
_si
 + 1));

264 
	}
}

267 
	$º_‰ì_queue
(
dn_queue
 *
_q
, 
ß„
)

269 
º_queue
 *
q
 = (º_queuê*)
_q
;

271 
	`ND
("called");

272 i‡(
ß„
)

273  
q
->
°©us
;

275 i‡(
q
->
°©us
 == 1) {

276 
º_si
 *
si
 = (º_sò*)(
_q
->
_si
 + 1);

277 
	`ªmove_queue_q
(
q
, 
si
);

280 
	}
}

287 
dn_Æg
 
	gº_desc
 = {

288 
_SI
–.
ty≥
 = ) 
DN_SCHED_RR
,

289 
_SI
–.
«me
 = ) "RR",

290 
_SI
–.
Êags
 = ) 
DN_MULTIQUEUE
,

292 
_SI
–.
schk_d©Æí
 = ) 0,

293 
_SI
–.
si_d©Æí
 = ) (
º_si
),

294 
_SI
–.
q_d©Æí
 = ) (
º_queue
Ë- (
dn_queue
),

296 
_SI
–.
íqueue
 = ) 
º_íqueue
,

297 
_SI
–.
dequeue
 = ) 
º_dequeue
,

299 
_SI
–.
c⁄fig
 = ) 
º_c⁄fig
,

300 
_SI
–.
de°roy
 = ) 
NULL
,

301 
_SI
–.
√w_sched
 = ) 
º_√w_sched
,

302 
_SI
–.
‰ì_sched
 = ) 
º_‰ì_sched
,

303 
_SI
–.
√w_fsk
 = ) 
º_√w_fsk
,

304 
_SI
–.
‰ì_fsk
 = ) 
NULL
,

305 
_SI
–.
√w_queue
 = ) 
º_√w_queue
,

306 
_SI
–.
‰ì_queue
 = ) 
º_‰ì_queue
,

310 
DECLARE_DNSCHED_MODULE
(
dn_º
, &
º_desc
);

	@kipfw-mod/dn_sched_wf2q.c

32 #ifde‡
_KERNEL


33 
	~<sys/mÆloc.h
>

34 
	~<sys/sockë.h
>

35 
	~<sys/sockëv¨.h
>

36 
	~<sys/kî√l.h
>

37 
	~<sys/mbuf.h
>

38 
	~<sys/moduÀ.h
>

39 
	~<√t/if.h
>

40 
	~<√töë/ö.h
>

41 
	~<√töë/ù_v¨.h
>

42 
	~<√töë/ù_fw.h
>

43 
	~<√töë/ù_dummy√t.h
>

44 
	~<√töë/ùfw/dn_hóp.h
>

45 
	~<√töë/ùfw/ù_dn_¥iv©e.h
>

46 
	~<√töë/ùfw/dn_sched.h
>

48 
	~<dn_ã°.h
>

51 #i‚de‡
MAX64


52 
	#MAX64
(
x
,
y
Ë(–(
öt64_t
Ë–(y)-(xË)Ë> 0 ) ? (yË: (x)

	)

66 #i‚de‡
FRAC_BITS


67 
	#FRAC_BITS
 28

	)

68 
	#ONE_FP
 (1UL << 
FRAC_BITS
)

	)

81 
	swf2qp_si
 {

82 
dn_hóp
 
	msch_hóp
;

83 
dn_hóp
 
	m√_hóp
;

84 
dn_hóp
 
	midÀ_hóp
;

85 
uöt64_t
 
	mV
;

86 
uöt32_t
 
	möv_wsum
;

87 
uöt32_t
 
	mwsum
;

90 
	swf2qp_queue
 {

91 
dn_queue
 
	m_q
;

92 
uöt64_t
 
	mS
, 
	mF
;

93 
uöt32_t
 
	möv_w
;

94 
öt32_t
 
	mhóp_pos
;

109 
	$idÀ_check
(
wf2qp_si
 *
si
, 
n
, 
f‹˚
)

111 
dn_hóp
 *
h
 = &
si
->
idÀ_hóp
;

112 
n
-- > 0 && 
h
->
ñemíts
 > 0 &&

113 (
f‹˚
 || 
	`DN_KEY_LT
(
	`HEAP_TOP
(
h
)->
key
, 
si
->
V
))) {

114 
dn_queue
 *
q
 = 
	`HEAP_TOP
(
h
)->
obje˘
;

115 
wf2qp_queue
 *
Æg_fq
 = (wf2qp_queuê*)
q
;

117 
	`hóp_exåa˘
(
h
, 
NULL
);

121 
Æg_fq
->
S
 =álg_fq->
F
 + 1;

122 
si
->
wsum
 -
q
->
fs
->fs.
∑r
[0];

123 i‡(
si
->
wsum
 > 0)

124 
si
->
öv_wsum
 = 
ONE_FP
/si->
wsum
;

126 
	}
}

129 
	$wf2qp_íqueue
(
dn_sch_ö°
 *
_si
, 
dn_queue
 *
q
, 
mbuf
 *
m
)

131 
dn_fsk
 *
fs
 = 
q
->fs;

132 
wf2qp_si
 *
si
 = (wf2qp_sò*)(
_si
 + 1);

133 
wf2qp_queue
 *
Æg_fq
;

134 
uöt64_t
 
Àn
 = 
m
->
m_pkthdr
.len;

136 i‡(
m
 !
q
->
mq
.
hód
) {

137 i‡(
	`dn_íqueue
(
q
, 
m
, 0))

139 i‡(
m
 !
q
->
mq
.
hód
)

144 
Æg_fq
 = (
wf2qp_queue
 *)
q
;

146 i‡(
	`DN_KEY_LT
(
Æg_fq
->
F
,álg_fq->
S
)) {

148 
Æg_fq
->
S
 = 
si
->
V
;

149 
si
->
wsum
 +
fs
->fs.
∑r
[0];

150 
si
->
öv_wsum
 = 
ONE_FP
/si->
wsum
;

152 
	`hóp_exåa˘
(&
si
->
idÀ_hóp
, 
q
);

153 
Æg_fq
->
S
 = 
	`MAX64
◊lg_fq->
F
, 
si
->
V
);

155 
Æg_fq
->
F
 =álg_fq->
S
 + 
Àn
 *álg_fq->
öv_w
;

158 i‡(
si
->
√_hóp
.
ñemíts
 =0 && si->
sch_hóp
.elements == 0)

159 
si
->
V
 = 
	`MAX64
(
Æg_fq
->
S
, si->V);

172 i‡(
	`DN_KEY_LT
(
si
->
V
, 
Æg_fq
->
S
)) {

174 i‡(
si
->
sch_hóp
.
ñemíts
 == 0)

175 
	`D
("++ ouch!ÇotÉligible butÉmpty scheduler!");

176 
	`hóp_ö£π
(&
si
->
√_hóp
, 
Æg_fq
->
S
, 
q
);

178 
	`hóp_ö£π
(&
si
->
sch_hóp
, 
Æg_fq
->
F
, 
q
);

181 
	}
}

184 
mbuf
 *

185 
	$wf2qp_dequeue
(
dn_sch_ö°
 *
_si
)

188 
wf2qp_si
 *
si
 = (wf2qp_sò*)(
_si
 + 1);

189 
mbuf
 *
m
;

190 
dn_queue
 *
q
;

191 
dn_hóp
 *
sch
 = &
si
->
sch_hóp
;

192 
dn_hóp
 *
√h
 = &
si
->
√_hóp
;

193 
wf2qp_queue
 *
Æg_fq
;

195 i‡(
sch
->
ñemíts
 =0 && 
√h
->elements == 0) {

199 
	`idÀ_check
(
si
, 0x7fffffff, 1);

200 
si
->
V
 = 0;

201 
si
->
wsum
 = 0;

202  
NULL
;

204 
	`idÀ_check
(
si
, 1, 0);

212 
m
 = 
NULL
;

222 i‡(
sch
->
ñemíts
 =0 && 
√h
->elements > 0) {

223 
si
->
V
 = 
	`MAX64
(si->V, 
	`HEAP_TOP
(
√h
)->
key
);

225 
√h
->
ñemíts
 > 0 &&

226 
	`DN_KEY_LEQ
(
	`HEAP_TOP
(
√h
)->
key
, 
si
->
V
)) {

227 
q
 = 
	`HEAP_TOP
(
√h
)->
obje˘
;

228 
Æg_fq
 = (
wf2qp_queue
 *)
q
;

229 
	`hóp_exåa˘
(
√h
, 
NULL
);

230 
	`hóp_ö£π
(
sch
, 
Æg_fq
->
F
, 
q
);

232 i‡(
m
)

235 
q
 = 
	`HEAP_TOP
(
sch
)->
obje˘
;

236 
Æg_fq
 = (
wf2qp_queue
 *)
q
;

237 
m
 = 
	`dn_dequeue
(
q
);

238 
	`hóp_exåa˘
(
sch
, 
NULL
);

239 
si
->
V
 +(
uöt64_t
)(
m
->
m_pkthdr
.
Àn
Ë* si->
öv_wsum
;

240 
Æg_fq
->
S
 =álg_fq->
F
;

241 i‡(
q
->
mq
.
hód
 == 0) {

242 
	`hóp_ö£π
(&
si
->
idÀ_hóp
, 
Æg_fq
->
F
, 
q
);

245 
uöt64_t
 
Àn
 = 
q
->
mq
.
hód
->
m_pkthdr
.len;

246 
Æg_fq
->
F
 +
Àn
 *álg_fq->
öv_w
;

247 i‡(
	`DN_KEY_LEQ
(
Æg_fq
->
S
, 
si
->
V
)) {

248 
	`hóp_ö£π
(
sch
, 
Æg_fq
->
F
, 
q
);

250 
	`hóp_ö£π
(
√h
, 
Æg_fq
->
S
, 
q
);

254  
m
;

255 
	}
}

258 
	$wf2qp_√w_sched
(
dn_sch_ö°
 *
_si
)

260 
wf2qp_si
 *
si
 = (wf2qp_sò*)(
_si
 + 1);

261 
ofs
 = 
	`off£tof
(
wf2qp_queue
, 
hóp_pos
);

264 i‡(
	`hóp_öô
(&
si
->
idÀ_hóp
, 16, 
ofs
) ||

265 
	`hóp_öô
(&
si
->
sch_hóp
, 16, 
ofs
) ||

266 
	`hóp_öô
(&
si
->
√_hóp
, 16, 
ofs
)) {

267 
	`hóp_‰ì
(&
si
->
√_hóp
);

268 
	`hóp_‰ì
(&
si
->
sch_hóp
);

269 
	`hóp_‰ì
(&
si
->
idÀ_hóp
);

270  
ENOMEM
;

273 
	}
}

276 
	$wf2qp_‰ì_sched
(
dn_sch_ö°
 *
_si
)

278 
wf2qp_si
 *
si
 = (wf2qp_sò*)(
_si
 + 1);

280 
	`hóp_‰ì
(&
si
->
sch_hóp
);

281 
	`hóp_‰ì
(&
si
->
√_hóp
);

282 
	`hóp_‰ì
(&
si
->
idÀ_hóp
);

285 
	}
}

288 
	$wf2qp_√w_fsk
(
dn_fsk
 *
fs
)

290 
	`ùdn_bound_v¨
(&
fs
->fs.
∑r
[0], 1,

293 
	}
}

296 
	$wf2qp_√w_queue
(
dn_queue
 *
_q
)

298 
wf2qp_queue
 *
q
 = (wf2qp_queuê*)
_q
;

300 
_q
->
ni
.
oid
.
subty≥
 = 
DN_SCHED_WF2QP
;

301 
q
->
F
 = 0;

302 
q
->
S
 = q->
F
 + 1;

303 
q
->
öv_w
 = 
ONE_FP
 / 
_q
->
fs
->fs.
∑r
[0];

304 i‡(
_q
->
mq
.
hód
 !
NULL
) {

305 
	`wf2qp_íqueue
(
_q
->
_si
, _q, _q->
mq
.
hód
);

308 
	}
}

317 
	$wf2qp_‰ì_queue
(
dn_queue
 *
q
, 
ß„
)

319 
wf2qp_queue
 *
Æg_fq
 = (wf2qp_queuê*)
q
;

320 
wf2qp_si
 *
si
 = (wf2qp_sò*)(
q
->
_si
 + 1);

322 i‡(
Æg_fq
->
S
 >Æg_fq->
F
 + 1)

326 i‡(
ß„
)

329 
si
->
wsum
 -
q
->
fs
->fs.
∑r
[0];

330 i‡(
si
->
wsum
 > 0)

331 
si
->
öv_wsum
 = 
ONE_FP
/si->
wsum
;

336 i‡(
q
->
mq
.
hód
 =
NULL
) {

337 
	`hóp_exåa˘
(&
si
->
idÀ_hóp
, 
q
);

338 } i‡(
	`DN_KEY_LT
(
si
->
V
, 
Æg_fq
->
S
)) {

339 
	`hóp_exåa˘
(&
si
->
√_hóp
, 
q
);

341 
	`hóp_exåa˘
(&
si
->
sch_hóp
, 
q
);

344 
	}
}

351 
dn_Æg
 
	gwf2qp_desc
 = {

352 
_SI
–.
ty≥
 = ) 
DN_SCHED_WF2QP
,

353 
_SI
–.
«me
 = ) "WF2Q+",

354 
_SI
–.
Êags
 = ) 
DN_MULTIQUEUE
,

357 
_SI
–.
schk_d©Æí
 = ) 0,

358 
_SI
–.
si_d©Æí
 = ) (
wf2qp_si
),

359 
_SI
–.
q_d©Æí
 = ) (
wf2qp_queue
) -

360 (
dn_queue
),

362 
_SI
–.
íqueue
 = ) 
wf2qp_íqueue
,

363 
_SI
–.
dequeue
 = ) 
wf2qp_dequeue
,

365 
_SI
–.
c⁄fig
 = ) 
NULL
,

366 
_SI
–.
de°roy
 = ) 
NULL
,

367 
_SI
–.
√w_sched
 = ) 
wf2qp_√w_sched
,

368 
_SI
–.
‰ì_sched
 = ) 
wf2qp_‰ì_sched
,

370 
_SI
–.
√w_fsk
 = ) 
wf2qp_√w_fsk
,

371 
_SI
–.
‰ì_fsk
 = ) 
NULL
,

373 
_SI
–.
√w_queue
 = ) 
wf2qp_√w_queue
,

374 
_SI
–.
‰ì_queue
 = ) 
wf2qp_‰ì_queue
,

378 
DECLARE_DNSCHED_MODULE
(
dn_wf2qp
, &
wf2qp_desc
);

	@kipfw-mod/in_cksum.c

32 
	~<sys/cdefs.h
>

33 
__FBSDID
("$FreeBSD: src/sys/netinet/in_cksum.c,v 1.10 2007/10/07 20:44:22 silby Exp $");

35 
	~<sys/∑øm.h
>

36 
	~<sys/mbuf.h
>

45 
	#ADDCARRY
(
x
Ë(x > 65535 ? x -65535 : x)

	)

46 
	#REDUCE
 {
l_utû
.
l
 = 
sum
; sum =Ü_utû.
s
[0] +Ü_utû.s[1]; 
	`ADDCARRY
(sum);}

	)

49 
	$ö_cksum
(
mbuf
 *
m
, 
Àn
)

51 
u_sh‹t
 *
w
;

52 
sum
 = 0;

53 
mÀn
 = 0;

54 
byã_sw≠≥d
 = 0;

57 
c
[2];

58 
u_sh‹t
 
s
;

59 } 
s_utû
;

61 
u_sh‹t
 
s
[2];

62 
l
;

63 } 
l_utû
;

65 ;
m
 && 
Àn
; m = m->
m_√xt
) {

66 i‡(
m
->
m_Àn
 == 0)

68 
w
 = 
	`mtod
(
m
, 
u_sh‹t
 *);

69 i‡(
mÀn
 == -1) {

78 
s_utû
.
c
[1] = *(*)
w
;

79 
sum
 +
s_utû
.
s
;

80 
w
 = (
u_sh‹t
 *)((*)w + 1);

81 
mÀn
 = 
m
->
m_Àn
 - 1;

82 
Àn
--;

84 
mÀn
 = 
m
->
m_Àn
;

85 i‡(
Àn
 < 
mÀn
)

86 
mÀn
 = 
Àn
;

87 
Àn
 -
mÀn
;

91 i‡((1 & (
uöçå_t
Ë
w
Ë&& (
mÀn
 > 0)) {

92 
REDUCE
;

93 
sum
 <<= 8;

94 
s_utû
.
c
[0] = *(
u_ch¨
 *)
w
;

95 
w
 = (
u_sh‹t
 *)((*)w + 1);

96 
mÀn
--;

97 
byã_sw≠≥d
 = 1;

103 (
mÀn
 -= 32) >= 0) {

104 
sum
 +
w
[0]; sum += w[1]; sum += w[2]; sum += w[3];

105 
sum
 +
w
[4]; sum += w[5]; sum += w[6]; sum += w[7];

106 
sum
 +
w
[8]; sum += w[9]; sum += w[10]; sum += w[11];

107 
sum
 +
w
[12]; sum += w[13]; sum += w[14]; sum += w[15];

108 
w
 += 16;

110 
mÀn
 += 32;

111 (
mÀn
 -= 8) >= 0) {

112 
sum
 +
w
[0]; sum += w[1]; sum += w[2]; sum += w[3];

113 
w
 += 4;

115 
mÀn
 += 8;

116 i‡(
mÀn
 =0 && 
byã_sw≠≥d
 == 0)

118 
REDUCE
;

119 (
mÀn
 -= 2) >= 0) {

120 
sum
 +*
w
++;

122 i‡(
byã_sw≠≥d
) {

123 
REDUCE
;

124 
sum
 <<= 8;

125 
byã_sw≠≥d
 = 0;

126 i‡(
mÀn
 == -1) {

127 
s_utû
.
c
[1] = *(*)
w
;

128 
sum
 +
s_utû
.
s
;

129 
mÀn
 = 0;

131 
mÀn
 = -1;

132 } i‡(
mÀn
 == -1)

133 
s_utû
.
c
[0] = *(*)
w
;

135 i‡(
Àn
)

136 
	`¥ötf
("cksum: out of data\n");

137 i‡(
mÀn
 == -1) {

141 
s_utû
.
c
[1] = 0;

142 
sum
 +
s_utû
.
s
;

144 
REDUCE
;

145  (~
sum
 & 0xffff);

146 
	}
}

	@kipfw-mod/include_e/altq/if_altq.h

	@kipfw-mod/include_e/arpa/inet.h

	@kipfw-mod/include_e/machine/in_cksum.h

	@kipfw-mod/include_e/net/bpf.h

	@kipfw-mod/include_e/net/ethernet.h

	@kipfw-mod/include_e/net/if_types.h

	@kipfw-mod/include_e/net/netisr.h

	@kipfw-mod/include_e/net/pf_mtag.h

	@kipfw-mod/include_e/net/vnet.h

	@kipfw-mod/include_e/netinet/ether.h

	@kipfw-mod/include_e/netinet/icmp6.h

	@kipfw-mod/include_e/netinet/if_ether.h

	@kipfw-mod/include_e/netinet/in.h

	@kipfw-mod/include_e/netinet/in_pcb.h

	@kipfw-mod/include_e/netinet/in_systm.h

	@kipfw-mod/include_e/netinet/in_var.h

	@kipfw-mod/include_e/netinet/ip_carp.h

	@kipfw-mod/include_e/netinet/ip_var.h

	@kipfw-mod/include_e/netinet/pim.h

	@kipfw-mod/include_e/netinet/sctp.h

	@kipfw-mod/include_e/netinet/tcp_timer.h

	@kipfw-mod/include_e/netinet/tcpip.h

	@kipfw-mod/include_e/netinet/udp_var.h

	@kipfw-mod/include_e/netinet6/ip6_var.h

	@kipfw-mod/include_e/opt_inet.h

	@kipfw-mod/include_e/opt_inet6.h

	@kipfw-mod/include_e/opt_ipdivert.h

	@kipfw-mod/include_e/opt_ipfw.h

	@kipfw-mod/include_e/opt_ipsec.h

	@kipfw-mod/include_e/opt_mbuf_stress_test.h

	@kipfw-mod/include_e/opt_mpath.h

	@kipfw-mod/include_e/opt_param.h

	@kipfw-mod/include_e/sys/_lock.h

	@kipfw-mod/include_e/sys/_mutex.h

	@kipfw-mod/include_e/sys/_rwlock.h

	@kipfw-mod/include_e/sys/condvar.h

	@kipfw-mod/include_e/sys/domain.h

	@kipfw-mod/include_e/sys/eventhandler.h

	@kipfw-mod/include_e/sys/jail.h

	@kipfw-mod/include_e/sys/limits.h

	@kipfw-mod/include_e/sys/lock.h

	@kipfw-mod/include_e/sys/mutex.h

	@kipfw-mod/include_e/sys/priv.h

	@kipfw-mod/include_e/sys/proc.h

	@kipfw-mod/include_e/sys/rmlock.h

	@kipfw-mod/include_e/sys/rwlock.h

	@kipfw-mod/include_e/sys/socket.h

	@kipfw-mod/include_e/sys/socketvar.h

	@kipfw-mod/include_e/sys/sysctl.h

	@kipfw-mod/include_e/sys/time.h

	@kipfw-mod/include_e/sys/ucred.h

	@kipfw-mod/ip_dn_glue.c

33 
	~"›t_öë6.h
"

35 
	~<sys/∑øm.h
>

36 
	~<sys/sy°m.h
>

37 
	~<sys/mÆloc.h
>

38 
	~<sys/mbuf.h
>

39 
	~<sys/kî√l.h
>

40 
	~<sys/lock.h
>

41 
	~<sys/moduÀ.h
>

42 
	~<sys/¥iv.h
>

43 
	~<sys/¥oc.h
>

44 
	~<sys/rwlock.h
>

45 
	~<sys/sockë.h
>

46 
	~<sys/sockëv¨.h
>

47 
	~<sys/time.h
>

48 
	~<sys/èskqueue.h
>

49 
	~<√t/if.h
>

50 
	~<√töë/ö.h
>

51 
	~<√töë/ù_v¨.h
>

52 
	~<√töë/ù_fw.h
>

53 
	~<√töë/ùfw/ù_fw_¥iv©e.h
>

54 
	~<√töë/ùfw/dn_hóp.h
>

55 
	~<√töë/ù_dummy√t.h
>

56 
	~<√töë/ùfw/ù_dn_¥iv©e.h
>

57 
	~<√töë/ùfw/dn_sched.h
>

61 
	sdn_hóp_íåy7
 {

62 
öt64_t
 
	mkey
;

63 *
	mobje˘
;

66 
	sdn_hóp7
 {

67 
	msize
;

68 
	mñemíts
;

69 
	moff£t
;

70 
dn_hóp_íåy7
 *
	mp
;

74 
	sdn_Êow_£t
 {

75 
SLIST_ENTRY
(
dn_Êow_£t
Ë
	m√xt
;

77 
u_sh‹t
 
	mfs_ƒ
 ;

78 
u_sh‹t
 
	mÊags_fs
;

79 
	#DNOLD_HAVE_FLOW_MASK
 0x0001

	)

80 
	#DNOLD_IS_RED
 0x0002

	)

81 
	#DNOLD_IS_GENTLE_RED
 0x0004

	)

82 
	#DNOLD_QSIZE_IS_BYTES
 0x0008

	)

83 
	#DNOLD_NOERROR
 0x0010

	)

84 
	#DNOLD_HAS_PROFILE
 0x0020

	)

85 
	#DNOLD_IS_PIPE
 0x4000

	)

86 
	#DNOLD_IS_QUEUE
 0x8000

	)

88 
dn_pùe7
 *
	mpùe
 ;

89 
u_sh‹t
 
	m∑ª¡_ƒ
 ;

91 
	mweight
 ;

92 
	mqsize
 ;

93 
	m∂r
 ;

95 
ùfw_Êow_id
 
	mÊow_mask
 ;

98 
	mrq_size
 ;

99 
	mrq_ñemíts
 ;

100 
dn_Êow_queue7
 **
	mrq
;

102 
u_öt32_t
 
	mœ°_expúed
 ;

103 
	mbacklogged
 ;

106 
	#SCALE_RED
 16

	)

107 
	#SCALE
(
x
Ë–(xË<< 
SCALE_RED
 )

	)

108 
	#SCALE_VAL
(
x
Ë–(xË>> 
SCALE_RED
 )

	)

109 
	#SCALE_MUL
(
x
,
y
Ë––(xË* (yËË>> 
SCALE_RED
 )

	)

110 
	mw_q
 ;

111 
	mmax_th
 ;

112 
	mmö_th
 ;

113 
	mmax_p
 ;

114 
u_öt
 
	mc_1
 ;

115 
u_öt
 
	mc_2
 ;

116 
u_öt
 
	mc_3
 ;

117 
u_öt
 
	mc_4
 ;

118 
u_öt
 * 
	mw_q_lookup
 ;

119 
u_öt
 
	mlookup_dïth
 ;

120 
	mlookup_°ï
 ;

121 
	mlookup_weight
 ;

122 
	mavg_pkt_size
 ;

123 
	mmax_pkt_size
 ;

125 
SLIST_HEAD
(
dn_Êow_£t_hód
, 
dn_Êow_£t
);

127 
	#DN_IS_PIPE
 0x4000

	)

128 
	#DN_IS_QUEUE
 0x8000

	)

129 
	sdn_Êow_queue7
 {

130 
dn_Êow_queue7
 *
	m√xt
 ;

131 
ùfw_Êow_id
 
	mid
 ;

133 
mbuf
 *
	mhód
, *
	mèû
 ;

134 
u_öt
 
	mÀn
 ;

135 
u_öt
 
	mÀn_byãs
 ;

137 
u_l⁄g
 
	mnumbyãs
;

139 
u_öt64_t
 
	mtŸ_pkts
 ;

140 
u_öt64_t
 
	mtŸ_byãs
 ;

141 
u_öt32_t
 
	mdr›s
 ;

143 
	mhash_¶Ÿ
 ;

146 
	mavg
 ;

147 
	mcou¡
 ;

148 
	møndom
 ;

149 
u_öt32_t
 
	mq_time
;

152 
dn_Êow_£t
 *
	mfs
 ;

153 
	mhóp_pos
 ;

154 
öt64_t
 
	msched_time
 ;

156 
öt64_t
 
	mS
,
	mF
 ;

159 
	sdn_pùe7
 {

160 
SLIST_ENTRY
(
dn_pùe7
Ë
	m√xt
;

162 
	mpùe_ƒ
 ;

163 
	mb™dwidth
;

164 
	mdñay
 ;

166 
mbuf
 *
	mhód
, *
	mèû
 ;

169 
dn_hóp7
 
	mscheduÀr_hóp
 ;

170 
dn_hóp7
 
	mnŸ_ñigibÀ_hóp
;

171 
dn_hóp7
 
	midÀ_hóp
 ;

173 
öt64_t
 
	mV
 ;

174 
	msum
;

176 
	mnumbyãs
;

178 
öt64_t
 
	msched_time
 ;

184 
	mif_«me
[
IFNAMSIZ
];

185 
i‚ë
 *
	miÂ
 ;

186 
	mªady
 ;

188 
dn_Êow_£t
 
	mfs
 ;

190 
SLIST_HEAD
(
dn_pùe_hód7
, 
dn_pùe7
);

194 
	sdn_Êow_queue8
 {

195 
dn_Êow_queue8
 *
	m√xt
 ;

196 
ùfw_Êow_id
 
	mid
 ;

198 
mbuf
 *
	mhód
, *
	mèû
 ;

199 
u_öt
 
	mÀn
 ;

200 
u_öt
 
	mÀn_byãs
 ;

202 
uöt64_t
 
	mnumbyãs
 ;

203 
öt64_t
 
	mexåa_bôs
;

205 
u_öt64_t
 
	mtŸ_pkts
 ;

206 
u_öt64_t
 
	mtŸ_byãs
 ;

207 
u_öt32_t
 
	mdr›s
 ;

209 
	mhash_¶Ÿ
 ;

212 
	mavg
 ;

213 
	mcou¡
 ;

214 
	møndom
 ;

215 
öt64_t
 
	midÀ_time
;

218 
dn_Êow_£t
 *
	mfs
 ;

219 
	mhóp_pos
 ;

220 
öt64_t
 
	msched_time
 ;

222 
öt64_t
 
	mS
,
	mF
 ;

225 
	sdn_pùe8
 {

226 
SLIST_ENTRY
(
dn_pùe8
Ë
	m√xt
;

228 
	mpùe_ƒ
 ;

229 
	mb™dwidth
;

230 
	mdñay
 ;

232 
mbuf
 *
	mhód
, *
	mèû
 ;

235 
dn_hóp7
 
	mscheduÀr_hóp
 ;

236 
dn_hóp7
 
	mnŸ_ñigibÀ_hóp
;

237 
dn_hóp7
 
	midÀ_hóp
 ;

239 
öt64_t
 
	mV
 ;

240 
	msum
;

243 
öt64_t
 
	mnumbyãs
;

244 
uöt64_t
 
	mbur°
;

246 
öt64_t
 
	msched_time
 ;

247 
öt64_t
 
	midÀ_time
;

249 
	mif_«me
[
IFNAMSIZ
];

250 
i‚ë
 *
	miÂ
 ;

251 
	mªady
 ;

253 
dn_Êow_£t
 
	mfs
 ;

256 
	#ED_MAX_NAME_LEN
 32

	)

257 
	m«me
[
ED_MAX_NAME_LEN
];

258 
	mloss_Àvñ
;

259 
	mßm∂es_no
;

260 *
	mßm∂es
;

263 
	#ED_MAX_SAMPLES_NO
 1024

	)

264 
	sdn_pùe_max8
 {

265 
dn_pùe8
 
	mpùe
;

266 
	mßm∂es
[
ED_MAX_SAMPLES_NO
];

268 
SLIST_HEAD
(
dn_pùe_hód8
, 
dn_pùe8
);

290 
	#O_NEXT
(
p
, 
Àn
Ë((*)((*Ì +Üí))

	)

292 
	$oid_fûl
(
dn_id
 *
oid
, 
Àn
, 
ty≥
, 
uöçå_t
 
id
)

294 
oid
->
Àn
 =Üen;

295 
oid
->
ty≥
 =Åype;

296 
oid
->
subty≥
 = 0;

297 
oid
->
id
 = id;

298 
	}
}

301 
	$o_√xt
(
dn_id
 **
o
, 
Àn
, 
ty≥
)

303 
dn_id
 *
ªt
 = *
o
;

304 
	`oid_fûl
(
ªt
, 
Àn
, 
ty≥
, 0);

305 *
o
 = 
	`O_NEXT
(*o, 
Àn
);

306  
ªt
;

307 
	}
}

310 
size_t
 
	gpùesize7
 = (
dn_pùe7
);

311 
size_t
 
	gpùesize8
 = (
dn_pùe8
);

312 
size_t
 
	gpùesizemax8
 = (
dn_pùe_max8
);

323 
	gis7
 = 0;

326 
	$c⁄vîtÊags2√w
(
§c
)

328 
d°
 = 0;

330 i‡(
§c
 & 
DNOLD_HAVE_FLOW_MASK
)

331 
d°
 |
DN_HAVE_MASK
;

332 i‡(
§c
 & 
DNOLD_QSIZE_IS_BYTES
)

333 
d°
 |
DN_QSIZE_BYTES
;

334 i‡(
§c
 & 
DNOLD_NOERROR
)

335 
d°
 |
DN_NOERROR
;

336 i‡(
§c
 & 
DNOLD_IS_RED
)

337 
d°
 |
DN_IS_RED
;

338 i‡(
§c
 & 
DNOLD_IS_GENTLE_RED
)

339 
d°
 |
DN_IS_GENTLE_RED
;

340 i‡(
§c
 & 
DNOLD_HAS_PROFILE
)

341 
d°
 |
DN_HAS_PROFILE
;

343  
d°
;

344 
	}
}

347 
	$c⁄vîtÊags2ﬁd
(
§c
)

349 
d°
 = 0;

351 i‡(
§c
 & 
DN_HAVE_MASK
)

352 
d°
 |
DNOLD_HAVE_FLOW_MASK
;

353 i‡(
§c
 & 
DN_IS_RED
)

354 
d°
 |
DNOLD_IS_RED
;

355 i‡(
§c
 & 
DN_IS_GENTLE_RED
)

356 
d°
 |
DNOLD_IS_GENTLE_RED
;

357 i‡(
§c
 & 
DN_NOERROR
)

358 
d°
 |
DNOLD_NOERROR
;

359 i‡(
§c
 & 
DN_HAS_PROFILE
)

360 
d°
 |
DNOLD_HAS_PROFILE
;

361 i‡(
§c
 & 
DN_QSIZE_BYTES
)

362 
d°
 |
DNOLD_QSIZE_IS_BYTES
;

364  
d°
;

365 
	}
}

368 
	$dn_com∑t_dñ
(*
v
)

370 
dn_pùe7
 *
p
 = (dn_pùe7 *Ë
v
;

371 
dn_pùe8
 *
p8
 = (dn_pùe8 *Ë
v
;

373 
dn_id
 
oid
;

374 
uöçå_t
 
a
[1];

375 } 
cmd
;

378 
	`oid_fûl
((*)&
cmd
, (cmd), 
DN_CMD_DELETE
, 
DN_API_VERSION
);

380 i‡(
is7
) {

381 i‡(
p
->
pùe_ƒ
 =0 &&Ö->
fs
.
fs_ƒ
 == 0)

382  
EINVAL
;

383 i‡(
p
->
pùe_ƒ
 !0 &&Ö->
fs
.
fs_ƒ
 != 0)

384  
EINVAL
;

386 i‡(
p8
->
pùe_ƒ
 =0 &&Ö8->
fs
.
fs_ƒ
 == 0)

387  
EINVAL
;

388 i‡(
p8
->
pùe_ƒ
 !0 &&Ö8->
fs
.
fs_ƒ
 != 0)

389  
EINVAL
;

392 i‡(
p
->
pùe_ƒ
 != 0) {

393 
cmd
.
a
[0] = 
p
->
pùe_ƒ
;

394 
cmd
.
oid
.
subty≥
 = 
DN_LINK
;

396 
cmd
.
oid
.
subty≥
 = 
DN_FS
;

397 
cmd
.
a
[0] = (
is7
Ë? 
p
->
fs
.
fs_ƒ
 : 
p8
->fs.fs_nr;

400  
	`do_c⁄fig
(&
cmd
, cmd.
oid
.
Àn
);

401 
	}
}

404 
	$dn_com∑t_c⁄fig_queue
(
dn_fs
 *
fs
, * 
v
)

406 
dn_pùe7
 *
p7
 = (dn_pùe7 *)
v
;

407 
dn_pùe8
 *
p8
 = (dn_pùe8 *)
v
;

408 
dn_Êow_£t
 *
f
;

410 i‡(
is7
)

411 
f
 = &
p7
->
fs
;

413 
f
 = &
p8
->
fs
;

415 
fs
->
fs_ƒ
 = 
f
->fs_nr;

416 
fs
->
sched_ƒ
 = 
f
->
∑ª¡_ƒ
;

417 
fs
->
Êow_mask
 = 
f
->flow_mask;

418 
fs
->
buckës
 = 
f
->
rq_size
;

419 
fs
->
qsize
 = 
f
->qsize;

420 
fs
->
∂r
 = 
f
->plr;

421 
fs
->
∑r
[0] = 
f
->
weight
;

422 
fs
->
Êags
 = 
	`c⁄vîtÊags2√w
(
f
->
Êags_fs
);

423 i‡(
fs
->
Êags
 & 
DN_IS_GENTLE_RED
 || fs->Êag†& 
DN_IS_RED
) {

424 
fs
->
w_q
 = 
f
->w_q;

425 
fs
->
max_th
 = 
f
->max_th;

426 
fs
->
mö_th
 = 
f
->min_th;

427 
fs
->
max_p
 = 
f
->max_p;

431 
	}
}

434 
	$dn_com∑t_c⁄fig_pùe
(
dn_sch
 *
sch
, 
dn_lök
 *
p
,

435 
dn_fs
 *
fs
, * 
v
)

437 
dn_pùe7
 *
p7
 = (dn_pùe7 *)
v
;

438 
dn_pùe8
 *
p8
 = (dn_pùe8 *)
v
;

439 
i
 = 
p7
->
pùe_ƒ
;

441 
sch
->
sched_ƒ
 = 
i
;

442 
sch
->
oid
.
subty≥
 = 0;

443 
p
->
lök_ƒ
 = 
i
;

444 
fs
->
fs_ƒ
 = 
i
 + 2*
DN_MAX_ID
;

445 
fs
->
sched_ƒ
 = 
i
 + 
DN_MAX_ID
;

448 
p
->
b™dwidth
 = 
p7
->bandwidth;

449 
p
->
dñay
 = 
p7
->delay;

450 i‡(!
is7
) {

452 
p
->
bur°
 = 
p8
->burst;

456 
	`dn_com∑t_c⁄fig_queue
(
fs
, 
v
);

457 
fs
->
fs_ƒ
 = 
i
 + 2*
DN_MAX_ID
;

458 
fs
->
sched_ƒ
 = 
i
 + 
DN_MAX_ID
;

461 
sch
->
buckës
 = 
fs
->buckets;

462 
fs
->
buckës
 = 0;

463 i‡(
fs
->
Êags
 & 
DN_HAVE_MASK
) {

464 
sch
->
Êags
 |
DN_HAVE_MASK
;

465 
fs
->
Êags
 &~
DN_HAVE_MASK
;

466 
sch
->
sched_mask
 = 
fs
->
Êow_mask
;

467 
	`bzîo
(&
fs
->
Êow_mask
, (
ùfw_Êow_id
));

471 
	}
}

474 
	$dn_com∑t_c⁄fig_¥ofûe
(
dn_¥ofûe
 *
pf
, 
dn_lök
 *
p
,

475 *
v
)

477 
dn_pùe8
 *
p8
 = (dn_pùe8 *)
v
;

479 
p8
->
ßm∂es
 = &(((
dn_pùe_max8
 *)p8)->samples[0]);

481 
pf
->
lök_ƒ
 = 
p
->link_nr;

482 
pf
->
loss_Àvñ
 = 
p8
->loss_level;

484 
pf
->
ßm∂es_no
 = 
p8
->samples_no;

485 
	`°∫˝y
(
pf
->
«me
, 
p8
->name,(pf->name));

486 
	`bc›y
(
p8
->
ßm∂es
, 
pf
->samples, (pf->samples));

489 
	}
}

496 
	$dn_com∑t_c⁄figuª
(*
v
)

498 
dn_id
 *
buf
 = 
NULL
, *
ba£
;

499 
dn_sch
 *
sch
 = 
NULL
;

500 
dn_lök
 *
p
 = 
NULL
;

501 
dn_fs
 *
fs
 = 
NULL
;

502 
dn_¥ofûe
 *
pf
 = 
NULL
;

503 
lmax
;

504 
îr‹
;

506 
dn_pùe7
 *
p7
 = (dn_pùe7 *)
v
;

507 
dn_pùe8
 *
p8
 = (dn_pùe8 *)
v
;

509 
i
;

511 
lmax
 = (
dn_id
);

512 
lmax
 +(
dn_sch
Ë+ (
dn_lök
) +

513 (
dn_fs
Ë+ (
dn_¥ofûe
);

515 
ba£
 = 
buf
 = 
	`mÆloc
(
lmax
, 
M_DUMMYNET
, 
M_WAIT
|
M_ZERO
);

516 
	`o_√xt
(&
buf
, (
dn_id
), 
DN_CMD_CONFIG
);

517 
ba£
->
id
 = 
DN_API_VERSION
;

520 
i
 = 
p7
->
pùe_ƒ
;

521 i‡(
i
 != 0) {

522 
sch
 = 
	`o_√xt
(&
buf
, (*sch), 
DN_SCH
);

523 
p
 = 
	`o_√xt
(&
buf
, (*p), 
DN_LINK
);

524 
fs
 = 
	`o_√xt
(&
buf
, (*fs), 
DN_FS
);

526 
îr‹
 = 
	`dn_com∑t_c⁄fig_pùe
(
sch
, 
p
, 
fs
, 
v
);

527 i‡(
îr‹
) {

528 
	`‰ì
(
buf
, 
M_DUMMYNET
);

529  
îr‹
;

531 i‡(!
is7
 && 
p8
->
ßm∂es_no
 > 0) {

533 
pf
 = 
	`o_√xt
(&
buf
, (*pf), 
DN_PROFILE
);

534 
îr‹
 = 
	`dn_com∑t_c⁄fig_¥ofûe
(
pf
, 
p
, 
v
);

535 i‡(
îr‹
) {

536 
	`‰ì
(
buf
, 
M_DUMMYNET
);

537  
îr‹
;

541 
fs
 = 
	`o_√xt
(&
buf
, (*fs), 
DN_FS
);

542 
îr‹
 = 
	`dn_com∑t_c⁄fig_queue
(
fs
, 
v
);

543 i‡(
îr‹
) {

544 
	`‰ì
(
buf
, 
M_DUMMYNET
);

545  
îr‹
;

548 
îr‹
 = 
	`do_c⁄fig
(
ba£
, (*)
buf
 - (*)base);

550 i‡(
buf
)

551 
	`‰ì
(
buf
, 
M_DUMMYNET
);

552  
îr‹
;

553 
	}
}

556 
	$dn_com∑t_ˇlc_size
()

558 
√ed
 = 0;

566 
√ed
 +
dn_cfg
.
schk_cou¡
 * (
dn_pùe8
) / 2;

567 
√ed
 +
dn_cfg
.
fsk_cou¡
 * (
dn_Êow_£t
);

568 
√ed
 +
dn_cfg
.
si_cou¡
 * (
dn_Êow_queue8
);

569 
√ed
 +
dn_cfg
.
queue_cou¡
 * (
dn_Êow_queue8
);

571  
√ed
;

572 
	}
}

575 
	$dn_c_c›y_q
 (*
_ni
, *
¨g
)

577 
c›y_¨gs
 *
a
 = 
¨g
;

578 
dn_Êow_queue7
 *
fq7
 = (dn_Êow_queue7 *)*
a
->
°¨t
;

579 
dn_Êow_queue8
 *
fq8
 = (dn_Êow_queue8 *)*
a
->
°¨t
;

580 
dn_Êow
 *
ni
 = (dn_Êow *)
_ni
;

581 
size
 = 0;

585 
fq7
->
Àn
 = 
ni
->
Àngth
;

586 
fq7
->
Àn_byãs
 = 
ni
->len_bytes;

587 
fq7
->
id
 = 
ni
->
fid
;

589 i‡(
is7
) {

590 
size
 = (
dn_Êow_queue7
);

591 
fq7
->
tŸ_pkts
 = 
ni
->tot_pkts;

592 
fq7
->
tŸ_byãs
 = 
ni
->tot_bytes;

593 
fq7
->
dr›s
 = 
ni
->drops;

595 
size
 = (
dn_Êow_queue8
);

596 
fq8
->
tŸ_pkts
 = 
ni
->tot_pkts;

597 
fq8
->
tŸ_byãs
 = 
ni
->tot_bytes;

598 
fq8
->
dr›s
 = 
ni
->drops;

601 *
a
->
°¨t
 +
size
;

603 
	}
}

606 
	$dn_c_c›y_pùe
(
dn_schk
 *
s
, 
c›y_¨gs
 *
a
, 
nq
)

608 
dn_lök
 *
l
 = &
s
->
lök
;

609 
dn_fsk
 *
f
 = 
s
->
fs
;

611 
dn_pùe7
 *
pùe7
 = (dn_pùe7 *)*
a
->
°¨t
;

612 
dn_pùe8
 *
pùe8
 = (dn_pùe8 *)*
a
->
°¨t
;

613 
dn_Êow_£t
 *
fs
;

614 
size
 = 0;

616 i‡(
is7
) {

617 
fs
 = &
pùe7
->fs;

618 
size
 = (
dn_pùe7
);

620 
fs
 = &
pùe8
->fs;

621 
size
 = (
dn_pùe8
);

625 
pùe7
->
√xt
.
¶e_√xt
 = (
dn_pùe7
 *)
DN_IS_PIPE
;

626 
pùe7
->
b™dwidth
 = 
l
->bandwidth;

627 
pùe7
->
dñay
 = 
l
->dñay * 1000 / 
hz
;

628 
pùe7
->
pùe_ƒ
 = 
l
->
lök_ƒ
 - 
DN_MAX_ID
;

630 i‡(!
is7
) {

631 i‡(
s
->
¥ofûe
) {

632 
dn_¥ofûe
 *
pf
 = 
s
->
¥ofûe
;

633 
	`°∫˝y
(
pùe8
->
«me
, 
pf
->name, (pf->name));

634 
pùe8
->
loss_Àvñ
 = 
pf
->loss_level;

635 
pùe8
->
ßm∂es_no
 = 
pf
->samples_no;

637 
pùe8
->
bur°
 = 
	`div64
(
l
->bur° , 8 * 
hz
);

640 
fs
->
Êow_mask
 = 
s
->
sch
.
sched_mask
;

641 
fs
->
rq_size
 = 
s
->
sch
.
buckës
 ? s->sch.buckets : 1;

643 
fs
->
∑ª¡_ƒ
 = 
l
->
lök_ƒ
 - 
DN_MAX_ID
;

644 
fs
->
qsize
 = 
f
->fs.qsize;

645 
fs
->
∂r
 = 
f
->fs.plr;

646 
fs
->
w_q
 = 
f
->fs.w_q;

647 
fs
->
max_th
 = 
f
->max_th;

648 
fs
->
mö_th
 = 
f
->min_th;

649 
fs
->
max_p
 = 
f
->fs.max_p;

650 
fs
->
rq_ñemíts
 = 
nq
;

652 
fs
->
Êags_fs
 = 
	`c⁄vîtÊags2ﬁd
(
f
->fs.
Êags
);

654 *
a
->
°¨t
 +
size
;

656 
	}
}

660 
	$dn_com∑t_c›y_pùe
(
c›y_¨gs
 *
a
, *
_o
)

662 
have
 = 
a
->
íd
 - *a->
°¨t
;

663 
√ed
 = 0;

664 
pùe_size
 = (
dn_pùe8
);

665 
queue_size
 = (
dn_Êow_queue8
);

666 
n_queue
 = 0;

668 
dn_schk
 *
s
 = (dn_schk *)
_o
;

673 
n_queue
 = (
s
->
sch
.
Êags
 & 
DN_HAVE_MASK
 ? 
	`dn_ht_íåõs
(s->
siht
) :

674 (
s
->
siht
 ? 1 : 0));

675 
√ed
 = 
pùe_size
 + 
queue_size
 * 
n_queue
;

676 i‡(
have
 < 
√ed
) {

677 
	`D
("havê%d <Çìd %d", 
have
, 
√ed
);

681 
	`dn_c_c›y_pùe
(
s
, 
a
, 
n_queue
);

684 i‡(
s
->
sch
.
Êags
 & 
DN_HAVE_MASK
)

685 
	`dn_ht_sˇn
(
s
->
siht
, 
dn_c_c›y_q
, 
a
);

686 i‡(
s
->
siht
)

687 
	`dn_c_c›y_q
(
s
->
siht
, 
a
);

689 
	}
}

692 
	$dn_c_c›y_fs
(
dn_fsk
 *
f
, 
c›y_¨gs
 *
a
, 
nq
)

694 
dn_Êow_£t
 *
fs
 = (dn_Êow_£à*)*
a
->
°¨t
;

696 
fs
->
√xt
.
¶e_√xt
 = (
dn_Êow_£t
 *)
DN_IS_QUEUE
;

697 
fs
->
fs_ƒ
 = 
f
->fs.fs_nr;

698 
fs
->
qsize
 = 
f
->fs.qsize;

699 
fs
->
∂r
 = 
f
->fs.plr;

700 
fs
->
w_q
 = 
f
->fs.w_q;

701 
fs
->
max_th
 = 
f
->max_th;

702 
fs
->
mö_th
 = 
f
->min_th;

703 
fs
->
max_p
 = 
f
->fs.max_p;

704 
fs
->
Êow_mask
 = 
f
->fs.flow_mask;

705 
fs
->
rq_ñemíts
 = 
nq
;

706 
fs
->
rq_size
 = (
f
->fs.
buckës
 ? f->fs.buckets : 1);

707 
fs
->
∑ª¡_ƒ
 = 
f
->fs.
sched_ƒ
;

708 
fs
->
weight
 = 
f
->fs.
∑r
[0];

710 
fs
->
Êags_fs
 = 
	`c⁄vîtÊags2ﬁd
(
f
->fs.
Êags
);

711 *
a
->
°¨t
 +(
dn_Êow_£t
);

713 
	}
}

716 
	$dn_com∑t_c›y_queue
(
c›y_¨gs
 *
a
, *
_o
)

718 
have
 = 
a
->
íd
 - *a->
°¨t
;

719 
√ed
 = 0;

720 
fs_size
 = (
dn_Êow_£t
);

721 
queue_size
 = (
dn_Êow_queue8
);

723 
dn_fsk
 *
fs
 = (dn_fsk *)
_o
;

724 
n_queue
 = 0;

726 
n_queue
 = (
fs
->fs.
Êags
 & 
DN_HAVE_MASK
 ? 
	`dn_ht_íåõs
(fs->
qht
) :

727 (
fs
->
qht
 ? 1 : 0));

729 
√ed
 = 
fs_size
 + 
queue_size
 * 
n_queue
;

730 i‡(
have
 < 
√ed
) {

731 
	`D
("have <Çeed");

736 
	`dn_c_c›y_fs
(
fs
, 
a
, 
n_queue
);

739 i‡(
fs
->fs.
Êags
 & 
DN_HAVE_MASK
)

740 
	`dn_ht_sˇn
(
fs
->
qht
, 
dn_c_c›y_q
, 
a
);

741 i‡(
fs
->
qht
)

742 
	`dn_c_c›y_q
(
fs
->
qht
, 
a
);

745 
	}
}

748 
	$c›y_d©a_hñ≥r_com∑t
(*
_o
, *
_¨g
)

750 
c›y_¨gs
 *
a
 = 
_¨g
;

752 i‡(
a
->
ty≥
 =
DN_COMPAT_PIPE
) {

753 
dn_schk
 *
s
 = 
_o
;

754 i‡(
s
->
sch
.
oid
.
subty≥
 !1 || s->sch.
sched_ƒ
 <
DN_MAX_ID
) {

760 if(
	`dn_com∑t_c›y_pùe
(
a
, 
_o
))

761  
DNHT_SCAN_END
;

762 } i‡(
a
->
ty≥
 =
DN_COMPAT_QUEUE
) {

763 
dn_fsk
 *
fs
 = 
_o
;

764 i‡(
fs
->fs.
fs_ƒ
 >
DN_MAX_ID
)

766 i‡(
	`dn_com∑t_c›y_queue
(
a
, 
_o
))

767  
DNHT_SCAN_END
;

770 
	}
}

774 
	$ù_dummy√t_com∑t
(
sock›t
 *
s›t
)

776 
îr‹
=0;

777 *
v
 = 
NULL
;

778 
dn_id
 
oid
;

781 
Àn
 = 
s›t
->
s›t_vÆsize
;

784 i‡(
Àn
 =
pùesize7
) {

785 
	`D
("setting compatibility with FreeBSD 7.2");

786 
is7
 = 1;

788 i‡(
Àn
 =
pùesize8
 ||Üí =
pùesizemax8
) {

789 
	`D
("setting compatibility with FreeBSD 8");

790 
is7
 = 0;

793 
s›t
->
s›t_«me
) {

795 
	`¥ötf
("dummy√t: -- unknow¿›ti⁄ %d", 
s›t
->
s›t_«me
);

796 
îr‹
 = 
EINVAL
;

799 
IP_DUMMYNET_FLUSH
:

800 
	`oid_fûl
(&
oid
, (oid), 
DN_CMD_FLUSH
, 
DN_API_VERSION
);

801 
	`do_c⁄fig
(&
oid
, oid.
Àn
);

804 
IP_DUMMYNET_DEL
:

805 
v
 = 
	`mÆloc
(
Àn
, 
M_TEMP
, 
M_WAITOK
);

806 
îr‹
 = 
	`so›tc›yö
(
s›t
, 
v
, 
Àn
,Üen);

807 i‡(
îr‹
)

809 
îr‹
 = 
	`dn_com∑t_dñ
(
v
);

810 
	`‰ì
(
v
, 
M_TEMP
);

813 
IP_DUMMYNET_CONFIGURE
:

814 
v
 = 
	`mÆloc
(
Àn
, 
M_TEMP
, 
M_WAITOK
);

815 
îr‹
 = 
	`so›tc›yö
(
s›t
, 
v
, 
Àn
,Üen);

816 i‡(
îr‹
)

818 
îr‹
 = 
	`dn_com∑t_c⁄figuª
(
v
);

819 
	`‰ì
(
v
, 
M_TEMP
);

822 
IP_DUMMYNET_GET
: {

823 *
buf
;

824 
ªt
;

825 
‹igöÆ_size
 = 
s›t
->
s›t_vÆsize
;

826 
size
;

828 
ªt
 = 
	`dummy√t_gë
(
s›t
, &
buf
);

829 i‡(
ªt
)

831 
size
 = 
s›t
->
s›t_vÆsize
;

832 
s›t
->
s›t_vÆsize
 = 
‹igöÆ_size
;

833 
	`D
("size=%d, buf=%p", 
size
, 
buf
);

834 
ªt
 = 
	`so›tc›yout
(
s›t
, 
buf
, 
size
);

835 i‡(
ªt
)

836 
	`¥ötf
(" %†ERROR so›tc›yout\n", 
__FUNCTION__
);

837 i‡(
buf
)

838 
	`‰ì
(
buf
, 
M_DUMMYNET
);

842  
îr‹
;

843 
	}
}

	@kipfw-mod/ip_dn_io.c

30 
	~<sys/cdefs.h
>

31 
__FBSDID
("$FreeBSD: user/luigi/ipfw3-head/sys/netinet/ipfw/ip_dn_io.c 203321 2010-01-31 21:39:25ZÜuigi $");

33 
	~"›t_öë6.h
"

35 
	~<sys/∑øm.h
>

36 
	~<sys/sy°m.h
>

37 
	~<sys/mÆloc.h
>

38 
	~<sys/mbuf.h
>

39 
	~<sys/kî√l.h
>

40 
	~<sys/lock.h
>

41 
	~<sys/moduÀ.h
>

42 
	~<sys/¥iv.h
>

43 
	~<sys/¥oc.h
>

44 
	~<sys/rwlock.h
>

45 
	~<sys/sockë.h
>

46 
	~<sys/time.h
>

47 
	~<sys/sys˘l.h
>

49 
	~<√t/if.h
>

50 
	~<√t/√ti§.h
>

51 
	~<√t/v√t.h
>

53 
	~<√töë/ö.h
>

54 
	~<√töë/ù.h
>

55 
	~<√töë/ù_v¨.h
>

56 
	~<√töë/ù_fw.h
>

57 
	~<√töë/ùfw/ù_fw_¥iv©e.h
>

58 
	~<√töë/ùfw/dn_hóp.h
>

59 
	~<√töë/ù_dummy√t.h
>

60 
	~<√töë/ùfw/ù_dn_¥iv©e.h
>

61 
	~<√töë/ùfw/dn_sched.h
>

63 
	~<√töë/if_ëhî.h
>

65 
	~<√töë/ù6.h
>

66 
	~<√töë6/ù6_v¨.h
>

74 
dn_∑rms
 
	gdn_cfg
;

77 
	gtick_œ°
;

78 
	gtick_dñè
;

79 
	gtick_dñè_sum
;

80 
	gtick_adju°mít
;

81 
	gtick_lo°
;

83 
	gtick_diff
;

85 
	gio_pkt
;

86 
	gio_pkt_Á°
;

87 
	gio_pkt_dr›
;

95 
MALLOC_DEFINE
(
M_DUMMYNET
, "dummynet", "dummynet heap");

97 (*
bridge_dn_p
)(
mbuf
 *, 
i‚ë
 *);

99 #ifde‡
SYSCTL_NODE


101 
	$SYSBEGIN
(
f4
)

103 
	`SYSCTL_DECL
(
_√t_öë
);

104 
	`SYSCTL_DECL
(
_√t_öë_ù
);

105 
	`SYSCTL_NODE
(
_√t_öë_ù
, 
OID_AUTO
, 
dummy√t
, 
CTLFLAG_RW
, 0, "Dummynet");

109 
	#DC
(
x
Ë(&(
dn_cfg
.x))

	)

111 
	`SYSCTL_INT
(
_√t_öë_ù_dummy√t
, 
OID_AUTO
, 
hash_size
,

112 
CTLFLAG_RW
, 
	`DC
(
hash_size
), 0, "Default hashÅable size");

113 
	`SYSCTL_LONG
(
_√t_öë_ù_dummy√t
, 
OID_AUTO
, 
pùe_¶Ÿ_limô
,

114 
CTLFLAG_RW
, 
	`DC
(
¶Ÿ_limô
), 0,

116 
	`SYSCTL_LONG
(
_√t_öë_ù_dummy√t
, 
OID_AUTO
, 
pùe_byã_limô
,

117 
CTLFLAG_RW
, 
	`DC
(
byã_limô
), 0,

119 
	`SYSCTL_INT
(
_√t_öë_ù_dummy√t
, 
OID_AUTO
, 
io_Á°
,

120 
CTLFLAG_RW
, 
	`DC
(
io_Á°
), 0, "Enable fast dummynet io.");

121 
	`SYSCTL_INT
(
_√t_öë_ù_dummy√t
, 
OID_AUTO
, 
debug
,

122 
CTLFLAG_RW
, 
	`DC
(
debug
), 0, "Dummynet debugÜevel");

125 
	`SYSCTL_INT
(
_√t_öë_ù_dummy√t
, 
OID_AUTO
, 
ªd_lookup_dïth
,

126 
CTLFLAG_RD
, 
	`DC
(
ªd_lookup_dïth
), 0, "Depth of REDÜookupÅable");

127 
	`SYSCTL_INT
(
_√t_öë_ù_dummy√t
, 
OID_AUTO
, 
ªd_avg_pkt_size
,

128 
CTLFLAG_RD
, 
	`DC
(
ªd_avg_pkt_size
), 0, "RED MediumÖacket size");

129 
	`SYSCTL_INT
(
_√t_öë_ù_dummy√t
, 
OID_AUTO
, 
ªd_max_pkt_size
,

130 
CTLFLAG_RD
, 
	`DC
(
ªd_max_pkt_size
), 0, "RED MaxÖacket size");

133 
	`SYSCTL_LONG
(
_√t_öë_ù_dummy√t
, 
OID_AUTO
, 
tick_dñè
,

134 
CTLFLAG_RD
, &
tick_dñè
, 0, "Last vs standardÅick difference (usec).");

135 
	`SYSCTL_LONG
(
_√t_öë_ù_dummy√t
, 
OID_AUTO
, 
tick_dñè_sum
,

136 
CTLFLAG_RD
, &
tick_dñè_sum
, 0, "AccumulatedÅick difference (usec).");

137 
	`SYSCTL_LONG
(
_√t_öë_ù_dummy√t
, 
OID_AUTO
, 
tick_adju°mít
,

138 
CTLFLAG_RD
, &
tick_adju°mít
, 0, "Tickádjustments done.");

139 
	`SYSCTL_LONG
(
_√t_öë_ù_dummy√t
, 
OID_AUTO
, 
tick_diff
,

140 
CTLFLAG_RD
, &
tick_diff
, 0,

142 
	`SYSCTL_LONG
(
_√t_öë_ù_dummy√t
, 
OID_AUTO
, 
tick_lo°
,

143 
CTLFLAG_RD
, &
tick_lo°
, 0,

147 
	`SYSCTL_UINT
(
_√t_öë_ù_dummy√t
, 
OID_AUTO
, 
expúe
,

148 
CTLFLAG_RW
, 
	`DC
(
expúe
), 0, "ExpireÉmpty queues/pipes");

149 
	`SYSCTL_UINT
(
_√t_öë_ù_dummy√t
, 
OID_AUTO
, 
expúe_cy˛e
,

150 
CTLFLAG_RD
, 
	`DC
(
expúe_cy˛e
), 0, "Expire cycle for queues/pipes");

151 
	`SYSCTL_UINT
(
_√t_öë_ù_dummy√t
, 
OID_AUTO
, 
expúe_obje˘
,

152 
CTLFLAG_RW
, 
	`DC
(
expúe_obje˘
), 0, "Min # of objects before start drainÑoutine");

153 
	`SYSCTL_UINT
(
_√t_öë_ù_dummy√t
, 
OID_AUTO
, 
obje˘_idÀ_tick
,

154 
CTLFLAG_RD
, 
	`DC
(
obje˘_idÀ_tick
), 0, "Time (inÅicks)Åo cosidererán objectás idle");

155 
	`SYSCTL_INT
(
_√t_öë_ù_dummy√t
, 
OID_AUTO
, 
døö_øtio
,

156 
CTLFLAG_RD
, 
	`DC
(
døö_øtio
), 0, "% of dummynet_task()Åo dedicateÅo drainÑoutine");

159 
	`SYSCTL_INT
(
_√t_öë_ù_dummy√t
, 
OID_AUTO
, 
schk_cou¡
,

160 
CTLFLAG_RD
, 
	`DC
(
schk_cou¡
), 0, "Number of schedulers");

161 
	`SYSCTL_INT
(
_√t_öë_ù_dummy√t
, 
OID_AUTO
, 
si_cou¡
,

162 
CTLFLAG_RD
, 
	`DC
(
si_cou¡
), 0, "Number of scheduler instances");

163 
	`SYSCTL_INT
(
_√t_öë_ù_dummy√t
, 
OID_AUTO
, 
fsk_cou¡
,

164 
CTLFLAG_RD
, 
	`DC
(
fsk_cou¡
), 0, "Number of flowsets");

165 
	`SYSCTL_INT
(
_√t_öë_ù_dummy√t
, 
OID_AUTO
, 
queue_cou¡
,

166 
CTLFLAG_RD
, 
	`DC
(
queue_cou¡
), 0, "Number of queues");

167 
	`SYSCTL_ULONG
(
_√t_öë_ù_dummy√t
, 
OID_AUTO
, 
io_pkt
,

168 
CTLFLAG_RD
, &
io_pkt
, 0,

170 
	`SYSCTL_ULONG
(
_√t_öë_ù_dummy√t
, 
OID_AUTO
, 
io_pkt_Á°
,

171 
CTLFLAG_RD
, &
io_pkt_Á°
, 0,

173 
	`SYSCTL_ULONG
(
_√t_öë_ù_dummy√t
, 
OID_AUTO
, 
io_pkt_dr›
,

174 
CTLFLAG_RD
, &
io_pkt_dr›
, 0,

176 #unde‡
DC


177 
SYSEND


181 
	`dummy√t_£nd
(
mbuf
 *);

189 
	sdn_pkt_èg
 {

190 
ùfw_ruÀ_ªf
 
ruÀ
;

193 
dn_dú
;

195 
uöt64_t
 
ouçut_time
;

196 
i‚ë
 *
iÂ
;

197 
_ù6dn_¨gs
 
ù6›t
;

204 
dn_pkt_èg
 *

205 
	$dn_èg_gë
(
mbuf
 *
m
)

207 
m_èg
 *
mèg
 = 
	`m_èg_fú°
(
m
);

208 
	`KASSERT
(
mèg
 !
NULL
 &&

209 
mèg
->
m_èg_cookõ
 =
MTAG_ABI_COMPAT
 &&

210 
mèg
->
m_èg_id
 =
PACKET_TAG_DUMMYNET
,

212  (
dn_pkt_èg
 *)(
mèg
+1);

213 
	}
}

215 
ölöe
 

216 
	$mq_≠≥nd
(
mq
 *
q
, 
mbuf
 *
m
)

218 i‡(
q
->
hód
 =
NULL
)

219 
q
->
hód
 = 
m
;

221 
q
->
èû
->
m_√xçkt
 = 
m
;

222 
q
->
èû
 = 
m
;

223 
m
->
m_√xçkt
 = 
NULL
;

224 
	}
}

230 
	$dn_‰ì_pkts
(
mbuf
 *
m√xt
)

232 
mbuf
 *
m
;

234 (
m
 = 
m√xt
Ë!
NULL
) {

235 
m√xt
 = 
m
->
m_√xçkt
;

236 
	`FREE_PKT
(
m
);

238 
	}
}

241 
	$ªd_dr›s
 (
dn_queue
 *
q
, 
Àn
)

260 
dn_fsk
 *
fs
 = 
q
->fs;

261 
öt64_t
 
p_b
 = 0;

264 
uöt32_t
 
q_size
 = (
fs
->fs.
Êags
 & 
DN_QSIZE_BYTES
) ?

265 
q
->
ni
.
Àn_byãs
 : q->ni.
Àngth
;

268 i‡(
q_size
 != 0) {

270 
diff
 = 
	`SCALE
(
q_size
Ë- 
q
->
avg
;

271 
öt64_t
 
v
 = 
	`SCALE_MUL
((öt64_t)
diff
, (öt64_t)
fs
->
w_q
);

273 
q
->
avg
 +()
v
;

282 i‡(
q
->
avg
) {

283 
u_öt
 
t
 = 
	`div64
((
dn_cfg
.
cuº_time
 - 
q
->
q_time
), 
fs
->
lookup_°ï
);

285 
q
->
avg
 = (
t
 < 
fs
->
lookup_dïth
) ?

286 
	`SCALE_MUL
(
q
->
avg
, 
fs
->
w_q_lookup
[
t
]) : 0;

291 i‡(
q
->
avg
 < 
fs
->
mö_th
) {

292 
q
->
cou¡
 = -1;

295 i‡(
q
->
avg
 >
fs
->
max_th
) {

296 i‡(
fs
->fs.
Êags
 & 
DN_IS_GENTLE_RED
) {

304 
p_b
 = 
	`SCALE_MUL
((
öt64_t
)
fs
->
c_3
, (öt64_t)
q
->
avg
) -

305 
fs
->
c_4
;

307 
q
->
cou¡
 = -1;

310 } i‡(
q
->
avg
 > 
fs
->
mö_th
) {

317 
p_b
 = 
	`SCALE_MUL
((
öt64_t
)
fs
->
c_1
, (öt64_t)
q
->
avg
Ë- fs->
c_2
;

320 i‡(
fs
->fs.
Êags
 & 
DN_QSIZE_BYTES
)

321 
p_b
 = 
	`div64
(’_b * 
Àn
Ë, 
fs
->
max_pkt_size
);

322 i‡(++
q
->
cou¡
 == 0)

323 
q
->
øndom
 = 
	`øndom
() & 0xffff;

329 i‡(
	`SCALE_MUL
(
p_b
, 
	`SCALE
((
öt64_t
)
q
->
cou¡
)Ë> q->
øndom
) {

330 
q
->
cou¡
 = 0;

332 
q
->
øndom
 = 
	`øndom
() & 0xffff;

340 
	}
}

349 
	$dn_íqueue
(
dn_queue
 *
q
, 
mbuf
* 
m
, 
dr›
)

351 
dn_fs
 *
f
;

352 
dn_Êow
 *
ni
;

353 
uöt64_t
 
Àn
;

355 i‡(
q
->
fs
 =
NULL
 || q->
_si
 == NULL) {

356 
	`¥ötf
("%s fs %p si %p, dropping\n",

357 
__FUNCTION__
, 
q
->
fs
, q->
_si
);

358 
	`FREE_PKT
(
m
);

361 
f
 = &(
q
->
fs
->fs);

362 
ni
 = &
q
->
_si
->ni;

363 
Àn
 = 
m
->
m_pkthdr
.len;

365 
q
->
ni
.
tŸ_byãs
 +
Àn
;

366 
q
->
ni
.
tŸ_pkts
++;

367 
ni
->
tŸ_byãs
 +
Àn
;

368 
ni
->
tŸ_pkts
++;

369 i‡(
dr›
)

370 
dr›
;

371 i‡(
f
->
∂r
 && 
	`øndom
() < f->plr)

372 
dr›
;

373 i‡(
f
->
Êags
 & 
DN_IS_RED
 && 
	`ªd_dr›s
(
q
, 
m
->
m_pkthdr
.
Àn
))

374 
dr›
;

375 i‡(
f
->
Êags
 & 
DN_QSIZE_BYTES
) {

376 i‡(
q
->
ni
.
Àn_byãs
 > 
f
->
qsize
)

377 
dr›
;

378 } i‡(
q
->
ni
.
Àngth
 >
f
->
qsize
) {

379 
dr›
;

381 
	`mq_≠≥nd
(&
q
->
mq
, 
m
);

382 i‡(
q
->
ni
.
Àngth
 == 0) {

383 
dn_cfg
.
idÀ_queue
--;

384 i‡(
ni
->
Àngth
 == 0)

385 
dn_cfg
.
idÀ_si
--;

387 
q
->
ni
.
Àngth
++;

388 
q
->
ni
.
Àn_byãs
 +
Àn
;

389 
ni
->
Àngth
++;

390 
ni
->
Àn_byãs
 +
Àn
;

393 
dr›
:

394 
io_pkt_dr›
++;

395 
q
->
ni
.
dr›s
++;

396 
ni
->
dr›s
++;

397 
	`FREE_PKT
(
m
);

399 
	}
}

407 
	$å™smô_evít
(
mq
 *
q
, 
dñay_löe
 *
dlöe
, 
uöt64_t
 
now
)

409 
mbuf
 *
m
;

410 
dn_pkt_èg
 *
pkt
 = 
NULL
;

412 
dlöe
->
oid
.
subty≥
 = 0;

413 (
m
 = 
dlöe
->
mq
.
hód
Ë!
NULL
) {

414 
pkt
 = 
	`dn_èg_gë
(
m
);

415 i‡(!
	`DN_KEY_LEQ
(
pkt
->
ouçut_time
, 
now
))

417 
dlöe
->
mq
.
hód
 = 
m
->
m_√xçkt
;

418 
	`mq_≠≥nd
(
q
, 
m
);

420 i‡(
m
 !
NULL
) {

421 
dlöe
->
oid
.
subty≥
 = 1;

422 
	`hóp_ö£π
(&
dn_cfg
.
evhóp
, 
pkt
->
ouçut_time
, 
dlöe
);

424 
	}
}

431 
uöt64_t


432 
	$exåa_bôs
(
mbuf
 *
m
, 
dn_schk
 *
s
)

434 
ödex
;

435 
uöt64_t
 
bôs
;

436 
dn_¥ofûe
 *
pf
 = 
s
->
¥ofûe
;

438 i‡(!
pf
 ||Öf->
ßm∂es_no
 == 0)

440 
ödex
 = 
	`øndom
(Ë% 
pf
->
ßm∂es_no
;

441 
bôs
 = 
	`div64
((
uöt64_t
)
pf
->
ßm∂es
[
ödex
] * 
s
->
lök
.
b™dwidth
, 1000);

442 i‡(
ödex
 >
pf
->
loss_Àvñ
) {

443 
dn_pkt_èg
 *
dt
 = 
	`dn_èg_gë
(
m
);

444 i‡(
dt
)

445 
dt
->
dn_dú
 = 
DIR_DROP
;

447  
bôs
;

448 
	}
}

454 
mbuf
 *

455 
	$£rve_sched
(
mq
 *
q
, 
dn_sch_ö°
 *
si
, 
uöt64_t
 
now
)

457 
mq
 
def_q
;

458 
dn_schk
 *
s
 = 
si
->
sched
;

459 
mbuf
 *
m
 = 
NULL
;

460 
dñay_löe_idÀ
 = (
si
->
dlöe
.
mq
.
hód
 =
NULL
);

461 
d⁄e
, 
bw
;

463 i‡(
q
 =
NULL
) {

464 
q
 = &
def_q
;

465 
q
->
hód
 = 
NULL
;

468 
bw
 = 
s
->
lök
.
b™dwidth
;

469 
si
->
kÊags
 &~
DN_ACTIVE
;

471 i‡(
bw
 > 0)

472 
si
->
¸edô
 +(
now
 - si->
sched_time
Ë* 
bw
;

474 
si
->
¸edô
 = 0;

475 
si
->
sched_time
 = 
now
;

476 
d⁄e
 = 0;

477 
si
->
¸edô
 >0 && (
m
 = 
s
->
Â
->
	`dequeue
(si)Ë!
NULL
) {

478 
uöt64_t
 
Àn_sˇÀd
;

486 i‡(
m
->
m_pkthdr
.
Àn
 < 0) {

487 
si
->
kÊags
 |
DN_ACTIVE
;

488 
	`hóp_ö£π
(&
dn_cfg
.
evhóp
, 
now
 - 
m
->
m_pkthdr
.
Àn
, 
si
);

489 i‡(
dñay_löe_idÀ
 && 
d⁄e
)

490 
	`å™smô_evít
(
q
, &
si
->
dlöe
, 
now
);

491  
NULL
;

495 
d⁄e
++;

496 
Àn_sˇÀd
 = (
bw
 =0Ë? 0 : 
hz
 *

497 (
m
->
m_pkthdr
.
Àn
 * 8 + 
	`exåa_bôs
(m, 
s
));

498 
si
->
¸edô
 -
Àn_sˇÀd
;

500 
	`dn_èg_gë
(
m
)->
ouçut_time
 = 
dn_cfg
.
cuº_time
 + 
s
->
lök
.
dñay
;

501 
	`mq_≠≥nd
(&
si
->
dlöe
.
mq
, 
m
);

509 i‡(
si
->
¸edô
 >= 0) {

510 
si
->
idÀ_time
 = 
now
;

512 
uöt64_t
 
t
;

513 
	`KASSERT
 (
bw
 > 0, ("bw=0ánd credit<0 ?"));

514 
t
 = 
	`div64
(
bw
 - 1 - 
si
->
¸edô
, bw);

515 i‡(
m
)

516 
	`dn_èg_gë
(
m
)->
ouçut_time
 +
t
;

517 
si
->
kÊags
 |
DN_ACTIVE
;

518 
	`hóp_ö£π
(&
dn_cfg
.
evhóp
, 
now
 + 
t
, 
si
);

520 i‡(
dñay_löe_idÀ
 && 
d⁄e
)

521 
	`å™smô_evít
(
q
, &
si
->
dlöe
, 
now
);

522  
q
->
hód
;

523 
	}
}

541 #ifde‡
HAVE_TSC


542 
uöt64_t


543 
	$ªadTSC
 ()

545 
uöt64_t
 
a
=0;

547 #ifde‡
__löux__


555 
	`rdts˛l
(
a
);

556 #ñi‡
	`deföed
(
_WIN32
)

560 
	`KeQuîyPîf‹m™˚Cou¡î
((
PLARGE_INTEGER
)&
a
);

561 #ñi‡
	`deföed
(
__FªeBSD__
)

565  
	`rdtsc
();

567  
a
;

568 
	}
}

576 
	$do_upd©e_cy˛e
()

578 #ifde‡
HAVE_TSC


579 
uöt64_t
 
tmp
 = 
	`ªadTSC
();

580 #i‡
	`deföed
 (
LINUX_24
Ë&& deföed(
CONFIG_SMP
)

586 i‡(
tmp
 <
dn_cfg
.
cy˛e_èsk_√w
)

587 
dn_cfg
.
cy˛e_èsk_√w
 = 
tmp
 - dn_cfg.
cy˛e_èsk
;

589 
dn_cfg
.
cy˛e_èsk_ﬁd
 = dn_cfg.
cy˛e_èsk_√w
;

590 
dn_cfg
.
cy˛e_èsk_√w
 = 
tmp
;

591 
dn_cfg
.
cy˛e_èsk
 = dn_cfg.
cy˛e_èsk_√w
 - dn_cfg.
cy˛e_èsk_ﬁd
;

598 
	#DN_N
 4

	)

599 
dn_cfg
.
cy˛e_èsk_avg
 = (dn_cfg.cy˛e_èsk_avg << 
DN_N
) +

600 
dn_cfg
.
cy˛e_èsk
 - dn_cfg.
cy˛e_èsk_avg
;

601 
dn_cfg
.
cy˛e_èsk_avg
 = dn_cfg.cy˛e_èsk_avg >> 
DN_N
;

602 #unde‡
DN_N


605 
	}
}

608 
	$do_døö
()

610 #ifde‡
HAVE_TSC


611 
uöt64_t
 
dt_max
;

613 i‡(!
dn_cfg
.
expúe
 || ++dn_cfg.
expúe_cy˛e
 < dn_cfg.expire)

616 
dn_cfg
.
expúe_cy˛e
 = 0;

618 
dn_cfg
.
idÀ_queue_waô
 = 0;

619 
dn_cfg
.
idÀ_si_waô
 = 0;

621 #ifde‡
HAVE_TSC


622 
dt_max
 = 
dn_cfg
.
cy˛e_èsk_avg
 * dn_cfg.
døö_øtio
;

625 
d⁄e
 = 0;

627 i‡(
dn_cfg
.
idÀ_queue
 > dn_cfg.
expúe_obje˘
 &&

628 
dn_cfg
.
idÀ_queue_waô
 < dn_cfg.
idÀ_queue
) {

629 
	`dn_døö_queue
();

630 
d⁄e
 = 1;

632 i‡(
dn_cfg
.
idÀ_si
 > dn_cfg.
expúe_obje˘
 &&

633 
dn_cfg
.
idÀ_si_waô
 < dn_cfg.
idÀ_si
) {

634 
	`dn_døö_scheduÀr
();

635 
d⁄e
 = 1;

638 #i‚de‡
HAVE_TSC


643 i‡–(
d⁄e
 == 0) ||

644 ((
	`ªadTSC
(Ë- 
dn_cfg
.
cy˛e_èsk_√w
Ë* 100 > 
dt_max
) )

648 
	}
}

656 
	$dummy√t_èsk
(*
c⁄ãxt
, 
≥ndög
)

658 
timevÆ
 
t
;

659 
mq
 
q
 = { 
NULL
, NULL };

661 
	`CURVNET_SET
((
v√t
 *)
c⁄ãxt
);

663 
	`do_upd©e_cy˛e
();

665 
	`DN_BH_WLOCK
();

668 
tick_lo°
 +
≥ndög
 - 1;

670 
	`gëmi¸ou±ime
(&
t
);

672 
tick_œ°
 = (
t
.
tv_£c
 - 
dn_cfg
.
¥ev_t
.tv_sec) * 1000000 +

673 (
t
.
tv_u£c
 - 
dn_cfg
.
¥ev_t
.tv_usec);

675 
tick_dñè
 = (
tick_œ°
 * 
hz
 - 1000000) / hz;

677 
tick_dñè_sum
 +
tick_dñè
;

679 
dn_cfg
.
¥ev_t
 = 
t
;

688 
dn_cfg
.
cuº_time
++;

689 i‡(
tick_dñè_sum
 - 
tick
 >= 0) {

690 
diff
 = 
tick_dñè_sum
 / 
tick
;

692 
dn_cfg
.
cuº_time
 +
diff
;

693 
tick_diff
 +
diff
;

694 
tick_dñè_sum
 %
tick
;

695 
tick_adju°mít
++;

696 } i‡(
tick_dñè_sum
 + 
tick
 <= 0) {

697 
dn_cfg
.
cuº_time
--;

698 
tick_diff
--;

699 
tick_dñè_sum
 +
tick
;

700 
tick_adju°mít
++;

705 
dn_id
 *
p
;

707 i‡(
dn_cfg
.
evhóp
.
ñemíts
 == 0 ||

708 
	`DN_KEY_LT
(
dn_cfg
.
cuº_time
, 
	`HEAP_TOP
(&dn_cfg.
evhóp
)->
key
))

710 
p
 = 
	`HEAP_TOP
(&
dn_cfg
.
evhóp
)->
obje˘
;

711 
	`hóp_exåa˘
(&
dn_cfg
.
evhóp
, 
NULL
);

713 i‡(
p
->
ty≥
 =
DN_SCH_I
) {

714 
	`£rve_sched
(&
q
, (
dn_sch_ö°
 *)
p
, 
dn_cfg
.
cuº_time
);

716 
	`å™smô_evít
(&
q
, (
dñay_löe
 *)
p
, 
dn_cfg
.
cuº_time
);

719 
	`do_døö
();

721 
	`DN_BH_WUNLOCK
();

722 
	`dn_ªscheduÀ
();

723 i‡(
q
.
hód
 !
NULL
)

724 
	`dummy√t_£nd
(
q
.
hód
);

725 
	`CURVNET_RESTORE
();

726 
	}
}

733 
	$dummy√t_£nd
(
mbuf
 *
m
)

735 
mbuf
 *
n
;

737 ; 
m
 !
NULL
; m = 
n
) {

738 
i‚ë
 *
iÂ
 = 
NULL
;

739 
m_èg
 *
èg
;

740 
d°
;

742 
n
 = 
m
->
m_√xçkt
;

743 
m
->
m_√xçkt
 = 
NULL
;

744 
èg
 = 
	`m_èg_fú°
(
m
);

745 i‡(
èg
 =
NULL
) {

746 
d°
 = 
DIR_DROP
;

748 
dn_pkt_èg
 *
pkt
 = 
	`dn_èg_gë
(
m
);

752 
d°
 = 
pkt
->
dn_dú
;

753 
iÂ
 = 
pkt
->ifp;

754 
èg
->
m_èg_cookõ
 = 
MTAG_IPFW_RULE
;

755 
èg
->
m_èg_id
 = 0;

758 
d°
) {

759 
DIR_OUT
:

760 
	`SET_HOST_IPLEN
(
	`mtod
(
m
, 
ù
 *));

761 
	`ù_ouçut
(
m
, 
NULL
, NULL, 
IP_FORWARDING
, NULL, NULL);

764 
DIR_IN
 :

767 
	`√ti§_di•©ch
(
NETISR_IP
, 
m
);

770 #ifde‡
INET6


771 
DIR_IN
 | 
PROTO_IPV6
:

772 
	`√ti§_di•©ch
(
NETISR_IPV6
, 
m
);

775 
DIR_OUT
 | 
PROTO_IPV6
:

776 
	`SET_HOST_IPLEN
(
	`mtod
(
m
, 
ù
 *));

777 
	`ù6_ouçut
(
m
, 
NULL
, NULL, 
IPV6_FORWARDING
, NULL, NULL, NULL);

781 
DIR_FWD
 | 
PROTO_IFB
:

782 i‡(
bridge_dn_p
 !
NULL
)

783 ((*
bridge_dn_p
)(
m
, 
iÂ
));

785 
	`¥ötf
("dummynet: if_bridgeÇotÜoaded\n");

789 
DIR_IN
 | 
PROTO_LAYER2
:

795 i‡(
m
->
m_Àn
 < 
ETHER_HDR_LEN
 &&

796 (
m
 = 
	`m_puŒup
(m, 
ETHER_HDR_LEN
)Ë=
NULL
) {

797 
	`¥ötf
("dummynet/ether:Öullup failed, "

801 
	`ëhî_demux
(
m
->
m_pkthdr
.
rcvif
, m);

804 
DIR_OUT
 | 
PROTO_LAYER2
:

805 
	`ëhî_ouçut_‰ame
(
iÂ
, 
m
);

808 
DIR_DROP
:

810 
	`FREE_PKT
(
m
);

814 
	`¥ötf
("dummy√t: bad swôch %d!\n", 
d°
);

815 
	`FREE_PKT
(
m
);

819 
	}
}

821 
ölöe
 

822 
	$èg_mbuf
(
mbuf
 *
m
, 
dú
, 
ù_fw_¨gs
 *
fwa
)

824 
dn_pkt_èg
 *
dt
;

825 
m_èg
 *
mèg
;

827 
mèg
 = 
	`m_èg_gë
(
PACKET_TAG_DUMMYNET
,

828 (*
dt
), 
M_NOWAIT
 | 
M_ZERO
);

829 i‡(
mèg
 =
NULL
)

831 
	`m_èg_¥ïíd
(
m
, 
mèg
);

832 
dt
 = (
dn_pkt_èg
 *)(
mèg
 + 1);

833 
dt
->
ruÀ
 = 
fwa
->rule;

834 
dt
->
ruÀ
.
öfo
 &
IPFW_ONEPASS
;

835 
dt
->
dn_dú
 = 
dú
;

836 
dt
->
iÂ
 = 
fwa
->
oif
;

838 
dt
->
ouçut_time
 = 
dn_cfg
.
cuº_time
;

840 
	}
}

855 
	$dummy√t_io
(
mbuf
 **
m0
, 
dú
, 
ù_fw_¨gs
 *
fwa
)

857 
mbuf
 *
m
 = *
m0
;

858 
dn_fsk
 *
fs
 = 
NULL
;

859 
dn_sch_ö°
 *
si
;

860 
dn_queue
 *
q
 = 
NULL
;

862 
fs_id
 = (
fwa
->
ruÀ
.
öfo
 & 
IPFW_INFO_MASK
) +

863 ((
fwa
->
ruÀ
.
öfo
 & 
IPFW_IS_PIPE
Ë? 2*
DN_MAX_ID
 : 0);

864 
	`DN_BH_WLOCK
();

865 
io_pkt
++;

867 i‡(
	`èg_mbuf
(
m
, 
dú
, 
fwa
))

868 
dr›ô
;

869 i‡(
dn_cfg
.
busy
) {

873 
	`mq_≠≥nd
(&
dn_cfg
.
≥ndög
, 
m
);

874 
m
 = *
m0
 = 
NULL
;

875 
d⁄e
;

878 
fs
 = 
	`dn_ht_föd
(
dn_cfg
.
fshash
, 
fs_id
, 0, 
NULL
);

879 i‡(
fs
 =
NULL
)

880 
dr›ô
;

881 i‡(
fs
->
sched
 =
NULL
)

882 
dr›ô
;

887 i‡(
fs
->
sched
->
Â
->
Êags
 & 
DN_MULTIQUEUE
) {

888 
q
 = 
	`ùdn_q_föd
(
fs
, &(
fwa
->
f_id
));

889 i‡(
q
 =
NULL
)

890 
dr›ô
;

895 
si
 = 
q
->
_si
;

897 
si
 = 
	`ùdn_si_föd
(
fs
->
sched
, &(
fwa
->
f_id
));

899 i‡(
si
 =
NULL
)

900 
dr›ô
;

901 i‡(
fs
->
sched
->
Â
->
	`íqueue
(
si
, 
q
, 
m
)) {

903 
m
 = *
m0
 = 
NULL
;

904 
dr›ô
;

907 i‡(
si
->
kÊags
 & 
DN_ACTIVE
) {

908 
m
 = *
m0
 = 
NULL
;

909 
d⁄e
;

913 i‡(
si
->
idÀ_time
 < 
dn_cfg
.
cuº_time
) {

915 
dn_lök
 *
p
 = &
fs
->
sched
->
lök
;

917 
si
->
sched_time
 = 
dn_cfg
.
cuº_time
;

918 
si
->
¸edô
 = 
dn_cfg
.
io_Á°
 ? 
p
->
b™dwidth
 : 0;

919 i‡(
p
->
bur°
) {

920 
uöt64_t
 
bur°
 = (
dn_cfg
.
cuº_time
 - 
si
->
idÀ_time
Ë* 
p
->
b™dwidth
;

921 i‡(
bur°
 > 
p
->burst)

922 
bur°
 = 
p
->burst;

923 
si
->
¸edô
 +
bur°
;

927 
m
 = 
	`£rve_sched
(
NULL
, 
si
, 
dn_cfg
.
cuº_time
);

934 i‡–
m
 =*
m0
 && (
dú
 & 
PROTO_LAYER2
) == 0 ) {

936 
m_èg
 *
èg
 = 
	`m_èg_fú°
(
m
);

938 
èg
->
m_èg_cookõ
 = 
MTAG_IPFW_RULE
;

939 
èg
->
m_èg_id
 = 0;

940 
io_pkt_Á°
++;

941 i‡(
m
->
m_√xçkt
 !
NULL
) {

942 
	`¥ötf
("dummynet: fast io:Ökt chain detected!\n");

943 
m
->
m_√xçkt
 = 
NULL
;

945 
m
 = 
NULL
;

947 *
m0
 = 
NULL
;

949 
d⁄e
:

950 
	`DN_BH_WUNLOCK
();

951 i‡(
m
)

952 
	`dummy√t_£nd
(
m
);

955 
dr›ô
:

956 
io_pkt_dr›
++;

957 
	`DN_BH_WUNLOCK
();

958 i‡(
m
)

959 
	`FREE_PKT
(
m
);

960 *
m0
 = 
NULL
;

961  (
fs
 && (fs->fs.
Êags
 & 
DN_NOERROR
)Ë? 0 : 
ENOBUFS
;

962 
	}
}

	@kipfw-mod/ip_dummynet.c

28 
	~<sys/cdefs.h
>

29 
__FBSDID
("$FreeBSD: user/luigi/ipfw3-head/sys/netinet/ipfw/ip_dummynet.c 203340 2010-02-01 12:06:37ZÜuigi $");

35 
	~"›t_öë6.h
"

37 
	~<sys/∑øm.h
>

38 
	~<sys/sy°m.h
>

39 
	~<sys/mÆloc.h
>

40 
	~<sys/mbuf.h
>

41 
	~<sys/kî√l.h
>

42 
	~<sys/lock.h
>

43 
	~<sys/moduÀ.h
>

44 
	~<sys/¥iv.h
>

45 
	~<sys/¥oc.h
>

46 
	~<sys/rwlock.h
>

47 
	~<sys/sockë.h
>

48 
	~<sys/sockëv¨.h
>

49 
	~<sys/time.h
>

50 
	~<sys/èskqueue.h
>

51 
	~<√t/if.h
>

52 
	~<√töë/ö.h
>

53 
	~<√töë/ù_v¨.h
>

54 
	~<√töë/ù_fw.h
>

55 
	~<√töë/ùfw/ù_fw_¥iv©e.h
>

56 
	~<√töë/ùfw/dn_hóp.h
>

57 
	~<√töë/ù_dummy√t.h
>

58 
	~<√töë/ùfw/ù_dn_¥iv©e.h
>

59 
	~<√töë/ùfw/dn_sched.h
>

62 
	#DN_C_LINK
 0x01

	)

63 
	#DN_C_SCH
 0x02

	)

64 
	#DN_C_FLOW
 0x04

	)

65 
	#DN_C_FS
 0x08

	)

66 
	#DN_C_QUEUE
 0x10

	)

69 
	sschk_√w_¨g
 {

70 
dn_Æg
 *
	mÂ
;

71 
dn_sch
 *
	msch
;

75 
ˇŒout
 
	gdn_timeout
;

76 
èsk
 
	gdn_èsk
;

77 
èskqueue
 *
	gdn_tq
 = 
NULL
;

81 
	$dummy√t
(* 
¨g
)

84 ()
¨g
;

85 
	`èskqueue_íqueue
(
dn_tq
, &
dn_èsk
);

86 
	}
}

89 
	$dn_ªscheduÀ
()

91 
	`ˇŒout_ª£t_⁄
(&
dn_timeout
, 1, 
dummy√t
, 
NULL
, 0);

92 
	}
}

96 
dn_Æg
 *

97 
	$föd_sched_ty≥
(
ty≥
, *
«me
)

99 
dn_Æg
 *
d
;

101 
	`SLIST_FOREACH
(
d
, &
dn_cfg
.
schedli°
, 
√xt
) {

102 i‡(
d
->
ty≥
 =ty≥ || (
«me
 && !
	`°rcmp
(d->name,Çame)))

103  
d
;

105  
NULL
;

106 
	}
}

109 
	$ùdn_bound_v¨
(*
v
, 
dÊt
, 
lo
, 
hi
, c⁄° *
msg
)

111 
ﬁdv
 = *
v
;

112 c⁄° *
›
 = 
NULL
;

113 i‡(
ﬁdv
 < 
lo
) {

114 *
v
 = 
dÊt
;

115 
›
 = "Bump";

116 } i‡(
ﬁdv
 > 
hi
) {

117 *
v
 = 
hi
;

118 
›
 = "Clamp";

120  *
v
;

121 i‡(
›
 && 
msg
)

122 
	`¥ötf
("%†%†tÿ%d (wa†%d)\n", 
›
, 
msg
, *
v
, 
ﬁdv
);

123  *
v
;

124 
	}
}

133 
ùfw_Êow_id
 *

134 
	$Êow_id_mask
(
ùfw_Êow_id
 *
mask
, ùfw_Êow_id *
id
)

136 
is_v6
 = 
	`IS_IP6_FLOW_ID
(
id
);

138 
id
->
d°_p‹t
 &
mask
->dst_port;

139 
id
->
§c_p‹t
 &
mask
->src_port;

140 
id
->
¥Ÿo
 &
mask
->proto;

141 
id
->
exåa
 &
mask
->extra;

142 i‡(
is_v6
) {

143 
	`APPLY_MASK
(&
id
->
d°_ù6
, &
mask
->dst_ip6);

144 
	`APPLY_MASK
(&
id
->
§c_ù6
, &
mask
->src_ip6);

145 
id
->
Êow_id6
 &
mask
->flow_id6;

147 
id
->
d°_ù
 &
mask
->dst_ip;

148 
id
->
§c_ù
 &
mask
->src_ip;

150  
id
;

151 
	}
}

154 
ùfw_Êow_id
 *

155 
	$Êow_id_‹
(
ùfw_Êow_id
 *
§c
, ùfw_Êow_id *
d°
)

157 
is_v6
 = 
	`IS_IP6_FLOW_ID
(
d°
);

159 
d°
->
d°_p‹t
 |
§c
->dst_port;

160 
d°
->
§c_p‹t
 |
§c
->src_port;

161 
d°
->
¥Ÿo
 |
§c
->proto;

162 
d°
->
exåa
 |
§c
->extra;

163 i‡(
is_v6
) {

164 
	#OR_MASK
(
_d
, 
_s
) \

165 (
_d
)->
__u6_addr
.
__u6_addr32
[0] |(
_s
)->__u6_addr.__u6_addr32[0]; \

166 (
_d
)->
__u6_addr
.
__u6_addr32
[1] |(
_s
)->__u6_addr.__u6_addr32[1]; \

167 (
_d
)->
__u6_addr
.
__u6_addr32
[2] |(
_s
)->__u6_addr.__u6_addr32[2]; \

168 (
_d
)->
__u6_addr
.
__u6_addr32
[3] |(
_s
)->__u6_addr.__u6_addr32[3];

	)

169 
	`OR_MASK
(&
d°
->
d°_ù6
, &
§c
->dst_ip6);

170 
	`OR_MASK
(&
d°
->
§c_ù6
, &
§c
->src_ip6);

171 #unde‡
OR_MASK


172 
d°
->
Êow_id6
 |
§c
->flow_id6;

174 
d°
->
d°_ù
 |
§c
->dst_ip;

175 
d°
->
§c_ù
 |
§c
->src_ip;

177  
d°
;

178 
	}
}

181 
	$n⁄zîo_mask
(
ùfw_Êow_id
 *
m
)

183 i‡(
m
->
d°_p‹t
 || m->
§c_p‹t
 || m->
¥Ÿo
 || m->
exåa
)

185 i‡(
	`IS_IP6_FLOW_ID
(
m
)) {

187 
m
->
d°_ù6
.
__u6_addr
.
__u6_addr32
[0] ||

188 
m
->
d°_ù6
.
__u6_addr
.
__u6_addr32
[1] ||

189 
m
->
d°_ù6
.
__u6_addr
.
__u6_addr32
[2] ||

190 
m
->
d°_ù6
.
__u6_addr
.
__u6_addr32
[3] ||

191 
m
->
§c_ù6
.
__u6_addr
.
__u6_addr32
[0] ||

192 
m
->
§c_ù6
.
__u6_addr
.
__u6_addr32
[1] ||

193 
m
->
§c_ù6
.
__u6_addr
.
__u6_addr32
[2] ||

194 
m
->
§c_ù6
.
__u6_addr
.
__u6_addr32
[3] ||

195 
m
->
Êow_id6
;

197  
m
->
d°_ù
 || m->
§c_ù
;

199 
	}
}

202 
uöt32_t


203 
	$Êow_id_hash
(
ùfw_Êow_id
 *
id
)

205 
uöt32_t
 
i
;

207 i‡(
	`IS_IP6_FLOW_ID
(
id
)) {

208 
uöt32_t
 *
d
 = (uöt32_à*)&
id
->
d°_ù6
;

209 
uöt32_t
 *
s
 = (uöt32_à*)&
id
->
§c_ù6
;

210 
i
 = (
d
[0] ) ^ (d[1]) ^

211 (
d
[2] ) ^ (d[3]) ^

212 (
d
[0] >> 15) ^ (d[1] >> 15) ^

213 (
d
[2] >> 15) ^ (d[3] >> 15) ^

214 (
s
[0] << 1) ^ (s[1] << 1) ^

215 (
s
[2] << 1) ^ (s[3] << 1) ^

216 (
s
[0] << 16) ^ (s[1] << 16) ^

217 (
s
[2] << 16) ^ (s[3] << 16) ^

218 (
id
->
d°_p‹t
 << 1Ë^ (id->
§c_p‹t
) ^

219 (
id
->
exåa
) ^

220 (
id
->
¥Ÿo
 ) ^ (id->
Êow_id6
);

222 
i
 = (
id
->
d°_ù
) ^ (id->dst_ip >> 15) ^

223 (
id
->
§c_ù
 << 1) ^ (id->src_ip >> 16) ^

224 (
id
->
exåa
) ^

225 (
id
->
d°_p‹t
 << 1Ë^ (id->
§c_p‹t
Ë^ (id->
¥Ÿo
);

227  
i
;

228 
	}
}

232 
	$Êow_id_cmp
(
ùfw_Êow_id
 *
id1
, ùfw_Êow_id *
id2
)

234 
is_v6
 = 
	`IS_IP6_FLOW_ID
(
id1
);

236 i‡(!
is_v6
) {

237 i‡(
	`IS_IP6_FLOW_ID
(
id2
))

240  (
id1
->
d°_ù
 =
id2
->dst_ip &&

241 
id1
->
§c_ù
 =
id2
->src_ip &&

242 
id1
->
d°_p‹t
 =
id2
->dst_port &&

243 
id1
->
§c_p‹t
 =
id2
->src_port &&

244 
id1
->
¥Ÿo
 =
id2
->proto &&

245 
id1
->
exåa
 =
id2
->extra) ? 0 : 1;

249 !
	`bcmp
(&
id1
->
d°_ù6
,&
id2
->dst_ip6, (id1->dst_ip6)) &&

250 !
	`bcmp
(&
id1
->
§c_ù6
,&
id2
->src_ip6, (id1->src_ip6)) &&

251 
id1
->
d°_p‹t
 =
id2
->dst_port &&

252 
id1
->
§c_p‹t
 =
id2
->src_port &&

253 
id1
->
¥Ÿo
 =
id2
->proto &&

254 
id1
->
exåa
 =
id2
->extra &&

255 
id1
->
Êow_id6
 =
id2
->flow_id6) ? 0 : 1;

256 
	}
}

262 
uöt32_t


263 
	$q_hash
(
uöçå_t
 
key
, 
Êags
, *
¨g
)

266 
ùfw_Êow_id
 *
id
 = (
Êags
 & 
DNHT_KEY_IS_OBJ
) ?

267 &((
dn_queue
 *)
key
)->
ni
.
fid
 :

268 (
ùfw_Êow_id
 *)
key
;

270  
	`Êow_id_hash
(
id
);

271 
	}
}

274 
	$q_m©ch
(*
obj
, 
uöçå_t
 
key
, 
Êags
, *
¨g
)

276 
dn_queue
 *
o
 = (dn_queuê*)
obj
;

277 
ùfw_Êow_id
 *
id2
;

279 i‡(
Êags
 & 
DNHT_KEY_IS_OBJ
) {

281 
id2
 = &((
dn_queue
 *)
key
)->
ni
.
fid
;

283 
id2
 = (
ùfw_Êow_id
 *)
key
;

285  (0 =
	`Êow_id_cmp
(&
o
->
ni
.
fid
, 
id2
));

286 
	}
}

292 
	$q_√w
(
uöçå_t
 
key
, 
Êags
, *
¨g
)

294 
dn_queue
 *
q
, *
ãm∂©e
 = 
¨g
;

295 
dn_fsk
 *
fs
 = 
ãm∂©e
->fs;

296 
size
 = (*
q
Ë+ 
fs
->
sched
->
Â
->
q_d©Æí
;

298 
q
 = 
	`mÆloc
(
size
, 
M_DUMMYNET
, 
M_NOWAIT
 | 
M_ZERO
);

299 i‡(
q
 =
NULL
) {

300 
	`D
("no memory forÇew queue");

301  
NULL
;

304 
	`£t_oid
(&
q
->
ni
.
oid
, 
DN_QUEUE
, 
size
);

305 i‡(
fs
->fs.
Êags
 & 
DN_QHT_HASH
)

306 
q
->
ni
.
fid
 = *(
ùfw_Êow_id
 *)
key
;

307 
q
->
fs
 = fs;

308 
q
->
_si
 = 
	`ùdn_si_föd
(q->
fs
->
sched
, &(
ãm∂©e
->
ni
.
fid
));

309 i‡(
q
->
_si
 =
NULL
) {

310 
	`D
("no memory forÇew si");

311 
	`‰ì
 (
q
, 
M_DUMMYNET
);

312  
NULL
;

315 
q
->
_si
->
q_cou¡
++;

317 i‡(
fs
->
sched
->
Â
->
√w_queue
)

318 
fs
->
sched
->
Â
->
	`√w_queue
(
q
);

319 
dn_cfg
.
queue_cou¡
++;

320 
dn_cfg
.
idÀ_queue
++;

321  
q
;

322 
	}
}

335 
	$dn_dñëe_queue
(
dn_queue
 *
q
, 
Êags
)

337 
dn_fsk
 *
fs
 = 
q
->fs;

341 i‡(
fs
 && fs->
sched
->
Â
->
‰ì_queue
)

342 i‡(
fs
->
sched
->
Â
->
	`‰ì_queue
(
q
, 
Êags
 & 
DN_DEL_SAFE
) == 1)

344 
q
->
_si
->
q_cou¡
--;

345 
q
->
_si
 = 
NULL
;

346 i‡(
Êags
 & 
DN_DESTROY
) {

347 i‡(
q
->
mq
.
hód
)

348 
	`dn_‰ì_pkts
(
q
->
mq
.
hód
);

350 
dn_cfg
.
idÀ_queue
--;

351 
	`bzîo
(
q
, (*q));

352 
	`‰ì
(
q
, 
M_DUMMYNET
);

353 
dn_cfg
.
queue_cou¡
--;

356 
	}
}

359 
	$q_dñëe_cb
(*
q
, *
¨g
)

361 
Êags
 = ()(
uöçå_t
)
¨g
;

362 
	`dn_dñëe_queue
(
q
, 
Êags
);

363  (
Êags
 & 
DN_DESTROY
Ë? 
DNHT_SCAN_DEL
 : 0;

364 
	}
}

372 
	$qht_dñëe
(
dn_fsk
 *
fs
, 
Êags
)

374 
	`ND
("fs %d start flags %d qht %p",

375 
fs
->fs.
fs_ƒ
, 
Êags
, fs->
qht
);

376 i‡(!
fs
->
qht
)

378 i‡(
fs
->fs.
Êags
 & 
DN_QHT_HASH
) {

379 
	`dn_ht_sˇn
(
fs
->
qht
, 
q_dñëe_cb
, (*)(
uöçå_t
)
Êags
);

380 i‡(
Êags
 & 
DN_DESTROY
) {

381 
	`dn_ht_‰ì
(
fs
->
qht
, 0);

382 
fs
->
qht
 = 
NULL
;

385 
	`dn_dñëe_queue
((
dn_queue
 *)(
fs
->
qht
), 
Êags
);

386 i‡(
Êags
 & 
DN_DESTROY
)

387 
fs
->
qht
 = 
NULL
;

389 
	}
}

395 
dn_queue
 *

396 
	$ùdn_q_föd
(
dn_fsk
 *
fs
, 
ùfw_Êow_id
 *
id
)

398 
dn_queue
 
ãm∂©e
;

400 
ãm∂©e
.
fs
 = fs;

402 i‡(
fs
->fs.
Êags
 & 
DN_QHT_HASH
) {

403 
ùfw_Êow_id
 
masked_id
;

404 i‡(
fs
->
qht
 =
NULL
) {

405 
fs
->
qht
 = 
	`dn_ht_öô
(
NULL
, fs->fs.
buckës
,

406 
	`off£tof
(
dn_queue
, 
q_√xt
),

407 
q_hash
, 
q_m©ch
, 
q_√w
);

408 i‡(
fs
->
qht
 =
NULL
)

409  
NULL
;

411 
masked_id
 = *
id
;

412 
	`Êow_id_mask
(&
fs
->
fsk_mask
, &
masked_id
);

413  
	`dn_ht_föd
(
fs
->
qht
, (
uöçå_t
)&
masked_id
,

414 
DNHT_INSERT
, &
ãm∂©e
);

416 i‡(
fs
->
qht
 =
NULL
)

417 
fs
->
qht
 = 
	`q_√w
(0, 0, &
ãm∂©e
);

418  (
dn_queue
 *)
fs
->
qht
;

420 
	}
}

427 
uöt32_t


428 
	$si_hash
(
uöçå_t
 
key
, 
Êags
, *
¨g
)

431 
ùfw_Êow_id
 *
id
 = (
Êags
 & 
DNHT_KEY_IS_OBJ
) ?

432 &((
dn_sch_ö°
 *)
key
)->
ni
.
fid
 :

433 (
ùfw_Êow_id
 *)
key
;

435  
	`Êow_id_hash
(
id
);

436 
	}
}

439 
	$si_m©ch
(*
obj
, 
uöçå_t
 
key
, 
Êags
, *
¨g
)

441 
dn_sch_ö°
 *
o
 = 
obj
;

442 
ùfw_Êow_id
 *
id2
;

444 
id2
 = (
Êags
 & 
DNHT_KEY_IS_OBJ
) ?

445 &((
dn_sch_ö°
 *)
key
)->
ni
.
fid
 :

446 (
ùfw_Êow_id
 *)
key
;

447  
	`Êow_id_cmp
(&
o
->
ni
.
fid
, 
id2
) == 0;

448 
	}
}

450 
si_ª£t_¸edô
(*
_si
, *
¨g
);

457 
	$si_√w
(
uöçå_t
 
key
, 
Êags
, *
¨g
)

459 
dn_schk
 *
s
 = 
¨g
;

460 
dn_sch_ö°
 *
si
;

461 
l
 = (*
si
Ë+ 
s
->
Â
->
si_d©Æí
;

463 
si
 = 
	`mÆloc
(
l
, 
M_DUMMYNET
, 
M_NOWAIT
 | 
M_ZERO
);

464 i‡(
si
 =
NULL
)

465 
îr‹
;

468 
	`£t_oid
(&
si
->
ni
.
oid
, 
DN_SCH_I
, (
dn_Êow
));

469 
	`£t_oid
(&(
si
->
dlöe
.
oid
), 
DN_DELAY_LINE
,

470 (
dñay_löe
));

472 
si
->
ni
.
oid
.
id
 = si->
dlöe
.oid.id = -1;

474 
si
->
sched
 = 
s
;

475 
si
->
dlöe
.si = si;

477 i‡(
s
->
Â
->
√w_sched
 && s->Â->
	`√w_sched
(
si
)) {

478 
	`D
("new_schedÉrror");

479 
îr‹
;

481 i‡(
s
->
sch
.
Êags
 & 
DN_HAVE_MASK
)

482 
si
->
ni
.
fid
 = *(
ùfw_Êow_id
 *)
key
;

484 
	`si_ª£t_¸edô
(
si
, 
NULL
);

485 
dn_cfg
.
si_cou¡
++;

486 
dn_cfg
.
idÀ_si
++;

487  
si
;

489 
îr‹
:

490 i‡(
si
) {

491 
	`bzîo
(
si
, (*si));

492 
	`‰ì
(
si
, 
M_DUMMYNET
);

494  
NULL
;

495 
	}
}

504 
	$si_de°roy
(*
_si
, *
¨g
)

506 
dn_sch_ö°
 *
si
 = 
_si
;

507 
dn_schk
 *
s
 = 
si
->
sched
;

508 
dñay_löe
 *
dl
 = &
si
->
dlöe
;

510 i‡(
dl
->
oid
.
subty≥
)

511 
	`hóp_exåa˘
(&
dn_cfg
.
evhóp
, 
dl
);

512 i‡(
si
->
ni
.
Àngth
 == 0)

513 
dn_cfg
.
idÀ_si
--;

514 
	`dn_‰ì_pkts
(
dl
->
mq
.
hód
);

515 i‡(
si
->
kÊags
 & 
DN_ACTIVE
)

516 
	`hóp_exåa˘
(&
dn_cfg
.
evhóp
, 
si
);

517 i‡(
s
->
Â
->
‰ì_sched
)

518 
s
->
Â
->
	`‰ì_sched
(
si
);

519 
	`bzîo
(
si
, (*si));

520 
	`‰ì
(
si
, 
M_DUMMYNET
);

521 
dn_cfg
.
si_cou¡
--;

522  
DNHT_SCAN_DEL
;

523 
	}
}

530 
dn_sch_ö°
 *

531 
	$ùdn_si_föd
(
dn_schk
 *
s
, 
ùfw_Êow_id
 *
id
)

534 i‡(
s
->
sch
.
Êags
 & 
DN_HAVE_MASK
) {

535 
ùfw_Êow_id
 
id_t
 = *
id
;

536 
	`Êow_id_mask
(&
s
->
sch
.
sched_mask
, &
id_t
);

537  
	`dn_ht_föd
(
s
->
siht
, (
uöçå_t
)&
id_t
,

538 
DNHT_INSERT
, 
s
);

540 i‡(!
s
->
siht
)

541 
s
->
siht
 = 
	`si_√w
(0, 0, s);

542  (
dn_sch_ö°
 *)
s
->
siht
;

543 
	}
}

547 
	$si_ª£t_¸edô
(*
_si
, *
¨g
)

549 
dn_sch_ö°
 *
si
 = 
_si
;

550 
dn_lök
 *
p
 = &
si
->
sched
->
lök
;

552 
si
->
idÀ_time
 = 
dn_cfg
.
cuº_time
;

553 
si
->
¸edô
 = 
p
->
bur°
 + (
dn_cfg
.
io_Á°
 ?Ö->
b™dwidth
 : 0);

555 
	}
}

558 
	$schk_ª£t_¸edô
(
dn_schk
 *
s
)

560 i‡(
s
->
sch
.
Êags
 & 
DN_HAVE_MASK
)

561 
	`dn_ht_sˇn
(
s
->
siht
, 
si_ª£t_¸edô
, 
NULL
);

562 i‡(
s
->
siht
)

563 
	`si_ª£t_¸edô
(
s
->
siht
, 
NULL
);

564 
	}
}

572 
uöt32_t


573 
	$fsk_hash
(
uöçå_t
 
key
, 
Êags
, *
¨g
)

575 
uöt32_t
 
i
 = !(
Êags
 & 
DNHT_KEY_IS_OBJ
Ë? 
key
 :

576 ((
dn_fsk
 *)
key
)->
fs
.
fs_ƒ
;

578  ( (
i
>>8)^(i>>4)^i );

579 
	}
}

582 
	$fsk_m©ch
(*
obj
, 
uöçå_t
 
key
, 
Êags
, *
¨g
)

584 
dn_fsk
 *
fs
 = 
obj
;

585 
i
 = !(
Êags
 & 
DNHT_KEY_IS_OBJ
Ë? 
key
 :

586 ((
dn_fsk
 *)
key
)->
fs
.
fs_ƒ
;

588  (
fs
->fs.
fs_ƒ
 =
i
);

589 
	}
}

592 
	$fsk_√w
(
uöçå_t
 
key
, 
Êags
, *
¨g
)

594 
dn_fsk
 *
fs
;

596 
fs
 = 
	`mÆloc
((*fs), 
M_DUMMYNET
, 
M_NOWAIT
 | 
M_ZERO
);

597 i‡(
fs
) {

598 
	`£t_oid
(&
fs
->fs.
oid
, 
DN_FS
, (fs->fs));

599 
dn_cfg
.
fsk_cou¡
++;

600 
fs
->
døö_buckë
 = 0;

601 
	`SLIST_INSERT_HEAD
(&
dn_cfg
.
fsu
, 
fs
, 
sch_chaö
);

603  
fs
;

604 
	}
}

613 
	$fsk_dëach
(
dn_fsk
 *
fs
, 
Êags
)

615 i‡(
Êags
 & 
DN_DELETE_FS
)

616 
Êags
 |
DN_DESTROY
;

617 
	`ND
("fs %d from sched %d flags %s %s %s",

618 
fs
->fs.
fs_ƒ
, fs->fs.
sched_ƒ
,

619 (
Êags
 & 
DN_DELETE_FS
) ? "DEL_FS":"",

620 (
Êags
 & 
DN_DESTROY
) ? "DEL":"",

621 (
Êags
 & 
DN_DETACH
) ? "DET":"");

622 i‡(
Êags
 & 
DN_DETACH
) {

623 
dn_fsk_hód
 *
h
;

624 
h
 = 
fs
->
sched
 ? &fs->sched->
fsk_li°
 : &
dn_cfg
.
fsu
;

625 
	`SLIST_REMOVE
(
h
, 
fs
, 
dn_fsk
, 
sch_chaö
);

630 i‡(
fs
->
w_q_lookup
)

631 
	`‰ì
(
fs
->
w_q_lookup
, 
M_DUMMYNET
);

632 
fs
->
w_q_lookup
 = 
NULL
;

633 
	`qht_dñëe
(
fs
, 
Êags
);

634 i‡(
fs
->
sched
 && fs->sched->
Â
->
‰ì_fsk
)

635 
fs
->
sched
->
Â
->
	`‰ì_fsk
(fs);

636 
fs
->
sched
 = 
NULL
;

637 i‡(
Êags
 & 
DN_DELETE_FS
) {

638 
	`bzîo
(
fs
, (fs));

639 
	`‰ì
(
fs
, 
M_DUMMYNET
);

640 
dn_cfg
.
fsk_cou¡
--;

642 
	`SLIST_INSERT_HEAD
(&
dn_cfg
.
fsu
, 
fs
, 
sch_chaö
);

644 
	}
}

654 
	$fsk_dëach_li°
(
dn_fsk_hód
 *
h
, 
Êags
)

656 
dn_fsk
 *
fs
;

657 
n
 = 0;

659 
	`ND
("hód %∞Êag†%x", 
h
, 
Êags
);

660 (
fs
 = 
	`SLIST_FIRST
(
h
))) {

661 
	`SLIST_REMOVE_HEAD
(
h
, 
sch_chaö
);

662 
n
++;

663 
	`fsk_dëach
(
fs
, 
Êags
);

665 
	`ND
("d⁄ê%d flow£ts", 
n
);

666 
	}
}

673 
	$dñëe_fs
(
i
, 
locked
)

675 
dn_fsk
 *
fs
;

676 
îr
 = 0;

678 i‡(!
locked
)

679 
	`DN_BH_WLOCK
();

680 
fs
 = 
	`dn_ht_föd
(
dn_cfg
.
fshash
, 
i
, 
DNHT_REMOVE
, 
NULL
);

681 i‡(
	`dn_ht_íåõs
(
dn_cfg
.
fshash
) == 0) {

682 
	`dn_ht_‰ì
(
dn_cfg
.
fshash
, 0);

683 
dn_cfg
.
fshash
 = 
NULL
;

685 
	`ND
("f†%d found %p", 
i
, 
fs
);

686 i‡(
fs
) {

687 
	`fsk_dëach
(
fs
, 
DN_DETACH
 | 
DN_DELETE_FS
);

688 
îr
 = 0;

690 
îr
 = 
EINVAL
;

691 i‡(!
locked
)

692 
	`DN_BH_WUNLOCK
();

693  
îr
;

694 
	}
}

704 
uöt32_t


705 
	$schk_hash
(
uöçå_t
 
key
, 
Êags
, *
_¨g
)

707 
uöt32_t
 
i
 = !(
Êags
 & 
DNHT_KEY_IS_OBJ
Ë? 
key
 :

708 ((
dn_schk
 *)
key
)->
sch
.
sched_ƒ
;

709  ( (
i
>>8)^(i>>4)^i );

710 
	}
}

713 
	$schk_m©ch
(*
obj
, 
uöçå_t
 
key
, 
Êags
, *
_¨g
)

715 
dn_schk
 *
s
 = (dn_schk *)
obj
;

716 
i
 = !(
Êags
 & 
DNHT_KEY_IS_OBJ
Ë? 
key
 :

717 ((
dn_schk
 *)
key
)->
sch
.
sched_ƒ
;

718  (
s
->
sch
.
sched_ƒ
 =
i
);

719 
	}
}

727 
	$schk_√w
(
uöçå_t
 
key
, 
Êags
, *
¨g
)

729 
schk_√w_¨g
 *
a
 = 
¨g
;

730 
dn_schk
 *
s
;

731 
l
 = (*
s
Ë+
a
->
Â
->
schk_d©Æí
;

733 
s
 = 
	`mÆloc
(
l
, 
M_DUMMYNET
, 
M_NOWAIT
 | 
M_ZERO
);

734 i‡(
s
 =
NULL
)

735  
NULL
;

736 
	`£t_oid
(&
s
->
lök
.
oid
, 
DN_LINK
, (s->link));

737 
s
->
sch
 = *
a
->sch;

738 
s
->
lök
.
lök_ƒ
 = s->
sch
.
sched_ƒ
;

739 
	`SLIST_INIT
(&
s
->
fsk_li°
);

741 
s
->
Â
 = 
a
->fp;

742 
s
->
døö_buckë
 = 0;

743 i‡(
s
->
sch
.
Êags
 & 
DN_HAVE_MASK
) {

744 
s
->
siht
 = 
	`dn_ht_öô
(
NULL
, s->
sch
.
buckës
,

745 
	`off£tof
(
dn_sch_ö°
, 
si_√xt
),

746 
si_hash
, 
si_m©ch
, 
si_√w
);

747 i‡(
s
->
siht
 =
NULL
) {

748 
	`‰ì
(
s
, 
M_DUMMYNET
);

749  
NULL
;

752 
s
->
Â
 = 
NULL
;

753 
dn_cfg
.
schk_cou¡
++;

754  
s
;

755 
	}
}

766 
	$schk_dñëe_cb
(*
obj
, *
¨g
)

768 
dn_schk
 *
s
 = 
obj
;

770 
a
 = ()
¨g
;

771 
	`ND
("sched %dárg %s%s",

772 
s
->
sch
.
sched_ƒ
,

773 
a
&
DN_DESTROY
 ? "DEL ":"",

774 
a
&
DN_DELETE_FS
 ? "DEL_FS":"");

776 
	`fsk_dëach_li°
(&
s
->
fsk_li°
, 
¨g
 ? 
DN_DESTROY
 : 0);

778 i‡(
s
->
sch
.
Êags
 & 
DN_HAVE_MASK
) {

779 
	`dn_ht_sˇn
(
s
->
siht
, 
si_de°roy
, 
NULL
);

780 
	`dn_ht_‰ì
(
s
->
siht
, 0);

782 i‡(
s
->
siht
)

783 
	`si_de°roy
(
s
->
siht
, 
NULL
);

784 i‡(
s
->
¥ofûe
) {

785 
	`‰ì
(
s
->
¥ofûe
, 
M_DUMMYNET
);

786 
s
->
¥ofûe
 = 
NULL
;

788 
s
->
siht
 = 
NULL
;

789 i‡(
s
->
Â
->
de°roy
)

790 
s
->
Â
->
	`de°roy
(s);

791 
	`bzîo
(
s
, (*s));

792 
	`‰ì
(
obj
, 
M_DUMMYNET
);

793 
dn_cfg
.
schk_cou¡
--;

794  
DNHT_SCAN_DEL
;

795 
	}
}

803 
	$dñëe_schk
(
i
)

805 
dn_schk
 *
s
;

807 
s
 = 
	`dn_ht_föd
(
dn_cfg
.
schedhash
, 
i
, 
DNHT_REMOVE
, 
NULL
);

808 i‡(
	`dn_ht_íåõs
(
dn_cfg
.
schedhash
) == 0) {

809 
	`dn_ht_‰ì
(
dn_cfg
.
schedhash
, 0);

810 
dn_cfg
.
schedhash
 = 
NULL
;

812 
	`ND
("%d %p", 
i
, 
s
);

813 i‡(!
s
)

814  
EINVAL
;

815 
	`dñëe_fs
(
i
 + 
DN_MAX_ID
, 1);

817 
	`schk_dñëe_cb
(
s
, (*)(
uöçå_t
)
DN_DESTROY
);

819 
	}
}

823 
	$c›y_obj
(**
°¨t
, *
íd
, *
_o
, c⁄° *
msg
, 
i
)

825 
dn_id
 *
o
 = 
_o
;

826 
have
 = 
íd
 - *
°¨t
;

828 i‡(
have
 < 
o
->
Àn
 || o->À¿=0 || o->
ty≥
 == 0) {

829 
	`D
("(WARN)Åype %d %s %d have %dÇeed %d",

830 
o
->
ty≥
, 
msg
, 
i
, 
have
, o->
Àn
);

833 
	`ND
("ty≥ %d %†%dÜí %d", 
o
->
ty≥
, 
msg
, 
i
, o->
Àn
);

834 
	`bc›y
(
_o
, *
°¨t
, 
o
->
Àn
);

835 i‡(
o
->
ty≥
 =
DN_LINK
) {

837 
dn_lök
 *
l
 = (dn_lök *)*
°¨t
;

838 
l
->
bur°
 = 
	`div64
÷->bur°, 8 * 
hz
);

839 } i‡(
o
->
ty≥
 =
DN_SCH
) {

841 
dn_schk
 *
s
 = 
_o
;

842 
dn_id
 *
id
 = (dn_id *)(*
°¨t
);

843 
id
->id = (
s
->
sch
.
Êags
 & 
DN_HAVE_MASK
) ?

844 
	`dn_ht_íåõs
(
s
->
siht
) : (s->siht ? 1 : 0);

846 *
°¨t
 +
o
->
Àn
;

848 
	}
}

855 
	$c›y_obj_q
(**
°¨t
, *
íd
, *
_o
, c⁄° *
msg
, 
i
)

857 
dn_id
 *
o
 = 
_o
;

858 
have
 = 
íd
 - *
°¨t
;

859 
Àn
 = (
dn_Êow
);

861 i‡(
have
 < 
Àn
 || 
o
->À¿=0 || o->
ty≥
 !
DN_QUEUE
) {

862 
	`D
("ERRORÅype %d %s %d have %dÇeed %d",

863 
o
->
ty≥
, 
msg
, 
i
, 
have
, 
Àn
);

866 
	`ND
("ty≥ %d %†%dÜí %d", 
o
->
ty≥
, 
msg
, 
i
, 
Àn
);

867 
	`bc›y
(
_o
, *
°¨t
, 
Àn
);

868 ((
dn_id
*)(*
°¨t
))->
Àn
 =Üen;

869 *
°¨t
 +
Àn
;

871 
	}
}

874 
	$c›y_q_cb
(*
obj
, *
¨g
)

876 
dn_queue
 *
q
 = 
obj
;

877 
c›y_¨gs
 *
a
 = 
¨g
;

878 
dn_Êow
 *
ni
 = (dn_Êow *)(*
a
->
°¨t
);

879 i‡(
	`c›y_obj_q
(
a
->
°¨t
,á->
íd
, &
q
->
ni
, "queue", -1))

880  
DNHT_SCAN_END
;

881 
ni
->
oid
.
ty≥
 = 
DN_FLOW
;

882 
ni
->
oid
.
id
 = 
	`si_hash
((
uöçå_t
)&ni->
fid
, 0, 
NULL
);

884 
	}
}

887 
	$c›y_q
(
c›y_¨gs
 *
a
, 
dn_fsk
 *
fs
, 
Êags
)

889 i‡(!
fs
->
qht
)

891 i‡(
fs
->fs.
Êags
 & 
DN_QHT_HASH
)

892 
	`dn_ht_sˇn
(
fs
->
qht
, 
c›y_q_cb
, 
a
);

894 
	`c›y_q_cb
(
fs
->
qht
, 
a
);

896 
	}
}

905 
	$c›y_¥ofûe
(
c›y_¨gs
 *
a
, 
dn_¥ofûe
 *
p
)

907 
have
 = 
a
->
íd
 - *a->
°¨t
;

909 
¥ofûe_Àn
 = (
dn_¥ofûe
);

911 i‡(
p
 =
NULL
)

913 i‡(
have
 < 
¥ofûe_Àn
) {

914 
	`D
("îr‹ havê%dÇìd %d", 
have
, 
¥ofûe_Àn
);

917 
	`bc›y
(
p
, *
a
->
°¨t
, 
¥ofûe_Àn
);

918 ((
dn_id
 *)(*
a
->
°¨t
))->
Àn
 = 
¥ofûe_Àn
;

919 *
a
->
°¨t
 +
¥ofûe_Àn
;

921 
	}
}

924 
	$c›y_Êow£t
(
c›y_¨gs
 *
a
, 
dn_fsk
 *
fs
, 
Êags
)

926 
dn_fs
 *
ufs
 = (dn_f†*)(*
a
->
°¨t
);

927 i‡(!
fs
)

929 
	`ND
("Êow£à%d", 
fs
->fs.
fs_ƒ
);

930 i‡(
	`c›y_obj
(
a
->
°¨t
,á->
íd
, &
fs
->fs, "Êow£t", fs->fs.
fs_ƒ
))

931  
DNHT_SCAN_END
;

932 
ufs
->
oid
.
id
 = (
fs
->fs.
Êags
 & 
DN_QHT_HASH
) ?

933 
	`dn_ht_íåõs
(
fs
->
qht
) : (fs->qht ? 1 : 0);

934 i‡(
Êags
) {

935 
	`c›y_q
(
a
, 
fs
, 0);

938 
	}
}

941 
	$c›y_si_cb
(*
obj
, *
¨g
)

943 
dn_sch_ö°
 *
si
 = 
obj
;

944 
c›y_¨gs
 *
a
 = 
¨g
;

945 
dn_Êow
 *
ni
 = (dn_Êow *)(*
a
->
°¨t
);

946 i‡(
	`c›y_obj
(
a
->
°¨t
,á->
íd
, &
si
->
ni
, "inst",

947 
si
->
sched
->
sch
.
sched_ƒ
))

948  
DNHT_SCAN_END
;

949 
ni
->
oid
.
ty≥
 = 
DN_FLOW
;

950 
ni
->
oid
.
id
 = 
	`si_hash
((
uöçå_t
)
si
, 
DNHT_KEY_IS_OBJ
, 
NULL
);

952 
	}
}

955 
	$c›y_si
(
c›y_¨gs
 *
a
, 
dn_schk
 *
s
, 
Êags
)

957 i‡(
s
->
sch
.
Êags
 & 
DN_HAVE_MASK
)

958 
	`dn_ht_sˇn
(
s
->
siht
, 
c›y_si_cb
, 
a
);

959 i‡(
s
->
siht
)

960 
	`c›y_si_cb
(
s
->
siht
, 
a
);

962 
	}
}

968 
	$c›y_fsk_li°
(
c›y_¨gs
 *
a
, 
dn_schk
 *
s
, 
Êags
)

970 
dn_fsk
 *
fs
;

971 
dn_id
 *
o
;

972 
uöt32_t
 *
p
;

974 
n
 = 0, 
•a˚
 = (*
o
);

975 
	`SLIST_FOREACH
(
fs
, &
s
->
fsk_li°
, 
sch_chaö
) {

976 i‡(
fs
->fs.
fs_ƒ
 < 
DN_MAX_ID
)

977 
n
++;

979 
•a˚
 +
n
 * (
uöt32_t
);

980 
	`DX
(3, "sched %d ha†%d flow£ts", 
s
->
sch
.
sched_ƒ
, 
n
);

981 i‡(
a
->
íd
 - *◊->
°¨t
Ë< 
•a˚
)

982  
DNHT_SCAN_END
;

983 
o
 = (
dn_id
 *)(*(
a
->
°¨t
));

984 
o
->
Àn
 = 
•a˚
;

985 *
a
->
°¨t
 +
o
->
Àn
;

986 
o
->
ty≥
 = 
DN_TEXT
;

987 
p
 = (
uöt32_t
 *)(
o
+1);

988 
	`SLIST_FOREACH
(
fs
, &
s
->
fsk_li°
, 
sch_chaö
)

989 i‡(
fs
->fs.
fs_ƒ
 < 
DN_MAX_ID
)

990 *
p
++ = 
fs
->fs.
fs_ƒ
;

992 
	}
}

995 
	$c›y_d©a_hñ≥r
(*
_o
, *
_¨g
)

997 
c›y_¨gs
 *
a
 = 
_¨g
;

998 
uöt32_t
 *
r
 = 
a
->
exåa
->r;

999 
uöt32_t
 *
lim
;

1000 
n
;

1002 
lim
 = (
uöt32_t
 *)((*)(
a
->
exåa
Ë+á->exåa->
o
.
Àn
);

1004 i‡(
a
->
ty≥
 =
DN_LINK
 ||á->ty≥ =
DN_SCH
) {

1006 
dn_schk
 *
s
 = 
_o
;

1008 
n
 = 
s
->
sch
.
sched_ƒ
;

1009 i‡(
a
->
ty≥
 =
DN_SCH
 && 
n
 >
DN_MAX_ID
)

1011 i‡(
a
->
ty≥
 =
DN_LINK
 && 
n
 <
DN_MAX_ID
)

1015 ;
r
 < 
lim
;Ñ += 2) {

1016 i‡(
n
 < 
r
[0] ||Ç >Ñ[1])

1019 i‡(
a
->
Êags
 & 
DN_C_LINK
) {

1020 i‡(
	`c›y_obj
(
a
->
°¨t
,á->
íd
,

1021 &
s
->
lök
, "lök", 
n
))

1022  
DNHT_SCAN_END
;

1023 i‡(
	`c›y_¥ofûe
(
a
, 
s
->
¥ofûe
))

1024  
DNHT_SCAN_END
;

1025 i‡(
	`c›y_Êow£t
(
a
, 
s
->
fs
, 0))

1026  
DNHT_SCAN_END
;

1028 i‡(
a
->
Êags
 & 
DN_C_SCH
) {

1029 i‡(
	`c›y_obj
(
a
->
°¨t
,á->
íd
,

1030 &
s
->
sch
, "sched", 
n
))

1031  
DNHT_SCAN_END
;

1033 i‡(
	`c›y_fsk_li°
(
a
, 
s
, 0))

1034  
DNHT_SCAN_END
;

1036 i‡(
a
->
Êags
 & 
DN_C_FLOW
)

1037 
	`c›y_si
(
a
, 
s
, 0);

1040 } i‡(
a
->
ty≥
 =
DN_FS
) {

1042 
dn_fsk
 *
fs
 = 
_o
;

1044 
n
 = 
fs
->fs.
fs_ƒ
;

1045 i‡(
n
 >
DN_MAX_ID
)

1048 ;
r
 < 
lim
;Ñ += 2) {

1049 i‡(
n
 < 
r
[0] ||Ç >Ñ[1])

1051 i‡(
	`c›y_Êow£t
(
a
, 
fs
, 0))

1052  
DNHT_SCAN_END
;

1053 
	`c›y_q
(
a
, 
fs
, 0);

1058 
	}
}

1060 
ölöe
 
dn_schk
 *

1061 
	$loˇã_scheduÀr
(
i
)

1063  
	`dn_ht_föd
(
dn_cfg
.
schedhash
, 
i
, 0, 
NULL
);

1064 
	}
}

1070 
	$c⁄fig_ªd
(
dn_fsk
 *
fs
)

1072 
öt64_t
 
s
, 
idÀ
, 
weight
, 
w0
;

1073 
t
, 
i
;

1075 
fs
->
w_q
 = fs->fs.w_q;

1076 
fs
->
max_p
 = fs->fs.max_p;

1077 
	`D
("called");

1079 
i
 = 
fs
->
sched
->
lök
.
b™dwidth
;

1080 
s
 = (
i
 <= 0) ? 0 :

1081 
hz
 * 
dn_cfg
.
ªd_avg_pkt_size
 * 8 * 
	`SCALE
(1Ë/ 
i
;

1083 
idÀ
 = 
	`div64
((
s
 * 3Ë, 
fs
->
w_q
);

1084 
fs
->
lookup_°ï
 = 
	`div64
(
idÀ
 , 
dn_cfg
.
ªd_lookup_dïth
);

1086 i‡(!
fs
->
lookup_°ï
)

1087 
fs
->
lookup_°ï
 = 1;

1088 
w0
 = 
weight
 = 
	`SCALE
(1Ë- 
fs
->
w_q
;

1090 
t
 = 
fs
->
lookup_°ï
;Å > 1; --t)

1091 
weight
 = 
	`SCALE_MUL
(weight, 
w0
);

1092 
fs
->
lookup_weight
 = ()(
weight
);

1095 
fs
->
mö_th
 = 
	`SCALE
(fs->fs.min_th);

1096 
fs
->
max_th
 = 
	`SCALE
(fs->fs.max_th);

1098 
fs
->
c_1
 = fs->
max_p
 / (fs->fs.
max_th
 - fs->fs.
mö_th
);

1099 
fs
->
c_2
 = 
	`SCALE_MUL
(fs->
c_1
, 
	`SCALE
(fs->fs.
mö_th
));

1101 i‡(
fs
->fs.
Êags
 & 
DN_IS_GENTLE_RED
) {

1102 
fs
->
c_3
 = (
	`SCALE
(1Ë- fs->
max_p
Ë/ fs->fs.
max_th
;

1103 
fs
->
c_4
 = 
	`SCALE
(1Ë- 2 * fs->
max_p
;

1107 i‡(
fs
->
w_q_lookup
) {

1108 
	`‰ì
(
fs
->
w_q_lookup
, 
M_DUMMYNET
);

1109 
fs
->
w_q_lookup
 = 
NULL
;

1111 i‡(
dn_cfg
.
ªd_lookup_dïth
 == 0) {

1112 
	`¥ötf
("\ndummynet:Çet.inet.ip.dummynet.red_lookup_depth"

1114 
fs
->fs.
Êags
 &~
DN_IS_RED
;

1115 
fs
->fs.
Êags
 &~
DN_IS_GENTLE_RED
;

1116  (
EINVAL
);

1118 
fs
->
lookup_dïth
 = 
dn_cfg
.
ªd_lookup_dïth
;

1119 
fs
->
w_q_lookup
 = (
u_öt
 *)
	`mÆloc
(fs->
lookup_dïth
 * (),

1120 
M_DUMMYNET
, 
M_NOWAIT
);

1121 i‡(
fs
->
w_q_lookup
 =
NULL
) {

1122 
	`¥ötf
("dummynet: sorry, cannotállocateÑedÜookupÅable\n");

1123 
fs
->fs.
Êags
 &~
DN_IS_RED
;

1124 
fs
->fs.
Êags
 &~
DN_IS_GENTLE_RED
;

1125 (
ENOSPC
);

1129 
fs
->
w_q_lookup
[0] = 
	`SCALE
(1Ë- fs->
w_q
;

1131 
i
 = 1; i < 
fs
->
lookup_dïth
; i++)

1132 
fs
->
w_q_lookup
[
i
] =

1133 
	`SCALE_MUL
(
fs
->
w_q_lookup
[
i
 - 1], fs->
lookup_weight
);

1135 i‡(
dn_cfg
.
ªd_avg_pkt_size
 < 1)

1136 
dn_cfg
.
ªd_avg_pkt_size
 = 512;

1137 
fs
->
avg_pkt_size
 = 
dn_cfg
.
ªd_avg_pkt_size
;

1138 i‡(
dn_cfg
.
ªd_max_pkt_size
 < 1)

1139 
dn_cfg
.
ªd_max_pkt_size
 = 1500;

1140 
fs
->
max_pkt_size
 = 
dn_cfg
.
ªd_max_pkt_size
;

1141 
	`D
("exit");

1143 
	}
}

1147 
	$upd©e_ªd
(
dn_schk
 *
s
)

1149 
dn_fsk
 *
fs
;

1150 
	`SLIST_FOREACH
(
fs
, &
s
->
fsk_li°
, 
sch_chaö
) {

1151 i‡(
fs
 && (fs->fs.
Êags
 & 
DN_IS_RED
))

1152 
	`c⁄fig_ªd
(
fs
);

1154 
	}
}

1158 
	$fsk_©èch
(
dn_fsk
 *
fs
, 
dn_schk
 *
s
)

1160 
	`ND
("remove fs %d from fsunlinked,ÜinkÅo sched %d",

1161 
fs
->fs.
fs_ƒ
, 
s
->
sch
.
sched_ƒ
);

1162 
	`SLIST_REMOVE
(&
dn_cfg
.
fsu
, 
fs
, 
dn_fsk
, 
sch_chaö
);

1163 
fs
->
sched
 = 
s
;

1164 
	`SLIST_INSERT_HEAD
(&
s
->
fsk_li°
, 
fs
, 
sch_chaö
);

1165 i‡(
s
->
Â
->
√w_fsk
)

1166 
s
->
Â
->
	`√w_fsk
(
fs
);

1168 
fs
->
fsk_mask
 = fs->fs.
Êow_mask
;

1169 i‡(
fs
->
sched
->
sch
.
Êags
 & 
DN_HAVE_MASK
)

1170 
	`Êow_id_‹
(&
fs
->
sched
->
sch
.
sched_mask
, &fs->
fsk_mask
);

1171 i‡(
fs
->
qht
) {

1180 
	`D
("XXX TODOÑequeue from fs %dÅo sch %d",

1181 
fs
->fs.
fs_ƒ
, 
s
->
sch
.
sched_ƒ
);

1182 
fs
->
qht
 = 
NULL
;

1185 i‡(
	`n⁄zîo_mask
(&
fs
->
fsk_mask
))

1186 
fs
->fs.
Êags
 |
DN_QHT_HASH
;

1188 
fs
->fs.
Êags
 &~
DN_QHT_HASH
;

1191 i‡(
fs
->fs.
Êags
 & 
DN_IS_RED
)

1192 
	`c⁄fig_ªd
(
fs
);

1193 
	}
}

1197 
	$upd©e_fs
(
dn_schk
 *
s
)

1199 
dn_fsk
 *
fs
, *
tmp
;

1201 
	`SLIST_FOREACH_SAFE
(
fs
, &
dn_cfg
.
fsu
, 
sch_chaö
, 
tmp
) {

1202 i‡(
s
->
sch
.
sched_ƒ
 !
fs
->fs.sched_nr) {

1203 
	`D
("fs %d for sch %dÇot %d still unlinked",

1204 
fs
->fs.
fs_ƒ
, fs->fs.
sched_ƒ
,

1205 
s
->
sch
.
sched_ƒ
);

1208 
	`fsk_©èch
(
fs
, 
s
);

1210 
	}
}

1238 
	$c⁄fig_lök
(
dn_lök
 *
p
, 
dn_id
 *
¨g
)

1240 
i
;

1242 i‡(
p
->
oid
.
Àn
 != (*p)) {

1243 
	`D
("övÆidÖùêÀ¿%d", 
p
->
oid
.
Àn
);

1244  
EINVAL
;

1246 
i
 = 
p
->
lök_ƒ
;

1247 i‡(
i
 <0 || i >
DN_MAX_ID
)

1248  
EINVAL
;

1256 
p
->
dñay
 = (p->dñay * 
hz
) / 1000;

1258 
p
->
bur°
 *8 * 
hz
;

1260 
	`DN_BH_WLOCK
();

1262 ; 
i
 < 2*
DN_MAX_ID
; i += DN_MAX_ID) {

1263 
dn_schk
 *
s
 = 
	`loˇã_scheduÀr
(
i
);

1264 i‡(
s
 =
NULL
) {

1265 
	`DN_BH_WUNLOCK
();

1266 
	`D
("sched %dÇŸ found", 
i
);

1267  
EINVAL
;

1270 i‡(
s
->
¥ofûe
) {

1271 
	`‰ì
(
s
->
¥ofûe
, 
M_DUMMYNET
);

1272 
s
->
¥ofûe
 = 
NULL
;

1275 
s
->
lök
.
oid
 = 
p
->oid;

1276 
s
->
lök
.
lök_ƒ
 = 
i
;

1277 
s
->
lök
.
dñay
 = 
p
->delay;

1278 i‡(
s
->
lök
.
b™dwidth
 !
p
->bandwidth) {

1280 
s
->
lök
.
b™dwidth
 = 
p
->bandwidth;

1281 
	`upd©e_ªd
(
s
);

1283 
s
->
lök
.
bur°
 = 
p
->burst;

1284 
	`schk_ª£t_¸edô
(
s
);

1286 
dn_cfg
.
id
++;

1287 
	`DN_BH_WUNLOCK
();

1289 
	}
}

1294 
dn_fsk
 *

1295 
	$c⁄fig_fs
(
dn_fs
 *
nfs
, 
dn_id
 *
¨g
, 
locked
)

1297 
i
;

1298 
dn_fsk
 *
fs
;

1300 i‡(
nfs
->
oid
.
Àn
 != (*nfs)) {

1301 
	`D
("övÆid flow£àÀ¿%d", 
nfs
->
oid
.
Àn
);

1302  
NULL
;

1304 
i
 = 
nfs
->
fs_ƒ
;

1305 i‡(
i
 <0 || i >3*
DN_MAX_ID
)

1306  
NULL
;

1307 
	`ND
("Êow£à%d", 
i
);

1309 i‡(
nfs
->
Êags
 & 
DN_QSIZE_BYTES
) {

1310 
	`ùdn_bound_v¨
(&
nfs
->
qsize
, 16384,

1311 1500, 
dn_cfg
.
byã_limô
, 
NULL
);

1313 
	`ùdn_bound_v¨
(&
nfs
->
qsize
, 50,

1314 1, 
dn_cfg
.
¶Ÿ_limô
, 
NULL
);

1316 i‡(
nfs
->
Êags
 & 
DN_HAVE_MASK
) {

1318 
	`ùdn_bound_v¨
((*)&
nfs
->
buckës
, 
dn_cfg
.
hash_size
,

1319 1, 
dn_cfg
.
max_hash_size
, "flowset buckets");

1321 
nfs
->
buckës
 = 1;

1323 i‡(!
locked
)

1324 
	`DN_BH_WLOCK
();

1325 i‡(
dn_cfg
.
fshash
 =
NULL
)

1326 
dn_cfg
.
fshash
 = 
	`dn_ht_öô
(
NULL
, dn_cfg.
hash_size
,

1327 
	`off£tof
(
dn_fsk
, 
fsk_√xt
),

1328 
fsk_hash
, 
fsk_m©ch
, 
fsk_√w
);

1330 
dn_schk
 *
s
;

1331 
Êags
 = 
nfs
->
sched_ƒ
 ? 
DNHT_INSERT
 : 0;

1332 
j
;

1333 
ﬁdc
 = 
dn_cfg
.
fsk_cou¡
;

1334 
fs
 = 
	`dn_ht_föd
(
dn_cfg
.
fshash
, 
i
, 
Êags
, 
NULL
);

1335 i‡(
fs
 =
NULL
) {

1336 
	`D
("missög sched f‹ flow£à%d", 
i
);

1340 i‡(
nfs
->
sched_ƒ
 == 0)

1341 
nfs
->
sched_ƒ
 = 
fs
->fs.sched_nr;

1342 
j
 = 0; j < (
nfs
->
∑r
)/(nfs->par[0]); j++) {

1343 i‡(
nfs
->
∑r
[
j
] == -1)

1344 
nfs
->
∑r
[
j
] = 
fs
->fs.par[j];

1346 i‡(
	`bcmp
(&
fs
->fs, 
nfs
, (*nfs)) == 0) {

1347 
	`ND
("Êow£à%d unch™ged", 
i
);

1350 i‡(
ﬁdc
 !
dn_cfg
.
fsk_cou¡
)

1351 
dn_cfg
.
id
++;

1352 
s
 = 
	`loˇã_scheduÀr
(
nfs
->
sched_ƒ
);

1357 
	`DX
(2, "fs %d changed sched %d@%pÅo %d@%p",

1358 
fs
->fs.
fs_ƒ
,

1359 
fs
->fs.
sched_ƒ
, fs->
sched
, 
nfs
->sched_ƒ, 
s
);

1360 i‡(
fs
->
sched
) {

1361 
Êags
 = 
s
 ? 
DN_DETACH
 : (DN_DETACH | 
DN_DESTROY
);

1362 
Êags
 |
DN_DESTROY
;

1363 
	`fsk_dëach
(
fs
, 
Êags
);

1365 
fs
->f†*
nfs
;

1366 i‡(
s
 !
NULL
)

1367 
	`fsk_©èch
(
fs
, 
s
);

1369 i‡(!
locked
)

1370 
	`DN_BH_WUNLOCK
();

1371  
fs
;

1372 
	}
}

1383 
	$c⁄fig_sched
(
dn_sch
 *
_nsch
, 
dn_id
 *
¨g
)

1385 
dn_schk
 *
s
;

1386 
schk_√w_¨g
 
a
;

1387 
i
;

1388 
dn_lök
 
p
;

1389 
dn_¥ofûe
 *
pf
 = 
NULL
;

1391 
ùfw_Êow_id
 
√w_mask
;

1392 
√w_buckës
 = 0;

1393 
√w_Êags
 = 0;

1394 
pùe_cmd
;

1395 
îr
 = 
ENOMEM
;

1397 
a
.
sch
 = 
_nsch
;

1398 i‡(
a
.
sch
->
oid
.
Àn
 != (*a.sch)) {

1399 
	`D
("bad schedÜí %d", 
a
.
sch
->
oid
.
Àn
);

1400  
EINVAL
;

1402 
i
 = 
a
.
sch
->
sched_ƒ
;

1403 i‡(
i
 <0 || i >
DN_MAX_ID
)

1404  
EINVAL
;

1406 i‡(
a
.
sch
->
Êags
 & 
DN_HAVE_MASK
)

1407 
	`ùdn_bound_v¨
((*)&
a
.
sch
->
buckës
, 
dn_cfg
.
hash_size
,

1408 1, 
dn_cfg
.
max_hash_size
, "sched buckets");

1410 
	`bzîo
(&
p
, (p));

1412 
pùe_cmd
 = 
a
.
sch
->
Êags
 & 
DN_PIPE_CMD
;

1413 
a
.
sch
->
Êags
 &~
DN_PIPE_CMD
;

1414 i‡(
pùe_cmd
) {

1416 
√w_mask
 = 
a
.
sch
->
sched_mask
;

1417 
√w_buckës
 = 
a
.
sch
->
buckës
;

1418 
√w_Êags
 = 
a
.
sch
->
Êags
;

1420 
	`DN_BH_WLOCK
();

1421 i‡(
dn_cfg
.
schedhash
 =
NULL
)

1422 
dn_cfg
.
schedhash
 = 
	`dn_ht_öô
(
NULL
, dn_cfg.
hash_size
,

1423 
	`off£tof
(
dn_schk
, 
schk_√xt
),

1424 
schk_hash
, 
schk_m©ch
, 
schk_√w
);

1425 
agaö
:

1430 
dn_cfg
.
id
++;

1431 
a
.
Â
 = 
	`föd_sched_ty≥
◊.
sch
->
oid
.
subty≥
,á.sch->
«me
);

1432 i‡(
a
.
Â
 !
NULL
) {

1434 
s
 = 
	`dn_ht_föd
(
dn_cfg
.
schedhash
, 
i
, 
DNHT_INSERT
, &
a
);

1435 } i‡(
a
.
sch
->
oid
.
subty≥
 =0 && !a.sch->
«me
[0]) {

1437 
s
 = 
	`dn_ht_föd
(
dn_cfg
.
schedhash
, 
i
, 0, &
a
);

1438 i‡(
s
 !
NULL
) {

1439 
a
.
Â
 = 
s
->fp;

1443 i‡(
pùe_cmd
)

1444 
√xt
;

1449 i‡(
pùe_cmd
) {

1451 
	`bzîo
(&
a
.
sch
->
sched_mask
, (
√w_mask
));

1452 
a
.
sch
->
buckës
 = 0;

1453 
a
.
sch
->
Êags
 &~
DN_HAVE_MASK
;

1455 
a
.
sch
->
oid
.
subty≥
 = 
DN_SCHED_WF2QP
;

1456 
agaö
;

1459 
	`D
("invalid schedulerÅype %d %s",

1460 
a
.
sch
->
oid
.
subty≥
,á.sch->
«me
);

1461 
îr
 = 
EINVAL
;

1462 
îr‹
;

1465 
a
.
sch
->
oid
.
subty≥
 =á.
Â
->
ty≥
;

1466 
	`bzîo
(
a
.
sch
->
«me
, (a.sch->name));

1467 
	`°æ˝y
(
a
.
sch
->
«me
,á.
Â
->name, (a.sch->name));

1468 i‡(
s
 =
NULL
) {

1469 
	`D
("ˇ¬ŸáŒoˇã scheduÀ∏%d", 
i
);

1470 
îr‹
;

1473 i‡(
p
.
lök_ƒ
) {

1474 
s
->
lök
 = 
p
;

1475 i‡(!
pf
 ||Öf->
lök_ƒ
 !
p
.link_nr) {

1476 
s
->
¥ofûe
 = 
NULL
;

1478 
size_t
 
pf_size
 = (
dn_¥ofûe
) +

1479 
s
->
¥ofûe
->
ßm∂es_no
 * ();

1481 
s
->
¥ofûe
 = 
	`mÆloc
(
pf_size
,

1482 
M_DUMMYNET
, 
M_NOWAIT
 | 
M_ZERO
);

1483 i‡(
s
->
¥ofûe
 =
NULL
) {

1484 
	`D
("cannotállocateÖrofile");

1485 
îr‹
;

1487 
	`bc›y
(
pf
, 
s
->
¥ofûe
, 
pf_size
);

1490 
p
.
lök_ƒ
 = 0;

1491 i‡(
s
->
Â
 =
NULL
) {

1492 
	`DX
(2, "sched %dÇewÅy≥ %s", 
i
, 
a
.
Â
->
«me
);

1493 } i‡(
s
->
Â
 !
a
.fp ||

1494 
	`bcmp
(
a
.
sch
, &
s
->sch, (*a.sch)) ) {

1496 
	`DX
(2, "sched %dÅype changed from %sÅo %s",

1497 
i
, 
s
->
Â
->
«me
, 
a
.fp->name);

1498 
	`DX
(4, "Åype/sub %d/%d -> %d/%d",

1499 
s
->
sch
.
oid
.
ty≥
, s->sch.oid.
subty≥
,

1500 
a
.
sch
->
oid
.
ty≥
,á.sch->oid.
subty≥
);

1501 i‡(
s
->
lök
.
lök_ƒ
 == 0)

1502 
	`D
("XXX WARNINGÜök 0 f‹ sched %d", 
i
);

1503 
p
 = 
s
->
lök
;

1504 i‡(
s
->
¥ofûe
) {

1505 i‡(!
pf
)

1506 
pf
 = 
	`mÆloc
((*pf),

1507 
M_DUMMYNET
, 
M_NOWAIT
 | 
M_ZERO
);

1508 i‡(
pf
)

1509 
	`bc›y
(
s
->
¥ofûe
, 
pf
, (*pf));

1512 
	`dn_ht_föd
(
dn_cfg
.
schedhash
, 
i
, 
DNHT_REMOVE
, 
NULL
);

1516 
	`schk_dñëe_cb
(
s
, (*)
DN_DESTROY
);

1517 
agaö
;

1519 
	`DX
(4, "sched %d unch™gedÅy≥ %s", 
i
, 
a
.
Â
->
«me
);

1522 
s
->
sch
 = *
a
.sch;

1523 
s
->
Â
 = 
a
.fp;

1524 
s
->
cfg
 = 
¨g
;

1529 i‡(!(
s
->
Â
->
Êags
 & 
DN_MULTIQUEUE
Ë&& !s->
fs
) {

1530 
s
->
fs
 = 
	`dn_ht_föd
(
dn_cfg
.
fshash
, 
i
, 0, 
NULL
);

1531 i‡(!
s
->
fs
) {

1532 
dn_fs
 
fs
;

1533 
	`bzîo
(&
fs
, (fs));

1534 
	`£t_oid
(&
fs
.
oid
, 
DN_FS
, (fs));

1535 
fs
.
fs_ƒ
 = 
i
 + 
DN_MAX_ID
;

1536 
fs
.
sched_ƒ
 = 
i
;

1537 
s
->
fs
 = 
	`c⁄fig_fs
(&fs, 
NULL
, 1 );

1539 i‡(!
s
->
fs
) {

1540 
	`schk_dñëe_cb
(
s
, (*)
DN_DESTROY
);

1541 
	`D
("îr‹ cª©ög i¡î«»f†f‹ %d", 
i
);

1542 
îr‹
;

1546 i‡(
s
->
Â
->
c⁄fig
)

1547 
s
->
Â
->
	`c⁄fig
(s);

1548 
	`upd©e_fs
(
s
);

1549 
√xt
:

1550 i‡(
i
 < 
DN_MAX_ID
) {

1551 
i
 +
DN_MAX_ID
;

1552 i‡(
pùe_cmd
) {

1554 
a
.
sch
->
sched_mask
 = 
√w_mask
;

1555 
a
.
sch
->
buckës
 = 
√w_buckës
;

1556 
a
.
sch
->
Êags
 = 
√w_Êags
;

1559 i‡(
	`dn_ht_föd
(
dn_cfg
.
schedhash
, 
i
, 0, &
a
Ë!
NULL
) {

1561 
îr
 = 0;

1562 
îr‹
;

1565 
a
.
sch
->
sched_ƒ
 = 
i
;

1566 
a
.
sch
->
oid
.
subty≥
 = 
DN_SCHED_FIFO
;

1567 
	`bzîo
(
a
.
sch
->
«me
, (a.sch->name));

1568 
agaö
;

1570 
îr
 = 0;

1571 
îr‹
:

1572 
	`DN_BH_WUNLOCK
();

1573 i‡(
pf
)

1574 
	`‰ì
(
pf
, 
M_DUMMYNET
);

1575  
îr
;

1576 
	}
}

1582 
	$c⁄fig_¥ofûe
(
dn_¥ofûe
 *
pf
, 
dn_id
 *
¨g
)

1584 
dn_schk
 *
s
;

1585 
i
, 
ﬁí
, 
îr
 = 0;

1587 i‡(
pf
->
oid
.
Àn
 < (*pf)) {

1588 
	`D
("sh‹à¥ofûêÀ¿%d", 
pf
->
oid
.
Àn
);

1589  
EINVAL
;

1591 
i
 = 
pf
->
lök_ƒ
;

1592 i‡(
i
 <0 || i >
DN_MAX_ID
)

1593  
EINVAL
;

1595 
	`DN_BH_WLOCK
();

1596 ; 
i
 < 2*
DN_MAX_ID
; i += DN_MAX_ID) {

1597 
s
 = 
	`loˇã_scheduÀr
(
i
);

1599 i‡(
s
 =
NULL
) {

1600 
îr
 = 
EINVAL
;

1603 
dn_cfg
.
id
++;

1608 i‡(
s
->
¥ofûe
 && (
pf
->
ßm∂es_no
 == 0 ||

1609 
s
->
¥ofûe
->
oid
.
Àn
 < 
pf
->oid.len)) {

1610 
	`‰ì
(
s
->
¥ofûe
, 
M_DUMMYNET
);

1611 
s
->
¥ofûe
 = 
NULL
;

1613 i‡(
pf
->
ßm∂es_no
 == 0)

1619 i‡(
s
->
¥ofûe
 =
NULL
)

1620 
s
->
¥ofûe
 = 
	`mÆloc
(
pf
->
oid
.
Àn
,

1621 
M_DUMMYNET
, 
M_NOWAIT
 | 
M_ZERO
);

1622 i‡(
s
->
¥ofûe
 =
NULL
) {

1623 
	`D
("nÿmem‹y f‹Örofûê%d", 
i
);

1624 
îr
 = 
ENOMEM
;

1628 
ﬁí
 = 
s
->
¥ofûe
->
oid
.
Àn
;

1629 i‡(
ﬁí
 < 
pf
->
oid
.
Àn
)

1630 
ﬁí
 = 
pf
->
oid
.
Àn
;

1631 
	`bc›y
(
pf
, 
s
->
¥ofûe
,Öf->
oid
.
Àn
);

1632 
s
->
¥ofûe
->
oid
.
Àn
 = 
ﬁí
;

1635 
	`DN_BH_WUNLOCK
();

1636  
îr
;

1637 
	}
}

1643 
	$dummy√t_Êush
()

1647 
	`dn_ht_sˇn
(
dn_cfg
.
schedhash
, 
schk_dñëe_cb
,

1648 (*)(
uöçå_t
)
DN_DELETE_FS
);

1650 
	`DX
(4, "°û»%d u∆öked fs", 
dn_cfg
.
fsk_cou¡
);

1651 
	`dn_ht_‰ì
(
dn_cfg
.
fshash
, 
DNHT_REMOVE
);

1652 
	`fsk_dëach_li°
(&
dn_cfg
.
fsu
, 
DN_DELETE_FS
);

1654 
	`dn_ht_‰ì
(
dn_cfg
.
schedhash
, 
DNHT_REMOVE
);

1656 
	`hóp_öô
(&
dn_cfg
.
evhóp
, 16, 
	`off£tof
(
dn_id
, 
id
));

1657 
	}
}

1668 
	$do_c⁄fig
(*
p
, 
l
)

1670 
dn_id
 *
√xt
, *
o
;

1671 
îr
 = 0, 
îr2
 = 0;

1672 
dn_id
 *
¨g
 = 
NULL
;

1673 
uöçå_t
 *
a
;

1675 
o
 = 
p
;

1676 i‡(
o
->
id
 !
DN_API_VERSION
) {

1677 
	`D
("invalidápi version got %dÇeed %d",

1678 
o
->
id
, 
DN_API_VERSION
);

1679  
EINVAL
;

1681 ; 
l
 >(*
o
); o = 
√xt
) {

1682 
dn_id
 *
¥ev
 = 
¨g
;

1683 i‡(
o
->
Àn
 < (*oË|| 
l
 < o->len) {

1684 
	`D
("badÜí o->À¿%dÜí %d", 
o
->
Àn
, 
l
);

1685 
îr
 = 
EINVAL
;

1688 
l
 -
o
->
Àn
;

1689 
√xt
 = (
dn_id
 *)((*)
o
 + o->
Àn
);

1690 
îr
 = 0;

1691 
o
->
ty≥
) {

1693 
	`D
("cmd %dÇŸ im∂emíãd", 
o
->
ty≥
);

1696 #ifde‡
EMULATE_SYSCTL


1701 
DN_SYSCTL_SET
:

1702 
îr
 = 
	`kesys˘l_emu_£t
(
p
, 
l
);

1703  
îr
;

1706 
DN_CMD_CONFIG
:

1709 
DN_CMD_DELETE
:

1711 
a
 = (
uöçå_t
 *)(
o
+1);

1712 i‡(
o
->
Àn
 < (*oË+ (*
a
)) {

1713 
îr
 = 
EINVAL
;

1716 
o
->
subty≥
) {

1717 
DN_LINK
:

1719 
	`DN_BH_WLOCK
();

1720 
îr
 = 
	`dñëe_schk
(*
a
);

1721 
îr2
 = 
	`dñëe_schk
(*
a
 + 
DN_MAX_ID
);

1722 
	`DN_BH_WUNLOCK
();

1723 i‡(!
îr
)

1724 
îr
 = 
îr2
;

1728 
	`D
("invalid deleteÅype %d",

1729 
o
->
subty≥
);

1730 
îr
 = 
EINVAL
;

1733 
DN_FS
:

1734 
îr
 = (*
a
 <1 || *®>
DN_MAX_ID
) ?

1735 
EINVAL
 : 
	`dñëe_fs
(*
a
, 0) ;

1740 
DN_CMD_FLUSH
:

1741 
	`DN_BH_WLOCK
();

1742 
	`dummy√t_Êush
();

1743 
	`DN_BH_WUNLOCK
();

1745 
DN_TEXT
:

1746 
¥ev
 = 
NULL
;

1747 
¨g
 = 
o
;

1749 
DN_LINK
:

1750 
îr
 = 
	`c⁄fig_lök
((
dn_lök
 *)
o
, 
¨g
);

1752 
DN_PROFILE
:

1753 
îr
 = 
	`c⁄fig_¥ofûe
((
dn_¥ofûe
 *)
o
, 
¨g
);

1755 
DN_SCH
:

1756 
îr
 = 
	`c⁄fig_sched
((
dn_sch
 *)
o
, 
¨g
);

1758 
DN_FS
:

1759 
îr
 = (
NULL
==
	`c⁄fig_fs
((
dn_fs
 *)
o
, 
¨g
, 0));

1762 i‡(
¥ev
)

1763 
¨g
 = 
NULL
;

1764 i‡(
îr
 != 0)

1767  
îr
;

1768 
	}
}

1771 
	$compuã_•a˚
(
dn_id
 *
cmd
, 
c›y_¨gs
 *
a
)

1773 
x
 = 0, 
√ed
 = 0;

1774 
¥ofûe_size
 = (
dn_¥ofûe
);

1800 
cmd
->
subty≥
) {

1807 
DN_LINK
:

1808 
x
 = 
DN_C_LINK
 | 
DN_C_SCH
 | 
DN_C_FLOW
;

1809 
√ed
 +
dn_cfg
.
schk_cou¡
 *

1810 ((
dn_fs
Ë+ 
¥ofûe_size
) / 2;

1811 
√ed
 +
dn_cfg
.
fsk_cou¡
 * (
uöt32_t
);

1813 
DN_SCH
:

1814 
√ed
 +
dn_cfg
.
schk_cou¡
 *

1815 ((
dn_fs
Ë+ 
¥ofûe_size
) / 2;

1816 
√ed
 +
dn_cfg
.
fsk_cou¡
 * (
uöt32_t
);

1817 
x
 = 
DN_C_SCH
 | 
DN_C_LINK
 | 
DN_C_FLOW
;

1819 
DN_FS
:

1820 
x
 = 
DN_C_FS
 | 
DN_C_QUEUE
;

1822 
DN_GET_COMPAT
:

1823 
√ed
 = 
	`dn_com∑t_ˇlc_size
();

1826 
a
->
Êags
 = 
x
;

1827 i‡(
x
 & 
DN_C_SCH
) {

1828 
√ed
 +
dn_cfg
.
schk_cou¡
 * (
dn_sch
) / 2;

1830 
√ed
 +
dn_cfg
.
schk_cou¡
 * (
dn_id
) / 2;

1832 i‡(
x
 & 
DN_C_FS
)

1833 
√ed
 +
dn_cfg
.
fsk_cou¡
 * (
dn_fs
);

1834 i‡(
x
 & 
DN_C_LINK
) {

1835 
√ed
 +
dn_cfg
.
schk_cou¡
 * (
dn_lök
) / 2;

1842 i‡(
x
 & 
DN_C_QUEUE
)

1843 
√ed
 +
dn_cfg
.
queue_cou¡
 * (
dn_Êow
);

1844 i‡(
x
 & 
DN_C_FLOW
)

1845 
√ed
 +
dn_cfg
.
si_cou¡
 * ((
dn_Êow
));

1846  
√ed
;

1847 
	}
}

1854 
	$dummy√t_gë
(
sock›t
 *
s›t
, **
com∑t
)

1856 
have
, 
i
, 
√ed
, 
îr‹
;

1857 *
°¨t
 = 
NULL
, *
buf
;

1858 
size_t
 
s›t_vÆsize
;

1859 
dn_id
 *
cmd
;

1860 
c›y_¨gs
 
a
;

1861 
c›y_ønge
 
r
;

1862 
l
 = (
dn_id
);

1864 
	`bzîo
(&
a
, (a));

1865 
	`bzîo
(&
r
, (r));

1868 
s›t_vÆsize
 = 
s›t
->sopt_valsize;

1870 
cmd
 = &
r
.
o
;

1872 i‡(!
com∑t
) {

1874 
îr‹
 = 
	`so›tc›yö
(
s›t
, 
cmd
, (
r
), (*cmd));

1875 
s›t
->
s›t_vÆsize
 = sopt_valsize;

1876 i‡(
îr‹
)

1877 
d⁄e
;

1878 
l
 = 
cmd
->
Àn
;

1879 #ifde‡
EMULATE_SYSCTL


1881 i‡(
cmd
->
ty≥
 =
DN_SYSCTL_GET
)

1882  
	`kesys˘l_emu_gë
(
s›t
);

1884 i‡(
l
 > (
r
)) {

1886 
cmd
 = 
	`mÆloc
(
l
, 
M_DUMMYNET
, 
M_WAIT
);

1887 i‡(
cmd
 =
NULL
)

1888  
ENOMEM
;

1889 
îr‹
 = 
	`so›tc›yö
(
s›t
, 
cmd
, 
l
,Ü);

1890 
s›t
->
s›t_vÆsize
 = sopt_valsize;

1891 i‡(
îr‹
)

1892 
d⁄e
;

1895 
îr‹
 = 0;

1896 
cmd
->
ty≥
 = 
DN_CMD_GET
;

1897 
cmd
->
Àn
 = (
dn_id
);

1898 
cmd
->
subty≥
 = 
DN_GET_COMPAT
;

1900 
	`D
("compatibility mode");

1902 
a
.
exåa
 = (
c›y_ønge
 *)
cmd
;

1903 i‡(
cmd
->
Àn
 == (*cmd)) {

1904 
uöt32_t
 *
Ω
 = (uöt32_à*)(
cmd
 + 1);

1905 
cmd
->
Àn
 +2* (
uöt32_t
);

1906 
Ω
[0] = 1;

1907 
Ω
[1] = 
DN_MAX_ID
 - 1;

1908 i‡(
cmd
->
subty≥
 =
DN_LINK
) {

1909 
Ω
[0] +
DN_MAX_ID
;

1910 
Ω
[1] +
DN_MAX_ID
;

1917 
have
 = 0, 
i
 = 0; i < 10; i++) {

1918 
	`DN_BH_WLOCK
();

1919 
√ed
 = 
	`compuã_•a˚
(
cmd
, &
a
);

1922 i‡(
l
 > (*
cmd
))

1923 
√ed
 = 
s›t_vÆsize
 - (*
cmd
);

1925 i‡(
√ed
 < 0) {

1926 
	`DN_BH_WUNLOCK
();

1927 
îr‹
 = 
EINVAL
;

1928 
d⁄e
;

1930 
√ed
 +(*
cmd
);

1931 
cmd
->
id
 = 
√ed
;

1932 i‡(
have
 >
√ed
)

1935 
	`DN_BH_WUNLOCK
();

1936 i‡(
°¨t
)

1937 
	`‰ì
(
°¨t
, 
M_DUMMYNET
);

1938 
°¨t
 = 
NULL
;

1939 i‡(
√ed
 > 
s›t_vÆsize
)

1942 
have
 = 
√ed
;

1943 
°¨t
 = 
	`mÆloc
(
have
, 
M_DUMMYNET
, 
M_WAITOK
 | 
M_ZERO
);

1944 i‡(
°¨t
 =
NULL
) {

1945 
îr‹
 = 
ENOMEM
;

1946 
d⁄e
;

1950 i‡(
°¨t
 =
NULL
) {

1951 i‡(
com∑t
) {

1952 *
com∑t
 = 
NULL
;

1953 
îr‹
 = 1;

1955 
îr‹
 = 
	`so›tc›yout
(
s›t
, 
cmd
, (*cmd));

1959 
d⁄e
;

1961 
	`ND
("have %d:%d sched %d, %d:%dÜinks %d, %d:%d flowsets %d, "

1963 
dn_cfg
.
schk_cou¡
, (
dn_sch
), 
DN_SCH
,

1964 
dn_cfg
.
schk_cou¡
, (
dn_lök
), 
DN_LINK
,

1965 
dn_cfg
.
fsk_cou¡
, (
dn_fs
), 
DN_FS
,

1966 
dn_cfg
.
si_cou¡
, (
dn_Êow
), 
DN_SCH_I
,

1967 
dn_cfg
.
queue_cou¡
, (
dn_queue
), 
DN_QUEUE
);

1968 
s›t
->
s›t_vÆsize
 = sopt_valsize;

1969 
a
.
ty≥
 = 
cmd
->
subty≥
;

1971 i‡(
com∑t
 =
NULL
) {

1972 
	`bc›y
(
cmd
, 
°¨t
, (*cmd));

1973 ((
dn_id
*)(
°¨t
))->
Àn
 = (dn_id);

1974 
buf
 = 
°¨t
 + (*
cmd
);

1976 
buf
 = 
°¨t
;

1977 
a
.
°¨t
 = &
buf
;

1978 
a
.
íd
 = 
°¨t
 + 
have
;

1980 i‡(
com∑t
) {

1981 
a
.
ty≥
 = 
DN_COMPAT_PIPE
;

1982 
	`dn_ht_sˇn
(
dn_cfg
.
schedhash
, 
c›y_d©a_hñ≥r_com∑t
, &
a
);

1983 
a
.
ty≥
 = 
DN_COMPAT_QUEUE
;

1984 
	`dn_ht_sˇn
(
dn_cfg
.
fshash
, 
c›y_d©a_hñ≥r_com∑t
, &
a
);

1985 } i‡(
a
.
ty≥
 =
DN_FS
) {

1986 
	`dn_ht_sˇn
(
dn_cfg
.
fshash
, 
c›y_d©a_hñ≥r
, &
a
);

1988 
	`dn_ht_sˇn
(
dn_cfg
.
schedhash
, 
c›y_d©a_hñ≥r
, &
a
);

1990 
	`DN_BH_WUNLOCK
();

1992 i‡(
com∑t
) {

1993 *
com∑t
 = 
°¨t
;

1994 
s›t
->
s›t_vÆsize
 = 
buf
 - 
°¨t
;

1996 
°¨t
 = 
NULL
;

1998 
îr‹
 = 
	`so›tc›yout
(
s›t
, 
°¨t
, 
buf
 - start);

2000 
d⁄e
:

2001 i‡(
cmd
 && cmd !&
r
.
o
)

2002 
	`‰ì
(
cmd
, 
M_DUMMYNET
);

2003 i‡(
°¨t
)

2004 
	`‰ì
(
°¨t
, 
M_DUMMYNET
);

2005  
îr‹
;

2006 
	}
}

2013 
	$døö_scheduÀr_cb
(*
_si
, *
_¨g
)

2015 
dn_sch_ö°
 *
si
 = 
_si
;

2016 *
¨g
 = 
_¨g
;

2017 
em±y
;

2019 i‡–(*
¨g
++Ë> 
dn_cfg
.
expúe_obje˘_examöed
)

2020  
DNHT_SCAN_END
;

2022 i‡((
si
->
kÊags
 & 
DN_ACTIVE
Ë|| si->
dlöe
.
mq
.
hód
 !
NULL
)

2030 i‡(
si
->
ni
.
Àngth
 == 0) {

2034 
em±y
 = (
si
->
sched
->
Â
->
Êags
 & 
DN_MULTIQUEUE
) ?

2035 (
si
->
q_cou¡
 == 0) : 1;

2036 i‡(
em±y
 &&

2037 (
si
->
idÀ_time
 < 
dn_cfg
.
cuº_time
 - dn_cfg.
obje˘_idÀ_tick
))

2038  
	`si_de°roy
(
si
, 
NULL
);

2040 
dn_cfg
.
idÀ_si_waô
++;

2043 
	}
}

2047 
	$døö_scheduÀr_sch_cb
(*
_s
, *
_¨g
)

2049 
dn_schk
 *
s
 = 
_s
;

2050 *
¨g
 = 
_¨g
;

2052 i‡(
s
->
sch
.
Êags
 & 
DN_HAVE_MASK
) {

2053 
	`dn_ht_sˇn_buckë
(
s
->
siht
, &s->
døö_buckë
,

2054 
døö_scheduÀr_cb
, 
_¨g
);

2056 i‡(
s
->
siht
) {

2057 i‡(
	`døö_scheduÀr_cb
(
s
->
siht
, 
_¨g
Ë=
DNHT_SCAN_DEL
)

2058 
s
->
siht
 = 
NULL
;

2061  ( (*
¨g
++Ë> 
dn_cfg
.
expúe_obje˘_examöed
Ë? 
DNHT_SCAN_END
 : 0;

2062 
	}
}

2066 
	$dn_døö_scheduÀr
()

2068 
¨g
 = 0;

2070 
	`dn_ht_sˇn_buckë
(
dn_cfg
.
schedhash
, (*)&dn_cfg.
døö_sch
,

2071 
døö_scheduÀr_sch_cb
, &
¨g
);

2072 
	}
}

2076 
	$døö_queue_cb
(*
_q
, *
_¨g
)

2078 
dn_queue
 *
q
 = 
_q
;

2079 *
¨g
 = 
_¨g
;

2081 i‡–(*
¨g
++Ë> 
dn_cfg
.
expúe_obje˘_examöed
)

2082  
DNHT_SCAN_END
;

2084 i‡(
q
->
ni
.
Àngth
 == 0) {

2085 i‡(
q
->
q_time
 < 
dn_cfg
.
cuº_time
 - dn_cfg.
obje˘_idÀ_tick
) {

2086 i‡(
	`dn_dñëe_queue
(
q
, 
DN_DESTROY
 | 
DN_DEL_SAFE
) == 0)

2087  
DNHT_SCAN_DEL
;

2089 
dn_cfg
.
idÀ_queue_waô
++;

2093 
	}
}

2097 
	$døö_queue_fs_cb
(*
_fs
, *
_¨g
)

2099 
dn_fsk
 *
fs
 = 
_fs
;

2100 *
¨g
 = 
_¨g
;

2102 i‡(
fs
->fs.
Êags
 & 
DN_QHT_HASH
) {

2104 
	`dn_ht_sˇn_buckë
(
fs
->
qht
, &fs->
døö_buckë
,

2105 
døö_queue_cb
, 
_¨g
);

2110 i‡(
fs
->
qht
) {

2111 i‡(
	`døö_queue_cb
(
fs
->
qht
, 
_¨g
Ë=
DNHT_SCAN_DEL
)

2112 
fs
->
qht
 = 
NULL
;

2115  ( (*
¨g
++Ë> 
dn_cfg
.
expúe_obje˘_examöed
Ë? 
DNHT_SCAN_END
 : 0;

2116 
	}
}

2120 
	$dn_døö_queue
()

2122 
¨g
 = 0;

2125 
	`dn_ht_sˇn_buckë
(
dn_cfg
.
fshash
, (*)&dn_cfg.
døö_fs
,

2126 
døö_queue_fs_cb
, &
¨g
);

2127 
	}
}

2133 
	$ù_dn_˘l
(
sock›t
 *
s›t
)

2135 *
p
 = 
NULL
;

2136 
îr‹
, 
l
;

2138 
îr‹
 = 
	`¥iv_check
(
s›t
->
s›t_td
, 
PRIV_NETINET_DUMMYNET
);

2139 i‡(
îr‹
)

2140  (
îr‹
);

2143 i‡(
s›t
->
s›t_dú
 =
SOPT_SET
) {

2144 
îr‹
 = 
	`£cuªÀvñ_ge
(
s›t
->
s›t_td
->
td_u¸ed
, 3);

2145 i‡(
îr‹
)

2146  (
îr‹
);

2149 
s›t
->
s›t_«me
) {

2151 
	`D
("dummy√t: unknow¿›ti⁄ %d", 
s›t
->
s›t_«me
);

2152 
îr‹
 = 
EINVAL
;

2155 
IP_DUMMYNET_FLUSH
:

2156 
IP_DUMMYNET_CONFIGURE
:

2157 
IP_DUMMYNET_DEL
:

2158 
IP_DUMMYNET_GET
:

2159 
	`D
("dummy√t: com∑à›ti⁄ %d", 
s›t
->
s›t_«me
);

2160 
îr‹
 = 
	`ù_dummy√t_com∑t
(
s›t
);

2163 
IP_DUMMYNET3
 :

2164 i‡(
s›t
->
s›t_dú
 =
SOPT_GET
) {

2165 
îr‹
 = 
	`dummy√t_gë
(
s›t
, 
NULL
);

2168 
l
 = 
s›t
->
s›t_vÆsize
;

2169 i‡(
l
 < (
dn_id
) ||Ü > 12000) {

2170 
	`D
("¨gumíàÀ¿%d invÆid", 
l
);

2173 
p
 = 
	`mÆloc
(
l
, 
M_TEMP
, 
M_WAITOK
);

2174 
îr‹
 = 
	`so›tc›yö
(
s›t
, 
p
, 
l
,Ü);

2175 i‡(
îr‹
)

2177 
îr‹
 = 
	`do_c⁄fig
(
p
, 
l
);

2181 i‡(
p
 !
NULL
)

2182 
	`‰ì
(
p
, 
M_TEMP
);

2184  
îr‹
 ;

2185 
	}
}

2189 
	$ù_dn_öô
()

2191 i‡(
dn_cfg
.
öô_d⁄e
)

2193 
	`¥ötf
("DUMMYNET %∞wôh IPv6 inôülized (100409)\n", 
curv√t
);

2194 
dn_cfg
.
öô_d⁄e
 = 1;

2199 
dn_cfg
.
¶Ÿ_limô
 = 100;

2200 
dn_cfg
.
byã_limô
 = 1024 * 1024;

2201 
dn_cfg
.
expúe
 = 1;

2204 
dn_cfg
.
ªd_lookup_dïth
 = 256;

2205 
dn_cfg
.
ªd_avg_pkt_size
 = 512;

2206 
dn_cfg
.
ªd_max_pkt_size
 = 1500;

2209 
dn_cfg
.
max_hash_size
 = 1024;

2211 i‡(
dn_cfg
.
hash_size
 == 0)

2212 
dn_cfg
.
hash_size
 = 64;

2221 
dn_cfg
.
schedhash
 = 
NULL
;

2222 
dn_cfg
.
fshash
 = 
NULL
;

2224 
dn_cfg
.
døö_fs
 = 0;

2225 
dn_cfg
.
døö_sch
 = 0;

2227 i‡(
dn_cfg
.
expúe_obje˘
 == 0)

2228 
dn_cfg
.
expúe_obje˘
 = 50;

2229 i‡(
dn_cfg
.
obje˘_idÀ_tick
 == 0)

2230 
dn_cfg
.
obje˘_idÀ_tick
 = 1000;

2231 i‡(
dn_cfg
.
expúe_obje˘_examöed
 == 0)

2232 
dn_cfg
.
expúe_obje˘_examöed
 = 10;

2233 i‡(
dn_cfg
.
døö_øtio
 == 0)

2234 
dn_cfg
.
døö_øtio
 = 1;

2237 #ifde‡
HAVE_TSC


2238 
dn_cfg
.
cy˛e_èsk_√w
 = dn_cfg.
cy˛e_èsk_ﬁd
 = 
	`ªadTSC
();

2240 
	`hóp_öô
(&
dn_cfg
.
evhóp
, 16, 
	`off£tof
(
dn_id
, 
id
));

2241 
	`SLIST_INIT
(&
dn_cfg
.
fsu
);

2242 
	`SLIST_INIT
(&
dn_cfg
.
schedli°
);

2244 
	`DN_LOCK_INIT
();

2246 
	`TASK_INIT
(&
dn_èsk
, 0, 
dummy√t_èsk
, 
curv√t
);

2247 
dn_tq
 = 
	`èskqueue_¸óã_Á°
("dummy√t", 
M_NOWAIT
,

2248 
èskqueue_thªad_íqueue
, &
dn_tq
);

2249 
	`èskqueue_°¨t_thªads
(&
dn_tq
, 1, 
PI_NET
, "dummynet");

2251 
	`ˇŒout_öô
(&
dn_timeout
, 
CALLOUT_MPSAFE
);

2252 
	`ˇŒout_ª£t_⁄
(&
dn_timeout
, 1, 
dummy√t
, 
NULL
, 0);

2255 
	`gëmi¸ou±ime
(&
dn_cfg
.
¥ev_t
);

2256 
	}
}

2258 #ifde‡
KLD_MODULE


2260 
	$ù_dn_de°roy
(
œ°
)

2262 
	`ˇŒout_døö
(&
dn_timeout
);

2264 
	`DN_BH_WLOCK
();

2265 i‡(
œ°
) {

2266 
	`ND
("%sÑemovingÜast instance\n");

2267 
ù_dn_˘l_±r
 = 
NULL
;

2268 
ù_dn_io_±r
 = 
NULL
;

2271 
	`dummy√t_Êush
();

2272 
	`DN_BH_WUNLOCK
();

2273 
	`èskqueue_døö
(
dn_tq
, &
dn_èsk
);

2274 
	`èskqueue_‰ì
(
dn_tq
);

2276 
	`dn_ht_‰ì
(
dn_cfg
.
schedhash
, 0);

2277 
	`dn_ht_‰ì
(
dn_cfg
.
fshash
, 0);

2278 
	`hóp_‰ì
(&
dn_cfg
.
evhóp
);

2280 
	`DN_LOCK_DESTROY
();

2281 
	}
}

2285 
	$dummy√t_modevít
(
moduÀ_t
 
mod
, 
ty≥
, *
d©a
)

2288 i‡(
ty≥
 =
MOD_LOAD
) {

2289 i‡(
ù_dn_io_±r
) {

2290 
	`¥ötf
("DUMMYNETálreadyÜoaded\n");

2291  
EEXIST
 ;

2293 
	`ù_dn_öô
();

2294 
ù_dn_˘l_±r
 = 
ù_dn_˘l
;

2295 
ù_dn_io_±r
 = 
dummy√t_io
;

2297 } i‡(
ty≥
 =
MOD_UNLOAD
) {

2298 #i‡!
	`deföed
(
KLD_MODULE
)

2299 
	`¥ötf
("dummynet statically compiled, cannot unload\n");

2300  
EINVAL
 ;

2302 
	`ù_dn_de°roy
(1 );

2306  
EOPNOTSUPP
;

2307 
	}
}

2311 
	$lﬂd_dn_sched
(
dn_Æg
 *
d
)

2313 
dn_Æg
 *
s
;

2315 i‡(
d
 =
NULL
)

2317 
	`ù_dn_öô
();

2320 i‡(
d
->
íqueue
 =
NULL
 || d->
dequeue
 == NULL) {

2321 
	`D
("missögÉnqueuê‹ dequeuêf‹ %s", 
d
->
«me
);

2326 
	`DN_BH_WLOCK
();

2327 
	`SLIST_FOREACH
(
s
, &
dn_cfg
.
schedli°
, 
√xt
) {

2328 i‡(
	`°rcmp
(
s
->
«me
, 
d
->name) == 0) {

2329 
	`D
("%†ÆªadyÜﬂded", 
d
->
«me
);

2333 i‡(
s
 =
NULL
)

2334 
	`SLIST_INSERT_HEAD
(&
dn_cfg
.
schedli°
, 
d
, 
√xt
);

2335 
	`DN_BH_WUNLOCK
();

2336 
	`D
("dn_sched %†%¶ﬂded", 
d
->
«me
, 
s
 ? "not ":"");

2337  
s
 ? 1 : 0;

2338 
	}
}

2341 
	$u∆ﬂd_dn_sched
(
dn_Æg
 *
s
)

2343 
dn_Æg
 *
tmp
, *
r
;

2344 
îr
 = 
EINVAL
;

2346 
	`ND
("ˇŒed f‹ %s", 
s
->
«me
);

2348 
	`DN_BH_WLOCK
();

2349 
	`SLIST_FOREACH_SAFE
(
r
, &
dn_cfg
.
schedli°
, 
√xt
, 
tmp
) {

2350 i‡(
	`°rcmp
(
s
->
«me
, 
r
->name) != 0)

2352 
	`D
("ªf_cou¡ = %d", 
r
->
ªf_cou¡
);

2353 
îr
 = (
r
->
ªf_cou¡
 !0Ë? 
EBUSY
 : 0;

2354 i‡(
îr
 == 0)

2355 
	`SLIST_REMOVE
(&
dn_cfg
.
schedli°
, 
r
, 
dn_Æg
, 
√xt
);

2358 
	`DN_BH_WUNLOCK
();

2359 
	`D
("dn_sched %†%su∆ﬂded", 
s
->
«me
, 
îr
 ? "not ":"");

2360  
îr
;

2361 
	}
}

2364 
	$dn_sched_modevít
(
moduÀ_t
 
mod
, 
cmd
, *
¨g
)

2366 
dn_Æg
 *
sch
 = 
¨g
;

2368 i‡(
cmd
 =
MOD_LOAD
)

2369  
	`lﬂd_dn_sched
(
sch
);

2370 i‡(
cmd
 =
MOD_UNLOAD
)

2371  
	`u∆ﬂd_dn_sched
(
sch
);

2373  
EINVAL
;

2374 
	}
}

2376 
moduÀd©a_t
 
	gdummy√t_mod
 = {

2377 "dummy√t", 
dummy√t_modevít
, 
NULL


2380 
	#DN_SI_SUB
 
SI_SUB_PROTO_IFATTACHDOMAIN


	)

2381 
	#DN_MODEV_ORD
 (
SI_ORDER_ANY
 - 128Ë

	)

2382 
DECLARE_MODULE
(
dummy√t
, 
dummy√t_mod
, 
DN_SI_SUB
, 
DN_MODEV_ORD
);

2383 
MODULE_DEPEND
(
dummy√t
, 
ùfw
, 2, 2, 2);

2384 
MODULE_VERSION
(
dummy√t
, 3);

	@kipfw-mod/ip_fw2.c

26 
	~<sys/cdefs.h
>

27 
__FBSDID
("$FreeBSD: head/sys/netinet/ipfw/ip_fw2.c 200601 2009-12-16 10:48:40ZÜuigi $");

33 
	~"›t_ùfw.h
"

34 
	~"›t_ùdivît.h
"

35 
	~"›t_öë.h
"

36 #i‚de‡
INET


39 
	~"›t_öë6.h
"

40 
	~"›t_ù£c.h
"

42 
	~<sys/∑øm.h
>

43 
	~<sys/sy°m.h
>

44 
	~<sys/c⁄dv¨.h
>

45 
	~<sys/evíth™dÀr.h
>

46 
	~<sys/mÆloc.h
>

47 
	~<sys/mbuf.h
>

48 
	~<sys/kî√l.h
>

49 
	~<sys/lock.h
>

50 
	~<sys/jaû.h
>

51 
	~<sys/moduÀ.h
>

52 
	~<sys/¥iv.h
>

53 
	~<sys/¥oc.h
>

54 
	~<sys/rwlock.h
>

55 
	~<sys/sockë.h
>

56 
	~<sys/sockëv¨.h
>

57 
	~<sys/sys˘l.h
>

58 
	~<sys/sy¶og.h
>

59 
	~<sys/u¸ed.h
>

60 
	~<√t/ëhî√t.h
>

61 
	~<√t/if.h
>

62 
	~<√t/rouã.h
>

63 
	~<√t/pf_mèg.h
>

64 
	~<√t/v√t.h
>

66 
	~<√töë/ö.h
>

67 
	~<√töë/ö_v¨.h
>

68 
	~<√töë/ö_pcb.h
>

69 
	~<√töë/ù.h
>

70 
	~<√töë/ù_v¨.h
>

71 
	~<√töë/ù_icmp.h
>

72 
	~<√töë/ù_fw.h
>

73 
	~<√töë/ùfw/ù_fw_¥iv©e.h
>

74 
	~<√töë/ù_ˇΩ.h
>

75 
	~<√töë/pim.h
>

76 
	~<√töë/t˝_v¨.h
>

77 
	~<√töë/udp.h
>

78 
	~<√töë/udp_v¨.h
>

79 
	~<√töë/s˘p.h
>

81 
	~<√töë/ù6.h
>

82 
	~<√töë/icmp6.h
>

83 #ifde‡
INET6


84 
	~<√töë6/ö6_pcb.h
>

85 
	~<√töë6/sc›e6_v¨.h
>

86 
	~<√töë6/ù6_v¨.h
>

89 
	~<machöe/ö_cksum.h
>

91 #ifde‡
MAC


92 
	~<£curôy/mac/mac_‰amew‹k.h
>

101 
VNET_DEFINE
(, 
ùfw_v√t_ªady
) = 0;

102 
	#V_ùfw_v√t_ªady
 
	`VNET
(
ùfw_v√t_ªady
)

	)

104 
VNET_DEFINE
(, 
fw_díy_unknown_exthdrs
);

105 
	#V_fw_díy_unknown_exthdrs
 
	`VNET
(
fw_díy_unknown_exthdrs
)

	)

107 #ifde‡
IPFIREWALL_DEFAULT_TO_ACCEPT


108 
	gdeÁu…_to_ac˚±
 = 1;

110 
	gdeÁu…_to_ac˚±
;

113 
VNET_DEFINE
(, 
autoöc_°ï
);

124 
VNET_DEFINE
(
u_öt32_t
, 
£t_dißbÀ
);

125 
	#V_£t_dißbÀ
 
	`VNET
(
£t_dißbÀ
)

	)

127 
VNET_DEFINE
(, 
fw_vîbo£
);

129 
VNET_DEFINE
(
u_öt64_t
, 
n‹uÀ_cou¡î
);

130 
VNET_DEFINE
(, 
vîbo£_limô
);

133 
VNET_DEFINE
(
ù_fw_chaö
, 
œyî3_chaö
);

135 
ùfw_«t_t
 *
	gùfw_«t_±r
 = 
NULL
;

136 
	gcfg_«t
 *(*
	glookup_«t_±r
)(
	g«t_li°
 *, );

137 
ùfw_«t_cfg_t
 *
	gùfw_«t_cfg_±r
;

138 
ùfw_«t_cfg_t
 *
	gùfw_«t_dñ_±r
;

139 
ùfw_«t_cfg_t
 *
	gùfw_«t_gë_cfg_±r
;

140 
ùfw_«t_cfg_t
 *
	gùfw_«t_gë_log_±r
;

142 #ifde‡
SYSCTL_NODE


143 
uöt32_t
 
	gdummy_def
 = 
IPFW_DEFAULT_RULE
;

144 
uöt32_t
 
	gdummy_èbÀs_max
 = 
IPFW_TABLES_MAX
;

146 
	$SYSBEGIN
(
f3
)

148 
	`SYSCTL_NODE
(
_√t_öë_ù
, 
OID_AUTO
, 
fw
, 
CTLFLAG_RW
, 0, "Firewall");

149 
	`SYSCTL_VNET_INT
(
_√t_öë_ù_fw
, 
OID_AUTO
, 
⁄e_∑ss
,

150 
CTLFLAG_RW
 | 
CTLFLAG_SECURE3
, &
	`VNET_NAME
(
fw_⁄e_∑ss
), 0,

152 
	`SYSCTL_VNET_INT
(
_√t_öë_ù_fw
, 
OID_AUTO
, 
autoöc_°ï
,

153 
CTLFLAG_RW
, &
	`VNET_NAME
(
autoöc_°ï
), 0,

155 
	`SYSCTL_VNET_INT
(
_√t_öë_ù_fw
, 
OID_AUTO
, 
vîbo£
,

156 
CTLFLAG_RW
 | 
CTLFLAG_SECURE3
, &
	`VNET_NAME
(
fw_vîbo£
), 0,

158 
	`SYSCTL_VNET_INT
(
_√t_öë_ù_fw
, 
OID_AUTO
, 
vîbo£_limô
,

159 
CTLFLAG_RW
, &
	`VNET_NAME
(
vîbo£_limô
), 0,

161 
	`SYSCTL_UINT
(
_√t_öë_ù_fw
, 
OID_AUTO
, 
deÁu…_ruÀ
, 
CTLFLAG_RD
,

162 &
dummy_def
, 0,

164 
	`SYSCTL_UINT
(
_√t_öë_ù_fw
, 
OID_AUTO
, 
èbÀs_max
, 
CTLFLAG_RD
,

165 &
dummy_èbÀs_max
, 0,

167 
	`SYSCTL_INT
(
_√t_öë_ù_fw
, 
OID_AUTO
, 
deÁu…_to_ac˚±
, 
CTLFLAG_RDTUN
,

168 &
deÁu…_to_ac˚±
, 0,

170 
	`TUNABLE_INT
("√t.öë.ù.fw.deÁu…_to_ac˚±", &
deÁu…_to_ac˚±
);

171 
	`SYSCTL_VNET_INT
(
_√t_öë_ù_fw
, 
OID_AUTO
, 
°©ic_cou¡
,

172 
CTLFLAG_RD
, &
	`VNET_NAME
(
œyî3_chaö
.
n_ruÀs
), 0,

175 #ifde‡
INET6


176 
	`SYSCTL_DECL
(
_√t_öë6_ù6
);

177 
	`SYSCTL_NODE
(
_√t_öë6_ù6
, 
OID_AUTO
, 
fw
, 
CTLFLAG_RW
, 0, "Firewall");

178 
	`SYSCTL_VNET_INT
(
_√t_öë6_ù6_fw
, 
OID_AUTO
, 
díy_unknown_exthdrs
,

179 
CTLFLAG_RW
 | 
CTLFLAG_SECURE
, &
	`VNET_NAME
(
fw_díy_unknown_exthdrs
), 0,

183 
SYSEND


193 
	#L3HDR
(
T
, 
ù
Ë((T *)((
u_öt32_t
 *)(ùË+ (ù)->
ù_hl
))

	)

194 
	#TCP
(
p
Ë((
t˝hdr
 *)’))

	)

195 
	#SCTP
(
p
Ë((
s˘phdr
 *)’))

	)

196 
	#UDP
(
p
Ë((
udphdr
 *)’))

	)

197 
	#ICMP
(
p
Ë((
icmphdr
 *)’))

	)

198 
	#ICMP6
(
p
Ë((
icmp6_hdr
 *)’))

	)

200 
__ölöe
 

201 
	$icm±y≥_m©ch
(
icmphdr
 *
icmp
, 
ùfw_ö¢_u32
 *
cmd
)

203 
ty≥
 = 
icmp
->
icmp_ty≥
;

205  (
ty≥
 <
ICMP_MAXTYPE
 && (
cmd
->
d
[0] & (1<<type)) );

206 
	}
}

208 
	#TT
 ( (1 << 
ICMP_ECHO
Ë| (1 << 
ICMP_ROUTERSOLICIT
) | \

209 (1 << 
ICMP_TSTAMP
Ë| (1 << 
ICMP_IREQ
Ë| (1 << 
ICMP_MASKREQ
Ë)

	)

212 
	$is_icmp_quîy
(
icmphdr
 *
icmp
)

214 
ty≥
 = 
icmp
->
icmp_ty≥
;

216  (
ty≥
 <
ICMP_MAXTYPE
 && (
TT
 & (1<<type)) );

217 
	}
}

218 #unde‡
TT


233 
	$Êags_m©ch
(
ùfw_ö¢
 *
cmd
, 
u_öt8_t
 
bôs
)

235 
u_ch¨
 
w™t_˛ór
;

236 
bôs
 = ~bits;

238 i‡–((
cmd
->
¨g1
 & 0xffË& 
bôs
) != 0)

240 
w™t_˛ór
 = (
cmd
->
¨g1
 >> 8) & 0xff;

241 i‡–(
w™t_˛ór
 & 
bôs
) != want_clear)

244 
	}
}

247 
	$ù›ts_m©ch
(
ù
 *ù, 
ùfw_ö¢
 *
cmd
)

249 
›éí
, 
bôs
 = 0;

250 
u_ch¨
 *
˝
 = (u_ch¨ *)(
ù
 + 1);

251 
x
 = (
ù
->
ù_hl
 << 2) -  (ip);

253 ; 
x
 > 0; x -
›éí
, 
˝
 += optlen) {

254 
›t
 = 
˝
[
IPOPT_OPTVAL
];

256 i‡(
›t
 =
IPOPT_EOL
)

258 i‡(
›t
 =
IPOPT_NOP
)

259 
›éí
 = 1;

261 
›éí
 = 
˝
[
IPOPT_OLEN
];

262 i‡(
›éí
 <0 || o±À¿> 
x
)

265 
›t
) {

270 
IPOPT_LSRR
:

271 
bôs
 |
IP_FW_IPOPT_LSRR
;

274 
IPOPT_SSRR
:

275 
bôs
 |
IP_FW_IPOPT_SSRR
;

278 
IPOPT_RR
:

279 
bôs
 |
IP_FW_IPOPT_RR
;

282 
IPOPT_TS
:

283 
bôs
 |
IP_FW_IPOPT_TS
;

287  (
	`Êags_m©ch
(
cmd
, 
bôs
));

288 
	}
}

291 
	$t˝›ts_m©ch
(
t˝hdr
 *
t˝
, 
ùfw_ö¢
 *
cmd
)

293 
›éí
, 
bôs
 = 0;

294 
u_ch¨
 *
˝
 = (u_ch¨ *)(
t˝
 + 1);

295 
x
 = (
t˝
->
th_off
 << 2Ë- (
t˝hdr
);

297 ; 
x
 > 0; x -
›éí
, 
˝
 += optlen) {

298 
›t
 = 
˝
[0];

299 i‡(
›t
 =
TCPOPT_EOL
)

301 i‡(
›t
 =
TCPOPT_NOP
)

302 
›éí
 = 1;

304 
›éí
 = 
˝
[1];

305 i‡(
›éí
 <= 0)

309 
›t
) {

314 
TCPOPT_MAXSEG
:

315 
bôs
 |
IP_FW_TCPOPT_MSS
;

318 
TCPOPT_WINDOW
:

319 
bôs
 |
IP_FW_TCPOPT_WINDOW
;

322 
TCPOPT_SACK_PERMITTED
:

323 
TCPOPT_SACK
:

324 
bôs
 |
IP_FW_TCPOPT_SACK
;

327 
TCPOPT_TIMESTAMP
:

328 
bôs
 |
IP_FW_TCPOPT_TS
;

333  (
	`Êags_m©ch
(
cmd
, 
bôs
));

334 
	}
}

337 
	$iÁ˚_m©ch
(
i‚ë
 *
iÂ
, 
ùfw_ö¢_if
 *
cmd
)

339 i‡(
iÂ
 =
NULL
)

342 i‡(
cmd
->
«me
[0] != '\0') {

344 i‡(
cmd
->
p
.
glob
) {

345 i‡(
	`‚m©ch
(
cmd
->
«me
, 
iÂ
->
if_x«me
, 0) == 0)

348 i‡(
	`°∫cmp
(
iÂ
->
if_x«me
, 
cmd
->
«me
, 
IFNAMSIZ
) == 0)

352 #ifde‡
__FªeBSD__


353 
iÁddr
 *
ü
;

355 
	`if_addr_æock
(
iÂ
);

356 
	`TAILQ_FOREACH
(
ü
, &
iÂ
->
if_addrhód
, 
iÁ_lök
) {

357 i‡(
ü
->
iÁ_addr
->
ß_Ámûy
 !
AF_INET
)

359 i‡(
cmd
->
p
.
ù
.
s_addr
 =((
sockaddr_ö
 *)

360 (
ü
->
iÁ_addr
))->
sö_addr
.
s_addr
) {

361 
	`if_addr_ru∆ock
(
iÂ
);

365 
	`if_addr_ru∆ock
(
iÂ
);

369 
	}
}

393 
	$vîify_∑th
(
ö_addr
 
§c
, 
i‚ë
 *
iÂ
, 
u_öt
 
fib
)

395 #i‚de‡
__FªeBSD__


398 
rouã
 
ro
;

399 
sockaddr_ö
 *
d°
;

401 
	`bzîo
(&
ro
, (ro));

403 
d°
 = (
sockaddr_ö
 *)&(
ro
.
ro_d°
);

404 
d°
->
sö_Ámûy
 = 
AF_INET
;

405 
d°
->
sö_Àn
 = (*dst);

406 
d°
->
sö_addr
 = 
§c
;

407 
	`ö_πÆloc_ign
(&
ro
, 0, 
fib
);

409 i‡(
ro
.
ro_π
 =
NULL
)

419 i‡(
iÂ
 !
NULL
 && 
ro
.
ro_π
->
π_iÁ
->
iÁ_iÂ
 != ifp) {

420 
	`RTFREE
(
ro
.
ro_π
);

425 i‡(
iÂ
 =
NULL
 &&

426 
	`ßtosö
(
	`π_key
(
ro
.
ro_π
))->
sö_addr
.
s_addr
 =
INADDR_ANY
) {

427 
	`RTFREE
(
ro
.
ro_π
);

432 i‡(
iÂ
 =
NULL
 && 
ro
.
ro_π
->
π_Êags
 & (
RTF_REJECT
|
RTF_BLACKHOLE
)) {

433 
	`RTFREE
(
ro
.
ro_π
);

438 
	`RTFREE
(
ro
.
ro_π
);

441 
	}
}

443 #ifde‡
INET6


447 
__ölöe
 

448 
	$icmp6ty≥_m©ch
 (
ty≥
, 
ùfw_ö¢_u32
 *
cmd
)

450  (
ty≥
 <
ICMP6_MAXTYPE
 && (
cmd
->
d
[type/32] & (1<<(type%32)) ) );

451 
	}
}

454 
	$Êow6id_m©ch
–
cuº_Êow
, 
ùfw_ö¢_u32
 *
cmd
 )

456 
i
;

457 
i
=0; i <
cmd
->
o
.
¨g1
; ++i )

458 i‡(
cuº_Êow
 =
cmd
->
d
[
i
] )

461 
	}
}

465 
	$£¨ch_ù6_addr_√t
 (
ö6_addr
 * 
ù6_addr
)

467 
i‚ë
 *
mdc
;

468 
iÁddr
 *
mdc2
;

469 
ö6_iÁddr
 *
fdm
;

470 
ö6_addr
 
c›ü
;

472 
	`TAILQ_FOREACH
(
mdc
, &
V_i‚ë
, 
if_lök
) {

473 
	`if_addr_æock
(
mdc
);

474 
	`TAILQ_FOREACH
(
mdc2
, &
mdc
->
if_addrhód
, 
iÁ_lök
) {

475 i‡(
mdc2
->
iÁ_addr
->
ß_Ámûy
 =
AF_INET6
) {

476 
fdm
 = (
ö6_iÁddr
 *)
mdc2
;

477 
c›ü
 = 
fdm
->
ü_addr
.
sö6_addr
;

479 
	`ö6_˛órsc›e
(&
c›ü
);

480 i‡(
	`IN6_ARE_ADDR_EQUAL
(
ù6_addr
, &
c›ü
)) {

481 
	`if_addr_ru∆ock
(
mdc
);

486 
	`if_addr_ru∆ock
(
mdc
);

489 
	}
}

492 
	$vîify_∑th6
(
ö6_addr
 *
§c
, 
i‚ë
 *
iÂ
)

494 
rouã_ö6
 
ro
;

495 
sockaddr_ö6
 *
d°
;

497 
	`bzîo
(&
ro
, (ro));

499 
d°
 = (
sockaddr_ö6
 * )&(
ro
.
ro_d°
);

500 
d°
->
sö6_Ámûy
 = 
AF_INET6
;

501 
d°
->
sö6_Àn
 = (*dst);

502 
d°
->
sö6_addr
 = *
§c
;

504 
	`πÆloc_ign
((
rouã
 *)&
ro
, 0);

506 i‡(
ro
.
ro_π
 =
NULL
)

516 i‡(
iÂ
 !
NULL
 && 
ro
.
ro_π
->
π_iÁ
->
iÁ_iÂ
 != ifp) {

517 
	`RTFREE
(
ro
.
ro_π
);

522 i‡(
iÂ
 =
NULL
 &&

523 
	`IN6_IS_ADDR_UNSPECIFIED
(&
	`ßtosö6
(
	`π_key
(
ro
.
ro_π
))->
sö6_addr
)) {

524 
	`RTFREE
(
ro
.
ro_π
);

529 i‡(
iÂ
 =
NULL
 && 
ro
.
ro_π
->
π_Êags
 & (
RTF_REJECT
|
RTF_BLACKHOLE
)) {

530 
	`RTFREE
(
ro
.
ro_π
);

535 
	`RTFREE
(
ro
.
ro_π
);

538 
	}
}

541 
	$is_icmp6_quîy
(
icmp6_ty≥
)

543 i‡((
icmp6_ty≥
 <
ICMP6_MAXTYPE
) &&

544 (
icmp6_ty≥
 =
ICMP6_ECHO_REQUEST
 ||

545 
icmp6_ty≥
 =
ICMP6_MEMBERSHIP_QUERY
 ||

546 
icmp6_ty≥
 =
ICMP6_WRUREQUEST
 ||

547 
icmp6_ty≥
 =
ICMP6_FQDN_QUERY
 ||

548 
icmp6_ty≥
 =
ICMP6_NI_QUERY
))

552 
	}
}

555 
	$£nd_ªje˘6
(
ù_fw_¨gs
 *
¨gs
, 
code
, 
u_öt
 
hÀn
, 
ù6_hdr
 *
ù6
)

557 
mbuf
 *
m
;

559 
m
 = 
¨gs
->m;

560 i‡(
code
 =
ICMP6_UNREACH_RST
 && 
¨gs
->
f_id
.
¥Ÿo
 =
IPPROTO_TCP
) {

561 
t˝hdr
 *
t˝
;

562 
t˝
 = (
t˝hdr
 *)((*)
ù6
 + 
hÀn
);

564 i‡((
t˝
->
th_Êags
 & 
TH_RST
) == 0) {

565 
mbuf
 *
m0
;

566 
m0
 = 
	`ùfw_£nd_pkt
(
¨gs
->
m
, &◊rgs->
f_id
),

567 
	`¡ohl
(
t˝
->
th_£q
),Çtohl—˝->
th_ack
),

568 
t˝
->
th_Êags
 | 
TH_RST
);

569 i‡(
m0
 !
NULL
)

570 
	`ù6_ouçut
(
m0
, 
NULL
, NULL, 0, NULL, NULL,

571 
NULL
);

573 
	`FREE_PKT
(
m
);

574 } i‡(
code
 !
ICMP6_UNREACH_RST
) {

584 i‡(
¨gs
->
L3off£t
)

585 
	`m_adj
(
m
, 
¨gs
->
L3off£t
);

587 
	`icmp6_îr‹
(
m
, 
ICMP6_DST_UNREACH
, 
code
, 0);

589 
	`FREE_PKT
(
m
);

591 
¨gs
->
m
 = 
NULL
;

592 
	}
}

601 
	$£nd_ªje˘
(
ù_fw_¨gs
 *
¨gs
, 
code
, 
ùÀn
, 
ù
 *ip)

607 * 
The
 
mbuf
 
wûl
 
howevî
 
be
 
thrown
 
away
 
so
 
we
 
ˇn
 
adju°
 
ô
.

608 * 
Remembî
 
we
 
did
 
™
 
m_puŒup
 
⁄
 
ô
 
Æªady
 
so
 we

609 * 
ˇn
 
make
 
some
 
assum±i⁄s
 
about
 
c⁄tiguou¢ess
.

611 i‡(
¨gs
->
L3off£t
)

612 
	`m_adj
(
m
, 
¨gs
->
L3off£t
);

614 i‡(
code
 !
ICMP_REJECT_RST
) {

616 
	`SET_HOST_IPLEN
(
ù
);

617 
	`icmp_îr‹
(
¨gs
->
m
, 
ICMP_UNREACH
, 
code
, 0L, 0);

618 } i‡(
¨gs
->
f_id
.
¥Ÿo
 =
IPPROTO_TCP
) {

619 
t˝hdr
 *c⁄° 
t˝
 =

620 
	`L3HDR
(
t˝hdr
, 
	`mtod
(
¨gs
->
m
, 
ù
 *));

621 i‡–(
t˝
->
th_Êags
 & 
TH_RST
) == 0) {

622 
mbuf
 *
m
;

623 
m
 = 
	`ùfw_£nd_pkt
(
¨gs
->m, &◊rgs->
f_id
),

624 
	`¡ohl
(
t˝
->
th_£q
),Çtohl—˝->
th_ack
),

625 
t˝
->
th_Êags
 | 
TH_RST
);

626 i‡(
m
 !
NULL
)

627 
	`ù_ouçut
(
m
, 
NULL
, NULL, 0, NULL, NULL);

629 
	`FREE_PKT
(
¨gs
->
m
);

631 
	`FREE_PKT
(
¨gs
->
m
);

632 
¨gs
->
m
 = 
NULL
;

633 
	}
}

646 
	$check_uidgid
(
ùfw_ö¢_u32
 *
ö¢
, 
¥Ÿo
, 
i‚ë
 *
oif
,

647 
ö_addr
 
d°_ù
, 
u_öt16_t
 
d°_p‹t
, ö_add∏
§c_ù
,

648 
u_öt16_t
 
§c_p‹t
, *
ugid_lookuµ
,

649 
u¸ed
 **
uc
, 
öpcb
 *
öp
)

651 #i‚de‡
__FªeBSD__


652  
	`¸ed_check
(
ö¢
, 
¥Ÿo
, 
oif
,

653 
d°_ù
, 
d°_p‹t
, 
§c_ù
, 
§c_p‹t
,

654 (
bsd_u¸ed
 *)
uc
, 
ugid_lookuµ
, ((
mbuf
 *)
öp
)->
m_skb
);

656 
öpcböfo
 *
pi
;

657 
wûdˇrd
;

658 
öpcb
 *
pcb
;

659 
m©ch
;

666 i‡(
öp
 && *
ugid_lookuµ
 == 0) {

667 
	`INP_LOCK_ASSERT
(
öp
);

668 i‡(
öp
->
öp_sockë
 !
NULL
) {

669 *
uc
 = 
	`¸hﬁd
(
öp
->
öp_¸ed
);

670 *
ugid_lookuµ
 = 1;

672 *
ugid_lookuµ
 = -1;

679 i‡(*
ugid_lookuµ
 == -1)

681 i‡(
¥Ÿo
 =
IPPROTO_TCP
) {

682 
wûdˇrd
 = 0;

683 
pi
 = &
V_tcböfo
;

684 } i‡(
¥Ÿo
 =
IPPROTO_UDP
) {

685 
wûdˇrd
 = 
INPLOOKUP_WILDCARD
;

686 
pi
 = &
V_udböfo
;

689 
m©ch
 = 0;

690 i‡(*
ugid_lookuµ
 == 0) {

691 
	`INP_INFO_RLOCK
(
pi
);

692 
pcb
 = (
oif
) ?

693 
	`ö_pcblookup_hash
(
pi
,

694 
d°_ù
, 
	`ht⁄s
(
d°_p‹t
),

695 
§c_ù
, 
	`ht⁄s
(
§c_p‹t
),

696 
wûdˇrd
, 
oif
) :

697 
	`ö_pcblookup_hash
(
pi
,

698 
§c_ù
, 
	`ht⁄s
(
§c_p‹t
),

699 
d°_ù
, 
	`ht⁄s
(
d°_p‹t
),

700 
wûdˇrd
, 
NULL
);

701 i‡(
pcb
 !
NULL
) {

702 *
uc
 = 
	`¸hﬁd
(
pcb
->
öp_¸ed
);

703 *
ugid_lookuµ
 = 1;

705 
	`INP_INFO_RUNLOCK
(
pi
);

706 i‡(*
ugid_lookuµ
 == 0) {

711 *
ugid_lookuµ
 = -1;

715 i‡(
ö¢
->
o
.
›code
 =
O_UID
)

716 
m©ch
 = ((*
uc
)->
¸_uid
 =(
uid_t
)
ö¢
->
d
[0]);

717 i‡(
ö¢
->
o
.
›code
 =
O_GID
)

718 
m©ch
 = 
	`groupmembî
((
gid_t
)
ö¢
->
d
[0], *
uc
);

719 i‡(
ö¢
->
o
.
›code
 =
O_JAIL
)

720 
m©ch
 = ((*
uc
)->
¸_¥is⁄
->
¥_id
 =()
ö¢
->
d
[0]);

721  
m©ch
;

723 
	}
}

730 
ölöe
 

731 
	$£t_m©ch
(
ù_fw_¨gs
 *
¨gs
, 
¶Ÿ
,

732 
ù_fw_chaö
 *
chaö
)

734 
¨gs
->
ruÀ
.
chaö_id
 = 
chaö
->
id
;

735 
¨gs
->
ruÀ
.
¶Ÿ
 = slot + 1;

736 
¨gs
->
ruÀ
.
ruÀ_id
 = 1 + 
chaö
->
m≠
[
¶Ÿ
]->
id
;

737 
¨gs
->
ruÀ
.
ruÀnum
 = 
chaö
->
m≠
[
¶Ÿ
]->rulenum;

738 
	}
}

777 
	$ùfw_chk
(
ù_fw_¨gs
 *
¨gs
)

804 
mbuf
 *
m
 = 
¨gs
->m;

805 
ù
 *ù = 
	`mtod
(
m
, ip *);

814 #i‚de‡
__FªeBSD__


815 
bsd_u¸ed
 
u¸ed_ˇche
;

817 
u¸ed
 *
u¸ed_ˇche
 = 
NULL
;

819 
u¸ed_lookup
 = 0;

827 
i‚ë
 *
oif
 = 
¨gs
->oif;

829 
f_pos
 = 0;

830 
ªtvÆ
 = 0;

835 
u_öt
 
hÀn
 = 0;

848 
u_sh‹t
 
off£t
 = 0;

864 
uöt8_t
 
¥Ÿo
;

865 
uöt16_t
 
§c_p‹t
 = 0, 
d°_p‹t
 = 0;

866 
ö_addr
 
§c_ù
, 
d°_ù
;

867 
uöt16_t
 
ùÀn
=0;

868 
pkéí
;

869 
uöt16_t
 
ëy≥
 = 0;

876 
dyn_dú
 = 
MATCH_UNKNOWN
;

877 
ùfw_dyn_ruÀ
 *
q
 = 
NULL
;

878 
ù_fw_chaö
 *
chaö
 = &
V_œyî3_chaö
;

886 *
uÕ
 = 
NULL
;

889 
is_ùv6
 = 0;

890 
uöt8_t
 
icmp6_ty≥
 = 0;

891 
uöt16_t
 
ext_hd
 = 0;

894 
is_ùv4
 = 0;

896 
d⁄e
 = 0;

898 i‡(
m
->
m_Êags
 & 
M_SKIP_FIREWALL
 || (! 
V_ùfw_v√t_ªady
))

899  (
IP_FW_PASS
);

901 
d°_ù
.
s_addr
 = 0;

902 
§c_ù
.
s_addr
 = 0;

903 
pkéí
 = 
m
->
m_pkthdr
.
Àn
;

904 
¨gs
->
f_id
.
fib
 = 
	`M_GETFIB
(
m
);

905 
¥Ÿo
 = 
¨gs
->
f_id
.proto = 0;

914 
	#PULLUP_TO
(
_Àn
, 
p
, 
T
) \

916 
x
 = (
_Àn
Ë+ (
T
); \

917 i‡((
m
)->
m_Àn
 < 
x
) { \

918 
¨gs
->
m
 = m = 
	`m_puŒup
(m, 
x
); \

919 i‡(
m
 =
NULL
) \

920 
puŒup_Áûed
; \

922 
p
 = (
	`mtod
(
m
, *Ë+ (
_Àn
)); \

923 } 0)

	)

928 i‡(
¨gs
->
eh
)

929 
ëy≥
 = 
	`¡ohs
(
¨gs
->
eh
->
ëhî_ty≥
);

932 i‡(
pkéí
 >(
ù6_hdr
) &&

933 (
¨gs
->
eh
 =
NULL
 || 
ëy≥
 =
ETHERTYPE_IPV6
Ë&& 
ù
->
ù_v
 == 6) {

934 
ù6_hdr
 *
ù6
 = (ù6_hd∏*)
ù
;

935 
is_ùv6
 = 1;

936 
¨gs
->
f_id
.
addr_ty≥
 = 6;

937 
hÀn
 = (
ù6_hdr
);

938 
¥Ÿo
 = 
ù6
->
ù6_nxt
;

941 
uÕ
 =
NULL
) {

942 
¥Ÿo
) {

943 
IPPROTO_ICMPV6
:

944 
	`PULLUP_TO
(
hÀn
, 
uÕ
, 
icmp6_hdr
);

945 
icmp6_ty≥
 = 
	`ICMP6
(
uÕ
)->icmp6_type;

948 
IPPROTO_TCP
:

949 
	`PULLUP_TO
(
hÀn
, 
uÕ
, 
t˝hdr
);

950 
d°_p‹t
 = 
	`TCP
(
uÕ
)->
th_dp‹t
;

951 
§c_p‹t
 = 
	`TCP
(
uÕ
)->
th_•‹t
;

953 
¨gs
->
f_id
.
_Êags
 = 
	`TCP
(
uÕ
)->
th_Êags
;

956 
IPPROTO_SCTP
:

957 
	`PULLUP_TO
(
hÀn
, 
uÕ
, 
s˘phdr
);

958 
§c_p‹t
 = 
	`SCTP
(
uÕ
)->src_port;

959 
d°_p‹t
 = 
	`SCTP
(
uÕ
)->
de°_p‹t
;

962 
IPPROTO_UDP
:

963 
	`PULLUP_TO
(
hÀn
, 
uÕ
, 
udphdr
);

964 
d°_p‹t
 = 
	`UDP
(
uÕ
)->
uh_dp‹t
;

965 
§c_p‹t
 = 
	`UDP
(
uÕ
)->
uh_•‹t
;

968 
IPPROTO_HOPOPTS
:

969 
	`PULLUP_TO
(
hÀn
, 
uÕ
, 
ù6_hbh
);

970 
ext_hd
 |
EXT_HOPOPTS
;

971 
hÀn
 +(((
ù6_hbh
 *)
uÕ
)->
ù6h_Àn
 + 1) << 3;

972 
¥Ÿo
 = ((
ù6_hbh
 *)
uÕ
)->
ù6h_nxt
;

973 
uÕ
 = 
NULL
;

976 
IPPROTO_ROUTING
:

977 
	`PULLUP_TO
(
hÀn
, 
uÕ
, 
ù6_πhdr
);

978 ((
ù6_πhdr
 *)
uÕ
)->
ù6r_ty≥
) {

980 
ext_hd
 |
EXT_RTHDR0
;

983 
ext_hd
 |
EXT_RTHDR2
;

986 
	`¥ötf
("IPFW2: IPV6 - Unknown Routing "

988 ((
ù6_πhdr
 *)
uÕ
)->
ù6r_ty≥
);

989 i‡(
V_fw_díy_unknown_exthdrs
)

990  (
IP_FW_DENY
);

993 
ext_hd
 |
EXT_ROUTING
;

994 
hÀn
 +(((
ù6_πhdr
 *)
uÕ
)->
ù6r_Àn
 + 1) << 3;

995 
¥Ÿo
 = ((
ù6_πhdr
 *)
uÕ
)->
ù6r_nxt
;

996 
uÕ
 = 
NULL
;

999 
IPPROTO_FRAGMENT
:

1000 
	`PULLUP_TO
(
hÀn
, 
uÕ
, 
ù6_‰ag
);

1001 
ext_hd
 |
EXT_FRAGMENT
;

1002 
hÀn
 + (
ù6_‰ag
);

1003 
¥Ÿo
 = ((
ù6_‰ag
 *)
uÕ
)->
ù6f_nxt
;

1004 
off£t
 = ((
ù6_‰ag
 *)
uÕ
)->
ù6f_ofÊg
 &

1005 
IP6F_OFF_MASK
;

1008 
off£t
 |((
ù6_‰ag
 *)
uÕ
)->
ù6f_ofÊg
 &

1009 
IP6F_MORE_FRAG
;

1010 i‡(
off£t
 == 0) {

1011 
	`¥ötf
("IPFW2: IPV6 - Invalid Fragment "

1013 i‡(
V_fw_díy_unknown_exthdrs
)

1014  (
IP_FW_DENY
);

1017 
¨gs
->
f_id
.
exåa
 =

1018 
	`¡ohl
(((
ù6_‰ag
 *)
uÕ
)->
ù6f_idít
);

1019 
uÕ
 = 
NULL
;

1022 
IPPROTO_DSTOPTS
:

1023 
	`PULLUP_TO
(
hÀn
, 
uÕ
, 
ù6_hbh
);

1024 
ext_hd
 |
EXT_DSTOPTS
;

1025 
hÀn
 +(((
ù6_hbh
 *)
uÕ
)->
ù6h_Àn
 + 1) << 3;

1026 
¥Ÿo
 = ((
ù6_hbh
 *)
uÕ
)->
ù6h_nxt
;

1027 
uÕ
 = 
NULL
;

1030 
IPPROTO_AH
:

1031 
	`PULLUP_TO
(
hÀn
, 
uÕ
, 
ù6_ext
);

1032 
ext_hd
 |
EXT_AH
;

1033 
hÀn
 +(((
ù6_ext
 *)
uÕ
)->
ù6e_Àn
 + 2) << 2;

1034 
¥Ÿo
 = ((
ù6_ext
 *)
uÕ
)->
ù6e_nxt
;

1035 
uÕ
 = 
NULL
;

1038 
IPPROTO_ESP
:

1039 
	`PULLUP_TO
(
hÀn
, 
uÕ
, 
uöt32_t
);

1042 
ext_hd
 |
EXT_ESP
;

1045 
IPPROTO_NONE
:

1051 
uÕ
 = 
ù
;

1054 
IPPROTO_OSPFIGP
:

1056 
	`PULLUP_TO
(
hÀn
, 
uÕ
, 
ù6_ext
);

1059 
IPPROTO_PIM
:

1061 
	`PULLUP_TO
(
hÀn
, 
uÕ
, 
pim
);

1064 
IPPROTO_CARP
:

1065 
	`PULLUP_TO
(
hÀn
, 
uÕ
, 
ˇΩ_hódî
);

1066 i‡(((
ˇΩ_hódî
 *)
uÕ
)->
ˇΩ_vîsi⁄
 !=

1067 
CARP_VERSION
)

1068  (
IP_FW_DENY
);

1069 i‡(((
ˇΩ_hódî
 *)
uÕ
)->
ˇΩ_ty≥
 !=

1070 
CARP_ADVERTISEMENT
)

1071  (
IP_FW_DENY
);

1074 
IPPROTO_IPV6
:

1075 
	`PULLUP_TO
(
hÀn
, 
uÕ
, 
ù6_hdr
);

1078 
IPPROTO_IPV4
:

1079 
	`PULLUP_TO
(
hÀn
, 
uÕ
, 
ù
);

1083 
	`¥ötf
("IPFW2: IPV6 - Unknown Extension "

1084 "Hódî(%d),Éxt_hd=%x\n", 
¥Ÿo
, 
ext_hd
);

1085 i‡(
V_fw_díy_unknown_exthdrs
)

1086  (
IP_FW_DENY
);

1087 
	`PULLUP_TO
(
hÀn
, 
uÕ
, 
ù6_ext
);

1091 
ù
 = 
	`mtod
(
m
, ip *);

1092 
ù6
 = (
ù6_hdr
 *)
ù
;

1093 
¨gs
->
f_id
.
§c_ù6
 = 
ù6
->
ù6_§c
;

1094 
¨gs
->
f_id
.
d°_ù6
 = 
ù6
->
ù6_d°
;

1095 
¨gs
->
f_id
.
§c_ù
 = 0;

1096 
¨gs
->
f_id
.
d°_ù
 = 0;

1097 
¨gs
->
f_id
.
Êow_id6
 = 
	`¡ohl
(
ù6
->
ù6_Êow
);

1098 } i‡(
pkéí
 >(
ù
) &&

1099 (
¨gs
->
eh
 =
NULL
 || 
ëy≥
 =
ETHERTYPE_IP
Ë&& 
ù
->
ù_v
 == 4) {

1100 
is_ùv4
 = 1;

1101 
hÀn
 = 
ù
->
ù_hl
 << 2;

1102 
¨gs
->
f_id
.
addr_ty≥
 = 4;

1107 
¥Ÿo
 = 
ù
->
ù_p
;

1108 
§c_ù
 = 
ù
->
ù_§c
;

1109 
d°_ù
 = 
ù
->
ù_d°
;

1110 
off£t
 = 
	`¡ohs
(
ù
->
ù_off
Ë& 
IP_OFFMASK
;

1111 
ùÀn
 = 
	`¡ohs
(
ù
->
ù_Àn
);

1112 
pkéí
 = 
ùÀn
 <Öktlen ? iplen :Öktlen;

1114 i‡(
off£t
 == 0) {

1115 
¥Ÿo
) {

1116 
IPPROTO_TCP
:

1117 
	`PULLUP_TO
(
hÀn
, 
uÕ
, 
t˝hdr
);

1118 
d°_p‹t
 = 
	`TCP
(
uÕ
)->
th_dp‹t
;

1119 
§c_p‹t
 = 
	`TCP
(
uÕ
)->
th_•‹t
;

1121 
¨gs
->
f_id
.
_Êags
 = 
	`TCP
(
uÕ
)->
th_Êags
;

1124 
IPPROTO_UDP
:

1125 
	`PULLUP_TO
(
hÀn
, 
uÕ
, 
udphdr
);

1126 
d°_p‹t
 = 
	`UDP
(
uÕ
)->
uh_dp‹t
;

1127 
§c_p‹t
 = 
	`UDP
(
uÕ
)->
uh_•‹t
;

1130 
IPPROTO_ICMP
:

1131 
	`PULLUP_TO
(
hÀn
, 
uÕ
, 
icmphdr
);

1140 
ù
 = 
	`mtod
(
m
, ip *);

1141 
¨gs
->
f_id
.
§c_ù
 = 
	`¡ohl
(§c_ù.
s_addr
);

1142 
¨gs
->
f_id
.
d°_ù
 = 
	`¡ohl
(d°_ù.
s_addr
);

1144 #unde‡
PULLUP_TO


1145 i‡(
¥Ÿo
) {

1146 
¨gs
->
f_id
.
¥Ÿo
 =Öroto;

1147 
¨gs
->
f_id
.
§c_p‹t
 = src_p‹à
	`¡ohs
(src_port);

1148 
¨gs
->
f_id
.
d°_p‹t
 = d°_p‹à
	`¡ohs
(dst_port);

1151 
	`IPFW_RLOCK
(
chaö
);

1152 i‡(! 
V_ùfw_v√t_ªady
) {

1153 
	`IPFW_RUNLOCK
(
chaö
);

1154  (
IP_FW_PASS
);

1156 i‡(
¨gs
->
ruÀ
.
¶Ÿ
) {

1164 
f_pos
 = (
¨gs
->
ruÀ
.
chaö_id
 =
chaö
->
id
) ?

1165 
¨gs
->
ruÀ
.
¶Ÿ
 :

1166 
	`ùfw_föd_ruÀ
(
chaö
, 
¨gs
->
ruÀ
.
ruÀnum
,

1167 
¨gs
->
ruÀ
.
ruÀ_id
);

1169 
f_pos
 = 0;

1190 ; 
f_pos
 < 
chaö
->
n_ruÀs
; f_pos++) {

1191 
ùfw_ö¢
 *
cmd
;

1192 
uöt32_t
 
èbÀ¨g
 = 0;

1193 
l
, 
cmdÀn
, 
skù_‹
;

1194 
ù_fw
 *
f
;

1196 
f
 = 
chaö
->
m≠
[
f_pos
];

1197 i‡(
V_£t_dißbÀ
 & (1 << 
f
->
£t
) )

1200 
skù_‹
 = 0;

1201 
l
 = 
f
->
cmd_Àn
, 
cmd
 = f->cmd ;Ü > 0 ;

1202 
l
 -
cmdÀn
, 
cmd
 += cmdlen) {

1203 
m©ch
;

1212 
cmdÀn
 = 
	`F_LEN
(
cmd
);

1220 i‡(
skù_‹
) {

1221 i‡((
cmd
->
Àn
 & 
F_OR
) == 0)

1222 
skù_‹
 = 0;

1225 
m©ch
 = 0;

1227 
cmd
->
›code
) {

1235 
O_NOP
:

1236 
m©ch
 = 1;

1239 
O_FORWARD_MAC
:

1240 
	`¥ötf
("ipfw: opcode %d unimplemented\n",

1241 
cmd
->
›code
);

1244 
O_GID
:

1245 
O_UID
:

1246 
O_JAIL
:

1252 i‡(
off£t
!=0)

1254 i‡(
is_ùv6
)

1256 i‡(
¥Ÿo
 =
IPPROTO_TCP
 ||

1257 
¥Ÿo
 =
IPPROTO_UDP
)

1258 
m©ch
 = 
	`check_uidgid
(

1259 (
ùfw_ö¢_u32
 *)
cmd
,

1260 
¥Ÿo
, 
oif
,

1261 
d°_ù
, 
d°_p‹t
,

1262 
§c_ù
, 
§c_p‹t
, &
u¸ed_lookup
,

1263 #ifde‡
__FªeBSD__


1264 &
u¸ed_ˇche
, 
¨gs
->
öp
);

1266 (*)&
u¸ed_ˇche
,

1267 (
öpcb
 *)
¨gs
->
m
);

1271 
O_RECV
:

1272 
m©ch
 = 
	`iÁ˚_m©ch
(
m
->
m_pkthdr
.
rcvif
,

1273 (
ùfw_ö¢_if
 *)
cmd
);

1276 
O_XMIT
:

1277 
m©ch
 = 
	`iÁ˚_m©ch
(
oif
, (
ùfw_ö¢_if
 *)
cmd
);

1280 
O_VIA
:

1281 
m©ch
 = 
	`iÁ˚_m©ch
(
oif
 ? oif :

1282 
m
->
m_pkthdr
.
rcvif
, (
ùfw_ö¢_if
 *)
cmd
);

1285 
O_MACADDR2
:

1286 i‡(
¨gs
->
eh
 !
NULL
) {

1287 
u_öt32_t
 *
w™t
 = (u_int32_t *)

1288 ((
ùfw_ö¢_mac
 *)
cmd
)->
addr
;

1289 
u_öt32_t
 *
mask
 = (u_int32_t *)

1290 ((
ùfw_ö¢_mac
 *)
cmd
)->
mask
;

1291 
u_öt32_t
 *
hdr
 = (u_öt32_à*)
¨gs
->
eh
;

1293 
m©ch
 =

1294 –
w™t
[0] =(
hdr
[0] & 
mask
[0]) &&

1295 
w™t
[1] =(
hdr
[1] & 
mask
[1]) &&

1296 
w™t
[2] =(
hdr
[2] & 
mask
[2]) );

1300 
O_MAC_TYPE
:

1301 i‡(
¨gs
->
eh
 !
NULL
) {

1302 
u_öt16_t
 *
p
 =

1303 ((
ùfw_ö¢_u16
 *)
cmd
)->
p‹ts
;

1304 
i
;

1306 
i
 = 
cmdÀn
 - 1; !
m©ch
 && i>0;

1307 
i
--, 
p
 += 2)

1308 
m©ch
 = (
ëy≥
 >
p
[0] &&

1309 
ëy≥
 <
p
[1]);

1313 
O_FRAG
:

1314 
m©ch
 = (
off£t
 != 0);

1317 
O_IN
:

1318 
m©ch
 = (
oif
 =
NULL
);

1321 
O_LAYER2
:

1322 
m©ch
 = (
¨gs
->
eh
 !
NULL
);

1325 
O_DIVERTED
:

1331 
uöt32_t
 
i
 = 
¨gs
->
ruÀ
.
öfo
;

1332 
m©ch
 = (
i
&
IPFW_IS_MASK
Ë=
IPFW_IS_DIVERT
 &&

1333 
cmd
->
¨g1
 & ((
i
 & 
IPFW_INFO_IN
) ? 1 : 2);

1337 
O_PROTO
:

1342 
m©ch
 = (
¥Ÿo
 =
cmd
->
¨g1
);

1345 
O_IP_SRC
:

1346 
m©ch
 = 
is_ùv4
 &&

1347 (((
ùfw_ö¢_ù
 *)
cmd
)->
addr
.
s_addr
 ==

1348 
§c_ù
.
s_addr
);

1351 
O_IP_SRC_LOOKUP
:

1352 
O_IP_DST_LOOKUP
:

1353 i‡(
is_ùv4
) {

1354 
uöt32_t
 
key
 =

1355 (
cmd
->
›code
 =
O_IP_DST_LOOKUP
) ?

1356 
d°_ù
.
s_addr
 : 
§c_ù
.s_addr;

1357 
uöt32_t
 
v
 = 0;

1359 i‡(
cmdÀn
 > 
	`F_INSN_SIZE
(
ùfw_ö¢_u32
)) {

1363 
v
 = ((
ùfw_ö¢_u32
 *)
cmd
)->
d
[1];

1364 i‡(
v
 == 0)

1365 
key
 = 
d°_ù
.
s_addr
;

1366 i‡(
v
 == 1)

1367 
key
 = 
§c_ù
.
s_addr
;

1368 i‡(
v
 == 6)

1369 
key
 = (
ù
->
ù_tos
 >> 2) & 0x3f;

1370 i‡(
off£t
 != 0)

1372 i‡(
¥Ÿo
 !
IPPROTO_TCP
 &&

1373 
¥Ÿo
 !
IPPROTO_UDP
)

1375 i‡(
v
 == 2)

1376 
key
 = 
	`ht⁄l
(
d°_p‹t
);

1377 i‡(
v
 == 3)

1378 
key
 = 
	`ht⁄l
(
§c_p‹t
);

1379 i‡(
v
 == 4 || v == 5) {

1380 
	`check_uidgid
(

1381 (
ùfw_ö¢_u32
 *)
cmd
,

1382 
¥Ÿo
, 
oif
,

1383 
d°_ù
, 
d°_p‹t
,

1384 
§c_ù
, 
§c_p‹t
, &
u¸ed_lookup
,

1385 #ifde‡
__FªeBSD__


1386 &
u¸ed_ˇche
, 
¨gs
->
öp
);

1387 i‡(
v
 == 4 )

1388 
key
 = 
u¸ed_ˇche
->
¸_uid
;

1389 i‡(
v
 == 5 )

1390 
key
 = 
u¸ed_ˇche
->
¸_¥is⁄
->
¥_id
;

1392 (*)&
u¸ed_ˇche
,

1393 (
öpcb
 *)
¨gs
->
m
);

1394 i‡(
v
 ==4 )

1395 
key
 = 
u¸ed_ˇche
.
uid
;

1396 i‡(
v
 == 5 )

1397 
key
 = 
u¸ed_ˇche
.
xid
;

1399 
key
 = 
	`ht⁄l
(key);

1403 
m©ch
 = 
	`ùfw_lookup_èbÀ
(
chaö
,

1404 
cmd
->
¨g1
, 
key
, &
v
);

1405 i‡(!
m©ch
)

1407 i‡(
cmdÀn
 =
	`F_INSN_SIZE
(
ùfw_ö¢_u32
))

1408 
m©ch
 =

1409 ((
ùfw_ö¢_u32
 *)
cmd
)->
d
[0] =
v
;

1411 
èbÀ¨g
 = 
v
;

1415 
O_IP_SRC_MASK
:

1416 
O_IP_DST_MASK
:

1417 i‡(
is_ùv4
) {

1418 
uöt32_t
 
a
 =

1419 (
cmd
->
›code
 =
O_IP_DST_MASK
) ?

1420 
d°_ù
.
s_addr
 : 
§c_ù
.s_addr;

1421 
uöt32_t
 *
p
 = ((
ùfw_ö¢_u32
 *)
cmd
)->
d
;

1422 
i
 = 
cmdÀn
-1;

1424 ; !
m©ch
 && 
i
>0; i-2, 
p
+= 2)

1425 
m©ch
 = (
p
[0] =(
a
 &Ö[1]));

1429 
O_IP_SRC_ME
:

1430 i‡(
is_ùv4
) {

1431 
i‚ë
 *
tif
;

1433 
	`INADDR_TO_IFP
(
§c_ù
, 
tif
);

1434 
m©ch
 = (
tif
 !
NULL
);

1437 #ifde‡
INET6


1439 
O_IP6_SRC_ME
:

1440 
m©ch

is_ùv6
 && 
	`£¨ch_ù6_addr_√t
(&
¨gs
->
f_id
.
§c_ù6
);

1444 
O_IP_DST_SET
:

1445 
O_IP_SRC_SET
:

1446 i‡(
is_ùv4
) {

1447 
u_öt32_t
 *
d
 = (u_öt32_à*)(
cmd
+1);

1448 
u_öt32_t
 
addr
 =

1449 
cmd
->
›code
 =
O_IP_DST_SET
 ?

1450 
¨gs
->
f_id
.
d°_ù
 :

1451 
¨gs
->
f_id
.
§c_ù
;

1453 i‡(
addr
 < 
d
[0])

1455 
addr
 -
d
[0];

1456 
m©ch
 = (
addr
 < 
cmd
->
¨g1
) &&

1457 –
d
[ 1 + (
addr
>>5)] &

1458 (1<<(
addr
 & 0x1f)) );

1462 
O_IP_DST
:

1463 
m©ch
 = 
is_ùv4
 &&

1464 (((
ùfw_ö¢_ù
 *)
cmd
)->
addr
.
s_addr
 ==

1465 
d°_ù
.
s_addr
);

1468 
O_IP_DST_ME
:

1469 i‡(
is_ùv4
) {

1470 
i‚ë
 *
tif
;

1472 
	`INADDR_TO_IFP
(
d°_ù
, 
tif
);

1473 
m©ch
 = (
tif
 !
NULL
);

1476 #ifde‡
INET6


1478 
O_IP6_DST_ME
:

1479 
m©ch

is_ùv6
 && 
	`£¨ch_ù6_addr_√t
(&
¨gs
->
f_id
.
d°_ù6
);

1484 
O_IP_SRCPORT
:

1485 
O_IP_DSTPORT
:

1491 i‡((
¥Ÿo
==
IPPROTO_UDP
 ||ÖrŸo==
IPPROTO_TCP
)

1492 && 
off£t
 == 0) {

1493 
u_öt16_t
 
x
 =

1494 (
cmd
->
›code
 =
O_IP_SRCPORT
) ?

1495 
§c_p‹t
 : 
d°_p‹t
 ;

1496 
u_öt16_t
 *
p
 =

1497 ((
ùfw_ö¢_u16
 *)
cmd
)->
p‹ts
;

1498 
i
;

1500 
i
 = 
cmdÀn
 - 1; !
m©ch
 && i>0;

1501 
i
--, 
p
 += 2)

1502 
m©ch
 = (
x
>=
p
[0] && x<=p[1]);

1506 
O_ICMPTYPE
:

1507 
m©ch
 = (
off£t
 =0 && 
¥Ÿo
==
IPPROTO_ICMP
 &&

1508 
	`icm±y≥_m©ch
(
	`ICMP
(
uÕ
), (
ùfw_ö¢_u32
 *)
cmd
) );

1511 #ifde‡
INET6


1512 
O_ICMP6TYPE
:

1513 
m©ch
 = 
is_ùv6
 && 
off£t
 == 0 &&

1514 
¥Ÿo
==
IPPROTO_ICMPV6
 &&

1515 
	`icmp6ty≥_m©ch
(

1516 
	`ICMP6
(
uÕ
)->
icmp6_ty≥
,

1517 (
ùfw_ö¢_u32
 *)
cmd
);

1521 
O_IPOPT
:

1522 
m©ch
 = (
is_ùv4
 &&

1523 
	`ù›ts_m©ch
(
ù
, 
cmd
) );

1526 
O_IPVER
:

1527 
m©ch
 = (
is_ùv4
 &&

1528 
cmd
->
¨g1
 =
ù
->
ù_v
);

1531 
O_IPID
:

1532 
O_IPLEN
:

1533 
O_IPTTL
:

1534 i‡(
is_ùv4
) {

1535 
uöt16_t
 
x
;

1536 
uöt16_t
 *
p
;

1537 
i
;

1539 i‡(
cmd
->
›code
 =
O_IPLEN
)

1540 
x
 = 
ùÀn
;

1541 i‡(
cmd
->
›code
 =
O_IPTTL
)

1542 
x
 = 
ù
->
ù_âl
;

1544 
x
 = 
	`¡ohs
(
ù
->
ù_id
);

1545 i‡(
cmdÀn
 == 1) {

1546 
m©ch
 = (
cmd
->
¨g1
 =
x
);

1550 
p
 = ((
ùfw_ö¢_u16
 *)
cmd
)->
p‹ts
;

1551 
i
 = 
cmdÀn
 - 1;

1552 ; !
m©ch
 && 
i
>0; i--, 
p
 += 2)

1553 
m©ch
 = (
x
 >
p
[0] && x <=Ö[1]);

1557 
O_IPPRECEDENCE
:

1558 
m©ch
 = (
is_ùv4
 &&

1559 (
cmd
->
¨g1
 =(
ù
->
ù_tos
 & 0xe0)) );

1562 
O_IPTOS
:

1563 
m©ch
 = (
is_ùv4
 &&

1564 
	`Êags_m©ch
(
cmd
, 
ù
->
ù_tos
));

1567 
O_TCPDATALEN
:

1568 i‡(
¥Ÿo
 =
IPPROTO_TCP
 && 
off£t
 == 0) {

1569 
t˝hdr
 *
t˝
;

1570 
uöt16_t
 
x
;

1571 
uöt16_t
 *
p
;

1572 
i
;

1574 
t˝
 = 
	`TCP
(
uÕ
);

1575 
x
 = 
ùÀn
 -

1576 ((
ù
->
ù_hl
 + 
t˝
->
th_off
) << 2);

1577 i‡(
cmdÀn
 == 1) {

1578 
m©ch
 = (
cmd
->
¨g1
 =
x
);

1582 
p
 = ((
ùfw_ö¢_u16
 *)
cmd
)->
p‹ts
;

1583 
i
 = 
cmdÀn
 - 1;

1584 ; !
m©ch
 && 
i
>0; i--, 
p
 += 2)

1585 
m©ch
 = (
x
 >
p
[0] && x <=Ö[1]);

1589 
O_TCPFLAGS
:

1590 
m©ch
 = (
¥Ÿo
 =
IPPROTO_TCP
 && 
off£t
 == 0 &&

1591 
	`Êags_m©ch
(
cmd
, 
	`TCP
(
uÕ
)->
th_Êags
));

1594 
O_TCPOPTS
:

1595 
m©ch
 = (
¥Ÿo
 =
IPPROTO_TCP
 && 
off£t
 == 0 &&

1596 
	`t˝›ts_m©ch
(
	`TCP
(
uÕ
), 
cmd
));

1599 
O_TCPSEQ
:

1600 
m©ch
 = (
¥Ÿo
 =
IPPROTO_TCP
 && 
off£t
 == 0 &&

1601 ((
ùfw_ö¢_u32
 *)
cmd
)->
d
[0] ==

1602 
	`TCP
(
uÕ
)->
th_£q
);

1605 
O_TCPACK
:

1606 
m©ch
 = (
¥Ÿo
 =
IPPROTO_TCP
 && 
off£t
 == 0 &&

1607 ((
ùfw_ö¢_u32
 *)
cmd
)->
d
[0] ==

1608 
	`TCP
(
uÕ
)->
th_ack
);

1611 
O_TCPWIN
:

1612 
m©ch
 = (
¥Ÿo
 =
IPPROTO_TCP
 && 
off£t
 == 0 &&

1613 
cmd
->
¨g1
 =
	`TCP
(
uÕ
)->
th_wö
);

1616 
O_ESTAB
:

1619 
m©ch
 = (
¥Ÿo
 =
IPPROTO_TCP
 && 
off£t
 == 0 &&

1620 (
	`TCP
(
uÕ
)->
th_Êags
 &

1621 (
TH_RST
 | 
TH_ACK
 | 
TH_SYN
)) != TH_SYN);

1624 
O_ALTQ
: {

1625 
pf_mèg
 *
©
;

1626 
ùfw_ö¢_Ætq
 *
Ætq
 = (ùfw_ö¢_Ætq *)
cmd
;

1628 
m©ch
 = 1;

1629 
©
 = 
	`pf_föd_mèg
(
m
);

1630 i‡(
©
 !
NULL
 &&át->
qid
 != 0)

1632 
©
 = 
	`pf_gë_mèg
(
m
);

1633 i‡(
©
 =
NULL
) {

1640 
©
->
qid
 = 
Ætq
->qid;

1641 i‡(
is_ùv4
)

1642 
©
->
af
 = 
AF_INET
;

1644 
©
->
af
 = 
AF_LINK
;

1645 
©
->
hdr
 = 
ù
;

1649 
O_LOG
:

1650 
	`ùfw_log
(
f
, 
hÀn
, 
¨gs
, 
m
,

1651 
oif
, 
off£t
, 
èbÀ¨g
, 
ù
);

1652 
m©ch
 = 1;

1655 
O_PROB
:

1656 
m©ch
 = (
	`øndom
()<((
ùfw_ö¢_u32
 *)
cmd
)->
d
[0]);

1659 
O_VERREVPATH
:

1661 
m©ch
 = ((
oif
 !
NULL
) ||

1662 (
m
->
m_pkthdr
.
rcvif
 =
NULL
) ||

1664 #ifde‡
INET6


1665 
is_ùv6
 ?

1666 
	`vîify_∑th6
(&(
¨gs
->
f_id
.
§c_ù6
),

1667 
m
->
m_pkthdr
.
rcvif
) :

1669 
	`vîify_∑th
(
§c_ù
, 
m
->
m_pkthdr
.
rcvif
,

1670 
¨gs
->
f_id
.
fib
)));

1673 
O_VERSRCREACH
:

1675 
m©ch
 = (
hÀn
 > 0 && ((
oif
 !
NULL
) ||

1676 #ifde‡
INET6


1677 
is_ùv6
 ?

1678 
	`vîify_∑th6
(&(
¨gs
->
f_id
.
§c_ù6
),

1679 
NULL
) :

1681 
	`vîify_∑th
(
§c_ù
, 
NULL
, 
¨gs
->
f_id
.
fib
)));

1684 
O_ANTISPOOF
:

1686 i‡(
oif
 =
NULL
 && 
hÀn
 > 0 &&

1687 –(
is_ùv4
 && 
	`ö_loˇœddr
(
§c_ù
))

1688 #ifde‡
INET6


1689 || (
is_ùv6
 &&

1690 
	`ö6_loˇœddr
(&(
¨gs
->
f_id
.
§c_ù6
)))

1693 
m©ch
 =

1694 #ifde‡
INET6


1695 
is_ùv6
 ? 
	`vîify_∑th6
(

1696 &(
¨gs
->
f_id
.
§c_ù6
),

1697 
m
->
m_pkthdr
.
rcvif
) :

1699 
	`vîify_∑th
(
§c_ù
,

1700 
m
->
m_pkthdr
.
rcvif
,

1701 
¨gs
->
f_id
.
fib
);

1703 
m©ch
 = 1;

1706 
O_IPSEC
:

1707 #ifde‡
IPSEC


1708 
m©ch
 = (
	`m_èg_föd
(
m
,

1709 
PACKET_TAG_IPSEC_IN_DONE
, 
NULL
) != NULL);

1714 #ifde‡
INET6


1715 
O_IP6_SRC
:

1716 
m©ch
 = 
is_ùv6
 &&

1717 
	`IN6_ARE_ADDR_EQUAL
(&
¨gs
->
f_id
.
§c_ù6
,

1718 &((
ùfw_ö¢_ù6
 *)
cmd
)->
addr6
);

1721 
O_IP6_DST
:

1722 
m©ch
 = 
is_ùv6
 &&

1723 
	`IN6_ARE_ADDR_EQUAL
(&
¨gs
->
f_id
.
d°_ù6
,

1724 &((
ùfw_ö¢_ù6
 *)
cmd
)->
addr6
);

1726 
O_IP6_SRC_MASK
:

1727 
O_IP6_DST_MASK
:

1728 i‡(
is_ùv6
) {

1729 
i
 = 
cmdÀn
 - 1;

1730 
ö6_addr
 
p
;

1731 
ö6_addr
 *
d
 =

1732 &((
ùfw_ö¢_ù6
 *)
cmd
)->
addr6
;

1734 ; !
m©ch
 && 
i
 > 0; 
d
 += 2,

1735 
i
 -
	`F_INSN_SIZE
(
ö6_addr
)

1737 
p
 = (
cmd
->
›code
 ==

1738 
O_IP6_SRC_MASK
) ?

1739 
¨gs
->
f_id
.
§c_ù6
:

1740 
¨gs
->
f_id
.
d°_ù6
;

1741 
	`APPLY_MASK
(&
p
, &
d
[1]);

1742 
m©ch
 =

1743 
	`IN6_ARE_ADDR_EQUAL
(&
d
[0],

1744 &
p
);

1749 
O_FLOW6ID
:

1750 
m©ch
 = 
is_ùv6
 &&

1751 
	`Êow6id_m©ch
(
¨gs
->
f_id
.
Êow_id6
,

1752 (
ùfw_ö¢_u32
 *Ë
cmd
);

1755 
O_EXT_HDR
:

1756 
m©ch
 = 
is_ùv6
 &&

1757 (
ext_hd
 & ((
ùfw_ö¢
 *Ë
cmd
)->
¨g1
);

1760 
O_IP6
:

1761 
m©ch
 = 
is_ùv6
;

1765 
O_IP4
:

1766 
m©ch
 = 
is_ùv4
;

1769 
O_TAG
: {

1770 
m_èg
 *
mèg
;

1771 
uöt32_t
 
èg
 = (
cmd
->
¨g1
 =
IP_FW_TABLEARG
) ?

1772 
èbÀ¨g
 : 
cmd
->
¨g1
;

1775 
mèg
 = 
	`m_èg_loˇã
(
m
, 
MTAG_IPFW
, 
èg
, 
NULL
);

1784 i‡(
cmd
->
Àn
 & 
F_NOT
) {

1785 i‡(
mèg
 !
NULL
)

1786 
	`m_èg_dñëe
(
m
, 
mèg
);

1787 
m©ch
 = 0;

1788 } i‡(
mèg
 =
NULL
) {

1789 i‡((
mèg
 = 
	`m_èg_Æloc
(
MTAG_IPFW
,

1790 
èg
, 0, 
M_NOWAIT
)Ë!
NULL
)

1791 
	`m_èg_¥ïíd
(
m
, 
mèg
);

1792 
m©ch
 = 1;

1797 
O_FIB
:

1798 i‡(
¨gs
->
f_id
.
fib
 =
cmd
->
¨g1
)

1799 
m©ch
 = 1;

1802 
O_TAGGED
: {

1803 
m_èg
 *
mèg
;

1804 
uöt32_t
 
èg
 = (
cmd
->
¨g1
 =
IP_FW_TABLEARG
) ?

1805 
èbÀ¨g
 : 
cmd
->
¨g1
;

1807 i‡(
cmdÀn
 == 1) {

1808 
m©ch
 = 
	`m_èg_loˇã
(
m
, 
MTAG_IPFW
,

1809 
èg
, 
NULL
) != NULL;

1814 
mèg
 = 
	`m_èg_fú°
(
m
);

1815 
mèg
 !
NULL
 && !
m©ch
;

1816 
mèg
 = 
	`m_èg_√xt
(
m
, mtag)) {

1817 
uöt16_t
 *
p
;

1818 
i
;

1820 i‡(
mèg
->
m_èg_cookõ
 !
MTAG_IPFW
)

1823 
p
 = ((
ùfw_ö¢_u16
 *)
cmd
)->
p‹ts
;

1824 
i
 = 
cmdÀn
 - 1;

1825 ; !
m©ch
 && 
i
 > 0; i--, 
p
 += 2)

1826 
m©ch
 =

1827 
mèg
->
m_èg_id
 >
p
[0] &&

1828 
mèg
->
m_èg_id
 <
p
[1];

1874 
O_LIMIT
:

1875 
O_KEEP_STATE
:

1876 i‡(
	`ùfw_ö°Æl_°©e
(
f
,

1877 (
ùfw_ö¢_limô
 *)
cmd
, 
¨gs
, 
èbÀ¨g
)) {

1879 
ªtvÆ
 = 
IP_FW_DENY
;

1880 
l
 = 0;

1881 
d⁄e
 = 1;

1883 
m©ch
 = 1;

1886 
O_PROBE_STATE
:

1887 
O_CHECK_STATE
:

1897 i‡(
dyn_dú
 =
MATCH_UNKNOWN
 &&

1898 (
q
 = 
	`ùfw_lookup_dyn_ruÀ
(&
¨gs
->
f_id
,

1899 &
dyn_dú
, 
¥Ÿo
 =
IPPROTO_TCP
 ?

1900 
	`TCP
(
uÕ
Ë: 
NULL
))

1901 !
NULL
) {

1908 
q
->
p˙t
++;

1909 
q
->
b˙t
 +
pkéí
;

1915 
f
 = 
q
->
ruÀ
;

1916 
f_pos
 = 
	`ùfw_föd_ruÀ
(
chaö
,

1917 
f
->
ruÀnum
, f->
id
);

1918 
cmd
 = 
	`ACTION_PTR
(
f
);

1919 
l
 = 
f
->
cmd_Àn
 - f->
a˘_ofs
;

1920 
	`ùfw_dyn_u∆ock
();

1921 
cmdÀn
 = 0;

1922 
m©ch
 = 1;

1930 i‡(
cmd
->
›code
 =
O_CHECK_STATE
)

1931 
l
 = 0;

1932 
m©ch
 = 1;

1935 
O_ACCEPT
:

1936 
ªtvÆ
 = 0;

1937 
l
 = 0;

1938 
d⁄e
 = 1;

1941 
O_PIPE
:

1942 
O_QUEUE
:

1943 
	`£t_m©ch
(
¨gs
, 
f_pos
, 
chaö
);

1944 
¨gs
->
ruÀ
.
öfo
 = (
cmd
->
¨g1
 =
IP_FW_TABLEARG
) ?

1945 
èbÀ¨g
 : 
cmd
->
¨g1
;

1946 i‡(
cmd
->
›code
 =
O_PIPE
)

1947 
¨gs
->
ruÀ
.
öfo
 |
IPFW_IS_PIPE
;

1948 i‡(
V_fw_⁄e_∑ss
)

1949 
¨gs
->
ruÀ
.
öfo
 |
IPFW_ONEPASS
;

1950 
ªtvÆ
 = 
IP_FW_DUMMYNET
;

1951 
l
 = 0;

1952 
d⁄e
 = 1;

1955 
O_DIVERT
:

1956 
O_TEE
:

1957 i‡(
¨gs
->
eh
)

1960 
l
 = 0;

1961 
d⁄e
 = 1;

1962 
ªtvÆ
 = (
cmd
->
›code
 =
O_DIVERT
) ?

1963 
IP_FW_DIVERT
 : 
IP_FW_TEE
;

1964 
	`£t_m©ch
(
¨gs
, 
f_pos
, 
chaö
);

1965 
¨gs
->
ruÀ
.
öfo
 = (
cmd
->
¨g1
 =
IP_FW_TABLEARG
) ?

1966 
èbÀ¨g
 : 
cmd
->
¨g1
;

1969 
O_COUNT
:

1970 
f
->
p˙t
++;

1971 
f
->
b˙t
 +
pkéí
;

1972 
f
->
time°amp
 = 
time_u±ime
;

1973 
l
 = 0;

1976 
O_SKIPTO
:

1977 
f
->
p˙t
++;

1978 
f
->
b˙t
 +
pkéí
;

1979 
f
->
time°amp
 = 
time_u±ime
;

1984 i‡(
cmd
->
¨g1
 !
IP_FW_TABLEARG
 &&

1985 (
uöçå_t
)
f
->
x_√xt
 =
chaö
->
id
) {

1986 
f_pos
 = (
uöçå_t
)
f
->
√xt_ruÀ
;

1988 
i
 = (
cmd
->
¨g1
 =
IP_FW_TABLEARG
) ?

1989 
èbÀ¨g
 : 
cmd
->
¨g1
;

1991 i‡(
i
 <
f
->
ruÀnum
)

1992 
i
 = 
f
->
ruÀnum
 + 1;

1993 
f_pos
 = 
	`ùfw_föd_ruÀ
(
chaö
, 
i
, 0);

1995 i‡(
cmd
->
¨g1
 !
IP_FW_TABLEARG
) {

1996 
f
->
√xt_ruÀ
 =

1997 (*)(
uöçå_t
)
f_pos
;

1998 
f
->
x_√xt
 =

1999 (*)(
uöçå_t
)
chaö
->
id
;

2008 ; 
f_pos
 < 
chaö
->
n_ruÀs
 - 1 &&

2009 (
V_£t_dißbÀ
 &

2010 (1 << 
chaö
->
m≠
[
f_pos
]->
£t
));

2011 
f_pos
++)

2014 
f
 = 
chaö
->
m≠
[
f_pos
];

2015 
l
 = 
f
->
cmd_Àn
;

2016 
cmd
 = 
f
->cmd;

2017 
m©ch
 = 1;

2018 
cmdÀn
 = 0;

2019 
skù_‹
 = 0;

2023 
O_REJECT
:

2029 i‡(
hÀn
 > 0 && 
is_ùv4
 && 
off£t
 == 0 &&

2030 (
¥Ÿo
 !
IPPROTO_ICMP
 ||

2031 
	`is_icmp_quîy
(
	`ICMP
(
uÕ
))) &&

2032 !(
m
->
m_Êags
 & (
M_BCAST
|
M_MCAST
)) &&

2033 !
	`IN_MULTICAST
(
	`¡ohl
(
d°_ù
.
s_addr
))) {

2034 
	`£nd_ªje˘
(
¨gs
, 
cmd
->
¨g1
, 
ùÀn
, 
ù
);

2035 
m
 = 
¨gs
->m;

2038 #ifde‡
INET6


2039 
O_UNREACH6
:

2040 i‡(
hÀn
 > 0 && 
is_ùv6
 &&

2041 ((
off£t
 & 
IP6F_OFF_MASK
) == 0) &&

2042 (
¥Ÿo
 !
IPPROTO_ICMPV6
 ||

2043 (
	`is_icmp6_quîy
(
icmp6_ty≥
) == 1)) &&

2044 !(
m
->
m_Êags
 & (
M_BCAST
|
M_MCAST
)) &&

2045 !
	`IN6_IS_ADDR_MULTICAST
(&
¨gs
->
f_id
.
d°_ù6
)) {

2046 
	`£nd_ªje˘6
(

2047 
¨gs
, 
cmd
->
¨g1
, 
hÀn
,

2048 (
ù6_hdr
 *)
ù
);

2049 
m
 = 
¨gs
->m;

2053 
O_DENY
:

2054 
ªtvÆ
 = 
IP_FW_DENY
;

2055 
l
 = 0;

2056 
d⁄e
 = 1;

2059 
O_FORWARD_IP
:

2060 i‡(
¨gs
->
eh
)

2062 i‡(!
q
 || 
dyn_dú
 =
MATCH_FORWARD
) {

2063 
sockaddr_ö
 *
ß
;

2064 
ß
 = &(((
ùfw_ö¢_ß
 *)
cmd
)->sa);

2065 i‡(
ß
->
sö_addr
.
s_addr
 =
INADDR_ANY
) {

2066 
	`bc›y
(
ß
, &
¨gs
->
h›°‹e
,

2067 (*
ß
));

2068 
¨gs
->
h›°‹e
.
sö_addr
.
s_addr
 =

2069 
	`ht⁄l
(
èbÀ¨g
);

2070 
¨gs
->
√xt_h›
 = &¨gs->
h›°‹e
;

2072 
¨gs
->
√xt_h›
 = 
ß
;

2075 
ªtvÆ
 = 
IP_FW_PASS
;

2076 
l
 = 0;

2077 
d⁄e
 = 1;

2080 
O_NETGRAPH
:

2081 
O_NGTEE
:

2082 
	`£t_m©ch
(
¨gs
, 
f_pos
, 
chaö
);

2083 
¨gs
->
ruÀ
.
öfo
 = (
cmd
->
¨g1
 =
IP_FW_TABLEARG
) ?

2084 
èbÀ¨g
 : 
cmd
->
¨g1
;

2085 i‡(
V_fw_⁄e_∑ss
)

2086 
¨gs
->
ruÀ
.
öfo
 |
IPFW_ONEPASS
;

2087 
ªtvÆ
 = (
cmd
->
›code
 =
O_NETGRAPH
) ?

2088 
IP_FW_NETGRAPH
 : 
IP_FW_NGTEE
;

2089 
l
 = 0;

2090 
d⁄e
 = 1;

2093 
O_SETFIB
:

2094 
f
->
p˙t
++;

2095 
f
->
b˙t
 +
pkéí
;

2096 
f
->
time°amp
 = 
time_u±ime
;

2097 
	`M_SETFIB
(
m
, 
cmd
->
¨g1
);

2098 
¨gs
->
f_id
.
fib
 = 
cmd
->
¨g1
;

2099 
l
 = 0;

2102 
O_NAT
:

2103 i‡(!
IPFW_NAT_LOADED
) {

2104 
ªtvÆ
 = 
IP_FW_DENY
;

2106 
cfg_«t
 *
t
;

2107 
«t_id
;

2109 
	`£t_m©ch
(
¨gs
, 
f_pos
, 
chaö
);

2110 
t
 = ((
ùfw_ö¢_«t
 *)
cmd
)->
«t
;

2111 i‡(
t
 =
NULL
) {

2112 
«t_id
 = (
cmd
->
¨g1
 =
IP_FW_TABLEARG
) ?

2113 
èbÀ¨g
 : 
cmd
->
¨g1
;

2114 
t
 = (*
lookup_«t_±r
)(&
chaö
->
«t
, 
«t_id
);

2116 i‡(
t
 =
NULL
) {

2117 
ªtvÆ
 = 
IP_FW_DENY
;

2118 
l
 = 0;

2119 
d⁄e
 = 1;

2122 i‡(
cmd
->
¨g1
 !
IP_FW_TABLEARG
)

2123 ((
ùfw_ö¢_«t
 *)
cmd
)->
«t
 = 
t
;

2125 
ªtvÆ
 = 
	`ùfw_«t_±r
(
¨gs
, 
t
, 
m
);

2127 
l
 = 0;

2128 
d⁄e
 = 1;

2131 
O_REASS
: {

2132 
ù_off
;

2134 
f
->
p˙t
++;

2135 
f
->
b˙t
 +
pkéí
;

2136 
l
 = 0;

2137 
ù_off
 = 
	`¡ohs
(
ù
->ip_off);

2140 i‡((
ù_off
 & (
IP_MF
 | 
IP_OFFMASK
)) == 0)

2146 
	`SET_HOST_IPLEN
(
ù
);

2148 
¨gs
->
m
 = m = 
	`ù_ªass
(m);

2153 i‡(
m
 =
NULL
) {

2154 
ªtvÆ
 = 
IP_FW_DENY
;

2156 
hÀn
;

2158 
ù
 = 
	`mtod
(
m
, ip *);

2159 
hÀn
 = 
ù
->
ù_hl
 << 2;

2160 
	`SET_NET_IPLEN
(
ù
);

2161 
ù
->
ù_sum
 = 0;

2162 i‡(
hÀn
 =(
ù
))

2163 
ù
->
ù_sum
 = 
	`ö_cksum_hdr
(ip);

2165 
ù
->
ù_sum
 = 
	`ö_cksum
(
m
, 
hÀn
);

2166 
ªtvÆ
 = 
IP_FW_REASS
;

2167 
	`£t_m©ch
(
¨gs
, 
f_pos
, 
chaö
);

2169 
d⁄e
 = 1;

2174 
	`∑nic
("-- unknow¿›codê%d\n", 
cmd
->
›code
);

2180 i‡(
cmd
->
Àn
 & 
F_NOT
)

2181 
m©ch
 = !match;

2183 i‡(
m©ch
) {

2184 i‡(
cmd
->
Àn
 & 
F_OR
)

2185 
skù_‹
 = 1;

2187 i‡(!(
cmd
->
Àn
 & 
F_OR
))

2193 i‡(
d⁄e
)

2200 i‡(
d⁄e
) {

2201 
ù_fw
 *
ruÀ
 = 
chaö
->
m≠
[
f_pos
];

2203 
ruÀ
->
p˙t
++;

2204 
ruÀ
->
b˙t
 +
pkéí
;

2205 
ruÀ
->
time°amp
 = 
time_u±ime
;

2207 
ªtvÆ
 = 
IP_FW_DENY
;

2208 
	`¥ötf
("ipfw: ouch!, skipÖastÉnd ofÑules, denyingÖacket\n");

2210 
	`IPFW_RUNLOCK
(
chaö
);

2211 #ifde‡
__FªeBSD__


2212 i‡(
u¸ed_ˇche
 !
NULL
)

2213 
	`¸‰ì
(
u¸ed_ˇche
);

2215  (
ªtvÆ
);

2217 
puŒup_Áûed
:

2218 i‡(
V_fw_vîbo£
)

2219 
	`¥ötf
("ipfw:Öullup failed\n");

2220  (
IP_FW_DENY
);

2221 
	}
}

2231 
	$ùfw_öô
()

2233 
îr‹
 = 0;

2235 
	`ùfw_dyn_©èch
();

2240 
	`¥ötf
("ipfw2 "

2241 #ifde‡
INET6


2246 #ifde‡
IPFIREWALL_FORWARD


2252 #ifde‡
IPDIVERT


2257 #ifde‡
IPFIREWALL_NAT


2262 
deÁu…_to_ac˚±
 ? "accept" : "deny");

2271 i‡(
V_fw_vîbo£
 == 0)

2272 
	`¥ötf
("disabled\n");

2273 i‡(
V_vîbo£_limô
 == 0)

2274 
	`¥ötf
("unlimited\n");

2276 
	`¥ötf
("limitedÅo %dÖackets/entry by default\n",

2277 
V_vîbo£_limô
);

2279 
	`ùfw_log_bpf
(1);

2280  (
îr‹
);

2281 
	}
}

2287 
	$ùfw_de°roy
()

2290 
	`ùfw_log_bpf
(0);

2291 
	`ùfw_dyn_dëach
();

2292 
	`¥ötf
("IP firewall unloaded\n");

2293 
	}
}

2300 
	$v√t_ùfw_öô
(c⁄° *
unu£d
)

2302 
îr‹
;

2303 
ù_fw
 *
ruÀ
 = 
NULL
;

2304 
ù_fw_chaö
 *
chaö
;

2306 
chaö
 = &
V_œyî3_chaö
;

2309 
V_autoöc_°ï
 = 100;

2310 
V_fw_díy_unknown_exthdrs
 = 1;

2311 #ifde‡
IPFIREWALL_VERBOSE


2312 
V_fw_vîbo£
 = 1;

2314 #ifde‡
IPFIREWALL_VERBOSE_LIMIT


2315 
V_vîbo£_limô
 = 
IPFIREWALL_VERBOSE_LIMIT
;

2317 #ifde‡
IPFIREWALL_NAT


2318 
	`LIST_INIT
(&
chaö
->
«t
);

2322 
chaö
->
n_ruÀs
 = 1;

2323 
chaö
->
°©ic_Àn
 = (
ù_fw
);

2324 
chaö
->
m≠
 = 
	`mÆloc
((
ù_fw
 *), 
M_IPFW
, 
M_NOWAIT
 | 
M_ZERO
);

2325 i‡(
chaö
->
m≠
)

2326 
ruÀ
 = 
	`mÆloc
(
chaö
->
°©ic_Àn
, 
M_IPFW
, 
M_NOWAIT
 | 
M_ZERO
);

2327 i‡(
ruÀ
 =
NULL
) {

2328 i‡(
chaö
->
m≠
)

2329 
	`‰ì
(
chaö
->
m≠
, 
M_IPFW
);

2330 
	`¥ötf
("ipfw2: ENOSPC initializing defaultÑule "

2332  (
ENOSPC
);

2334 
îr‹
 = 
	`ùfw_öô_èbÀs
(
chaö
);

2335 i‡(
îr‹
) {

2336 
	`∑nic
("init_tables");

2340 
ruÀ
->
a˘_ofs
 = 0;

2341 
ruÀ
->
ruÀnum
 = 
IPFW_DEFAULT_RULE
;

2342 
ruÀ
->
cmd_Àn
 = 1;

2343 
ruÀ
->
£t
 = 
RESVD_SET
;

2344 
ruÀ
->
cmd
[0].
Àn
 = 1;

2345 
ruÀ
->
cmd
[0].
›code
 = 
deÁu…_to_ac˚±
 ? 
O_ACCEPT
 : 
O_DENY
;

2346 
chaö
->
ruÀs
 = chaö->
deÁu…_ruÀ
 = chaö->
m≠
[0] = 
ruÀ
;

2347 
chaö
->
id
 = 
ruÀ
->id = 1;

2349 
	`IPFW_LOCK_INIT
(
chaö
);

2350 
	`ùfw_dyn_öô
();

2353 
V_ùfw_v√t_ªady
 = 1;

2369 
V_ù_fw_˘l_±r
 = 
ùfw_˘l
;

2370 
V_ù_fw_chk_±r
 = 
ùfw_chk
;

2371 
îr‹
 = 
	`ùfw_©èch_hooks
(1);

2372  (
îr‹
);

2373 
	}
}

2379 
	$v√t_ùfw_unöô
(c⁄° *
unu£d
)

2381 
ù_fw
 *
ª≠
, *
ruÀ
;

2382 
ù_fw_chaö
 *
chaö
 = &
V_œyî3_chaö
;

2383 
i
;

2385 
V_ùfw_v√t_ªady
 = 0;

2391 ()
	`ùfw_©èch_hooks
(0 );

2392 
V_ù_fw_chk_±r
 = 
NULL
;

2393 
V_ù_fw_˘l_±r
 = 
NULL
;

2394 
	`IPFW_UH_WLOCK
(
chaö
);

2395 
	`IPFW_UH_WUNLOCK
(
chaö
);

2396 
	`IPFW_UH_WLOCK
(
chaö
);

2398 
	`IPFW_WLOCK
(
chaö
);

2399 
	`IPFW_WUNLOCK
(
chaö
);

2400 
	`IPFW_WLOCK
(
chaö
);

2402 
	`ùfw_dyn_unöô
(0);

2403 
	`ùfw_de°roy_èbÀs
(
chaö
);

2404 
ª≠
 = 
NULL
;

2405 
i
 = 0; i < 
chaö
->
n_ruÀs
; i++) {

2406 
ruÀ
 = 
chaö
->
m≠
[
i
];

2407 
ruÀ
->
x_√xt
 = 
ª≠
;

2408 
ª≠
 = 
ruÀ
;

2410 i‡(
chaö
->
m≠
)

2411 
	`‰ì
(
chaö
->
m≠
, 
M_IPFW
);

2412 
	`IPFW_WUNLOCK
(
chaö
);

2413 
	`IPFW_UH_WUNLOCK
(
chaö
);

2414 i‡(
ª≠
 !
NULL
)

2415 
	`ùfw_ª≠_ruÀs
(
ª≠
);

2416 
	`IPFW_LOCK_DESTROY
(
chaö
);

2417 
	`ùfw_dyn_unöô
(1);

2419 
	}
}

2431 
	$ùfw_modevít
(
moduÀ_t
 
mod
, 
ty≥
, *
unu£d
)

2433 
îr
 = 0;

2435 
ty≥
) {

2436 
MOD_LOAD
:

2440 
MOD_QUIESCE
:

2443 
MOD_UNLOAD
:

2446 
MOD_SHUTDOWN
:

2450 
îr
 = 
EOPNOTSUPP
;

2453  
îr
;

2454 
	}
}

2456 
moduÀd©a_t
 
	gùfwmod
 = {

2458 
ùfw_modevít
,

2463 
	#IPFW_SI_SUB_FIREWALL
 
SI_SUB_PROTO_IFATTACHDOMAIN


	)

2464 
	#IPFW_MODEVENT_ORDER
 (
SI_ORDER_ANY
 - 255Ë

	)

2465 
	#IPFW_MODULE_ORDER
 (
IPFW_MODEVENT_ORDER
 + 1Ë

	)

2466 
	#IPFW_VNET_ORDER
 (
IPFW_MODEVENT_ORDER
 + 2Ë

	)

2468 
DECLARE_MODULE
(
ùfw
, 
ùfwmod
, 
IPFW_SI_SUB_FIREWALL
, 
IPFW_MODEVENT_ORDER
);

2469 
MODULE_VERSION
(
ùfw
, 2);

2476 
SYSINIT
(
ùfw_öô
, 
IPFW_SI_SUB_FIREWALL
, 
IPFW_MODULE_ORDER
,

2477 
ùfw_öô
, 
NULL
);

2478 
VNET_SYSINIT
(
v√t_ùfw_öô
, 
IPFW_SI_SUB_FIREWALL
, 
IPFW_VNET_ORDER
,

2479 
v√t_ùfw_öô
, 
NULL
);

2487 
SYSUNINIT
(
ùfw_de°roy
, 
IPFW_SI_SUB_FIREWALL
, 
IPFW_MODULE_ORDER
,

2488 
ùfw_de°roy
, 
NULL
);

2489 
VNET_SYSUNINIT
(
v√t_ùfw_unöô
, 
IPFW_SI_SUB_FIREWALL
, 
IPFW_VNET_ORDER
,

2490 
v√t_ùfw_unöô
, 
NULL
);

	@kipfw-mod/ip_fw_dynamic.c

26 
	~<sys/cdefs.h
>

27 
__FBSDID
("$FreeBSD: head/sys/netinet/ipfw/ip_fw_dynamic.c 200601 2009-12-16 10:48:40ZÜuigi $");

29 
	#DEB
(
x
)

	)

30 
	#DDB
(
x
Ë
	)
x

36 #i‡!
deföed
(
KLD_MODULE
)

37 
	~"›t_ùfw.h
"

38 
	~"›t_ùdivît.h
"

39 
	~"›t_ùdn.h
"

40 
	~"›t_öë.h
"

41 #i‚de‡
INET


42 #îr‹ 
IPFIREWALL
 
ªquúes
 
INET
.

45 
	~"›t_öë6.h
"

46 
	~"›t_ù£c.h
"

48 
	~<sys/∑øm.h
>

49 
	~<sys/sy°m.h
>

50 
	~<sys/mÆloc.h
>

51 
	~<sys/mbuf.h
>

52 
	~<sys/kî√l.h
>

53 
	~<sys/lock.h
>

54 
	~<sys/sockë.h
>

55 
	~<sys/sys˘l.h
>

56 
	~<sys/sy¶og.h
>

57 
	~<√t/ëhî√t.h
>

58 
	~<√t/if.h
>

59 
	~<√t/v√t.h
>

61 
	~<√töë/ö.h
>

62 
	~<√töë/ù.h
>

63 
	~<√töë/ù_v¨.h
>

64 
	~<√töë/ù_fw.h
>

65 
	~<√töë/ùfw/ù_fw_¥iv©e.h
>

66 
	~<√töë/t˝_v¨.h
>

67 
	~<√töë/udp.h
>

69 
	~<√töë/ù6.h
>

70 #ifde‡
INET6


71 
	~<√töë6/ö6_v¨.h
>

72 
	~<√töë6/ù6_v¨.h
>

75 
	~<machöe/ö_cksum.h
>

77 #ifde‡
MAC


78 
	~<£curôy/mac/mac_‰amew‹k.h
>

121 
VNET_DEFINE
(
ùfw_dyn_ruÀ
 **, 
ùfw_dyn_v
);

122 
VNET_DEFINE
(
u_öt32_t
, 
dyn_buckës
);

123 
VNET_DEFINE
(
u_öt32_t
, 
cuº_dyn_buckës
);

124 
VNET_DEFINE
(
ˇŒout
, 
ùfw_timeout
);

125 
	#V_ùfw_dyn_v
 
	`VNET
(
ùfw_dyn_v
)

	)

126 
	#V_dyn_buckës
 
	`VNET
(
dyn_buckës
)

	)

127 
	#V_cuº_dyn_buckës
 
	`VNET
(
cuº_dyn_buckës
)

	)

128 
	#V_ùfw_timeout
 
	`VNET
(
ùfw_timeout
)

	)

130 
uma_z⁄e_t
 
	gùfw_dyn_ruÀ_z⁄e
;

131 #i‚de‡
__FªeBSD__


132 
DEFINE_SPINLOCK
(
ùfw_dyn_mtx
);

134 
mtx
 
	gùfw_dyn_mtx
;

137 
	#IPFW_DYN_LOCK_INIT
() \

138 
	`mtx_öô
(&
ùfw_dyn_mtx
, "IPFW dy«mi¯ruÀs", 
NULL
, 
MTX_DEF
)

	)

139 
	#IPFW_DYN_LOCK_DESTROY
(Ë
	`mtx_de°roy
(&
ùfw_dyn_mtx
)

	)

140 
	#IPFW_DYN_LOCK
(Ë
	`mtx_lock
(&
ùfw_dyn_mtx
)

	)

141 
	#IPFW_DYN_UNLOCK
(Ë
	`mtx_u∆ock
(&
ùfw_dyn_mtx
)

	)

142 
	#IPFW_DYN_LOCK_ASSERT
(Ë
	`mtx_as£π
(&
ùfw_dyn_mtx
, 
MA_OWNED
)

	)

145 
	$ùfw_dyn_u∆ock
()

147 
	`IPFW_DYN_UNLOCK
();

148 
	}
}

153 
VNET_DEFINE
(
u_öt32_t
, 
dyn_ack_li„time
);

154 
VNET_DEFINE
(
u_öt32_t
, 
dyn_syn_li„time
);

155 
VNET_DEFINE
(
u_öt32_t
, 
dyn_fö_li„time
);

156 
VNET_DEFINE
(
u_öt32_t
, 
dyn_r°_li„time
);

157 
VNET_DEFINE
(
u_öt32_t
, 
dyn_udp_li„time
);

158 
VNET_DEFINE
(
u_öt32_t
, 
dyn_sh‹t_li„time
);

160 
	#V_dyn_ack_li„time
 
	`VNET
(
dyn_ack_li„time
)

	)

161 
	#V_dyn_syn_li„time
 
	`VNET
(
dyn_syn_li„time
)

	)

162 
	#V_dyn_fö_li„time
 
	`VNET
(
dyn_fö_li„time
)

	)

163 
	#V_dyn_r°_li„time
 
	`VNET
(
dyn_r°_li„time
)

	)

164 
	#V_dyn_udp_li„time
 
	`VNET
(
dyn_udp_li„time
)

	)

165 
	#V_dyn_sh‹t_li„time
 
	`VNET
(
dyn_sh‹t_li„time
)

	)

175 
VNET_DEFINE
(
u_öt32_t
, 
dyn_kì∑live_öãrvÆ
);

176 
VNET_DEFINE
(
u_öt32_t
, 
dyn_kì∑live_≥riod
);

177 
VNET_DEFINE
(
u_öt32_t
, 
dyn_kì∑live
);

179 
	#V_dyn_kì∑live_öãrvÆ
 
	`VNET
(
dyn_kì∑live_öãrvÆ
)

	)

180 
	#V_dyn_kì∑live_≥riod
 
	`VNET
(
dyn_kì∑live_≥riod
)

	)

181 
	#V_dyn_kì∑live
 
	`VNET
(
dyn_kì∑live
)

	)

183 
VNET_DEFINE
(
u_öt32_t
, 
dyn_cou¡
);

184 
VNET_DEFINE
(
u_öt32_t
, 
dyn_max
);

186 
	#V_dyn_cou¡
 
	`VNET
(
dyn_cou¡
)

	)

187 
	#V_dyn_max
 
	`VNET
(
dyn_max
)

	)

189 #ifde‡
SYSCTL_NODE


191 
	$SYSBEGIN
(
f2
)

193 
	`SYSCTL_DECL
(
_√t_öë_ù_fw
);

194 
	`SYSCTL_VNET_UINT
(
_√t_öë_ù_fw
, 
OID_AUTO
, 
dyn_buckës
,

195 
CTLFLAG_RW
, &
	`VNET_NAME
(
dyn_buckës
), 0,

197 
	`SYSCTL_VNET_UINT
(
_√t_öë_ù_fw
, 
OID_AUTO
, 
cuº_dyn_buckës
,

198 
CTLFLAG_RD
, &
	`VNET_NAME
(
cuº_dyn_buckës
), 0,

200 
	`SYSCTL_VNET_UINT
(
_√t_öë_ù_fw
, 
OID_AUTO
, 
dyn_cou¡
,

201 
CTLFLAG_RD
, &
	`VNET_NAME
(
dyn_cou¡
), 0,

203 
	`SYSCTL_VNET_UINT
(
_√t_öë_ù_fw
, 
OID_AUTO
, 
dyn_max
,

204 
CTLFLAG_RW
, &
	`VNET_NAME
(
dyn_max
), 0,

206 
	`SYSCTL_VNET_UINT
(
_√t_öë_ù_fw
, 
OID_AUTO
, 
dyn_ack_li„time
,

207 
CTLFLAG_RW
, &
	`VNET_NAME
(
dyn_ack_li„time
), 0,

209 
	`SYSCTL_VNET_UINT
(
_√t_öë_ù_fw
, 
OID_AUTO
, 
dyn_syn_li„time
,

210 
CTLFLAG_RW
, &
	`VNET_NAME
(
dyn_syn_li„time
), 0,

212 
	`SYSCTL_VNET_UINT
(
_√t_öë_ù_fw
, 
OID_AUTO
, 
dyn_fö_li„time
,

213 
CTLFLAG_RW
, &
	`VNET_NAME
(
dyn_fö_li„time
), 0,

215 
	`SYSCTL_VNET_UINT
(
_√t_öë_ù_fw
, 
OID_AUTO
, 
dyn_r°_li„time
,

216 
CTLFLAG_RW
, &
	`VNET_NAME
(
dyn_r°_li„time
), 0,

218 
	`SYSCTL_VNET_UINT
(
_√t_öë_ù_fw
, 
OID_AUTO
, 
dyn_udp_li„time
,

219 
CTLFLAG_RW
, &
	`VNET_NAME
(
dyn_udp_li„time
), 0,

221 
	`SYSCTL_VNET_UINT
(
_√t_öë_ù_fw
, 
OID_AUTO
, 
dyn_sh‹t_li„time
,

222 
CTLFLAG_RW
, &
	`VNET_NAME
(
dyn_sh‹t_li„time
), 0,

224 
	`SYSCTL_VNET_UINT
(
_√t_öë_ù_fw
, 
OID_AUTO
, 
dyn_kì∑live
,

225 
CTLFLAG_RW
, &
	`VNET_NAME
(
dyn_kì∑live
), 0,

228 
SYSEND


233 
__ölöe
 

234 
	$hash_∑ckë6
(
ùfw_Êow_id
 *
id
)

236 
u_öt32_t
 
i
;

237 
i
 = (
id
->
d°_ù6
.
__u6_addr
.
__u6_addr32
[2]) ^

238 (
id
->
d°_ù6
.
__u6_addr
.
__u6_addr32
[3]) ^

239 (
id
->
§c_ù6
.
__u6_addr
.
__u6_addr32
[2]) ^

240 (
id
->
§c_ù6
.
__u6_addr
.
__u6_addr32
[3]) ^

241 (
id
->
d°_p‹t
Ë^ (id->
§c_p‹t
);

242  
i
;

243 
	}
}

250 
__ölöe
 

251 
	$hash_∑ckë
(
ùfw_Êow_id
 *
id
)

253 
u_öt32_t
 
i
;

255 #ifde‡
INET6


256 i‡(
	`IS_IP6_FLOW_ID
(
id
))

257 
i
 = 
	`hash_∑ckë6
(
id
);

260 
i
 = (
id
->
d°_ù
Ë^ (id->
§c_ù
Ë^ (id->
d°_p‹t
Ë^ (id->
§c_p‹t
);

261 
i
 &(
V_cuº_dyn_buckës
 - 1);

262  
i
;

263 
	}
}

265 
__ölöe
 

266 
	$u∆ök_dyn_ruÀ_¥öt
(
ùfw_Êow_id
 *
id
)

268 
ö_addr
 
da
;

269 #ifde‡
INET6


270 
§c
[
INET6_ADDRSTRLEN
], 
d°
[INET6_ADDRSTRLEN];

272 
§c
[
INET_ADDRSTRLEN
], 
d°
[INET_ADDRSTRLEN];

275 #ifde‡
INET6


276 i‡(
	`IS_IP6_FLOW_ID
(
id
)) {

277 
	`ù6_•rötf
(
§c
, &
id
->
§c_ù6
);

278 
	`ù6_•rötf
(
d°
, &
id
->
d°_ù6
);

282 
da
.
s_addr
 = 
	`ht⁄l
(
id
->
§c_ù
);

283 
	`öë_¡ﬂ_r
(
da
, 
§c
);

284 
da
.
s_addr
 = 
	`ht⁄l
(
id
->
d°_ù
);

285 
	`öë_¡ﬂ_r
(
da
, 
d°
);

287 
	`¥ötf
("ipfw: unlinkÉntry %s %d -> %s %d, %dÜeft\n",

288 
§c
, 
id
->
§c_p‹t
, 
d°
, id->
d°_p‹t
, 
V_dyn_cou¡
 - 1);

289 
	}
}

297 
	#UNLINK_DYN_RULE
(
¥ev
, 
hód
, 
q
) { \

298 
ùfw_dyn_ruÀ
 *
ﬁd_q
 = 
q
; \

301 i‡(
q
->
dyn_ty≥
 =
O_LIMIT
) \

302 
q
->
∑ª¡
->
cou¡
--; \

303 
	`DEB
(
	`u∆ök_dyn_ruÀ_¥öt
(&
q
->
id
);) \

304 i‡(
¥ev
 !
NULL
) \

305 
¥ev
->
√xt
 = 
q
 = q->next; \

307 
hód
 = 
q
 = q->
√xt
; \

308 
V_dyn_cou¡
--; \

309 
	`uma_z‰ì
(
ùfw_dyn_ruÀ_z⁄e
, 
ﬁd_q
); }

	)

311 
	#TIME_LEQ
(
a
,
b
Ë(()(◊)-(b)Ë<0)

	)

326 
	$ªmove_dyn_ruÀ
(
ù_fw
 *
ruÀ
, 
ùfw_dyn_ruÀ
 *
kìp_me
)

328 
u_öt32_t
 
œ°_ªmove
 = 0;

330 
	#FORCE
 (
kìp_me
 =
NULL
)

	)

332 
ùfw_dyn_ruÀ
 *
¥ev
, *
q
;

333 
i
, 
∑ss
 = 0, 
max_∑ss
 = 0;

335 
	`IPFW_DYN_LOCK_ASSERT
();

337 i‡(
V_ùfw_dyn_v
 =
NULL
 || 
V_dyn_cou¡
 == 0)

340 i‡(!
FORCE
 && 
œ°_ªmove
 =
time_u±ime
)

342 
œ°_ªmove
 = 
time_u±ime
;

349 
√xt_∑ss
:

350 
i
 = 0 ; i < 
V_cuº_dyn_buckës
 ; i++) {

351 
¥ev
=
NULL
, 
q
 = 
V_ùfw_dyn_v
[
i
] ; q ; ) {

355 i‡(
q
 =
kìp_me
)

356 
√xt
;

357 i‡(
ruÀ
 !
NULL
 &&ÑuÀ !
q
->rule)

358 
√xt
;

359 i‡(
q
->
dyn_ty≥
 =
O_LIMIT_PARENT
) {

364 
max_∑ss
 = 1;

365 i‡(
∑ss
 == 0)

366 
√xt
;

367 i‡(
FORCE
 && 
q
->
cou¡
 != 0 ) {

369 
	`¥ötf
("ipfw: OUCH! cannotÑemoveÑule,"

370 " cou¡ %d\n", 
q
->
cou¡
);

373 i‡(!
FORCE
 &&

374 !
	`TIME_LEQ
–
q
->
expúe
, 
time_u±ime
 ))

375 
√xt
;

377 i‡(
q
->
dyn_ty≥
 !
O_LIMIT_PARENT
 || !q->
cou¡
) {

378 
	`UNLINK_DYN_RULE
(
¥ev
, 
V_ùfw_dyn_v
[
i
], 
q
);

381 
√xt
:

382 
¥ev
=
q
;

383 
q
=q->
√xt
;

386 i‡(
∑ss
++ < 
max_∑ss
)

387 
√xt_∑ss
;

388 
	}
}

391 
	$ùfw_ªmove_dyn_chûdªn
(
ù_fw
 *
ruÀ
)

393 
	`IPFW_DYN_LOCK
();

394 
	`ªmove_dyn_ruÀ
(
ruÀ
, 
NULL
 );

395 
	`IPFW_DYN_UNLOCK
();

396 
	}
}

401 
ùfw_dyn_ruÀ
 *

402 
	$lookup_dyn_ruÀ_locked
(
ùfw_Êow_id
 *
pkt
, *
m©ch_dúe˘i⁄
,

403 
t˝hdr
 *
t˝
)

409 
	#MATCH_REVERSE
 0

	)

410 
	#MATCH_FORWARD
 1

	)

411 
	#MATCH_NONE
 2

	)

412 
	#MATCH_UNKNOWN
 3

	)

413 
i
, 
dú
 = 
MATCH_NONE
;

414 
ùfw_dyn_ruÀ
 *
¥ev
, *
q
=
NULL
;

416 
	`IPFW_DYN_LOCK_ASSERT
();

418 i‡(
V_ùfw_dyn_v
 =
NULL
)

419 
d⁄e
;

420 
i
 = 
	`hash_∑ckë
–
pkt
 );

421 
¥ev
=
NULL
, 
q
 = 
V_ùfw_dyn_v
[
i
] ; q != NULL ; ) {

422 i‡(
q
->
dyn_ty≥
 =
O_LIMIT_PARENT
 && q->
cou¡
)

423 
√xt
;

424 i‡(
	`TIME_LEQ
–
q
->
expúe
, 
time_u±ime
)) {

425 
	`UNLINK_DYN_RULE
(
¥ev
, 
V_ùfw_dyn_v
[
i
], 
q
);

428 i‡(
pkt
->
¥Ÿo
 =
q
->
id
.proto &&

429 
q
->
dyn_ty≥
 !
O_LIMIT_PARENT
) {

430 i‡(
	`IS_IP6_FLOW_ID
(
pkt
)) {

431 i‡(
	`IN6_ARE_ADDR_EQUAL
(&(
pkt
->
§c_ù6
),

432 &(
q
->
id
.
§c_ù6
)) &&

433 
	`IN6_ARE_ADDR_EQUAL
(&(
pkt
->
d°_ù6
),

434 &(
q
->
id
.
d°_ù6
)) &&

435 
pkt
->
§c_p‹t
 =
q
->
id
.src_port &&

436 
pkt
->
d°_p‹t
 =
q
->
id
.dst_port ) {

437 
dú
 = 
MATCH_FORWARD
;

440 i‡(
	`IN6_ARE_ADDR_EQUAL
(&(
pkt
->
§c_ù6
),

441 &(
q
->
id
.
d°_ù6
)) &&

442 
	`IN6_ARE_ADDR_EQUAL
(&(
pkt
->
d°_ù6
),

443 &(
q
->
id
.
§c_ù6
)) &&

444 
pkt
->
§c_p‹t
 =
q
->
id
.
d°_p‹t
 &&

445 
pkt
->
d°_p‹t
 =
q
->
id
.
§c_p‹t
 ) {

446 
dú
 = 
MATCH_REVERSE
;

450 i‡(
pkt
->
§c_ù
 =
q
->
id
.src_ip &&

451 
pkt
->
d°_ù
 =
q
->
id
.dst_ip &&

452 
pkt
->
§c_p‹t
 =
q
->
id
.src_port &&

453 
pkt
->
d°_p‹t
 =
q
->
id
.dst_port ) {

454 
dú
 = 
MATCH_FORWARD
;

457 i‡(
pkt
->
§c_ù
 =
q
->
id
.
d°_ù
 &&

458 
pkt
->
d°_ù
 =
q
->
id
.
§c_ù
 &&

459 
pkt
->
§c_p‹t
 =
q
->
id
.
d°_p‹t
 &&

460 
pkt
->
d°_p‹t
 =
q
->
id
.
§c_p‹t
 ) {

461 
dú
 = 
MATCH_REVERSE
;

466 
√xt
:

467 
¥ev
 = 
q
;

468 
q
 = q->
√xt
;

470 i‡(
q
 =
NULL
)

471 
d⁄e
;

473 i‡–
¥ev
 !
NULL
) {

474 
¥ev
->
√xt
 = 
q
->next;

475 
q
->
√xt
 = 
V_ùfw_dyn_v
[
i
];

476 
V_ùfw_dyn_v
[
i
] = 
q
;

478 i‡(
pkt
->
¥Ÿo
 =
IPPROTO_TCP
) {

479 
u_ch¨
 
Êags
 = 
pkt
->
_Êags
 & (
TH_FIN
|
TH_SYN
|
TH_RST
);

481 
	#BOTH_SYN
 (
TH_SYN
 | (TH_SYN << 8))

	)

482 
	#BOTH_FIN
 (
TH_FIN
 | (TH_FIN << 8))

	)

483 
q
->
°©e
 |(
dú
 =
MATCH_FORWARD
 ) ? 
Êags
 : (flags << 8);

484 
q
->
°©e
) {

485 
TH_SYN
:

486 
q
->
expúe
 = 
time_u±ime
 + 
V_dyn_syn_li„time
;

489 
BOTH_SYN
:

490 
BOTH_SYN
 | 
TH_FIN
 :

491 
BOTH_SYN
 | (
TH_FIN
 << 8) :

492 i‡(
t˝
) {

493 
	#_SEQ_GE
(
a
,
b
Ë(()◊Ë- ()(bË>0)

	)

494 
u_öt32_t
 
ack
 = 
	`¡ohl
(
t˝
->
th_ack
);

495 i‡(
dú
 =
MATCH_FORWARD
) {

496 i‡(
q
->
ack_fwd
 =0 || 
	`_SEQ_GE
(
ack
, q->ack_fwd))

497 
q
->
ack_fwd
 = 
ack
;

502 i‡(
q
->
ack_ªv
 =0 || 
	`_SEQ_GE
(
ack
, q->ack_rev))

503 
q
->
ack_ªv
 = 
ack
;

509 
q
->
expúe
 = 
time_u±ime
 + 
V_dyn_ack_li„time
;

512 
BOTH_SYN
 | 
BOTH_FIN
:

513 i‡(
V_dyn_fö_li„time
 >
V_dyn_kì∑live_≥riod
)

514 
V_dyn_fö_li„time
 = 
V_dyn_kì∑live_≥riod
 - 1;

515 
q
->
expúe
 = 
time_u±ime
 + 
V_dyn_fö_li„time
;

524 i‡–(
q
->
°©e
 & ((
TH_RST
 << 8)|TH_RST)) == 0)

525 
	`¥ötf
("övÆid sèã: 0x%x\n", 
q
->
°©e
);

527 i‡(
V_dyn_r°_li„time
 >
V_dyn_kì∑live_≥riod
)

528 
V_dyn_r°_li„time
 = 
V_dyn_kì∑live_≥riod
 - 1;

529 
q
->
expúe
 = 
time_u±ime
 + 
V_dyn_r°_li„time
;

532 } i‡(
pkt
->
¥Ÿo
 =
IPPROTO_UDP
) {

533 
q
->
expúe
 = 
time_u±ime
 + 
V_dyn_udp_li„time
;

536 
q
->
expúe
 = 
time_u±ime
 + 
V_dyn_sh‹t_li„time
;

538 
d⁄e
:

539 i‡(
m©ch_dúe˘i⁄
)

540 *
m©ch_dúe˘i⁄
 = 
dú
;

541  
q
;

542 
	}
}

544 
ùfw_dyn_ruÀ
 *

545 
	$ùfw_lookup_dyn_ruÀ
(
ùfw_Êow_id
 *
pkt
, *
m©ch_dúe˘i⁄
,

546 
t˝hdr
 *
t˝
)

548 
ùfw_dyn_ruÀ
 *
q
;

550 
	`IPFW_DYN_LOCK
();

551 
q
 = 
	`lookup_dyn_ruÀ_locked
(
pkt
, 
m©ch_dúe˘i⁄
, 
t˝
);

552 i‡(
q
 =
NULL
)

553 
	`IPFW_DYN_UNLOCK
();

555  
q
;

556 
	}
}

559 
	$ªÆloc_dy«mic_èbÀ
()

561 
	`IPFW_DYN_LOCK_ASSERT
();

569 i‡(
V_dyn_buckës
 > 65536)

570 
V_dyn_buckës
 = 1024;

571 i‡((
V_dyn_buckës
 & (V_dyn_buckets-1)) != 0) {

572 
V_dyn_buckës
 = 
V_cuº_dyn_buckës
;

575 
V_cuº_dyn_buckës
 = 
V_dyn_buckës
;

576 i‡(
V_ùfw_dyn_v
 !
NULL
)

577 
	`‰ì
(
V_ùfw_dyn_v
, 
M_IPFW
);

579 
V_ùfw_dyn_v
 = 
	`mÆloc
(
V_cuº_dyn_buckës
 * (
ùfw_dyn_ruÀ
 *),

580 
M_IPFW
, 
M_NOWAIT
 | 
M_ZERO
);

581 i‡(
V_ùfw_dyn_v
 !
NULL
 || 
V_cuº_dyn_buckës
 <= 2)

583 
V_cuº_dyn_buckës
 /= 2;

585 
	}
}

597 
ùfw_dyn_ruÀ
 *

598 
	$add_dyn_ruÀ
(
ùfw_Êow_id
 *
id
, 
u_öt8_t
 
dyn_ty≥
, 
ù_fw
 *
ruÀ
)

600 
ùfw_dyn_ruÀ
 *
r
;

601 
i
;

603 
	`IPFW_DYN_LOCK_ASSERT
();

605 i‡(
V_ùfw_dyn_v
 =
NULL
 ||

606 (
V_dyn_cou¡
 =0 && 
V_dyn_buckës
 !
V_cuº_dyn_buckës
)) {

607 
	`ªÆloc_dy«mic_èbÀ
();

608 i‡(
V_ùfw_dyn_v
 =
NULL
)

609  
NULL
;

611 
i
 = 
	`hash_∑ckë
(
id
);

613 
r
 = 
	`uma_zÆloc
(
ùfw_dyn_ruÀ_z⁄e
, 
M_NOWAIT
 | 
M_ZERO
);

614 i‡(
r
 =
NULL
) {

615 
	`¥ötf
 ("ipfw: sorry cannotállocate state\n");

616  
NULL
;

620 i‡(
dyn_ty≥
 =
O_LIMIT
) {

621 
ùfw_dyn_ruÀ
 *
∑ª¡
 = (ùfw_dyn_ruÀ *)
ruÀ
;

622 i‡–
∑ª¡
->
dyn_ty≥
 !
O_LIMIT_PARENT
)

623 
	`∑nic
("invalidÖarent");

624 
∑ª¡
->
cou¡
++;

625 
r
->
∑ª¡
 =Öarent;

626 
ruÀ
 = 
∑ª¡
->rule;

629 
r
->
id
 = *id;

630 
r
->
expúe
 = 
time_u±ime
 + 
V_dyn_syn_li„time
;

631 
r
->
ruÀ
 =Ñule;

632 
r
->
dyn_ty≥
 = dyn_type;

633 
r
->
p˙t
 =Ñ->
b˙t
 = 0;

634 
r
->
cou¡
 = 0;

636 
r
->
buckë
 = 
i
;

637 
r
->
√xt
 = 
V_ùfw_dyn_v
[
i
];

638 
V_ùfw_dyn_v
[
i
] = 
r
;

639 
V_dyn_cou¡
++;

640 
	`DEB
({

641 
ö_addr
 
da
;

642 #ifde‡
INET6


643 
§c
[
INET6_ADDRSTRLEN
];

644 
d°
[
INET6_ADDRSTRLEN
];

646 
§c
[
INET_ADDRSTRLEN
];

647 
d°
[
INET_ADDRSTRLEN
];

650 #ifde‡
INET6


651 i‡(
	`IS_IP6_FLOW_ID
(&(
r
->
id
))) {

652 
	`ù6_•rötf
(
§c
, &
r
->
id
.
§c_ù6
);

653 
	`ù6_•rötf
(
d°
, &
r
->
id
.
d°_ù6
);

657 
da
.
s_addr
 = 
	`ht⁄l
(
r
->
id
.
§c_ù
);

658 
	`öë_¡ﬂ_r
(
da
, 
§c
);

659 
da
.
s_addr
 = 
	`ht⁄l
(
r
->
id
.
d°_ù
);

660 
	`öë_¡ﬂ_r
(
da
, 
d°
);

662 
	`¥ötf
("ipfw:ádd dynÉntryÅy %d %s %d -> %s %d,Åotal %d\n",

663 
dyn_ty≥
, 
§c
, 
r
->
id
.
§c_p‹t
, 
d°
,Ñ->id.
d°_p‹t
,

664 
V_dyn_cou¡
);

666  
r
;

667 
	}
}

673 
ùfw_dyn_ruÀ
 *

674 
	$lookup_dyn_∑ª¡
(
ùfw_Êow_id
 *
pkt
, 
ù_fw
 *
ruÀ
)

676 
ùfw_dyn_ruÀ
 *
q
;

677 
i
;

679 
	`IPFW_DYN_LOCK_ASSERT
();

681 i‡(
V_ùfw_dyn_v
) {

682 
is_v6
 = 
	`IS_IP6_FLOW_ID
(
pkt
);

683 
i
 = 
	`hash_∑ckë
–
pkt
 );

684 
q
 = 
V_ùfw_dyn_v
[
i
] ; q !
NULL
 ; q=q->
√xt
)

685 i‡(
q
->
dyn_ty≥
 =
O_LIMIT_PARENT
 &&

686 
ruÀ
=
q
->rule &&

687 
pkt
->
¥Ÿo
 =
q
->
id
.proto &&

688 
pkt
->
§c_p‹t
 =
q
->
id
.src_port &&

689 
pkt
->
d°_p‹t
 =
q
->
id
.dst_port &&

691 (
is_v6
 &&

692 
	`IN6_ARE_ADDR_EQUAL
(&(
pkt
->
§c_ù6
),

693 &(
q
->
id
.
§c_ù6
)) &&

694 
	`IN6_ARE_ADDR_EQUAL
(&(
pkt
->
d°_ù6
),

695 &(
q
->
id
.
d°_ù6
))) ||

696 (!
is_v6
 &&

697 
pkt
->
§c_ù
 =
q
->
id
.src_ip &&

698 
pkt
->
d°_ù
 =
q
->
id
.dst_ip)

701 
q
->
expúe
 = 
time_u±ime
 + 
V_dyn_sh‹t_li„time
;

702 
	`DEB
(
	`¥ötf
("ùfw:Üookup_dyn_∑ª¡ found 0x%p\n",
q
);)

703  
q
;

706  
	`add_dyn_ruÀ
(
pkt
, 
O_LIMIT_PARENT
, 
ruÀ
);

707 
	}
}

716 
	$ùfw_ö°Æl_°©e
(
ù_fw
 *
ruÀ
, 
ùfw_ö¢_limô
 *
cmd
,

717 
ù_fw_¨gs
 *
¨gs
, 
uöt32_t
 
èbÀ¨g
)

719 
œ°_log
;

720 
ùfw_dyn_ruÀ
 *
q
;

721 
ö_addr
 
da
;

722 #ifde‡
INET6


723 
§c
[
INET6_ADDRSTRLEN
 + 2], 
d°
[INET6_ADDRSTRLEN + 2];

725 
§c
[
INET_ADDRSTRLEN
], 
d°
[INET_ADDRSTRLEN];

728 
§c
[0] = '\0';

729 
d°
[0] = '\0';

731 
	`IPFW_DYN_LOCK
();

733 
	`DEB
(

734 #ifde‡
INET6


735 i‡(
	`IS_IP6_FLOW_ID
(&(
¨gs
->
f_id
))) {

736 
	`ù6_•rötf
(
§c
, &
¨gs
->
f_id
.
§c_ù6
);

737 
	`ù6_•rötf
(
d°
, &
¨gs
->
f_id
.
d°_ù6
);

741 
da
.
s_addr
 = 
	`ht⁄l
(
¨gs
->
f_id
.
§c_ù
);

742 
	`öë_¡ﬂ_r
(
da
, 
§c
);

743 
da
.
s_addr
 = 
	`ht⁄l
(
¨gs
->
f_id
.
d°_ù
);

744 
	`öë_¡ﬂ_r
(
da
, 
d°
);

746 
	`¥ötf
("ipfw: %s:Åype %d %s %u -> %s %u\n",

747 
__func__
, 
cmd
->
o
.
›code
, 
§c
, 
¨gs
->
f_id
.
§c_p‹t
,

748 
d°
, 
¨gs
->
f_id
.
d°_p‹t
);

749 
§c
[0] = '\0';

750 
d°
[0] = '\0';

753 
q
 = 
	`lookup_dyn_ruÀ_locked
(&
¨gs
->
f_id
, 
NULL
, NULL);

755 i‡(
q
 !
NULL
) {

756 i‡(
œ°_log
 !
time_u±ime
) {

757 
œ°_log
 = 
time_u±ime
;

758 
	`¥ötf
("ipfw: %s:ÉntryálreadyÖresent, done\n",

759 
__func__
);

761 
	`IPFW_DYN_UNLOCK
();

765 i‡(
V_dyn_cou¡
 >
V_dyn_max
)

767 
	`ªmove_dyn_ruÀ
(
NULL
, (
ùfw_dyn_ruÀ
 *)1);

769 i‡(
V_dyn_cou¡
 >
V_dyn_max
) {

770 i‡(
œ°_log
 !
time_u±ime
) {

771 
œ°_log
 = 
time_u±ime
;

772 
	`¥ötf
("ùfw: %s: Toÿm™y dy«mi¯ruÀs\n", 
__func__
);

774 
	`IPFW_DYN_UNLOCK
();

778 
cmd
->
o
.
›code
) {

779 
O_KEEP_STATE
:

780 
	`add_dyn_ruÀ
(&
¨gs
->
f_id
, 
O_KEEP_STATE
, 
ruÀ
);

783 
O_LIMIT
: {

784 
ùfw_Êow_id
 
id
;

785 
ùfw_dyn_ruÀ
 *
∑ª¡
;

786 
uöt32_t
 
c⁄n_limô
;

787 
uöt16_t
 
limô_mask
 = 
cmd
->limit_mask;

789 
c⁄n_limô
 = (
cmd
->c⁄n_limô =
IP_FW_TABLEARG
) ?

790 
èbÀ¨g
 : 
cmd
->
c⁄n_limô
;

792 
	`DEB
(

793 i‡(
cmd
->
c⁄n_limô
 =
IP_FW_TABLEARG
)

794 
	`¥ötf
("ipfw: %s: O_LIMITÑule, conn_limit: %u "

795 "—abÀ¨g)\n", 
__func__
, 
c⁄n_limô
);

797 
	`¥ötf
("ipfw: %s: O_LIMITÑule, conn_limit: %u\n",

798 
__func__
, 
c⁄n_limô
);

801 
id
.
d°_ù
 = id.
§c_ù
 = id.
d°_p‹t
 = id.
§c_p‹t
 = 0;

802 
id
.
¥Ÿo
 = 
¨gs
->
f_id
.proto;

803 
id
.
addr_ty≥
 = 
¨gs
->
f_id
.addr_type;

804 
id
.
fib
 = 
	`M_GETFIB
(
¨gs
->
m
);

806 i‡(
	`IS_IP6_FLOW_ID
 (&(
¨gs
->
f_id
))) {

807 i‡(
limô_mask
 & 
DYN_SRC_ADDR
)

808 
id
.
§c_ù6
 = 
¨gs
->
f_id
.src_ip6;

809 i‡(
limô_mask
 & 
DYN_DST_ADDR
)

810 
id
.
d°_ù6
 = 
¨gs
->
f_id
.dst_ip6;

812 i‡(
limô_mask
 & 
DYN_SRC_ADDR
)

813 
id
.
§c_ù
 = 
¨gs
->
f_id
.src_ip;

814 i‡(
limô_mask
 & 
DYN_DST_ADDR
)

815 
id
.
d°_ù
 = 
¨gs
->
f_id
.dst_ip;

817 i‡(
limô_mask
 & 
DYN_SRC_PORT
)

818 
id
.
§c_p‹t
 = 
¨gs
->
f_id
.src_port;

819 i‡(
limô_mask
 & 
DYN_DST_PORT
)

820 
id
.
d°_p‹t
 = 
¨gs
->
f_id
.dst_port;

821 i‡((
∑ª¡
 = 
	`lookup_dyn_∑ª¡
(&
id
, 
ruÀ
)Ë=
NULL
) {

822 
	`¥ötf
("ùfw: %s:áddÖ¨íàÁûed\n", 
__func__
);

823 
	`IPFW_DYN_UNLOCK
();

827 i‡(
∑ª¡
->
cou¡
 >
c⁄n_limô
) {

829 
	`ªmove_dyn_ruÀ
(
ruÀ
, 
∑ª¡
);

830 i‡(
∑ª¡
->
cou¡
 >
c⁄n_limô
) {

831 i‡(
V_fw_vîbo£
 && 
œ°_log
 !
time_u±ime
) {

832 
œ°_log
 = 
time_u±ime
;

833 #ifde‡
INET6


838 i‡(
	`IS_IP6_FLOW_ID
(&(
¨gs
->
f_id
))) {

839 
ù6buf
[
INET6_ADDRSTRLEN
];

840 
	`¢¥ötf
(
§c
, (src),

841 "[%s]", 
	`ù6_•rötf
(
ù6buf
,

842 &
¨gs
->
f_id
.
§c_ù6
));

843 
	`¢¥ötf
(
d°
, (dst),

844 "[%s]", 
	`ù6_•rötf
(
ù6buf
,

845 &
¨gs
->
f_id
.
d°_ù6
));

849 
da
.
s_addr
 =

850 
	`ht⁄l
(
¨gs
->
f_id
.
§c_ù
);

851 
	`öë_¡ﬂ_r
(
da
, 
§c
);

852 
da
.
s_addr
 =

853 
	`ht⁄l
(
¨gs
->
f_id
.
d°_ù
);

854 
	`öë_¡ﬂ_r
(
da
, 
d°
);

856 
	`log
(
LOG_SECURITY
 | 
LOG_DEBUG
,

858 
∑ª¡
->
ruÀ
->
ruÀnum
,

860 
§c
, (
¨gs
->
f_id
.
§c_p‹t
),

861 
d°
, (
¨gs
->
f_id
.
d°_p‹t
),

864 
	`IPFW_DYN_UNLOCK
();

868 
	`add_dyn_ruÀ
(&
¨gs
->
f_id
, 
O_LIMIT
, (
ù_fw
 *)
∑ª¡
);

872 
	`¥ötf
("ipfw: %s: unknown dynamicÑuleÅype %u\n",

873 
__func__
, 
cmd
->
o
.
›code
);

874 
	`IPFW_DYN_UNLOCK
();

879 
	`lookup_dyn_ruÀ_locked
(&
¨gs
->
f_id
, 
NULL
, NULL);

881 
	`IPFW_DYN_UNLOCK
();

883 
	}
}

893 
mbuf
 *

894 
	$ùfw_£nd_pkt
(
mbuf
 *
ª∂yto
, 
ùfw_Êow_id
 *
id
, 
u_öt32_t
 
£q
,

895 
u_öt32_t
 
ack
, 
Êags
)

897 
mbuf
 *
m
 = 
NULL
;

898 
Àn
, 
dú
;

899 
ù
 *
h
 = 
NULL
;

900 #ifde‡
INET6


901 
ù6_hdr
 *
h6
 = 
NULL
;

903 
t˝hdr
 *
th
 = 
NULL
;

905 
	`MGETHDR
(
m
, 
M_DONTWAIT
, 
MT_DATA
);

906 i‡(
m
 =
NULL
)

907  (
NULL
);

909 
	`M_SETFIB
(
m
, 
id
->
fib
);

910 #ifde‡
MAC


911 i‡(
ª∂yto
 !
NULL
)

912 
	`mac_√töë_fúewÆl_ª∂y
(
ª∂yto
, 
m
);

914 
	`mac_√töë_fúewÆl_£nd
(
m
);

916 ()
ª∂yto
;

919 
id
->
addr_ty≥
) {

921 
Àn
 = (
ù
Ë+ (
t˝hdr
);

923 #ifde‡
INET6


925 
Àn
 = (
ù6_hdr
Ë+ (
t˝hdr
);

930 
	`FREE_PKT
(
m
);

931  (
NULL
);

933 
dú
 = ((
Êags
 & (
TH_SYN
 | 
TH_RST
)) == TH_SYN);

935 
m
->
m_d©a
 +
max_lökhdr
;

936 
m
->
m_Êags
 |
M_SKIP_FIREWALL
;

937 
m
->
m_pkthdr
.
Àn
 = m->
m_Àn
 =Üen;

938 
m
->
m_pkthdr
.
rcvif
 = 
NULL
;

939 
	`bzîo
(
m
->
m_d©a
, 
Àn
);

941 
id
->
addr_ty≥
) {

943 
h
 = 
	`mtod
(
m
, 
ù
 *);

946 
h
->
ù_p
 = 
IPPROTO_TCP
;

947 
h
->
ù_Àn
 = 
	`ht⁄s
((
t˝hdr
));

948 i‡(
dú
) {

949 
h
->
ù_§c
.
s_addr
 = 
	`ht⁄l
(
id
->
§c_ù
);

950 
h
->
ù_d°
.
s_addr
 = 
	`ht⁄l
(
id
->
d°_ù
);

952 
h
->
ù_§c
.
s_addr
 = 
	`ht⁄l
(
id
->
d°_ù
);

953 
h
->
ù_d°
.
s_addr
 = 
	`ht⁄l
(
id
->
§c_ù
);

956 
th
 = (
t˝hdr
 *)(
h
 + 1);

958 #ifde‡
INET6


960 
h6
 = 
	`mtod
(
m
, 
ù6_hdr
 *);

963 
h6
->
ù6_nxt
 = 
IPPROTO_TCP
;

964 
h6
->
ù6_∂í
 = 
	`ht⁄s
((
t˝hdr
));

965 i‡(
dú
) {

966 
h6
->
ù6_§c
 = 
id
->
§c_ù6
;

967 
h6
->
ù6_d°
 = 
id
->
d°_ù6
;

969 
h6
->
ù6_§c
 = 
id
->
d°_ù6
;

970 
h6
->
ù6_d°
 = 
id
->
§c_ù6
;

973 
th
 = (
t˝hdr
 *)(
h6
 + 1);

978 i‡(
dú
) {

979 
th
->
th_•‹t
 = 
	`ht⁄s
(
id
->
§c_p‹t
);

980 
th
->
th_dp‹t
 = 
	`ht⁄s
(
id
->
d°_p‹t
);

982 
th
->
th_•‹t
 = 
	`ht⁄s
(
id
->
d°_p‹t
);

983 
th
->
th_dp‹t
 = 
	`ht⁄s
(
id
->
§c_p‹t
);

985 
th
->
th_off
 = (
t˝hdr
) >> 2;

987 i‡(
Êags
 & 
TH_RST
) {

988 i‡(
Êags
 & 
TH_ACK
) {

989 
th
->
th_£q
 = 
	`ht⁄l
(
ack
);

990 
th
->
th_Êags
 = 
TH_RST
;

992 i‡(
Êags
 & 
TH_SYN
)

993 
£q
++;

994 
th
->
th_ack
 = 
	`ht⁄l
(
£q
);

995 
th
->
th_Êags
 = 
TH_RST
 | 
TH_ACK
;

1001 
th
->
th_£q
 = 
	`ht⁄l
(
£q
);

1002 
th
->
th_ack
 = 
	`ht⁄l
(
ack
);

1003 
th
->
th_Êags
 = 
TH_ACK
;

1006 
id
->
addr_ty≥
) {

1008 
th
->
th_sum
 = 
	`ö_cksum
(
m
, 
Àn
);

1011 
h
->
ù_v
 = 4;

1012 
h
->
ù_hl
 = (*h) >> 2;

1013 
h
->
ù_tos
 = 
IPTOS_LOWDELAY
;

1014 
h
->
ù_off
 = 0;

1016 
h
->
ù_Àn
 = 
Àn
;

1017 
h
->
ù_âl
 = 
V_ù_de·é
;

1018 
h
->
ù_sum
 = 0;

1020 #ifde‡
INET6


1022 
th
->
th_sum
 = 
	`ö6_cksum
(
m
, 
IPPROTO_TCP
, (*
h6
),

1023 (
t˝hdr
));

1026 
h6
->
ù6_vfc
 |
IPV6_VERSION
;

1027 
h6
->
ù6_hlim
 = 
IPV6_DEFHLIM
;

1032  (
m
);

1033 
	}
}

1041 
	$ùfw_tick
(* 
v√tx
)

1043 
mbuf
 *
m0
, *
m
, *
m√xt
, **
mèûp
;

1044 #ifde‡
INET6


1045 
mbuf
 *
m6
, **
m6_èûp
;

1047 
i
;

1048 
ùfw_dyn_ruÀ
 *
q
;

1049 #ifde‡
VIMAGE


1050 
v√t
 *
vp
 = 
v√tx
;

1053 
	`CURVNET_SET
(
vp
);

1054 i‡(
V_dyn_kì∑live
 =0 || 
V_ùfw_dyn_v
 =
NULL
 || 
V_dyn_cou¡
 == 0)

1055 
d⁄e
;

1063 
m0
 = 
NULL
;

1064 
mèûp
 = &
m0
;

1065 #ifde‡
INET6


1066 
m6
 = 
NULL
;

1067 
m6_èûp
 = &
m6
;

1069 
	`IPFW_DYN_LOCK
();

1070 
i
 = 0 ; i < 
V_cuº_dyn_buckës
 ; i++) {

1071 
q
 = 
V_ùfw_dyn_v
[
i
] ; q ; q = q->
√xt
 ) {

1072 i‡(
q
->
dyn_ty≥
 =
O_LIMIT_PARENT
)

1074 i‡(
q
->
id
.
¥Ÿo
 !
IPPROTO_TCP
)

1076 i‡–(
q
->
°©e
 & 
BOTH_SYN
) != BOTH_SYN)

1078 i‡(
	`TIME_LEQ
(
time_u±ime
 + 
V_dyn_kì∑live_öãrvÆ
,

1079 
q
->
expúe
))

1081 i‡(
	`TIME_LEQ
(
q
->
expúe
, 
time_u±ime
))

1084 
m
 = 
	`ùfw_£nd_pkt
(
NULL
, &(
q
->
id
), q->
ack_ªv
 - 1,

1085 
q
->
ack_fwd
, 
TH_SYN
);

1086 
m√xt
 = 
	`ùfw_£nd_pkt
(
NULL
, &(
q
->
id
), q->
ack_fwd
 - 1,

1087 
q
->
ack_ªv
, 0);

1089 
q
->
id
.
addr_ty≥
) {

1091 i‡(
m
 !
NULL
) {

1092 *
mèûp
 = 
m
;

1093 
mèûp
 = &(*mèûp)->
m_√xçkt
;

1095 i‡(
m√xt
 !
NULL
) {

1096 *
mèûp
 = 
m√xt
;

1097 
mèûp
 = &(*mèûp)->
m_√xçkt
;

1100 #ifde‡
INET6


1102 i‡(
m
 !
NULL
) {

1103 *
m6_èûp
 = 
m
;

1104 
m6_èûp
 = &(*m6_èûp)->
m_√xçkt
;

1106 i‡(
m√xt
 !
NULL
) {

1107 *
m6_èûp
 = 
m√xt
;

1108 
m6_èûp
 = &(*m6_èûp)->
m_√xçkt
;

1114 
m
 = 
m√xt
 = 
NULL
;

1117 
	`IPFW_DYN_UNLOCK
();

1118 
m
 = 
m√xt
 = 
m0
; m !
NULL
; m = mnext) {

1119 
m√xt
 = 
m
->
m_√xçkt
;

1120 
m
->
m_√xçkt
 = 
NULL
;

1121 
	`ù_ouçut
(
m
, 
NULL
, NULL, 0, NULL, NULL);

1123 #ifde‡
INET6


1124 
m
 = 
m√xt
 = 
m6
; m !
NULL
; m = mnext) {

1125 
m√xt
 = 
m
->
m_√xçkt
;

1126 
m
->
m_√xçkt
 = 
NULL
;

1127 
	`ù6_ouçut
(
m
, 
NULL
, NULL, 0, NULL, NULL, NULL);

1130 
d⁄e
:

1131 
	`ˇŒout_ª£t_⁄
(&
V_ùfw_timeout
, 
V_dyn_kì∑live_≥riod
 * 
hz
,

1132 
ùfw_tick
, 
v√tx
, 0);

1133 
	`CURVNET_RESTORE
();

1134 
	}
}

1137 
	$ùfw_dyn_©èch
()

1139 
ùfw_dyn_ruÀ_z⁄e
 = 
	`uma_z¸óã
("IPFW dynamicÑule",

1140 (
ùfw_dyn_ruÀ
), 
NULL
, NULL, NULL, NULL,

1141 
UMA_ALIGN_PTR
, 0);

1143 
	`IPFW_DYN_LOCK_INIT
();

1144 
	}
}

1147 
	$ùfw_dyn_dëach
()

1149 
	`uma_zde°roy
(
ùfw_dyn_ruÀ_z⁄e
);

1150 
	`IPFW_DYN_LOCK_DESTROY
();

1151 
	}
}

1154 
	$ùfw_dyn_öô
()

1156 
V_ùfw_dyn_v
 = 
NULL
;

1157 
V_dyn_buckës
 = 256;

1158 
V_cuº_dyn_buckës
 = 256;

1160 
V_dyn_ack_li„time
 = 300;

1161 
V_dyn_syn_li„time
 = 20;

1162 
V_dyn_fö_li„time
 = 1;

1163 
V_dyn_r°_li„time
 = 1;

1164 
V_dyn_udp_li„time
 = 10;

1165 
V_dyn_sh‹t_li„time
 = 5;

1167 
V_dyn_kì∑live_öãrvÆ
 = 20;

1168 
V_dyn_kì∑live_≥riod
 = 5;

1169 
V_dyn_kì∑live
 = 1;

1171 
V_dyn_max
 = 4096;

1172 
	`ˇŒout_öô
(&
V_ùfw_timeout
, 
CALLOUT_MPSAFE
);

1173 
	`ˇŒout_ª£t_⁄
(&
V_ùfw_timeout
, 
hz
, 
ùfw_tick
, 
curv√t
, 0);

1174 
	}
}

1177 
	$ùfw_dyn_unöô
(
∑ss
)

1179 i‡(
∑ss
 == 0)

1180 
	`ˇŒout_døö
(&
V_ùfw_timeout
);

1182 i‡(
V_ùfw_dyn_v
 !
NULL
)

1183 
	`‰ì
(
V_ùfw_dyn_v
, 
M_IPFW
);

1185 
	}
}

1188 
	$ùfw_dyn_Àn
()

1190  (
V_ùfw_dyn_v
 =
NULL
) ? 0 :

1191 (
V_dyn_cou¡
 * (
ùfw_dyn_ruÀ
));

1192 
	}
}

1195 
	$ùfw_gë_dy«mic
(**
pbp
, c⁄° *
ï
)

1197 
ùfw_dyn_ruÀ
 *
p
, *
œ°
 = 
NULL
;

1198 *
bp
;

1199 
i
;

1201 i‡(
V_ùfw_dyn_v
 =
NULL
)

1203 
bp
 = *
pbp
;

1205 
	`IPFW_DYN_LOCK
();

1206 
i
 = 0 ; i < 
V_cuº_dyn_buckës
; i++)

1207 
p
 = 
V_ùfw_dyn_v
[
i
] ;Ö !
NULL
;Ö =Ö->
√xt
) {

1208 i‡(
bp
 +  *
p
 <
ï
) {

1209 
ùfw_dyn_ruÀ
 *
d°
 =

1210 (
ùfw_dyn_ruÀ
 *)
bp
;

1211 
	`bc›y
(
p
, 
d°
,  *p);

1212 
	`bc›y
(&(
p
->
ruÀ
->
ruÀnum
), &(
d°
->rule),

1213 (
p
->
ruÀ
->
ruÀnum
));

1218 
	`bc›y
(&(
p
->
ruÀ
->
£t
),

1219 (*)&
d°
->
ruÀ
 +

1220 (
p
->
ruÀ
->
ruÀnum
),

1221 (
p
->
ruÀ
->
£t
));

1228 
	`bc›y
(&
d°
, &d°->
√xt
, (dst));

1229 
œ°
 = 
d°
;

1230 
d°
->
expúe
 =

1231 
	`TIME_LEQ
(
d°
->
expúe
, 
time_u±ime
) ?

1232 0 : 
d°
->
expúe
 - 
time_u±ime
 ;

1233 
bp
 +(
ùfw_dyn_ruÀ
);

1236 
	`IPFW_DYN_UNLOCK
();

1237 i‡(
œ°
 !
NULL
)

1238 
	`bzîo
(&
œ°
->
√xt
, (last));

1239 *
pbp
 = 
bp
;

1240 
	}
}

	@kipfw-mod/ip_fw_log.c

26 
	~<sys/cdefs.h
>

27 
__FBSDID
("$FreeBSD: head/sys/netinet/ipfw/ip_fw_log.c 209845 2010-07-09 11:27:33Z glebius $");

33 #i‡!
deföed
(
KLD_MODULE
)

34 
	~"›t_ùfw.h
"

35 
	~"›t_ùdivît.h
"

36 
	~"›t_ùdn.h
"

37 
	~"›t_öë.h
"

38 #i‚de‡
INET


39 #îr‹ 
IPFIREWALL
 
ªquúes
 
INET
.

42 
	~"›t_öë6.h
"

43 
	~"›t_ù£c.h
"

45 
	~<sys/∑øm.h
>

46 
	~<sys/sy°m.h
>

47 
	~<sys/mbuf.h
>

48 
	~<sys/kî√l.h
>

49 
	~<sys/sockë.h
>

50 
	~<sys/sys˘l.h
>

51 
	~<sys/sy¶og.h
>

52 
	~<√t/ëhî√t.h
>

53 
	~<√t/if.h
>

54 
	~<√t/v√t.h
>

55 
	~<√t/if_ty≥s.h
>

56 
	~<√t/bpf.h
>

58 
	~<√töë/ö.h
>

59 
	~<√töë/ù.h
>

60 
	~<√töë/ù_icmp.h
>

61 
	~<√töë/ù_v¨.h
>

62 
	~<√töë/ù_fw.h
>

63 
	~<√töë/ùfw/ù_fw_¥iv©e.h
>

64 
	~<√töë/t˝_v¨.h
>

65 
	~<√töë/udp.h
>

67 
	~<√töë/ù6.h
>

68 
	~<√töë/icmp6.h
>

69 #ifde‡
INET6


70 
	~<√töë6/ö6_v¨.h
>

73 #ifde‡
MAC


74 
	~<£curôy/mac/mac_‰amew‹k.h
>

81 
	#L3HDR
(
T
, 
ù
Ë((T *)((
u_öt32_t
 *)(ùË+ (ù)->
ù_hl
))

	)

82 
	#TCP
(
p
Ë((
t˝hdr
 *)’))

	)

83 
	#SCTP
(
p
Ë((
s˘phdr
 *)’))

	)

84 
	#UDP
(
p
Ë((
udphdr
 *)’))

	)

85 
	#ICMP
(
p
Ë((
icmphdr
 *)’))

	)

86 
	#ICMP6
(
p
Ë((
icmp6_hdr
 *)’))

	)

88 
	#SNPARGS
(
buf
, 
Àn
Ëbu‡+Üí, (bufË>Üí ? (bufË-Üí : 0

	)

89 
	#SNP
(
buf
Ëbuf, (buf)

	)

91 #ifde‡
WITHOUT_BPF


93 
	$ùfw_log_bpf
(
⁄off
)

95 
	}
}

97 
i‚ë
 *
	glog_if
;

101 
	$log_dummy
(
i‚ë
 *
iÂ
, 
u_l⁄g
 
cmd
, 
ˇddr_t
 
addr
)

103  
EINVAL
;

104 
	}
}

107 
	$ùfw_log_ouçut
(
i‚ë
 *
iÂ
, 
mbuf
 *
m
,

108 
sockaddr
 *
d°
, 
rouã
 *
ro
)

110 i‡(
m
 !
NULL
)

111 
	`m_‰ìm
(
m
);

112  
EINVAL
;

113 
	}
}

116 
	$ùfw_log_°¨t
(
i‚ë
* 
iÂ
)

118 
	`∑nic
("ipfw_log_start() mustÇot be called");

119 
	}
}

121 c⁄° 
u_ch¨
 
	gùfwbrﬂdˇ°addr
[6] =

125 
	$ùfw_log_bpf
(
⁄off
)

127 
i‚ë
 *
iÂ
;

129 i‡(
⁄off
) {

130 i‡(
log_if
)

132 
iÂ
 = 
	`if_Æloc
(
IFT_ETHER
);

133 i‡(
iÂ
 =
NULL
)

135 
	`if_öô«me
(
iÂ
, "ipfw", 0);

136 
iÂ
->
if_mtu
 = 65536;

137 
iÂ
->
if_Êags
 = 
IFF_UP
 | 
IFF_SIMPLEX
 | 
IFF_MULTICAST
;

138 
iÂ
->
if_öô
 = (*)
log_dummy
;

139 
iÂ
->
if_io˘l
 = 
log_dummy
;

140 
iÂ
->
if_°¨t
 = 
ùfw_log_°¨t
;

141 
iÂ
->
if_ouçut
 = 
ùfw_log_ouçut
;

142 
iÂ
->
if_addæí
 = 6;

143 
iÂ
->
if_hdæí
 = 14;

144 
	`if_©èch
(
iÂ
);

145 
iÂ
->
if_brﬂdˇ°addr
 = 
ùfwbrﬂdˇ°addr
;

146 
iÂ
->
if_baudøã
 = 
	`IF_Mbps
(10);

147 
	`bpÁâach
(
iÂ
, 
DLT_EN10MB
, 14);

148 
log_if
 = 
iÂ
;

150 i‡(
log_if
) {

151 
	`ëhî_ifdëach
(
log_if
);

152 
	`if_‰ì
(
log_if
);

154 
log_if
 = 
NULL
;

156 
	}
}

164 
	$ùfw_log
(
ù_fw
 *
f
, 
u_öt
 
hÀn
, 
ù_fw_¨gs
 *
¨gs
,

165 
mbuf
 *
m
, 
i‚ë
 *
oif
, 
u_sh‹t
 
off£t
, 
uöt32_t
 
èbÀ¨g
,

166 
ù
 *ip)

168 *
a˘i⁄
;

169 
limô_ªached
 = 0;

170 
a˘i⁄2
[40], 
¥Ÿo
[128], 
‰agmít
[32];

172 i‡(
V_fw_vîbo£
 == 0) {

173 #i‚de‡
WITHOUT_BPF


175 i‡(
log_if
 =
NULL
 ||Üog_if->
if_bpf
 == NULL)

178 i‡(
¨gs
->
eh
)

179 
	`BPF_MTAP2
(
log_if
, 
¨gs
->
eh
, 
ETHER_HDR_LEN
, 
m
);

184 
	`BPF_MTAP2
(
log_if
, "DDDDDDSSSSSS\x08\x00", 
ETHER_HDR_LEN
, 
m
);

189 
‰agmít
[0] = '\0';

190 
¥Ÿo
[0] = '\0';

192 i‡(
f
 =
NULL
) {

193 i‡(
V_vîbo£_limô
 !0 && 
V_n‹uÀ_cou¡î
 >= V_verbose_limit)

195 
V_n‹uÀ_cou¡î
++;

196 i‡(
V_n‹uÀ_cou¡î
 =
V_vîbo£_limô
)

197 
limô_ªached
 = 
V_vîbo£_limô
;

198 
a˘i⁄
 = "Refuse";

200 
ùfw_ö¢
 *
cmd
 = 
	`ACTION_PTR
(
f
);

201 
ùfw_ö¢_log
 *
l
 = (ùfw_ö¢_log *)
cmd
;

203 i‡(
l
->
max_log
 !0 &&Ü->
log_À·
 == 0)

205 
l
->
log_À·
--;

206 i‡(
l
->
log_À·
 == 0)

207 
limô_ªached
 = 
l
->
max_log
;

208 
cmd
 +
	`F_LEN
(cmd);

209 i‡(
cmd
->
›code
 =
O_ALTQ
) {

210 
ùfw_ö¢_Ætq
 *
Ætq
 = (ùfw_ö¢_Ætq *)
cmd
;

212 
	`¢¥ötf
(
	`SNPARGS
(
a˘i⁄2
, 0), "Altq %d",

213 
Ætq
->
qid
);

214 
cmd
 +
	`F_LEN
(cmd);

216 i‡(
cmd
->
›code
 =
O_PROB
)

217 
cmd
 +
	`F_LEN
(cmd);

219 i‡(
cmd
->
›code
 =
O_TAG
)

220 
cmd
 +
	`F_LEN
(cmd);

222 
a˘i⁄
 = 
a˘i⁄2
;

223 
cmd
->
›code
) {

224 
O_DENY
:

225 
a˘i⁄
 = "Deny";

228 
O_REJECT
:

229 i‡(
cmd
->
¨g1
==
ICMP_REJECT_RST
)

230 
a˘i⁄
 = "Reset";

231 i‡(
cmd
->
¨g1
==
ICMP_UNREACH_HOST
)

232 
a˘i⁄
 = "Reject";

234 
	`¢¥ötf
(
	`SNPARGS
(
a˘i⁄2
, 0), "Unreach %d",

235 
cmd
->
¨g1
);

238 
O_UNREACH6
:

239 i‡(
cmd
->
¨g1
==
ICMP6_UNREACH_RST
)

240 
a˘i⁄
 = "Reset";

242 
	`¢¥ötf
(
	`SNPARGS
(
a˘i⁄2
, 0), "Unreach %d",

243 
cmd
->
¨g1
);

246 
O_ACCEPT
:

247 
a˘i⁄
 = "Accept";

249 
O_COUNT
:

250 
a˘i⁄
 = "Count";

252 
O_DIVERT
:

253 
	`¢¥ötf
(
	`SNPARGS
(
a˘i⁄2
, 0), "Divert %d",

254 
cmd
->
¨g1
);

256 
O_TEE
:

257 
	`¢¥ötf
(
	`SNPARGS
(
a˘i⁄2
, 0), "Tee %d",

258 
cmd
->
¨g1
);

260 
O_SETFIB
:

261 
	`¢¥ötf
(
	`SNPARGS
(
a˘i⁄2
, 0), "SetFib %d",

262 
cmd
->
¨g1
);

264 
O_SKIPTO
:

265 
	`¢¥ötf
(
	`SNPARGS
(
a˘i⁄2
, 0), "SkipTo %d",

266 
cmd
->
¨g1
);

268 
O_PIPE
:

269 
	`¢¥ötf
(
	`SNPARGS
(
a˘i⁄2
, 0), "Pipe %d",

270 
cmd
->
¨g1
);

272 
O_QUEUE
:

273 
	`¢¥ötf
(
	`SNPARGS
(
a˘i⁄2
, 0), "Queue %d",

274 
cmd
->
¨g1
);

276 
O_FORWARD_IP
: {

277 
ùfw_ö¢_ß
 *
ß
 = (ùfw_ö¢_ß *)
cmd
;

278 
Àn
;

279 
ö_addr
 
dummyaddr
;

280 i‡(
ß
->ß.
sö_addr
.
s_addr
 =
INADDR_ANY
)

281 
dummyaddr
.
s_addr
 = 
	`ht⁄l
(
èbÀ¨g
);

283 
dummyaddr
.
s_addr
 = 
ß
->ß.
sö_addr
.s_addr;

285 
Àn
 = 
	`¢¥ötf
(
	`SNPARGS
(
a˘i⁄2
, 0), "ForwardÅo %s",

286 
	`öë_¡ﬂ
(
dummyaddr
));

288 i‡(
ß
->ß.
sö_p‹t
)

289 
	`¢¥ötf
(
	`SNPARGS
(
a˘i⁄2
, 
Àn
), ":%d",

290 
ß
->ß.
sö_p‹t
);

293 
O_NETGRAPH
:

294 
	`¢¥ötf
(
	`SNPARGS
(
a˘i⁄2
, 0), "Netgraph %d",

295 
cmd
->
¨g1
);

297 
O_NGTEE
:

298 
	`¢¥ötf
(
	`SNPARGS
(
a˘i⁄2
, 0), "Ngtee %d",

299 
cmd
->
¨g1
);

301 
O_NAT
:

302 
a˘i⁄
 = "Nat";

304 
O_REASS
:

305 
a˘i⁄
 = "Reass";

308 
a˘i⁄
 = "UNKNOWN";

313 i‡(
hÀn
 == 0) {

314 
	`¢¥ötf
(
	`SNPARGS
(
¥Ÿo
, 0), "MAC");

317 
Àn
;

318 #ifde‡
INET6


319 
§c
[
INET6_ADDRSTRLEN
 + 2], 
d°
[INET6_ADDRSTRLEN + 2];

321 
§c
[
INET_ADDRSTRLEN
], 
d°
[INET_ADDRSTRLEN];

323 
icmphdr
 *
icmp
;

324 
t˝hdr
 *
t˝
;

325 
udphdr
 *
udp
;

326 #ifde‡
INET6


327 
ù6_hdr
 *
ù6
 = 
NULL
;

328 
icmp6_hdr
 *
icmp6
;

330 
§c
[0] = '\0';

331 
d°
[0] = '\0';

332 #ifde‡
INET6


333 i‡(
	`IS_IP6_FLOW_ID
(&(
¨gs
->
f_id
))) {

334 
ù6buf
[
INET6_ADDRSTRLEN
];

335 
	`¢¥ötf
(
§c
, (src), "[%s]",

336 
	`ù6_•rötf
(
ù6buf
, &
¨gs
->
f_id
.
§c_ù6
));

337 
	`¢¥ötf
(
d°
, (dst), "[%s]",

338 
	`ù6_•rötf
(
ù6buf
, &
¨gs
->
f_id
.
d°_ù6
));

340 
ù6
 = (
ù6_hdr
 *)
ù
;

341 
t˝
 = (
t˝hdr
 *)(((*)
ù
Ë+ 
hÀn
);

342 
udp
 = (
udphdr
 *)(((*)
ù
Ë+ 
hÀn
);

346 
t˝
 = 
	`L3HDR
(
t˝hdr
, 
ù
);

347 
udp
 = 
	`L3HDR
(
udphdr
, 
ù
);

349 
	`öë_¡ﬂ_r
(
ù
->
ù_§c
, 
§c
);

350 
	`öë_¡ﬂ_r
(
ù
->
ù_d°
, 
d°
);

353 
¨gs
->
f_id
.
¥Ÿo
) {

354 
IPPROTO_TCP
:

355 
Àn
 = 
	`¢¥ötf
(
	`SNPARGS
(
¥Ÿo
, 0), "TCP %s", 
§c
);

356 i‡(
off£t
 == 0)

357 
	`¢¥ötf
(
	`SNPARGS
(
¥Ÿo
, 
Àn
), ":%d %s:%d",

358 
	`¡ohs
(
t˝
->
th_•‹t
),

359 
d°
,

360 
	`¡ohs
(
t˝
->
th_dp‹t
));

362 
	`¢¥ötf
(
	`SNPARGS
(
¥Ÿo
, 
Àn
), " %s", 
d°
);

365 
IPPROTO_UDP
:

366 
Àn
 = 
	`¢¥ötf
(
	`SNPARGS
(
¥Ÿo
, 0), "UDP %s", 
§c
);

367 i‡(
off£t
 == 0)

368 
	`¢¥ötf
(
	`SNPARGS
(
¥Ÿo
, 
Àn
), ":%d %s:%d",

369 
	`¡ohs
(
udp
->
uh_•‹t
),

370 
d°
,

371 
	`¡ohs
(
udp
->
uh_dp‹t
));

373 
	`¢¥ötf
(
	`SNPARGS
(
¥Ÿo
, 
Àn
), " %s", 
d°
);

376 
IPPROTO_ICMP
:

377 
icmp
 = 
	`L3HDR
(
icmphdr
, 
ù
);

378 i‡(
off£t
 == 0)

379 
Àn
 = 
	`¢¥ötf
(
	`SNPARGS
(
¥Ÿo
, 0),

381 
icmp
->
icmp_ty≥
, icmp->
icmp_code
);

383 
Àn
 = 
	`¢¥ötf
(
	`SNPARGS
(
¥Ÿo
, 0), "ICMP ");

384 
Àn
 +
	`¢¥ötf
(
	`SNPARGS
(
¥Ÿo
,Üí), "%s", 
§c
);

385 
	`¢¥ötf
(
	`SNPARGS
(
¥Ÿo
, 
Àn
), " %s", 
d°
);

387 #ifde‡
INET6


388 
IPPROTO_ICMPV6
:

389 
icmp6
 = (
icmp6_hdr
 *)(((*)
ù
Ë+ 
hÀn
);

390 i‡(
off£t
 == 0)

391 
Àn
 = 
	`¢¥ötf
(
	`SNPARGS
(
¥Ÿo
, 0),

393 
icmp6
->
icmp6_ty≥
, icmp6->
icmp6_code
);

395 
Àn
 = 
	`¢¥ötf
(
	`SNPARGS
(
¥Ÿo
, 0), "ICMPv6 ");

396 
Àn
 +
	`¢¥ötf
(
	`SNPARGS
(
¥Ÿo
,Üí), "%s", 
§c
);

397 
	`¢¥ötf
(
	`SNPARGS
(
¥Ÿo
, 
Àn
), " %s", 
d°
);

401 
Àn
 = 
	`¢¥ötf
(
	`SNPARGS
(
¥Ÿo
, 0), "P:%d %s",

402 
¨gs
->
f_id
.
¥Ÿo
, 
§c
);

403 
	`¢¥ötf
(
	`SNPARGS
(
¥Ÿo
, 
Àn
), " %s", 
d°
);

407 #ifde‡
INET6


408 i‡(
	`IS_IP6_FLOW_ID
(&(
¨gs
->
f_id
))) {

409 i‡(
off£t
 & (
IP6F_OFF_MASK
 | 
IP6F_MORE_FRAG
))

410 
	`¢¥ötf
(
	`SNPARGS
(
‰agmít
, 0),

412 
¨gs
->
f_id
.
exåa
,

413 
	`¡ohs
(
ù6
->
ù6_∂í
Ë- 
hÀn
,

414 
	`¡ohs
(
off£t
 & 
IP6F_OFF_MASK
) << 3,

415 (
off£t
 & 
IP6F_MORE_FRAG
) ? "+" : "");

419 
ùoff
, 
ùÀn
;

420 
ùoff
 = 
	`¡ohs
(
ù
->
ù_off
);

421 
ùÀn
 = 
	`¡ohs
(
ù
->
ù_Àn
);

422 i‡(
ùoff
 & (
IP_MF
 | 
IP_OFFMASK
))

423 
	`¢¥ötf
(
	`SNPARGS
(
‰agmít
, 0),

425 
	`¡ohs
(
ù
->
ù_id
), 
ùÀn
 - (ù->
ù_hl
 << 2),

426 
off£t
 << 3,

427 (
ùoff
 & 
IP_MF
) ? "+" : "");

430 #ifde‡
__FªeBSD__


431 i‡(
oif
 || 
m
->
m_pkthdr
.
rcvif
)

432 
	`log
(
LOG_SECURITY
 | 
LOG_INFO
,

434 
f
 ? f->
ruÀnum
 : -1,

435 
a˘i⁄
, 
¥Ÿo
, 
oif
 ? "out" : "in",

436 
oif
 ? oif->
if_x«me
 : 
m
->
m_pkthdr
.
rcvif
->if_xname,

437 
‰agmít
);

440 
	`log
(
LOG_SECURITY
 | 
LOG_INFO
,

442 
f
 ? f->
ruÀnum
 : -1,

443 
a˘i⁄
, 
¥Ÿo
, 
‰agmít
);

444 i‡(
limô_ªached
)

445 
	`log
(
LOG_SECURITY
 | 
LOG_NOTICE
,

447 
limô_ªached
, 
f
 ? f->
ruÀnum
 : -1);

448 
	}
}

	@kipfw-mod/ip_fw_lookup.c

26 
	~<sys/cdefs.h
>

27 
__FBSDID
("$FreeBSD: user/luigi/ipfw3-head/sys/netinet/ipfw/ip_fw_table.c 200601 2009-12-16 10:48:40ZÜuigi $");

67 
	~<sys/cdefs.h
>

68 #ifde‡
_KERNEL


69 
	~<sys/∑øm.h
>

70 
	~<sys/sy°m.h
>

71 
	~<sys/mÆloc.h
>

72 
	~<sys/kî√l.h
>

73 
	~<sys/lock.h
>

74 
	~<sys/rwlock.h
>

75 
MALLOC_DEFINE
(
M_IPFW_LUT
, "ipfw_lookup", "IpFwÜookup");

76 
	#MÆloc
(
n
Ë
	`mÆloc
“, 
M_IPFW_LUT
, 
M_WAITOK
)

	)

77 
	#CÆloc
(
n
Ë
	`ˇŒoc
“, 
M_IPFW_LUT
, 
M_WAITOK
 | 
M_ZERO
)

	)

78 
	#Fªe
(
p
Ë
	`‰ì
’, 
M_IPFW_LUT
)

	)

80 
	#log
(
x
, 
¨g
...)

	)

83 
	~<sys/ty≥s.h
>

84 
	~<°dio.h
>

85 
	~<°dlib.h
>

86 
	~<°rög.h
>

87 
	#MÆloc
(
n
Ë
	`mÆloc
“)

	)

88 
	#CÆloc
(
n
Ë
	`ˇŒoc
(1,Ç)

	)

89 
	#Fªe
(
p
Ë
	`‰ì
’)

	)

90 
	#log
(
x
, 
¨g
...Ë
	`Ârötf
(
°dîr
, "%s: " x "\n", 
__FUNCTION__
, ##¨g)

	)

93 
	síåy
 {

94 
uöt32_t
 
	mid
;

95 
íåy
 *
	m±r
;

98 
	slookup_èbÀ
 {

99 
	m_size
;

100 
	mu£d
;

101 
	mmask
;

102 
íåy
 *
	mf_hód
, *
	mf_èû
;

103 
íåy
 * 
	ms
;

106 
__ölöe
 
	$em±y
(
lookup_èbÀ
 *
hód
, c⁄° *
p
)

108 c⁄° 
íåy
 *
ï
 = 
p
;

109  (
ï
 =
NULL
 ||

110 (
ï
 >
hód
->
s
 &&É∞< &hód->s[hód->
_size
]));

111 
	}
}

116 
lookup_èbÀ
 *

117 
	$ùfw_lut_öô
(
lookup_èbÀ
 *
hód
, 
√w_size
, 
mask
)

119 
i
;

120 
íåy
 *
s
;

121 
íåy
 *
fh
, *
·
;

123 i‡(
hód
 !
NULL
) {

124 
mask
 = 
hód
->mask;

125 i‡(
√w_size
 <
hód
->
_size
)

126  
hód
;

127 i‡(
√w_size
 >
mask
+1) {

128 
	`log
("sizeÜargerÅhan mask");

129  
NULL
;

132 
	`log
("old isÇull, initialize");

133 
hód
 = 
	`CÆloc
((*head));

134 i‡(
hód
 =
NULL
)

135  
NULL
;

136 i‡(
√w_size
 >
mask
)

137 
mask
 = 
√w_size
;

138 i‡(
mask
 & (mask -1)) {

139 
i
 = 1; i < 
mask
; i += i)

141 
	`log
("mask %dÇŸ 2^k,Ñound u∞tÿ%d", 
mask
, 
i
);

142 
mask
 = 
i
;

144 
mask
 = 
hód
->mask = mask - 1;

147 
s
 = 
	`CÆloc
(
√w_size
 * (*s));

148 i‡(
s
 =
NULL
)

149  
NULL
;

150 i‡(!
hód
->
s
) {

151 
hód
->
s
 = s;

152 
hód
->
_size
 = 1;

154 
fh
 = 
·
 = 
NULL
;

156 
i
 = 0; i < 
√w_size
; i++) {

157 
s
[
i
].
id
 = (ò>
hód
->
_size
) ? i : head->s[i].id;

158 i‡(
i
 < 
hód
->
_size
 && !
	`em±y
(hód, hód->
s
[i].
±r
)) {

159 
s
[
i
].
±r
 = 
hód
->s[i].ptr;

162 i‡(
fh
 =
NULL
)

163 
fh
 = &
s
[
i
];

165 
·
->
±r
 = &
s
[
i
];

166 
·
 = &
s
[
i
];

168 
hód
->
f_hód
 = 
fh
;

169 
hód
->
f_èû
 = 
·
;

172 
fh
 = 
hód
->
s
;

173 
hód
->
s
 = s;

174 
hód
->
_size
 = 
√w_size
;

176 i‡(
fh
 !
s
)

177 
	`Fªe
(
fh
);

178 
	`log
("done");

179  
hód
;

180 
	}
}

184 
	$ùfw_lut_ö£π
(
lookup_èbÀ
 *
hód
, *
d
)

186 
íåy
 *
e
;

188 
e
 = 
hód
->
f_hód
;

189 i‡(
e
 =
NULL
)

191 
hód
->
f_hód
 = 
e
->
±r
;

192 
e
->
±r
 = 
d
;

193 
hód
->
u£d
++;

194  
e
->
id
;

195 
	}
}

199 
	$ùfw_lut_dñëe
(
lookup_èbÀ
 *
hód
, 
id
)

201 
i
 = 
id
 & 
hód
->
mask
;

202 *
ªsu…
;

203 
íåy
 *
e
;

205 i‡(
i
 >
hód
->
_size
)

206  
NULL
;

207 
e
 = &
hód
->
s
[
i
];

208 i‡(
e
->
id
 != id)

209  
NULL
;

210 
ªsu…
 = 
e
->
±r
;

212 
e
->
id
 +
hód
->
mask
 + 1;

213 
e
->
±r
 = 
NULL
;

215 i‡(
hód
->
f_hód
 =
NULL
)

216 
hód
->
f_hód
 = 
e
;

218 
hód
->
f_èû
->
±r
 = 
e
;

219 
hód
->
f_èû
 = 
e
;

220 
hód
->
u£d
--;

221  
ªsu…
;

222 
	}
}

225 
	$ùfw_lut_lookup
(
lookup_èbÀ
 *
hód
, 
id
)

227 
i
 = 
id
 & 
hód
->
mask
;

228 
íåy
 *
e
;

230 i‡(
i
 >
hód
->
_size
)

231  
NULL
;

232 
e
 = &
hód
->
s
[
i
];

233  (
e
->
id
 =idË?É->
±r
 : 
NULL
;

234 
	}
}

237 
	$ùfw_lut_dump
(
lookup_èbÀ
 *
hód
)

239 
i
;

241 
	`log
("head %p size %d used %d freelist %d",

242 
hód
, hód->
_size
, hód->
u£d
, hód->
f_hód
 ?

243 
hód
->
f_hód
 - hód->
s
 : -1);

244 
i
 = 0; i < 
hód
->
_size
; i++) {

245 
íåy
 *
e
 = &
hód
->
s
[
i
];

246 
ì
 = 
	`em±y
(
hód
, 
e
->
±r
) ? 'E' : ' ';

247 
	`log
("%5d %5d %¯%p", 
i
, 
e
->
id
, 
ì
,

248 
ì
 ='E' && 
e
->
±r
 !
NULL
 ?

249 (*)((
íåy
 *)
e
->
±r
 - 
hód
->
s
) :É->ptr);

251 
	}
}

253 #i‚de‡
_KERNEL


254 
	$dump_p
(
lookup_èbÀ
 *
p
, *
m≠
)

256 
i
;

257 
i
 = 0; i < 
p
->
_size
; i++) {

258 
id
 = ()
	`ùfw_lut_lookup
(
p
, 
m≠
[
i
]);

259 
	`log
("%3d: %3d: %c", 
m≠
[
i
] % 64, i, 
id
);

261 
	}
}

262 
	$maö
(
¨gc
, *
¨gv
[])

264 
i
, 
j
, 
l
;

265 
	#S
 1000

	)

266 
m≠
[
S
];

267 
lookup_èbÀ
 *
p
;

268 
lookup_èbÀ
 *
p1
;

269 c⁄° *
m
 = "nel mezzo del cammin diÇostra vita miÑitrovai"

272 
	`Ârötf
(
°dîr
, "testingÜookup\n");

274 
l
 = 
	`°æí
(
m
);

276 
p
 = 
	`ùfw_lut_öô
(
NULL
, 120, 33);

278 
	`ùfw_lut_dump
(
p
);

279 
i
 = 0; i < 
l
; i++) {

280 
x
 = 
m
[
i
];

281 
id
 = 
	`ùfw_lut_ö£π
(
p
, (*)
x
);

283 
m≠
[
i
] = 
id
;

284 
j
=0; j < 10; j++) {

285 
id
 = 
	`ùfw_lut_ö£π
(
p
, (*)'a');

287 
	`ùfw_lut_dñëe
(
p
, 
id
);

292 
	`dump_p
(
p
, 
m≠
);

293 
p1
 = 
	`ùfw_lut_öô
(
p
, 23, 0);

294 i‡(!
p1
)

296 
	`dump_p
(
p1
, 
m≠
);

297 
p1
 = 
	`ùfw_lut_öô
(p1, 120, 0);

298 i‡(!
p1
)

300 
	`dump_p
(
p1
, 
m≠
);

302 
	}
}

	@kipfw-mod/ip_fw_nat.c

27 
	~<sys/cdefs.h
>

28 
__FBSDID
("$FreeBSD: user/luigi/ipfw3-head/sys/netinet/ipfw/ip_fw_nat.c 200975 2009-12-25 01:15:39ZÜuigi $");

30 
	~<sys/∑øm.h
>

31 
	~<sys/sy°m.h
>

32 
	~<sys/evíth™dÀr.h
>

33 
	~<sys/mÆloc.h
>

34 
	~<sys/kî√l.h
>

35 
	~<sys/lock.h
>

36 
	~<sys/moduÀ.h
>

37 
	~<sys/rwlock.h
>

39 
	#IPFW_INTERNAL


	)

41 
	~<√töë/libÆüs/Æüs.h
>

42 
	~<√töë/libÆüs/Æüs_loˇl.h
>

44 
	~<√t/if.h
>

45 
	~<√töë/ö.h
>

46 
	~<√töë/ù.h
>

47 
	~<√töë/ù_v¨.h
>

48 
	~<√töë/ù_fw.h
>

49 
	~<√töë/ùfw/ù_fw_¥iv©e.h
>

50 
	~<√töë/t˝.h
>

51 
	~<√töë/udp.h
>

53 
	~<machöe/ö_cksum.h
>

55 
VNET_DEFINE
(
evíth™dÀr_èg
, 
iÁddr_evít_èg
);

56 
	#V_iÁddr_evít_èg
 
	`VNET
(
iÁddr_evít_èg
)

	)

59 
	$iÁddr_ch™ge
(*
¨g
, 
i‚ë
 *
iÂ
)

61 
cfg_«t
 *
±r
;

62 
iÁddr
 *
iÁ
;

63 
ù_fw_chaö
 *
chaö
;

65 ()
¨g
;

66 
chaö
 = &
V_œyî3_chaö
;

67 
	`IPFW_WLOCK
(
chaö
);

69 
	`LIST_FOREACH
(
±r
, &
chaö
->
«t
, 
_√xt
) {

71 i‡(
	`°∫cmp
(
±r
->
if_«me
, 
iÂ
->
if_x«me
, 
IF_NAMESIZE
) != 0)

73 
	`if_addr_æock
(
iÂ
);

74 
	`TAILQ_FOREACH
(
iÁ
, &
iÂ
->
if_addrhód
, 
iÁ_lök
) {

75 i‡(
iÁ
->
iÁ_addr
 =
NULL
)

77 i‡(
iÁ
->
iÁ_addr
->
ß_Ámûy
 !
AF_INET
)

79 
±r
->
ù
 = ((
sockaddr_ö
 *)

80 (
iÁ
->
iÁ_addr
))->
sö_addr
;

81 
	`LibAlüsSëAddªss
(
±r
->
lib
,Öå->
ù
);

83 
	`if_addr_ru∆ock
(
iÂ
);

85 
	`IPFW_WUNLOCK
(
chaö
);

86 
	}
}

92 
	$Êush_«t_±rs
(
ù_fw_chaö
 *
chaö
, c⁄° 
ix
)

94 
i
;

95 
ùfw_ö¢_«t
 *
cmd
;

97 
	`IPFW_WLOCK_ASSERT
(
chaö
);

98 
i
 = 0; i < 
chaö
->
n_ruÀs
; i++) {

99 
cmd
 = (
ùfw_ö¢_«t
 *)
	`ACTION_PTR
(
chaö
->
m≠
[
i
]);

101 i‡(
cmd
->
o
.
›code
 =
O_NAT
 && cmd->
«t
 !
NULL
 &&

102 (
ix
 < 0 || 
cmd
->
«t
->
id
 == ix))

103 
cmd
->
«t
 = 
NULL
;

105 
	}
}

108 
	$dñ_ªdú_•oﬁ_cfg
(
cfg_«t
 *
n
, 
ªdú_chaö
 *
hód
)

110 
cfg_ªdú
 *
r
, *
tmp_r
;

111 
cfg_•oﬁ
 *
s
, *
tmp_s
;

112 
i
, 
num
;

114 
	`LIST_FOREACH_SAFE
(
r
, 
hód
, 
_√xt
, 
tmp_r
) {

115 
num
 = 1;

116 
r
->
mode
) {

117 
REDIR_PORT
:

118 
num
 = 
r
->
µ‹t_˙t
;

120 
REDIR_ADDR
:

121 
REDIR_PROTO
:

123 
i
 = 0; i < 
num
; i++)

124 
	`LibAlüsRedúe˘Dñëe
(
n
->
lib
, 
r
->
Æök
[
i
]);

126 
	`LIST_FOREACH_SAFE
(
s
, &
r
->
•oﬁ_chaö
, 
_√xt
, 
tmp_s
) {

127 
	`LIST_REMOVE
(
s
, 
_√xt
);

128 
	`‰ì
(
s
, 
M_IPFW
);

130 
	`‰ì
(
r
->
Æök
, 
M_IPFW
);

131 
	`LIST_REMOVE
(
r
, 
_√xt
);

132 
	`‰ì
(
r
, 
M_IPFW
);

135 
	`¥ötf
("unknow¿ªdúe˘ mode: %u\n", 
r
->
mode
);

140 
	}
}

143 
	$add_ªdú_•oﬁ_cfg
(*
buf
, 
cfg_«t
 *
±r
)

145 
cfg_ªdú
 *
r
, *
£r_r
;

146 
cfg_•oﬁ
 *
s
, *
£r_s
;

147 
˙t
, 
off
, 
i
;

149 
˙t
 = 0, 
off
 = 0; c¡ < 
±r
->
ªdú_˙t
; cnt++) {

150 
£r_r
 = (
cfg_ªdú
 *)&
buf
[
off
];

151 
r
 = 
	`mÆloc
(
SOF_REDIR
, 
M_IPFW
, 
M_WAITOK
 | 
M_ZERO
);

152 
	`mem˝y
(
r
, 
£r_r
, 
SOF_REDIR
);

153 
	`LIST_INIT
(&
r
->
•oﬁ_chaö
);

154 
off
 +
SOF_REDIR
;

155 
r
->
Æök
 = 
	`mÆloc
((
Æüs_lök
 *Ë*Ñ->
µ‹t_˙t
,

156 
M_IPFW
, 
M_WAITOK
 | 
M_ZERO
);

157 
r
->
mode
) {

158 
REDIR_ADDR
:

159 
r
->
Æök
[0] = 
	`LibAlüsRedúe˘Addr
(
±r
->
lib
,Ñ->
œddr
,

160 
r
->
∑ddr
);

162 
REDIR_PORT
:

163 
i
 = 0 ; i < 
r
->
µ‹t_˙t
; i++) {

165 
u_sh‹t
 
ªmŸeP‹tC›y
 = 
r
->
Ω‹t
 + 
i
;

166 i‡(
r
->
Ω‹t_˙t
 =1 &&Ñ->
Ω‹t
 == 0)

167 
ªmŸeP‹tC›y
 = 0;

168 
r
->
Æök
[
i
] = 
	`LibAlüsRedúe˘P‹t
(
±r
->
lib
,

169 
r
->
œddr
, 
	`ht⁄s
‘->
Õ‹t
 + 
i
),Ñ->
øddr
,

170 
	`ht⁄s
(
ªmŸeP‹tC›y
), 
r
->
∑ddr
,

171 
	`ht⁄s
(
r
->
µ‹t
 + 
i
),Ñ->
¥Ÿo
);

172 i‡(
r
->
Æök
[
i
] =
NULL
) {

173 
r
->
Æök
[0] = 
NULL
;

178 
REDIR_PROTO
:

179 
r
->
Æök
[0] = 
	`LibAlüsRedúe˘PrŸo
(
±r
->
lib
 ,r->
œddr
,

180 
r
->
øddr
,Ñ->
∑ddr
,Ñ->
¥Ÿo
);

183 
	`¥ötf
("unknow¿ªdúe˘ mode: %u\n", 
r
->
mode
);

187 i‡(
r
->
Æök
[0] =
NULL
)

188 
	`∑nic
("LibAliasRedirect*Ñeturned NULL");

190 
i
 = 0; i < 
r
->
•oﬁ_˙t
; i++) {

191 
£r_s
 = (
cfg_•oﬁ
 *)&
buf
[
off
];

192 
s
 = 
	`mÆloc
(
SOF_REDIR
, 
M_IPFW
, 
M_WAITOK
 | 
M_ZERO
);

193 
	`mem˝y
(
s
, 
£r_s
, 
SOF_SPOOL
);

194 
	`LibAlüsAddSîvî
(
±r
->
lib
, 
r
->
Æök
[0],

195 
s
->
addr
, 
	`ht⁄s
(s->
p‹t
));

196 
off
 +
SOF_SPOOL
;

198 
	`LIST_INSERT_HEAD
(&
r
->
•oﬁ_chaö
, 
s
, 
_√xt
);

201 
	`LIST_INSERT_HEAD
(&
±r
->
ªdú_chaö
, 
r
, 
_√xt
);

204 
	}
}

207 
	$ùfw_«t
(
ù_fw_¨gs
 *
¨gs
, 
cfg_«t
 *
t
, 
mbuf
 *
m
)

209 
mbuf
 *
m˛
;

210 
ù
 *ip;

212 
ldt
, 
ªtvÆ
;

213 *
c
;

215 
ldt
 = 0;

216 
ªtvÆ
 = 0;

217 
m˛
 = 
	`m_meg≠uŒup
(
m
, m->
m_pkthdr
.
Àn
);

218 i‡(
m˛
 =
NULL
) {

219 
¨gs
->
m
 = 
NULL
;

220  (
IP_FW_DENY
);

222 
ù
 = 
	`mtod
(
m˛
, ip *);

256 i‡(
m˛
->
m_pkthdr
.
rcvif
 =
NULL
 &&

257 
m˛
->
m_pkthdr
.
csum_Êags
 & 
CSUM_DELAY_DATA
)

258 
ldt
 = 1;

260 
c
 = 
	`mtod
(
m˛
, *);

261 i‡(
¨gs
->
oif
 =
NULL
)

262 
ªtvÆ
 = 
	`LibAlüsIn
(
t
->
lib
, 
c
,

263 
m˛
->
m_Àn
 + 
	`M_TRAILINGSPACE
(mcl));

265 
ªtvÆ
 = 
	`LibAlüsOut
(
t
->
lib
, 
c
,

266 
m˛
->
m_Àn
 + 
	`M_TRAILINGSPACE
(mcl));

267 i‡(
ªtvÆ
 =
PKT_ALIAS_RESPOND
) {

268 
m
->
m_Êags
 |
M_SKIP_FIREWALL
;

269 
ªtvÆ
 = 
PKT_ALIAS_OK
;

271 i‡(
ªtvÆ
 !
PKT_ALIAS_OK
 &&

272 
ªtvÆ
 !
PKT_ALIAS_FOUND_HEADER_FRAGMENT
) {

274 
	`m_‰ì
(
m˛
);

275 
¨gs
->
m
 = 
NULL
;

276  (
IP_FW_DENY
);

278 
m˛
->
m_pkthdr
.
Àn
 = m˛->
m_Àn
 = 
	`¡ohs
(
ù
->
ù_Àn
);

285 i‡((
ù
->
ù_off
 & 
	`ht⁄s
(
IP_OFFMASK
)) == 0 &&

286 
ù
->
ù_p
 =
IPPROTO_TCP
) {

287 
t˝hdr
 *
th
;

289 
th
 = (
t˝hdr
 *)(
ù
 + 1);

290 i‡(
th
->
th_x2
)

291 
ldt
 = 1;

294 i‡(
ldt
) {

295 
t˝hdr
 *
th
;

296 
udphdr
 *
uh
;

297 
u_sh‹t
 
cksum
;

299 
ù
->
ù_Àn
 = 
	`¡ohs
(ip->ip_len);

300 
cksum
 = 
	`ö_p£udo
(
ù
->
ù_§c
.
s_addr
, ip->
ù_d°
.s_addr,

301 
	`ht⁄s
(
ù
->
ù_p
 + ip->
ù_Àn
 - (ù->
ù_hl
 << 2)));

303 
ù
->
ù_p
) {

304 
IPPROTO_TCP
:

305 
th
 = (
t˝hdr
 *)(
ù
 + 1);

310 
th
->
th_x2
 = 0;

311 
th
->
th_sum
 = 
cksum
;

312 
m˛
->
m_pkthdr
.
csum_d©a
 =

313 
	`off£tof
(
t˝hdr
, 
th_sum
);

315 
IPPROTO_UDP
:

316 
uh
 = (
udphdr
 *)(
ù
 + 1);

317 
uh
->
uh_sum
 = 
cksum
;

318 
m˛
->
m_pkthdr
.
csum_d©a
 =

319 
	`off£tof
(
udphdr
, 
uh_sum
);

323 i‡((
m˛
->
m_pkthdr
.
csum_Êags
 & 
CSUM_DELAY_DATA
) == 0) {

324 
	`ö_dñayed_cksum
(
m˛
);

325 
m˛
->
m_pkthdr
.
csum_Êags
 &~
CSUM_DELAY_DATA
;

327 
ù
->
ù_Àn
 = 
	`ht⁄s
(ip->ip_len);

329 
¨gs
->
m
 = 
m˛
;

330  (
IP_FW_NAT
);

331 
	}
}

333 
cfg_«t
 *

334 
	$lookup_«t
(
«t_li°
 *
l
, 
«t_id
)

336 
cfg_«t
 *
ªs
;

338 
	`LIST_FOREACH
(
ªs
, 
l
, 
_√xt
) {

339 i‡(
ªs
->
id
 =
«t_id
)

342  
ªs
;

343 
	}
}

346 
	$ùfw_«t_cfg
(
sock›t
 *
s›t
)

348 
cfg_«t
 *
±r
, *
£r_n
;

349 *
buf
;

350 
ù_fw_chaö
 *
chaö
 = &
V_œyî3_chaö
;

352 
buf
 = 
	`mÆloc
(
NAT_BUF_LEN
, 
M_IPFW
, 
M_WAITOK
 | 
M_ZERO
);

353 
	`so›tc›yö
(
s›t
, 
buf
, 
NAT_BUF_LEN
, (
cfg_«t
));

354 
£r_n
 = (
cfg_«t
 *)
buf
;

360 
	`IPFW_WLOCK
(
chaö
);

361 
±r
 = 
	`lookup_«t
(&
chaö
->
«t
, 
£r_n
->
id
);

362 i‡(
±r
 =
NULL
) {

364 
±r
 = 
	`mÆloc
((
cfg_«t
),

365 
M_IPFW
, 
M_NOWAIT
 | 
M_ZERO
);

366 i‡(
±r
 =
NULL
) {

367 
	`IPFW_WUNLOCK
(
chaö
);

368 
	`‰ì
(
buf
, 
M_IPFW
);

369  (
ENOSPC
);

371 
±r
->
lib
 = 
	`LibAlüsInô
(
NULL
);

372 i‡(
±r
->
lib
 =
NULL
) {

373 
	`IPFW_WUNLOCK
(
chaö
);

374 
	`‰ì
(
±r
, 
M_IPFW
);

375 
	`‰ì
(
buf
, 
M_IPFW
);

376  (
EINVAL
);

378 
	`LIST_INIT
(&
±r
->
ªdú_chaö
);

381 
	`LIST_REMOVE
(
±r
, 
_√xt
);

382 
	`Êush_«t_±rs
(
chaö
, 
£r_n
->
id
);

384 
	`IPFW_WUNLOCK
(
chaö
);

389 
±r
->
id
 = 
£r_n
->id;

395 
±r
->
ù
 = 
£r_n
->ip;

396 
±r
->
ªdú_˙t
 = 
£r_n
->redir_cnt;

397 
±r
->
mode
 = 
£r_n
->mode;

398 
	`LibAlüsSëMode
(
±r
->
lib
, 
£r_n
->
mode
, ser_n->mode);

399 
	`LibAlüsSëAddªss
(
±r
->
lib
,Öå->
ù
);

400 
	`mem˝y
(
±r
->
if_«me
, 
£r_n
->if_«me, 
IF_NAMESIZE
);

406 
	`dñ_ªdú_•oﬁ_cfg
(
±r
, &±r->
ªdú_chaö
);

408 
	`add_ªdú_•oﬁ_cfg
(&
buf
[((
cfg_«t
))], 
±r
);

409 
	`‰ì
(
buf
, 
M_IPFW
);

410 
	`IPFW_WLOCK
(
chaö
);

411 
	`LIST_INSERT_HEAD
(&
chaö
->
«t
, 
±r
, 
_√xt
);

412 
	`IPFW_WUNLOCK
(
chaö
);

414 
	}
}

417 
	$ùfw_«t_dñ
(
sock›t
 *
s›t
)

419 
cfg_«t
 *
±r
;

420 
ù_fw_chaö
 *
chaö
 = &
V_œyî3_chaö
;

421 
i
;

423 
	`so›tc›yö
(
s›t
, &
i
,  i,  i);

425 
	`IPFW_WLOCK
(
chaö
);

426 
±r
 = 
	`lookup_«t
(&
chaö
->
«t
, 
i
);

427 i‡(
±r
 =
NULL
) {

428 
	`IPFW_WUNLOCK
(
chaö
);

429  (
EINVAL
);

431 
	`LIST_REMOVE
(
±r
, 
_√xt
);

432 
	`Êush_«t_±rs
(
chaö
, 
i
);

433 
	`IPFW_WUNLOCK
(
chaö
);

434 
	`dñ_ªdú_•oﬁ_cfg
(
±r
, &±r->
ªdú_chaö
);

435 
	`LibAlüsUnöô
(
±r
->
lib
);

436 
	`‰ì
(
±r
, 
M_IPFW
);

438 
	}
}

441 
	$ùfw_«t_gë_cfg
(
sock›t
 *
s›t
)

443 
uöt8_t
 *
d©a
;

444 
cfg_«t
 *
n
;

445 
cfg_ªdú
 *
r
;

446 
cfg_•oﬁ
 *
s
;

447 
«t_˙t
, 
off
;

448 
ù_fw_chaö
 *
chaö
;

449 
îr
 = 
ENOSPC
;

451 
chaö
 = &
V_œyî3_chaö
;

452 
«t_˙t
 = 0;

453 
off
 = (
«t_˙t
);

455 
d©a
 = 
	`mÆloc
(
NAT_BUF_LEN
, 
M_IPFW
, 
M_WAITOK
 | 
M_ZERO
);

456 
	`IPFW_RLOCK
(
chaö
);

458 
	`LIST_FOREACH
(
n
, &
chaö
->
«t
, 
_√xt
) {

459 
«t_˙t
++;

460 i‡(
off
 + 
SOF_NAT
 >
NAT_BUF_LEN
)

461 
no•a˚
;

462 
	`bc›y
(
n
, &
d©a
[
off
], 
SOF_NAT
);

463 
off
 +
SOF_NAT
;

464 
	`LIST_FOREACH
(
r
, &
n
->
ªdú_chaö
, 
_√xt
) {

465 i‡(
off
 + 
SOF_REDIR
 >
NAT_BUF_LEN
)

466 
no•a˚
;

467 
	`bc›y
(
r
, &
d©a
[
off
], 
SOF_REDIR
);

468 
off
 +
SOF_REDIR
;

469 
	`LIST_FOREACH
(
s
, &
r
->
•oﬁ_chaö
, 
_√xt
) {

470 i‡(
off
 + 
SOF_SPOOL
 >
NAT_BUF_LEN
)

471 
no•a˚
;

472 
	`bc›y
(
s
, &
d©a
[
off
], 
SOF_SPOOL
);

473 
off
 +
SOF_SPOOL
;

477 
îr
 = 0;

478 
no•a˚
:

479 
	`IPFW_RUNLOCK
(
chaö
);

480 i‡(
îr
 == 0) {

481 
	`bc›y
(&
«t_˙t
, 
d©a
, (nat_cnt));

482 
	`so›tc›yout
(
s›t
, 
d©a
, 
NAT_BUF_LEN
);

484 
	`¥ötf
("serialized data bufferÇot bigÉnough:"

487 
	`‰ì
(
d©a
, 
M_IPFW
);

488  (
îr
);

489 
	}
}

492 
	$ùfw_«t_gë_log
(
sock›t
 *
s›t
)

494 
uöt8_t
 *
d©a
;

495 
cfg_«t
 *
±r
;

496 
i
, 
size
;

497 
ù_fw_chaö
 *
chaö
;

499 
chaö
 = &
V_œyî3_chaö
;

501 
	`IPFW_RLOCK
(
chaö
);

503 
i
 = 0;

504 
	`LIST_FOREACH
(
±r
, &
chaö
->
«t
, 
_√xt
) {

505 i‡(
±r
->
lib
->
logDesc
 =
NULL
)

507 
i
++;

509 
size
 = 
i
 * (
LIBALIAS_BUF_SIZE
 + ());

510 
d©a
 = 
	`mÆloc
(
size
, 
M_IPFW
, 
M_NOWAIT
 | 
M_ZERO
);

511 i‡(
d©a
 =
NULL
) {

512 
	`IPFW_RUNLOCK
(
chaö
);

513  (
ENOSPC
);

515 
i
 = 0;

516 
	`LIST_FOREACH
(
±r
, &
chaö
->
«t
, 
_√xt
) {

517 i‡(
±r
->
lib
->
logDesc
 =
NULL
)

519 
	`bc›y
(&
±r
->
id
, &
d©a
[
i
], ());

520 
i
 += ();

521 
	`bc›y
(
±r
->
lib
->
logDesc
, &
d©a
[
i
], 
LIBALIAS_BUF_SIZE
);

522 
i
 +
LIBALIAS_BUF_SIZE
;

524 
	`IPFW_RUNLOCK
(
chaö
);

525 
	`so›tc›yout
(
s›t
, 
d©a
, 
size
);

526 
	`‰ì
(
d©a
, 
M_IPFW
);

528 
	}
}

531 
	$ùfw_«t_öô
()

534 
	`IPFW_WLOCK
(&
V_œyî3_chaö
);

536 
ùfw_«t_±r
 = 
ùfw_«t
;

537 
lookup_«t_±r
 = 
lookup_«t
;

538 
ùfw_«t_cfg_±r
 = 
ùfw_«t_cfg
;

539 
ùfw_«t_dñ_±r
 = 
ùfw_«t_dñ
;

540 
ùfw_«t_gë_cfg_±r
 = 
ùfw_«t_gë_cfg
;

541 
ùfw_«t_gë_log_±r
 = 
ùfw_«t_gë_log
;

542 
	`IPFW_WUNLOCK
(&
V_œyî3_chaö
);

543 
V_iÁddr_evít_èg
 = 
	`EVENTHANDLER_REGISTER
(

544 
iÁddr_evít
, 
iÁddr_ch™ge
,

545 
NULL
, 
EVENTHANDLER_PRI_ANY
);

546 
	}
}

549 
	$ùfw_«t_de°roy
()

551 
cfg_«t
 *
±r
, *
±r_ãmp
;

552 
ù_fw_chaö
 *
chaö
;

554 
chaö
 = &
V_œyî3_chaö
;

555 
	`IPFW_WLOCK
(
chaö
);

556 
	`LIST_FOREACH_SAFE
(
±r
, &
chaö
->
«t
, 
_√xt
, 
±r_ãmp
) {

557 
	`LIST_REMOVE
(
±r
, 
_√xt
);

558 
	`dñ_ªdú_•oﬁ_cfg
(
±r
, &±r->
ªdú_chaö
);

559 
	`LibAlüsUnöô
(
±r
->
lib
);

560 
	`‰ì
(
±r
, 
M_IPFW
);

562 
	`EVENTHANDLER_DEREGISTER
(
iÁddr_evít
, 
V_iÁddr_evít_èg
);

563 
	`Êush_«t_±rs
(
chaö
, -1 );

565 
ùfw_«t_±r
 = 
NULL
;

566 
lookup_«t_±r
 = 
NULL
;

567 
ùfw_«t_cfg_±r
 = 
NULL
;

568 
ùfw_«t_dñ_±r
 = 
NULL
;

569 
ùfw_«t_gë_cfg_±r
 = 
NULL
;

570 
ùfw_«t_gë_log_±r
 = 
NULL
;

571 
	`IPFW_WUNLOCK
(
chaö
);

572 
	}
}

575 
	$ùfw_«t_modevít
(
moduÀ_t
 
mod
, 
ty≥
, *
unu£d
)

577 
îr
 = 0;

579 
ty≥
) {

580 
MOD_LOAD
:

581 
	`ùfw_«t_öô
();

584 
MOD_UNLOAD
:

585 
	`ùfw_«t_de°roy
();

589  
EOPNOTSUPP
;

592  
îr
;

593 
	}
}

595 
moduÀd©a_t
 
	gùfw_«t_mod
 = {

597 
ùfw_«t_modevít
,

601 
DECLARE_MODULE
(
ùfw_«t
, 
ùfw_«t_mod
, 
SI_SUB_PROTO_IFATTACHDOMAIN
, 
SI_ORDER_ANY
);

602 
MODULE_DEPEND
(
ùfw_«t
, 
libÆüs
, 1, 1, 1);

603 
MODULE_DEPEND
(
ùfw_«t
, 
ùfw
, 2, 2, 2);

604 
MODULE_VERSION
(
ùfw_«t
, 1);

	@kipfw-mod/ip_fw_pfil.c

27 
	~<sys/cdefs.h
>

28 
__FBSDID
("$FreeBSD: head/sys/netinet/ipfw/ip_fw_pfil.c 200601 2009-12-16 10:48:40ZÜuigi $");

30 #i‡!
deföed
(
KLD_MODULE
)

31 
	~"›t_ùfw.h
"

32 
	~"›t_ùdn.h
"

33 
	~"›t_öë.h
"

34 #i‚de‡
INET


35 #îr‹ 
IPFIREWALL
 
ªquúes
 
INET
.

38 
	~"›t_öë6.h
"

40 
	~<sys/∑øm.h
>

41 
	~<sys/sy°m.h
>

42 
	~<sys/mÆloc.h
>

43 
	~<sys/mbuf.h
>

44 
	~<sys/moduÀ.h
>

45 
	~<sys/kî√l.h
>

46 
	~<sys/lock.h
>

47 
	~<sys/rwlock.h
>

48 
	~<sys/sockë.h
>

49 
	~<sys/sys˘l.h
>

51 
	~<√t/if.h
>

52 
	~<√t/rouã.h
>

53 
	~<√t/pfû.h
>

54 
	~<√t/v√t.h
>

56 
	~<√töë/ö.h
>

57 
	~<√töë/ö_sy°m.h
>

58 
	~<√töë/ù.h
>

59 
	~<√töë/ù_v¨.h
>

60 
	~<√töë/ù_fw.h
>

61 
	~<√töë/ùfw/ù_fw_¥iv©e.h
>

62 
	~<√tgøph/ng_ùfw.h
>

64 
	~<machöe/ö_cksum.h
>

66 
VNET_DEFINE
(, 
fw_íabÀ
) = 1;

67 
	#V_fw_íabÀ
 
	`VNET
(
fw_íabÀ
)

	)

69 #ifde‡
INET6


70 
VNET_DEFINE
(, 
fw6_íabÀ
) = 1;

71 
	#V_fw6_íabÀ
 
	`VNET
(
fw6_íabÀ
)

	)

74 
ùfw_chg_hook
(
SYSCTL_HANDLER_ARGS
);

77 
ùfw_divît
(
mbuf
 **, , 
ùfw_ruÀ_ªf
 *, );

79 #ifde‡
SYSCTL_NODE


81 
	$SYSBEGIN
(
f1
)

83 
	`SYSCTL_DECL
(
_√t_öë_ù_fw
);

84 
	`SYSCTL_VNET_PROC
(
_√t_öë_ù_fw
, 
OID_AUTO
, 
íabÀ
,

85 
CTLTYPE_INT
 | 
CTLFLAG_RW
 | 
CTLFLAG_SECURE3
, &
	`VNET_NAME
(
fw_íabÀ
), 0,

86 
ùfw_chg_hook
, "I", "Enable ipfw");

87 #ifde‡
INET6


88 
	`SYSCTL_DECL
(
_√t_öë6_ù6_fw
);

89 
	`SYSCTL_VNET_PROC
(
_√t_öë6_ù6_fw
, 
OID_AUTO
, 
íabÀ
,

90 
CTLTYPE_INT
 | 
CTLFLAG_RW
 | 
CTLFLAG_SECURE3
, &
	`VNET_NAME
(
fw6_íabÀ
), 0,

91 
ùfw_chg_hook
, "I", "Enable ipfw+6");

94 
SYSEND


104 
	$ùfw_check_hook
(*
¨g
, 
mbuf
 **
m0
, 
i‚ë
 *
iÂ
, 
dú
,

105 
öpcb
 *
öp
)

107 
ù_fw_¨gs
 
¨gs
;

108 
m_èg
 *
èg
;

109 
ùfw
;

110 
ªt
;

113 i‡(
	`mtod
(*
m0
, 
ù
 *)->
ù_v
 == 4)

114 
	`SET_NET_IPLEN
(
	`mtod
(*
m0
, 
ù
 *));

117 
dú
 = (dú =
PFIL_IN
Ë? 
DIR_IN
 : 
DIR_OUT
;

118 
	`bzîo
(&
¨gs
, (args));

120 
agaö
:

125 
èg
 = 
	`m_èg_loˇã
(*
m0
, 
MTAG_IPFW_RULE
, 0, 
NULL
);

126 i‡(
èg
 !
NULL
) {

127 
¨gs
.
ruÀ
 = *((
ùfw_ruÀ_ªf
 *)(
èg
+1));

128 
	`m_èg_dñëe
(*
m0
, 
èg
);

129 i‡(
¨gs
.
ruÀ
.
öfo
 & 
IPFW_ONEPASS
) {

130 
	`SET_HOST_IPLEN
(
	`mtod
(*
m0
, 
ù
 *));

135 
¨gs
.
m
 = *
m0
;

136 
¨gs
.
oif
 = 
dú
 =
DIR_OUT
 ? 
iÂ
 : 
NULL
;

137 
¨gs
.
öp
 = inp;

139 
ùfw
 = 
	`ùfw_chk
(&
¨gs
);

140 *
m0
 = 
¨gs
.
m
;

142 
	`KASSERT
(*
m0
 !
NULL
 || 
ùfw
 =
IP_FW_DENY
, ("%s: m0 is NULL",

143 
__func__
));

146 
ªt
 = 0;

147 
ùfw
) {

148 
IP_FW_PASS
:

150 i‡(
¨gs
.
√xt_h›
 =
NULL
)

152 #i‚de‡
IPFIREWALL_FORWARD


153 
ªt
 = 
EACCES
;

156 
m_èg
 *
fwd_èg
;

162 
fwd_èg
 = (
dú
 =
DIR_IN
Ë? 
NULL
 :

163 
	`m_èg_föd
(*
m0
, 
PACKET_TAG_IPFORWARD
, 
NULL
);

164 i‡(
fwd_èg
 !
NULL
) {

165 
	`m_èg_u∆ök
(*
m0
, 
fwd_èg
);

167 
fwd_èg
 = 
	`m_èg_gë
(
PACKET_TAG_IPFORWARD
,

168 (
sockaddr_ö
), 
M_NOWAIT
);

169 i‡(
fwd_èg
 =
NULL
) {

170 
ªt
 = 
EACCES
;

174 
	`bc›y
(
¨gs
.
√xt_h›
, (
fwd_èg
+1), (
sockaddr_ö
));

175 
	`m_èg_¥ïíd
(*
m0
, 
fwd_èg
);

177 i‡(
	`ö_loˇlù
(
¨gs
.
√xt_h›
->
sö_addr
))

178 (*
m0
)->
m_Êags
 |
M_FASTFWD_OURS
;

183 
IP_FW_DENY
:

184 
ªt
 = 
EACCES
;

187 
IP_FW_DUMMYNET
:

188 
ªt
 = 
EACCES
;

189 i‡(
ù_dn_io_±r
 =
NULL
)

191 i‡(
	`mtod
(*
m0
, 
ù
 *)->
ù_v
 == 4)

192 
ªt
 = 
	`ù_dn_io_±r
(
m0
, 
dú
, &
¨gs
);

193 i‡(
	`mtod
(*
m0
, 
ù
 *)->
ù_v
 == 6)

194 
ªt
 = 
	`ù_dn_io_±r
(
m0
, 
dú
 | 
PROTO_IPV6
, &
¨gs
);

204 i‡(*
m0
 !
NULL
)

205 
agaö
;

208 
IP_FW_TEE
:

209 
IP_FW_DIVERT
:

210 i‡(
ù_divît_±r
 =
NULL
) {

211 
ªt
 = 
EACCES
;

214 
ªt
 = 
	`ùfw_divît
(
m0
, 
dú
, &
¨gs
.
ruÀ
,

215 (
ùfw
 =
IP_FW_TEE
) ? 1 : 0);

217 i‡(*
m0
)

218 
agaö
;

221 
IP_FW_NGTEE
:

222 
IP_FW_NETGRAPH
:

223 i‡(
ng_ùfw_öput_p
 =
NULL
) {

224 
ªt
 = 
EACCES
;

227 
ªt
 = 
	`ng_ùfw_öput_p
(
m0
, 
dú
, &
¨gs
,

228 (
ùfw
 =
IP_FW_NGTEE
) ? 1 : 0);

229 i‡(
ùfw
 =
IP_FW_NGTEE
)

230 
agaö
;

233 
IP_FW_NAT
:

235 i‡(
V_fw_⁄e_∑ss
)

237 
agaö
;

239 
IP_FW_REASS
:

240 
agaö
;

243 
	`KASSERT
(0, ("%s: unknow¿ªtvÆ", 
__func__
));

246 i‡(
ªt
 != 0) {

247 i‡(*
m0
)

248 
	`FREE_PKT
(*
m0
);

249 *
m0
 = 
NULL
;

251 i‡(*
m0
 && 
	`mtod
(*m0, 
ù
 *)->
ù_v
 == 4)

252 
	`SET_HOST_IPLEN
(
	`mtod
(*
m0
, 
ù
 *));

253  
ªt
;

254 
	}
}

258 
	$ùfw_divît
(
mbuf
 **
m0
, 
öcomög
, 
ùfw_ruÀ_ªf
 *
ruÀ
,

259 
ãe
)

266 
mbuf
 *
˛⁄e
;

267 
ù
 *ip;

268 
m_èg
 *
èg
;

271 i‡(
ãe
 == 0) {

272 
˛⁄e
 = *
m0
;

273 *
m0
 = 
NULL
;

275 
˛⁄e
 = 
	`m_dup
(*
m0
, 
M_DONTWAIT
);

279 i‡(
˛⁄e
 =
NULL
)

291 
ù
 = 
	`mtod
(
˛⁄e
, ip *);

292 i‡(!
ãe
 && 
	`¡ohs
(
ù
->
ù_off
Ë& (
IP_MF
 | 
IP_OFFMASK
)) {

293 
hÀn
;

294 
mbuf
 *
ªass
;

296 
	`SET_HOST_IPLEN
(
ù
);

297 
ªass
 = 
	`ù_ªass
(
˛⁄e
);

298 i‡(
ªass
 =
NULL
)

305 
ù
 = 
	`mtod
(
ªass
, ip *);

306 
hÀn
 = 
ù
->
ù_hl
 << 2;

307 
	`SET_NET_IPLEN
(
ù
);

308 
ù
->
ù_sum
 = 0;

309 i‡(
hÀn
 =(
ù
))

310 
ù
->
ù_sum
 = 
	`ö_cksum_hdr
(ip);

312 
ù
->
ù_sum
 = 
	`ö_cksum
(
ªass
, 
hÀn
);

313 
˛⁄e
 = 
ªass
;

316 
èg
 = 
	`m_èg_Æloc
(
MTAG_IPFW_RULE
, 0,

317 (
ùfw_ruÀ_ªf
), 
M_NOWAIT
);

318 i‡(
èg
 =
NULL
) {

319 
	`FREE_PKT
(
˛⁄e
);

322 *((
ùfw_ruÀ_ªf
 *)(
èg
+1)Ë*
ruÀ
;

323 
	`m_èg_¥ïíd
(
˛⁄e
, 
èg
);

326 
	`ù_divît_±r
(
˛⁄e
, 
öcomög
);

328 
	}
}

334 
	$ùfw_hook
(
⁄off
, 
pf
)

336 
pfû_hód
 *
pfh
;

338 
pfh
 = 
	`pfû_hód_gë
(
PFIL_TYPE_AF
, 
pf
);

339 i‡(
pfh
 =
NULL
)

340  
ENOENT
;

342 (Ë(
⁄off
 ? 
pfû_add_hook
 : 
pfû_ªmove_hook
)

343 (
ùfw_check_hook
, 
NULL
, 
PFIL_IN
 | 
PFIL_OUT
 | 
PFIL_WAITOK
, 
pfh
);

346 
	}
}

349 
	$ùfw_©èch_hooks
(
¨g
)

351 
îr‹
 = 0;

353 i‡(
¨g
 == 0)

354 
	`ùfw_hook
(0, 
AF_INET
);

355 i‡(
V_fw_íabÀ
 && 
	`ùfw_hook
(1, 
AF_INET
) != 0) {

356 
îr‹
 = 
ENOENT
;

357 
	`¥ötf
("ipfw_hook()Érror\n");

359 #ifde‡
INET6


360 i‡(
¨g
 == 0)

361 
	`ùfw_hook
(0, 
AF_INET6
);

362 i‡(
V_fw6_íabÀ
 && 
	`ùfw_hook
(1, 
AF_INET6
) != 0) {

363 
îr‹
 = 
ENOENT
;

364 
	`¥ötf
("ipfw6_hook()Érror\n");

367  
îr‹
;

368 
	}
}

371 
	$ùfw_chg_hook
(
SYSCTL_HANDLER_ARGS
)

373 
íabÀ
;

374 
ﬁdíabÀ
;

375 
îr‹
;

376 
af
;

378 i‡(
¨g1
 =&
	`VNET_NAME
(
fw_íabÀ
)) {

379 
íabÀ
 = 
V_fw_íabÀ
;

380 
af
 = 
AF_INET
;

382 #ifde‡
INET6


383 i‡(
¨g1
 =&
	`VNET_NAME
(
fw6_íabÀ
)) {

384 
íabÀ
 = 
V_fw6_íabÀ
;

385 
af
 = 
AF_INET6
;

389  (
EINVAL
);

391 
ﬁdíabÀ
 = 
íabÀ
;

393 
îr‹
 = 
	`sys˘l_h™dÀ_öt
(
oidp
, &
íabÀ
, 0, 
ªq
);

395 i‡(
îr‹
)

396  (
îr‹
);

398 
íabÀ
 = (enable) ? 1 : 0;

400 i‡(
íabÀ
 =
ﬁdíabÀ
)

403 
îr‹
 = 
	`ùfw_hook
(
íabÀ
, 
af
);

404 i‡(
îr‹
)

405  (
îr‹
);

406 i‡(
af
 =
AF_INET
)

407 
V_fw_íabÀ
 = 
íabÀ
;

408 #ifde‡
INET6


409 i‡(
af
 =
AF_INET6
)

410 
V_fw6_íabÀ
 = 
íabÀ
;

414 
	}
}

	@kipfw-mod/ip_fw_sockopt.c

28 
	~<sys/cdefs.h
>

29 
__FBSDID
("$FreeBSD: head/sys/netinet/ipfw/ip_fw_sockopt.c 206339 2010-04-07 08:23:58ZÜuigi $");

36 #i‡!
deföed
(
KLD_MODULE
)

37 
	~"›t_ùfw.h
"

38 
	~"›t_ùdivît.h
"

39 
	~"›t_ùdn.h
"

40 
	~"›t_öë.h
"

41 #i‚de‡
INET


42 #îr‹ 
IPFIREWALL
 
ªquúes
 
INET
.

45 
	~"›t_öë6.h
"

46 
	~"›t_ù£c.h
"

48 
	~<sys/∑øm.h
>

49 
	~<sys/sy°m.h
>

50 
	~<sys/mÆloc.h
>

51 
	~<sys/mbuf.h
>

52 
	~<sys/kî√l.h
>

53 
	~<sys/lock.h
>

54 
	~<sys/¥iv.h
>

55 
	~<sys/¥oc.h
>

56 
	~<sys/rwlock.h
>

57 
	~<sys/sockë.h
>

58 
	~<sys/sockëv¨.h
>

59 
	~<sys/sys˘l.h
>

60 
	~<sys/sy¶og.h
>

61 
	~<√t/if.h
>

62 
	~<√t/rouã.h
>

63 
	~<√t/v√t.h
>

65 
	~<√töë/ö.h
>

66 
	~<√töë/ù_v¨.h
>

67 
	~<√töë/ù_fw.h
>

68 
	~<√töë/ùfw/ù_fw_¥iv©e.h
>

70 #ifde‡
MAC


71 
	~<£curôy/mac/mac_‰amew‹k.h
>

74 
MALLOC_DEFINE
(
M_IPFW
, "IpFw/IpAcct", "IpFw/IpAcct chain's");

85 
	$ùfw_föd_ruÀ
(
ù_fw_chaö
 *
chaö
, 
uöt32_t
 
key
, uöt32_à
id
)

87 
i
, 
lo
, 
hi
;

88 
ù_fw
 *
r
;

90 
lo
 = 0, 
hi
 = 
chaö
->
n_ruÀs
 - 1;Üo < hi;) {

91 
i
 = (
lo
 + 
hi
) / 2;

92 
r
 = 
chaö
->
m≠
[
i
];

93 i‡(
r
->
ruÀnum
 < 
key
)

94 
lo
 = 
i
 + 1;

95 i‡(
r
->
ruÀnum
 > 
key
)

96 
hi
 = 
i
;

97 i‡(
r
->
id
 < id)

98 
lo
 = 
i
 + 1;

100 
hi
 = 
i
;

102  
hi
;

103 
	}
}

109 
ù_fw
 **

110 
	$gë_m≠
(
ù_fw_chaö
 *
chaö
, 
exåa
, 
locked
)

114 
ù_fw
 **
m≠
;

115 
i
;

117 
i
 = 
chaö
->
n_ruÀs
 + 
exåa
;

118 
m≠
 = 
	`mÆloc
(
i
 * (
ù_fw
 *), 
M_IPFW
,

119 
locked
 ? 
M_NOWAIT
 : 
M_WAITOK
);

120 i‡(
m≠
 =
NULL
) {

121 
	`¥ötf
("%s: c™nŸáŒoˇã m≠\n", 
__FUNCTION__
);

122  
NULL
;

124 i‡(!
locked
)

125 
	`IPFW_UH_WLOCK
(
chaö
);

126 i‡(
i
 >
chaö
->
n_ruÀs
 + 
exåa
)

127  
m≠
;

129 i‡(!
locked
)

130 
	`IPFW_UH_WUNLOCK
(
chaö
);

131 
	`‰ì
(
m≠
, 
M_IPFW
);

133 
	}
}

138 
ù_fw
 **

139 
	$sw≠_m≠
(
ù_fw_chaö
 *
chaö
, 
ù_fw
 **
√w_m≠
, 
√w_Àn
)

141 
ù_fw
 **
ﬁd_m≠
;

143 
	`IPFW_WLOCK
(
chaö
);

144 
chaö
->
id
++;

145 
chaö
->
n_ruÀs
 = 
√w_Àn
;

146 
ﬁd_m≠
 = 
chaö
->
m≠
;

147 
chaö
->
m≠
 = 
√w_m≠
;

148 
	`IPFW_WUNLOCK
(
chaö
);

149  
ﬁd_m≠
;

150 
	}
}

160 
	$ùfw_add_ruÀ
(
ù_fw_chaö
 *
chaö
, 
ù_fw
 *
öput_ruÀ
)

162 
ù_fw
 *
ruÀ
;

163 
i
, 
l
, 
ö£π_bef‹e
;

164 
ù_fw
 **
m≠
;

166 i‡(
chaö
->
ruÀs
 =
NULL
 || 
öput_ruÀ
->
ruÀnum
 > 
IPFW_DEFAULT_RULE
-1)

167  (
EINVAL
);

169 
l
 = 
	`RULESIZE
(
öput_ruÀ
);

170 
ruÀ
 = 
	`mÆloc
(
l
, 
M_IPFW
, 
M_WAITOK
 | 
M_ZERO
);

171 i‡(
ruÀ
 =
NULL
)

172  (
ENOSPC
);

174 
m≠
 = 
	`gë_m≠
(
chaö
, 1, 0 );

175 i‡(
m≠
 =
NULL
) {

176 
	`‰ì
(
ruÀ
, 
M_IPFW
);

177  
ENOSPC
;

180 
	`bc›y
(
öput_ruÀ
, 
ruÀ
, 
l
);

182 
ruÀ
->
x_√xt
 = 
NULL
;

183 
ruÀ
->
√xt_ruÀ
 = 
NULL
;

184 
ruÀ
->
p˙t
 = 0;

185 
ruÀ
->
b˙t
 = 0;

186 
ruÀ
->
time°amp
 = 0;

188 i‡(
V_autoöc_°ï
 < 1)

189 
V_autoöc_°ï
 = 1;

190 i‡(
V_autoöc_°ï
 > 1000)

191 
V_autoöc_°ï
 = 1000;

193 
ö£π_bef‹e
 = 
ruÀ
->
ruÀnum
 ?ÑuÀ->ruÀnum + 1 : 
IPFW_DEFAULT_RULE
;

194 
i
 = 
	`ùfw_föd_ruÀ
(
chaö
, 
ö£π_bef‹e
, 0);

196 i‡(
i
 > 0)

197 
	`bc›y
(
chaö
->
m≠
, m≠, 
i
 * (
ù_fw
 *));

198 
m≠
[
i
] = 
ruÀ
;

200 
	`bc›y
(
chaö
->
m≠
 + 
i
, map + i + 1,

201 (
ù_fw
 *Ë*(
chaö
->
n_ruÀs
 - 
i
));

202 i‡(
ruÀ
->
ruÀnum
 == 0) {

204 
ruÀ
->
ruÀnum
 = 
i
 > 0 ? 
m≠
[i-1]->rulenum : 0;

205 i‡(
ruÀ
->
ruÀnum
 < 
IPFW_DEFAULT_RULE
 - 
V_autoöc_°ï
)

206 
ruÀ
->
ruÀnum
 +
V_autoöc_°ï
;

207 
öput_ruÀ
->
ruÀnum
 = 
ruÀ
->rulenum;

210 
ruÀ
->
id
 = 
chaö
->id + 1;

211 
m≠
 = 
	`sw≠_m≠
(
chaö
, m≠, chaö->
n_ruÀs
 + 1);

212 
chaö
->
°©ic_Àn
 +
l
;

213 
	`IPFW_UH_WUNLOCK
(
chaö
);

214 i‡(
m≠
)

215 
	`‰ì
(
m≠
, 
M_IPFW
);

217 
	}
}

225 
	$ùfw_ª≠_ruÀs
(
ù_fw
 *
hód
)

227 
ù_fw
 *
ruÀ
;

229 (
ruÀ
 = 
hód
Ë!
NULL
) {

230 
hód
 = hód->
x_√xt
;

231 
	`‰ì
(
ruÀ
, 
M_IPFW
);

233 
	}
}

263 
	$kìp_ruÀ
(
ù_fw
 *
ruÀ
, 
uöt8_t
 
cmd
, uöt8_à
£t
, 
uöt32_t
 
n
)

266 (
ruÀ
->
ruÀnum
 =
IPFW_DEFAULT_RULE
) ||

267 (
cmd
 =0 && 
n
 =0 && 
ruÀ
->
£t
 =
RESVD_SET
) ||

268 !(
cmd
 =0 || 
ruÀ
->
£t
 == set) ||

269 !(
cmd
 =1 || 
n
 =0 ||Ç =
ruÀ
->
ruÀnum
);

270 
	}
}

287 
	$dñ_íåy
(
ù_fw_chaö
 *
chaö
, 
uöt32_t
 
¨g
)

289 
ù_fw
 *
ruÀ
;

290 
uöt32_t
 
num
;

291 
uöt8_t
 
cmd
, 
√w_£t
;

292 
°¨t
, 
íd
, 
i
, 
ofs
, 
n
;

293 
ù_fw
 **
m≠
 = 
NULL
;

294 
îr‹
 = 0;

296 
num
 = 
¨g
 & 0xffff;

297 
cmd
 = (
¨g
 >> 24) & 0xff;

298 
√w_£t
 = (
¨g
 >> 16) & 0xff;

300 i‡(
cmd
 > 5 || 
√w_£t
 > 
RESVD_SET
)

301  
EINVAL
;

302 i‡(
cmd
 == 0 || cmd == 2 || cmd == 5) {

303 i‡(
num
 >
IPFW_DEFAULT_RULE
)

304  
EINVAL
;

306 i‡(
num
 > 
RESVD_SET
)

307  
EINVAL
;

310 
	`IPFW_UH_WLOCK
(
chaö
);

311 
chaö
->
ª≠
 = 
NULL
;

313 
cmd
) {

324 
n
 = 0;

325 i‡(
cmd
 == 1) {

329 
√w_£t
 = 
num
;

330 
°¨t
 = -1, 
íd
 = 
i
 = 0; i < 
chaö
->
n_ruÀs
; i++) {

331 i‡(
	`kìp_ruÀ
(
chaö
->
m≠
[
i
], 
cmd
, 
√w_£t
, 0))

333 i‡(
°¨t
 < 0)

334 
°¨t
 = 
i
;

335 
íd
 = 
i
;

336 
n
++;

338 
íd
++;

341 
°¨t
 = 
	`ùfw_föd_ruÀ
(
chaö
, 
num
, 0);

342 
íd
 = 
°¨t
;Énd < 
chaö
->
n_ruÀs
;Énd++) {

343 
ruÀ
 = 
chaö
->
m≠
[
íd
];

344 i‡(
num
 > 0 && 
ruÀ
->
ruÀnum
 !=Çum)

346 i‡(!
	`kìp_ruÀ
(
ruÀ
, 
cmd
, 
√w_£t
, 
num
))

347 
n
++;

351 i‡(
n
 == 0) {

357 
îr‹
 = (
¨g
 =0Ë? 0 : 
EINVAL
;

362 
m≠
 = 
	`gë_m≠
(
chaö
, -
n
, 1 );

363 i‡(
m≠
 =
NULL
) {

364 
îr‹
 = 
EINVAL
;

369 i‡(
°¨t
 > 0)

370 
	`bc›y
(
chaö
->
m≠
, m≠, 
°¨t
 * (
ù_fw
 *));

372 
i
 = 
ofs
 = 
°¨t
; i < 
íd
; i++) {

373 
ruÀ
 = 
chaö
->
m≠
[
i
];

374 i‡(
	`kìp_ruÀ
(
ruÀ
, 
cmd
, 
√w_£t
, 
num
))

375 
m≠
[
ofs
++] = 
ruÀ
;

378 
	`bc›y
(
chaö
->
m≠
 + 
íd
, m≠ + 
ofs
,

379 (
chaö
->
n_ruÀs
 - 
íd
Ë* (
ù_fw
 *));

381 
m≠
 = 
	`sw≠_m≠
(
chaö
, m≠, chaö->
n_ruÀs
 - 
n
);

383 
i
 = 
°¨t
; i < 
íd
; i++) {

384 
l
;

385 
ruÀ
 = 
m≠
[
i
];

386 i‡(
	`kìp_ruÀ
(
ruÀ
, 
cmd
, 
√w_£t
, 
num
))

388 
l
 = 
	`RULESIZE
(
ruÀ
);

389 
chaö
->
°©ic_Àn
 -
l
;

390 
	`ùfw_ªmove_dyn_chûdªn
(
ruÀ
);

391 
ruÀ
->
x_√xt
 = 
chaö
->
ª≠
;

392 
chaö
->
ª≠
 = 
ruÀ
;

402 
i
 = 0; i < 
chaö
->
n_ruÀs
 - 1; i++) {

403 
ruÀ
 = 
chaö
->
m≠
[
i
];

404 i‡(
ruÀ
->
ruÀnum
 =
num
)

405 
ruÀ
->
£t
 = 
√w_£t
;

410 
i
 = 0; i < 
chaö
->
n_ruÀs
 - 1; i++) {

411 
ruÀ
 = 
chaö
->
m≠
[
i
];

412 i‡(
ruÀ
->
£t
 =
num
)

413 
ruÀ
->
£t
 = 
√w_£t
;

418 
i
 = 0; i < 
chaö
->
n_ruÀs
 - 1; i++) {

419 
ruÀ
 = 
chaö
->
m≠
[
i
];

420 i‡(
ruÀ
->
£t
 =
num
)

421 
ruÀ
->
£t
 = 
√w_£t
;

422 i‡(
ruÀ
->
£t
 =
√w_£t
)

423 
ruÀ
->
£t
 = 
num
;

428 
ruÀ
 = 
chaö
->
ª≠
;

429 
chaö
->
ª≠
 = 
NULL
;

430 
	`IPFW_UH_WUNLOCK
(
chaö
);

431 
	`ùfw_ª≠_ruÀs
(
ruÀ
);

432 i‡(
m≠
)

433 
	`‰ì
(
m≠
, 
M_IPFW
);

434  
îr‹
;

435 
	}
}

443 
	$˛ór_cou¡îs
(
ù_fw
 *
ruÀ
, 
log_⁄ly
)

445 
ùfw_ö¢_log
 *
l
 = (ùfw_ö¢_log *)
	`ACTION_PTR
(
ruÀ
);

447 i‡(
log_⁄ly
 == 0) {

448 
ruÀ
->
b˙t
 =ÑuÀ->
p˙t
 = 0;

449 
ruÀ
->
time°amp
 = 0;

451 i‡(
l
->
o
.
›code
 =
O_LOG
)

452 
l
->
log_À·
 =Ü->
max_log
;

453 
	}
}

465 
	$zîo_íåy
(
ù_fw_chaö
 *
chaö
, 
u_öt32_t
 
¨g
, 
log_⁄ly
)

467 
ù_fw
 *
ruÀ
;

468 *
msg
;

469 
i
;

471 
uöt16_t
 
ruÀnum
 = 
¨g
 & 0xffff;

472 
uöt8_t
 
£t
 = (
¨g
 >> 16) & 0xff;

473 
uöt8_t
 
cmd
 = (
¨g
 >> 24) & 0xff;

475 i‡(
cmd
 > 1)

476  (
EINVAL
);

477 i‡(
cmd
 =1 && 
£t
 > 
RESVD_SET
)

478  (
EINVAL
);

480 
	`IPFW_UH_RLOCK
(
chaö
);

481 i‡(
ruÀnum
 == 0) {

482 
V_n‹uÀ_cou¡î
 = 0;

483 
i
 = 0; i < 
chaö
->
n_ruÀs
; i++) {

484 
ruÀ
 = 
chaö
->
m≠
[
i
];

486 i‡(
cmd
 =1 && 
ruÀ
->
£t
 != set)

488 
	`˛ór_cou¡îs
(
ruÀ
, 
log_⁄ly
);

490 
msg
 = 
log_⁄ly
 ? "AllÜogging countsÑeset" :

493 
˛óªd
 = 0;

494 
i
 = 0; i < 
chaö
->
n_ruÀs
; i++) {

495 
ruÀ
 = 
chaö
->
m≠
[
i
];

496 i‡(
ruÀ
->
ruÀnum
 ==Ñulenum) {

497 i‡(
cmd
 =0 || 
ruÀ
->
£t
 == set)

498 
	`˛ór_cou¡îs
(
ruÀ
, 
log_⁄ly
);

499 
˛óªd
 = 1;

501 i‡(
ruÀ
->
ruÀnum
 >Ñulenum)

504 i‡(!
˛óªd
) {

505 
	`IPFW_UH_RUNLOCK
(
chaö
);

506  (
EINVAL
);

508 
msg
 = 
log_⁄ly
 ? "logging countÑeset" : "cleared";

510 
	`IPFW_UH_RUNLOCK
(
chaö
);

512 i‡(
V_fw_vîbo£
) {

513 
Àv
 = 
LOG_SECURITY
 | 
LOG_NOTICE
;

515 i‡(
ruÀnum
)

516 
	`log
(
Àv
, "ùfw: E¡ry %d %s.\n", 
ruÀnum
, 
msg
);

518 
	`log
(
Àv
, "ùfw: %s.\n", 
msg
);

521 
	}
}

528 
	$check_ùfw_°ru˘
(
ù_fw
 *
ruÀ
, 
size
)

530 
l
, 
cmdÀn
 = 0;

531 
have_a˘i⁄
=0;

532 
ùfw_ö¢
 *
cmd
;

534 i‡(
size
 < (*
ruÀ
)) {

535 
	`¥ötf
("ipfw:ÑuleÅoo short\n");

536  (
EINVAL
);

539 
l
 = 
	`RULESIZE
(
ruÀ
);

540 i‡(
l
 !
size
) {

541 
	`¥ötf
("ùfw: sizêmism©ch (havê%d w™à%d)\n", 
size
, 
l
);

542  (
EINVAL
);

544 i‡(
ruÀ
->
a˘_ofs
 >ruÀ->
cmd_Àn
) {

545 
	`¥ötf
("ipfw: bogusáction offset (%u > %u)\n",

546 
ruÀ
->
a˘_ofs
,ÑuÀ->
cmd_Àn
 - 1);

547  (
EINVAL
);

553 
l
 = 
ruÀ
->
cmd_Àn
, 
cmd
 =Ñule->cmd ;

554 
l
 > 0 ;Ü -
cmdÀn
, 
cmd
 += cmdlen) {

555 
cmdÀn
 = 
	`F_LEN
(
cmd
);

556 i‡(
cmdÀn
 > 
l
) {

557 
	`¥ötf
("ipfw: opcode %d sizeÅruncated\n",

558 
cmd
->
›code
);

559  
EINVAL
;

561 
cmd
->
›code
) {

562 
O_PROBE_STATE
:

563 
O_KEEP_STATE
:

564 
O_PROTO
:

565 
O_IP_SRC_ME
:

566 
O_IP_DST_ME
:

567 
O_LAYER2
:

568 
O_IN
:

569 
O_FRAG
:

570 
O_DIVERTED
:

571 
O_IPOPT
:

572 
O_IPTOS
:

573 
O_IPPRECEDENCE
:

574 
O_IPVER
:

575 
O_TCPWIN
:

576 
O_TCPFLAGS
:

577 
O_TCPOPTS
:

578 
O_ESTAB
:

579 
O_VERREVPATH
:

580 
O_VERSRCREACH
:

581 
O_ANTISPOOF
:

582 
O_IPSEC
:

583 #ifde‡
INET6


584 
O_IP6_SRC_ME
:

585 
O_IP6_DST_ME
:

586 
O_EXT_HDR
:

587 
O_IP6
:

589 
O_IP4
:

590 
O_TAG
:

591 i‡(
cmdÀn
 !
	`F_INSN_SIZE
(
ùfw_ö¢
))

592 
bad_size
;

595 
O_FIB
:

596 i‡(
cmdÀn
 !
	`F_INSN_SIZE
(
ùfw_ö¢
))

597 
bad_size
;

598 i‡(
cmd
->
¨g1
 >
π_numfibs
) {

599 
	`¥ötf
("ipfw: invalid fibÇumber %d\n",

600 
cmd
->
¨g1
);

601  
EINVAL
;

605 
O_SETFIB
:

606 i‡(
cmdÀn
 !
	`F_INSN_SIZE
(
ùfw_ö¢
))

607 
bad_size
;

608 i‡(
cmd
->
¨g1
 >
π_numfibs
) {

609 
	`¥ötf
("ipfw: invalid fibÇumber %d\n",

610 
cmd
->
¨g1
);

611  
EINVAL
;

613 
check_a˘i⁄
;

615 
O_UID
:

616 
O_GID
:

617 
O_JAIL
:

618 
O_IP_SRC
:

619 
O_IP_DST
:

620 
O_TCPSEQ
:

621 
O_TCPACK
:

622 
O_PROB
:

623 
O_ICMPTYPE
:

624 i‡(
cmdÀn
 !
	`F_INSN_SIZE
(
ùfw_ö¢_u32
))

625 
bad_size
;

628 
O_LIMIT
:

629 i‡(
cmdÀn
 !
	`F_INSN_SIZE
(
ùfw_ö¢_limô
))

630 
bad_size
;

633 
O_LOG
:

634 i‡(
cmdÀn
 !
	`F_INSN_SIZE
(
ùfw_ö¢_log
))

635 
bad_size
;

637 ((
ùfw_ö¢_log
 *)
cmd
)->
log_À·
 =

638 ((
ùfw_ö¢_log
 *)
cmd
)->
max_log
;

642 
O_IP_SRC_MASK
:

643 
O_IP_DST_MASK
:

645 i‡–!(
cmdÀn
 & 1) || cmdlen > 31)

646 
bad_size
;

649 
O_IP_SRC_SET
:

650 
O_IP_DST_SET
:

651 i‡(
cmd
->
¨g1
 == 0 || cmd->arg1 > 256) {

652 
	`¥ötf
("ipfw: invalid set size %d\n",

653 
cmd
->
¨g1
);

654  
EINVAL
;

656 i‡(
cmdÀn
 !
	`F_INSN_SIZE
(
ùfw_ö¢_u32
) +

657 (
cmd
->
¨g1
+31)/32 )

658 
bad_size
;

661 
O_IP_SRC_LOOKUP
:

662 
O_IP_DST_LOOKUP
:

663 i‡(
cmd
->
¨g1
 >
IPFW_TABLES_MAX
) {

664 
	`¥ötf
("ipfw: invalidÅableÇumber %d\n",

665 
cmd
->
¨g1
);

666  (
EINVAL
);

668 i‡(
cmdÀn
 !
	`F_INSN_SIZE
(
ùfw_ö¢
) &&

669 
cmdÀn
 !
	`F_INSN_SIZE
(
ùfw_ö¢_u32
) + 1 &&

670 
cmdÀn
 !
	`F_INSN_SIZE
(
ùfw_ö¢_u32
))

671 
bad_size
;

674 
O_MACADDR2
:

675 i‡(
cmdÀn
 !
	`F_INSN_SIZE
(
ùfw_ö¢_mac
))

676 
bad_size
;

679 
O_NOP
:

680 
O_IPID
:

681 
O_IPTTL
:

682 
O_IPLEN
:

683 
O_TCPDATALEN
:

684 
O_TAGGED
:

685 i‡(
cmdÀn
 < 1 || cmdlen > 31)

686 
bad_size
;

689 
O_MAC_TYPE
:

690 
O_IP_SRCPORT
:

691 
O_IP_DSTPORT
:

692 i‡(
cmdÀn
 < 2 || cmdlen > 31)

693 
bad_size
;

696 
O_RECV
:

697 
O_XMIT
:

698 
O_VIA
:

699 i‡(
cmdÀn
 !
	`F_INSN_SIZE
(
ùfw_ö¢_if
))

700 
bad_size
;

703 
O_ALTQ
:

704 i‡(
cmdÀn
 !
	`F_INSN_SIZE
(
ùfw_ö¢_Ætq
))

705 
bad_size
;

708 
O_PIPE
:

709 
O_QUEUE
:

710 i‡(
cmdÀn
 !
	`F_INSN_SIZE
(
ùfw_ö¢
))

711 
bad_size
;

712 
check_a˘i⁄
;

714 
O_FORWARD_IP
:

715 #ifdef 
IPFIREWALL_FORWARD


716 i‡(
cmdÀn
 !
	`F_INSN_SIZE
(
ùfw_ö¢_ß
))

717 
bad_size
;

718 
check_a˘i⁄
;

720  
EINVAL
;

723 
O_DIVERT
:

724 
O_TEE
:

725 i‡(
ù_divît_±r
 =
NULL
)

726  
EINVAL
;

728 
check_size
;

729 
O_NETGRAPH
:

730 
O_NGTEE
:

731 i‡(
ng_ùfw_öput_p
 =
NULL
)

732  
EINVAL
;

734 
check_size
;

735 
O_NAT
:

736 i‡(!
IPFW_NAT_LOADED
)

737  
EINVAL
;

738 i‡(
cmdÀn
 !
	`F_INSN_SIZE
(
ùfw_ö¢_«t
))

739 
bad_size
;

740 
check_a˘i⁄
;

741 
O_FORWARD_MAC
:

742 
O_CHECK_STATE
:

743 
O_COUNT
:

744 
O_ACCEPT
:

745 
O_DENY
:

746 
O_REJECT
:

747 #ifde‡
INET6


748 
O_UNREACH6
:

750 
O_SKIPTO
:

751 
O_REASS
:

752 
check_size
:

753 i‡(
cmdÀn
 !
	`F_INSN_SIZE
(
ùfw_ö¢
))

754 
bad_size
;

755 
check_a˘i⁄
:

756 i‡(
have_a˘i⁄
) {

757 
	`¥ötf
("ipfw: opcode %d, multipleáctions"

759 
cmd
->
›code
);

760  
EINVAL
;

762 
have_a˘i⁄
 = 1;

763 i‡(
l
 !
cmdÀn
) {

764 
	`¥ötf
("ipfw: opcode %d,áction must be"

766 
cmd
->
›code
);

767  
EINVAL
;

770 #ifde‡
INET6


771 
O_IP6_SRC
:

772 
O_IP6_DST
:

773 i‡(
cmdÀn
 !
	`F_INSN_SIZE
(
ö6_addr
) +

774 
	`F_INSN_SIZE
(
ùfw_ö¢
))

775 
bad_size
;

778 
O_FLOW6ID
:

779 i‡(
cmdÀn
 !
	`F_INSN_SIZE
(
ùfw_ö¢_u32
) +

780 ((
ùfw_ö¢_u32
 *)
cmd
)->
o
.
¨g1
)

781 
bad_size
;

784 
O_IP6_SRC_MASK
:

785 
O_IP6_DST_MASK
:

786 i‡–!(
cmdÀn
 & 1) || cmdlen > 127)

787 
bad_size
;

789 
O_ICMP6TYPE
:

790 if–
cmdÀn
 !
	`F_INSN_SIZE
–
ùfw_ö¢_icmp6
 ) )

791 
bad_size
;

796 
cmd
->
›code
) {

797 #i‚de‡
INET6


798 
O_IP6_SRC_ME
:

799 
O_IP6_DST_ME
:

800 
O_EXT_HDR
:

801 
O_IP6
:

802 
O_UNREACH6
:

803 
O_IP6_SRC
:

804 
O_IP6_DST
:

805 
O_FLOW6ID
:

806 
O_IP6_SRC_MASK
:

807 
O_IP6_DST_MASK
:

808 
O_ICMP6TYPE
:

809 
	`¥ötf
("ipfw:Ço IPv6 support in kernel\n");

810  
EPROTONOSUPPORT
;

813 
	`¥ötf
("ipfw: opcode %d, unknown opcode\n",

814 
cmd
->
›code
);

815  
EINVAL
;

819 i‡(
have_a˘i⁄
 == 0) {

820 
	`¥ötf
("ipfw: missingáction\n");

821  
EINVAL
;

825 
bad_size
:

826 
	`¥ötf
("ipfw: opcode %d size %d wrong\n",

827 
cmd
->
›code
, 
cmdÀn
);

828  
EINVAL
;

829 
	}
}

838 
	gis7
 = 0;

840 
	sù_fw7
 {

841 
ù_fw7
 *
	m√xt
;

842 
ù_fw7
 *
	m√xt_ruÀ
;

845 
uöt16_t
 
	ma˘_ofs
;

846 
uöt16_t
 
	mcmd_Àn
;

847 
uöt16_t
 
	mruÀnum
;

848 
uöt8_t
 
	m£t
;

850 
uöt8_t
 
	m_∑d
;

853 
uöt64_t
 
	mp˙t
;

854 
uöt64_t
 
	mb˙t
;

855 
uöt32_t
 
	mtime°amp
;

857 
ùfw_ö¢
 
	mcmd
[1];

860 
c⁄vît_ruÀ_to_7
(
ù_fw
 *
ruÀ
);

861 
c⁄vît_ruÀ_to_8
(
ù_fw
 *
ruÀ
);

863 #i‚de‡
RULESIZE7


864 
	#RULESIZE7
(
ruÀ
Ë((
ù_fw7
) + \

865 ((
ù_fw7
 *)(
ruÀ
))->
cmd_Àn
 * 4 - 4)

	)

874 
size_t


875 
	$ùfw_gëruÀs
(
ù_fw_chaö
 *
chaö
, *
buf
, 
size_t
 
•a˚
)

877 *
bp
 = 
buf
;

878 *
ï
 = 
bp
 + 
•a˚
;

879 
ù_fw
 *
ruÀ
, *
d°
;

880 
l
, 
i
;

881 
time_t
 
boŸ_£c⁄ds
;

883 
boŸ_£c⁄ds
 = 
boŸtime
.
tv_£c
;

884 
i
 = 0; i < 
chaö
->
n_ruÀs
; i++) {

885 
ruÀ
 = 
chaö
->
m≠
[
i
];

887 i‡(
is7
) {

889 
l
 = 
	`RULESIZE7
(
ruÀ
);

890 i‡(
bp
 + 
l
 + (
uöt32_t
Ë<
ï
) {

891 
îr‹
;

892 
	`bc›y
(
ruÀ
, 
bp
, 
l
 + (
uöt32_t
));

893 
îr‹
 = 
	`c⁄vît_ruÀ_to_7
((
ù_fw
 *Ë
bp
);

894 i‡(
îr‹
)

901 
	`bc›y
(&
V_£t_dißbÀ
,

902 &(((
ù_fw7
 *)
bp
)->
√xt_ruÀ
),

903 (
V_£t_dißbÀ
));

904 i‡(((
ù_fw7
 *)
bp
)->
time°amp
)

905 ((
ù_fw7
 *)
bp
)->
time°amp
 +
boŸ_£c⁄ds
;

906 
bp
 +
l
;

912 
l
 = 
	`RULESIZE
(
ruÀ
);

913 i‡(
bp
 + 
l
 > 
ï
) {

914 
	`¥ötf
("overflow dumping staticÑules\n");

917 
d°
 = (
ù_fw
 *)
bp
;

918 
	`bc›y
(
ruÀ
, 
d°
, 
l
);

924 
	`bc›y
(&
V_£t_dißbÀ
, &
d°
->
√xt_ruÀ
, (V_set_disable));

925 i‡(
d°
->
time°amp
)

926 
d°
->
time°amp
 +
boŸ_£c⁄ds
;

927 
bp
 +
l
;

929 
	`ùfw_gë_dy«mic
(&
bp
, 
ï
);

930  (
bp
 - (*)
buf
);

931 
	}
}

938 
	$ùfw_˘l
(
sock›t
 *
s›t
)

940 
	#RULE_MAXSIZE
 (256*(
u_öt32_t
))

	)

941 
îr‹
;

942 
size_t
 
size
;

943 
ù_fw
 *
buf
, *
ruÀ
;

944 
ù_fw_chaö
 *
chaö
;

945 
u_öt32_t
 
ruÀnum
[2];

947 
îr‹
 = 
	`¥iv_check
(
s›t
->
s›t_td
, 
PRIV_NETINET_IPFW
);

948 i‡(
îr‹
)

949  (
îr‹
);

955 i‡(
s›t
->
s›t_«me
 =
IP_FW_ADD
 ||

956 (
s›t
->
s›t_dú
 =
SOPT_SET
 && s›t->
s›t_«me
 !
IP_FW_RESETLOG
)) {

957 
îr‹
 = 
	`£cuªÀvñ_ge
(
s›t
->
s›t_td
->
td_u¸ed
, 3);

958 i‡(
îr‹
)

959  (
îr‹
);

962 
chaö
 = &
V_œyî3_chaö
;

963 
îr‹
 = 0;

965 
s›t
->
s›t_«me
) {

966 
IP_FW_GET
:

979 
Àn
 = 0, 
w™t
;

981 
size
 = 
chaö
->
°©ic_Àn
;

982 
size
 +
	`ùfw_dyn_Àn
();

983 i‡(
size
 >
s›t
->
s›t_vÆsize
)

985 
buf
 = 
	`mÆloc
(
size
, 
M_TEMP
, 
M_WAITOK
);

986 i‡(
buf
 =
NULL
)

988 
	`IPFW_UH_RLOCK
(
chaö
);

990 
w™t
 = 
chaö
->
°©ic_Àn
 + 
	`ùfw_dyn_Àn
();

991 i‡(
size
 >
w™t
)

992 
Àn
 = 
	`ùfw_gëruÀs
(
chaö
, 
buf
, 
size
);

993 
	`IPFW_UH_RUNLOCK
(
chaö
);

994 i‡(
size
 >
w™t
)

995 
îr‹
 = 
	`so›tc›yout
(
s›t
, 
buf
, 
Àn
);

996 
	`‰ì
(
buf
, 
M_TEMP
);

997 i‡(
size
 >
w™t
)

1002 
IP_FW_FLUSH
:

1004 
îr‹
 = 
	`dñ_íåy
(
chaö
, 0);

1007 
IP_FW_ADD
:

1008 
ruÀ
 = 
	`mÆloc
(
RULE_MAXSIZE
, 
M_TEMP
, 
M_WAITOK
);

1009 
îr‹
 = 
	`so›tc›yö
(
s›t
, 
ruÀ
, 
RULE_MAXSIZE
,

1010 (
ù_fw7
) );

1021 i‡(
s›t
->
s›t_vÆsize
 =
	`RULESIZE7
(
ruÀ
)) {

1022 
is7
 = 1;

1023 
îr‹
 = 
	`c⁄vît_ruÀ_to_8
(
ruÀ
);

1024 i‡(
îr‹
)

1025  
îr‹
;

1026 i‡(
îr‹
 == 0)

1027 
îr‹
 = 
	`check_ùfw_°ru˘
(
ruÀ
, 
	`RULESIZE
(rule));

1029 
is7
 = 0;

1030 i‡(
îr‹
 == 0)

1031 
îr‹
 = 
	`check_ùfw_°ru˘
(
ruÀ
, 
s›t
->
s›t_vÆsize
);

1033 i‡(
îr‹
 == 0) {

1035 
îr‹
 = 
	`ùfw_add_ruÀ
(
chaö
, 
ruÀ
);

1036 
size
 = 
	`RULESIZE
(
ruÀ
);

1037 i‡(!
îr‹
 && 
s›t
->
s›t_dú
 =
SOPT_GET
) {

1038 i‡(
is7
) {

1039 
îr‹
 = 
	`c⁄vît_ruÀ_to_7
(
ruÀ
);

1040 
size
 = 
	`RULESIZE7
(
ruÀ
);

1041 i‡(
îr‹
)

1042  
îr‹
;

1044 
îr‹
 = 
	`so›tc›yout
(
s›t
, 
ruÀ
, 
size
);

1047 
	`‰ì
(
ruÀ
, 
M_TEMP
);

1050 
IP_FW_DEL
:

1063 
îr‹
 = 
	`so›tc›yö
(
s›t
, 
ruÀnum
,

1064 2*(
u_öt32_t
), (u_int32_t));

1065 i‡(
îr‹
)

1067 
size
 = 
s›t
->
s›t_vÆsize
;

1068 i‡(
size
 =(
u_öt32_t
Ë&& 
ruÀnum
[0] != 0) {

1070 
îr‹
 = 
	`dñ_íåy
(
chaö
, 
ruÀnum
[0]);

1071 } i‡(
size
 =2*(
u_öt32_t
)) {

1072 
	`IPFW_UH_WLOCK
(
chaö
);

1073 
V_£t_dißbÀ
 =

1074 (
V_£t_dißbÀ
 | 
ruÀnum
[0]) & ~rulenum[1] &

1075 ~(1<<
RESVD_SET
);

1076 
	`IPFW_UH_WUNLOCK
(
chaö
);

1078 
îr‹
 = 
EINVAL
;

1081 
IP_FW_ZERO
:

1082 
IP_FW_RESETLOG
:

1083 
ruÀnum
[0] = 0;

1084 i‡(
s›t
->
s›t_vÆ
 != 0) {

1085 
îr‹
 = 
	`so›tc›yö
(
s›t
, 
ruÀnum
,

1086 (
u_öt32_t
), (u_int32_t));

1087 i‡(
îr‹
)

1090 
îr‹
 = 
	`zîo_íåy
(
chaö
, 
ruÀnum
[0],

1091 
s›t
->
s›t_«me
 =
IP_FW_RESETLOG
);

1095 
IP_FW_TABLE_ADD
:

1097 
ùfw_èbÀ_íåy
 
ít
;

1099 
îr‹
 = 
	`so›tc›yö
(
s›t
, &
ít
,

1100 (
ít
), (ent));

1101 i‡(
îr‹
)

1103 
îr‹
 = 
	`ùfw_add_èbÀ_íåy
(
chaö
, 
ít
.
tbl
,

1104 
ít
.
addr
,É¡.
maskÀn
,É¡.
vÆue
);

1108 
IP_FW_TABLE_DEL
:

1110 
ùfw_èbÀ_íåy
 
ít
;

1112 
îr‹
 = 
	`so›tc›yö
(
s›t
, &
ít
,

1113 (
ít
), (ent));

1114 i‡(
îr‹
)

1116 
îr‹
 = 
	`ùfw_dñ_èbÀ_íåy
(
chaö
, 
ít
.
tbl
,

1117 
ít
.
addr
,É¡.
maskÀn
);

1121 
IP_FW_TABLE_FLUSH
:

1123 
u_öt16_t
 
tbl
;

1125 
îr‹
 = 
	`so›tc›yö
(
s›t
, &
tbl
,

1126 (
tbl
), (tbl));

1127 i‡(
îr‹
)

1129 
	`IPFW_WLOCK
(
chaö
);

1130 
îr‹
 = 
	`ùfw_Êush_èbÀ
(
chaö
, 
tbl
);

1131 
	`IPFW_WUNLOCK
(
chaö
);

1135 
IP_FW_TABLE_GETSIZE
:

1137 
u_öt32_t
 
tbl
, 
˙t
;

1139 i‡((
îr‹
 = 
	`so›tc›yö
(
s›t
, &
tbl
, (tbl),

1140 (
tbl
))))

1142 
	`IPFW_RLOCK
(
chaö
);

1143 
îr‹
 = 
	`ùfw_cou¡_èbÀ
(
chaö
, 
tbl
, &
˙t
);

1144 
	`IPFW_RUNLOCK
(
chaö
);

1145 i‡(
îr‹
)

1147 
îr‹
 = 
	`so›tc›yout
(
s›t
, &
˙t
, (cnt));

1151 
IP_FW_TABLE_LIST
:

1153 
ùfw_èbÀ
 *
tbl
;

1155 i‡(
s›t
->
s›t_vÆsize
 < (*
tbl
)) {

1156 
îr‹
 = 
EINVAL
;

1159 
size
 = 
s›t
->
s›t_vÆsize
;

1160 
tbl
 = 
	`mÆloc
(
size
, 
M_TEMP
, 
M_WAITOK
);

1161 
îr‹
 = 
	`so›tc›yö
(
s›t
, 
tbl
, 
size
, (*tbl));

1162 i‡(
îr‹
) {

1163 
	`‰ì
(
tbl
, 
M_TEMP
);

1166 
tbl
->
size
 = (size - (*tbl)) /

1167 (
ùfw_èbÀ_íåy
);

1168 
	`IPFW_RLOCK
(
chaö
);

1169 
îr‹
 = 
	`ùfw_dump_èbÀ
(
chaö
, 
tbl
);

1170 
	`IPFW_RUNLOCK
(
chaö
);

1171 i‡(
îr‹
) {

1172 
	`‰ì
(
tbl
, 
M_TEMP
);

1175 
îr‹
 = 
	`so›tc›yout
(
s›t
, 
tbl
, 
size
);

1176 
	`‰ì
(
tbl
, 
M_TEMP
);

1181 
IP_FW_NAT_CFG
:

1182 i‡(
IPFW_NAT_LOADED
)

1183 
îr‹
 = 
	`ùfw_«t_cfg_±r
(
s›t
);

1185 
	`¥ötf
("IP_FW_NAT_CFG: %s\n",

1187 
îr‹
 = 
EINVAL
;

1191 
IP_FW_NAT_DEL
:

1192 i‡(
IPFW_NAT_LOADED
)

1193 
îr‹
 = 
	`ùfw_«t_dñ_±r
(
s›t
);

1195 
	`¥ötf
("IP_FW_NAT_DEL: %s\n",

1197 
îr‹
 = 
EINVAL
;

1201 
IP_FW_NAT_GET_CONFIG
:

1202 i‡(
IPFW_NAT_LOADED
)

1203 
îr‹
 = 
	`ùfw_«t_gë_cfg_±r
(
s›t
);

1205 
	`¥ötf
("IP_FW_NAT_GET_CFG: %s\n",

1207 
îr‹
 = 
EINVAL
;

1211 
IP_FW_NAT_GET_LOG
:

1212 i‡(
IPFW_NAT_LOADED
)

1213 
îr‹
 = 
	`ùfw_«t_gë_log_±r
(
s›t
);

1215 
	`¥ötf
("IP_FW_NAT_GET_LOG: %s\n",

1217 
îr‹
 = 
EINVAL
;

1222 
	`¥ötf
("ùfw: ipfw_˘»övÆid o±i⁄ %d\n", 
s›t
->
s›t_«me
);

1223 
îr‹
 = 
EINVAL
;

1226  (
îr‹
);

1227 #unde‡
RULE_MAXSIZE


1228 
	}
}

1231 
	#RULE_MAXSIZE
 (256*(
u_öt32_t
))

	)

1235 
	$c⁄vît_ruÀ_to_7
(
ù_fw
 *
ruÀ
)

1238 
ù_fw7
 *
ruÀ7
 = (ù_fw7 *)
ruÀ
;

1240 
ù_fw
 *
tmp
;

1243 
ùfw_ö¢
 *
ccmd
, *
d°
;

1244 
Œ
 = 0, 
ccmdÀn
 = 0;

1246 
tmp
 = 
	`mÆloc
(
RULE_MAXSIZE
, 
M_TEMP
, 
M_NOWAIT
 | 
M_ZERO
);

1247 i‡(
tmp
 =
NULL
) {

1250 
	`bc›y
(
ruÀ
, 
tmp
, 
RULE_MAXSIZE
);

1253 
ruÀ7
->
_∑d
 = 
tmp
->_pad;

1254 
ruÀ7
->
£t
 = 
tmp
->set;

1255 
ruÀ7
->
ruÀnum
 = 
tmp
->rulenum;

1256 
ruÀ7
->
cmd_Àn
 = 
tmp
->cmd_len;

1257 
ruÀ7
->
a˘_ofs
 = 
tmp
->act_ofs;

1258 
ruÀ7
->
√xt_ruÀ
 = (
ù_fw7
 *)
tmp
->next_rule;

1259 
ruÀ7
->
√xt
 = (
ù_fw7
 *)
tmp
->
x_√xt
;

1260 
ruÀ7
->
cmd_Àn
 = 
tmp
->cmd_len;

1261 
ruÀ7
->
p˙t
 = 
tmp
->pcnt;

1262 
ruÀ7
->
b˙t
 = 
tmp
->bcnt;

1263 
ruÀ7
->
time°amp
 = 
tmp
->timestamp;

1266 
Œ
 = 
tmp
->
cmd_Àn
, 
ccmd
 =Åmp->
cmd
, 
d°
 = 
ruÀ7
->cmd ;

1267 
Œ
 > 0 ;Ü»-
ccmdÀn
, 
ccmd
 +ccmdÀn, 
d°
 += ccmdlen) {

1268 
ccmdÀn
 = 
	`F_LEN
(
ccmd
);

1270 
	`bc›y
(
ccmd
, 
d°
, 
	`F_LEN
(ccmd)*(
uöt32_t
));

1272 i‡(
d°
->
›code
 > 
O_NAT
)

1276 
d°
->
›code
--;

1278 i‡(
ccmdÀn
 > 
Œ
) {

1279 
	`¥ötf
("ipfw: opcode %d sizeÅruncated\n",

1280 
ccmd
->
›code
);

1281  
EINVAL
;

1284 
	`‰ì
(
tmp
, 
M_TEMP
);

1287 
	}
}

1290 
	$c⁄vît_ruÀ_to_8
(
ù_fw
 *
ruÀ
)

1293 
ù_fw7
 *
ruÀ7
 = (ù_fw7 *Ë
ruÀ
;

1296 
ùfw_ö¢
 *
ccmd
, *
d°
;

1297 
Œ
 = 0, 
ccmdÀn
 = 0;

1300 
ù_fw7
 *
tmp
 = 
	`mÆloc
(
RULE_MAXSIZE
, 
M_TEMP
, 
M_NOWAIT
 | 
M_ZERO
);

1301 i‡(
tmp
 =
NULL
) {

1305 
	`bc›y
(
ruÀ7
, 
tmp
, 
RULE_MAXSIZE
);

1307 
Œ
 = 
tmp
->
cmd_Àn
, 
ccmd
 =Åmp->
cmd
, 
d°
 = 
ruÀ
->cmd ;

1308 
Œ
 > 0 ;Ü»-
ccmdÀn
, 
ccmd
 +ccmdÀn, 
d°
 += ccmdlen) {

1309 
ccmdÀn
 = 
	`F_LEN
(
ccmd
);

1311 
	`bc›y
(
ccmd
, 
d°
, 
	`F_LEN
(ccmd)*(
uöt32_t
));

1313 i‡(
d°
->
›code
 > 
O_NAT
)

1317 
d°
->
›code
++;

1319 i‡(
ccmdÀn
 > 
Œ
) {

1320 
	`¥ötf
("ipfw: opcode %d sizeÅruncated\n",

1321 
ccmd
->
›code
);

1322  
EINVAL
;

1326 
ruÀ
->
_∑d
 = 
tmp
->_pad;

1327 
ruÀ
->
£t
 = 
tmp
->set;

1328 
ruÀ
->
ruÀnum
 = 
tmp
->rulenum;

1329 
ruÀ
->
cmd_Àn
 = 
tmp
->cmd_len;

1330 
ruÀ
->
a˘_ofs
 = 
tmp
->act_ofs;

1331 
ruÀ
->
√xt_ruÀ
 = (
ù_fw
 *)
tmp
->next_rule;

1332 
ruÀ
->
x_√xt
 = (
ù_fw
 *)
tmp
->
√xt
;

1333 
ruÀ
->
cmd_Àn
 = 
tmp
->cmd_len;

1334 
ruÀ
->
id
 = 0;

1335 
ruÀ
->
p˙t
 = 
tmp
->pcnt;

1336 
ruÀ
->
b˙t
 = 
tmp
->bcnt;

1337 
ruÀ
->
time°amp
 = 
tmp
->timestamp;

1339 
	`‰ì
 (
tmp
, 
M_TEMP
);

1341 
	}
}

	@kipfw-mod/ip_fw_table.c

26 
	~<sys/cdefs.h
>

27 
__FBSDID
("$FreeBSD: head/sys/netinet/ipfw/ip_fw_table.c 200601 2009-12-16 10:48:40ZÜuigi $");

42 #i‡!
deföed
(
KLD_MODULE
)

43 
	~"›t_ùfw.h
"

44 
	~"›t_ùdivît.h
"

45 
	~"›t_ùdn.h
"

46 
	~"›t_öë.h
"

47 #i‚de‡
INET


48 #îr‹ 
IPFIREWALL
 
ªquúes
 
INET
.

51 
	~"›t_öë6.h
"

52 
	~"›t_ù£c.h
"

54 
	~<sys/∑øm.h
>

55 
	~<sys/sy°m.h
>

56 
	~<sys/mÆloc.h
>

57 
	~<sys/kî√l.h
>

58 
	~<sys/lock.h
>

59 
	~<sys/rwlock.h
>

60 
	~<sys/sockë.h
>

61 
	~<√t/if.h
>

62 
	~<√t/ødix.h
>

63 
	~<√t/rouã.h
>

64 
	~<√t/v√t.h
>

66 
	~<√töë/ö.h
>

67 
	~<√töë/ù_v¨.h
>

68 
	~<√töë/ù_fw.h
>

69 
	~<sys/queue.h
>

70 
	~<√töë/ùfw/ù_fw_¥iv©e.h
>

72 #ifde‡
MAC


73 
	~<£curôy/mac/mac_‰amew‹k.h
>

76 
MALLOC_DEFINE
(
M_IPFW_TBL
, "ipfw_tbl", "IpFwÅables");

78 
	sèbÀ_íåy
 {

79 
ødix_node
 
	m∫
[2];

80 
sockaddr_ö
 
	maddr
, 
	mmask
;

81 
u_öt32_t
 
	mvÆue
;

93 
	#KEY_LEN
(
v
Ë*((
uöt8_t
 *)&(v))

	)

94 
	#KEY_OFS
 (8*
	`off£tof
(
sockaddr_ö
, 
sö_addr
))

	)

97 
	$ùfw_add_èbÀ_íåy
(
ù_fw_chaö
 *
ch
, 
uöt16_t
 
tbl
, 
ö_addr_t
 
addr
,

98 
uöt8_t
 
mÀn
, 
uöt32_t
 
vÆue
)

100 
ødix_node_hód
 *
∫h
;

101 
èbÀ_íåy
 *
ít
;

102 
ødix_node
 *
∫
;

104 i‡(
tbl
 >
IPFW_TABLES_MAX
)

105  (
EINVAL
);

106 
∫h
 = 
ch
->
èbÀs
[
tbl
];

107 
ít
 = 
	`mÆloc
((*ít), 
M_IPFW_TBL
, 
M_NOWAIT
 | 
M_ZERO
);

108 i‡(
ít
 =
NULL
)

109  (
ENOMEM
);

110 
ít
->
vÆue
 = value;

111 
	`KEY_LEN
(
ít
->
addr
ËKEY_LEN”¡->
mask
) = 8;

112 
ít
->
mask
.
sö_addr
.
s_addr
 = 
	`ht⁄l
(
mÀn
 ? ~((1 << (32 - mlen)) - 1) : 0);

113 
ít
->
addr
.
sö_addr
.
s_addr
 =ádd∏&É¡->
mask
.sin_addr.s_addr;

114 
	`IPFW_WLOCK
(
ch
);

115 
∫
 = 
∫h
->
	`∫h_addaddr
(&
ít
->
addr
, &ít->
mask
,Ñnh, (*)ent);

116 i‡(
∫
 =
NULL
) {

117 
	`IPFW_WUNLOCK
(
ch
);

118 
	`‰ì
(
ít
, 
M_IPFW_TBL
);

119  (
EEXIST
);

121 
	`IPFW_WUNLOCK
(
ch
);

123 
	}
}

126 
	$ùfw_dñ_èbÀ_íåy
(
ù_fw_chaö
 *
ch
, 
uöt16_t
 
tbl
, 
ö_addr_t
 
addr
,

127 
uöt8_t
 
mÀn
)

129 
ødix_node_hód
 *
∫h
;

130 
èbÀ_íåy
 *
ít
;

131 
sockaddr_ö
 
ß
, 
mask
;

133 i‡(
tbl
 >
IPFW_TABLES_MAX
)

134  (
EINVAL
);

135 
∫h
 = 
ch
->
èbÀs
[
tbl
];

136 
	`KEY_LEN
(
ß
ËKEY_LEN(
mask
) = 8;

137 
mask
.
sö_addr
.
s_addr
 = 
	`ht⁄l
(
mÀn
 ? ~((1 << (32 - mlen)) - 1) : 0);

138 
ß
.
sö_addr
.
s_addr
 = 
addr
 & 
mask
.sin_addr.s_addr;

139 
	`IPFW_WLOCK
(
ch
);

140 
ít
 = (
èbÀ_íåy
 *)
∫h
->
	`∫h_dñaddr
(&
ß
, &
mask
,Ñnh);

141 i‡(
ít
 =
NULL
) {

142 
	`IPFW_WUNLOCK
(
ch
);

143  (
ESRCH
);

145 
	`IPFW_WUNLOCK
(
ch
);

146 
	`‰ì
(
ít
, 
M_IPFW_TBL
);

148 
	}
}

151 
	$Êush_èbÀ_íåy
(
ødix_node
 *
∫
, *
¨g
)

153 
ødix_node_hód
 * c⁄° 
∫h
 = 
¨g
;

154 
èbÀ_íåy
 *
ít
;

156 
ít
 = (
èbÀ_íåy
 *)

157 
∫h
->
	`∫h_dñaddr
(
∫
->
∫_key
,Ñn->
∫_mask
,Ñnh);

158 i‡(
ít
 !
NULL
)

159 
	`‰ì
(
ít
, 
M_IPFW_TBL
);

161 
	}
}

164 
	$ùfw_Êush_èbÀ
(
ù_fw_chaö
 *
ch
, 
uöt16_t
 
tbl
)

166 
ødix_node_hód
 *
∫h
;

168 
	`IPFW_WLOCK_ASSERT
(
ch
);

170 i‡(
tbl
 >
IPFW_TABLES_MAX
)

171  (
EINVAL
);

172 
∫h
 = 
ch
->
èbÀs
[
tbl
];

173 
	`KASSERT
(
∫h
 !
NULL
, ("NULL IPFWÅable"));

174 
∫h
->
	`∫h_wÆkåì
‘nh, 
Êush_èbÀ_íåy
,Ñnh);

176 
	}
}

179 
	$ùfw_de°roy_èbÀs
(
ù_fw_chaö
 *
ch
)

181 
uöt16_t
 
tbl
;

182 
ødix_node_hód
 *
∫h
;

184 
	`IPFW_WLOCK_ASSERT
(
ch
);

186 
tbl
 = 0;Åb»< 
IPFW_TABLES_MAX
;Åbl++) {

187 
	`ùfw_Êush_èbÀ
(
ch
, 
tbl
);

188 
∫h
 = 
ch
->
èbÀs
[
tbl
];

189 
	`∫_dëachhód
((**)&
∫h
);

191 
	}
}

194 
	$ùfw_öô_èbÀs
(
ù_fw_chaö
 *
ch
)

196 
i
;

197 
uöt16_t
 
j
;

199 
i
 = 0; i < 
IPFW_TABLES_MAX
; i++) {

200 i‡(!
	`∫_öôhód
((**)&
ch
->
èbÀs
[
i
], 
KEY_OFS
)) {

201 
j
 = 0; j < 
i
; j++) {

202 (Ë
	`ùfw_Êush_èbÀ
(
ch
, 
j
);

204  (
ENOMEM
);

208 
	}
}

211 
	$ùfw_lookup_èbÀ
(
ù_fw_chaö
 *
ch
, 
uöt16_t
 
tbl
, 
ö_addr_t
 
addr
,

212 
uöt32_t
 *
vÆ
)

214 
ødix_node_hód
 *
∫h
;

215 
èbÀ_íåy
 *
ít
;

216 
sockaddr_ö
 
ß
;

218 i‡(
tbl
 >
IPFW_TABLES_MAX
)

220 
∫h
 = 
ch
->
èbÀs
[
tbl
];

221 
	`KEY_LEN
(
ß
) = 8;

222 
ß
.
sö_addr
.
s_addr
 = 
addr
;

223 
ít
 = (
èbÀ_íåy
 *)(
∫h
->
	`∫h_lookup
(&
ß
, 
NULL
,Ñnh));

224 i‡(
ít
 !
NULL
) {

225 *
vÆ
 = 
ít
->
vÆue
;

229 
	}
}

232 
	$cou¡_èbÀ_íåy
(
ødix_node
 *
∫
, *
¨g
)

234 
u_öt32_t
 * c⁄° 
˙t
 = 
¨g
;

236 (*
˙t
)++;

238 
	}
}

241 
	$ùfw_cou¡_èbÀ
(
ù_fw_chaö
 *
ch
, 
uöt32_t
 
tbl
, uöt32_à*
˙t
)

243 
ødix_node_hód
 *
∫h
;

245 i‡(
tbl
 >
IPFW_TABLES_MAX
)

246  (
EINVAL
);

247 
∫h
 = 
ch
->
èbÀs
[
tbl
];

248 *
˙t
 = 0;

249 
∫h
->
	`∫h_wÆkåì
‘nh, 
cou¡_èbÀ_íåy
, 
˙t
);

251 
	}
}

254 
	$dump_èbÀ_íåy
(
ødix_node
 *
∫
, *
¨g
)

256 
èbÀ_íåy
 * c⁄° 
n
 = (èbÀ_íåy *)
∫
;

257 
ùfw_èbÀ
 * c⁄° 
tbl
 = 
¨g
;

258 
ùfw_èbÀ_íåy
 *
ít
;

260 i‡(
tbl
->
˙t
 =tbl->
size
)

262 
ít
 = &
tbl
->ít[tbl->
˙t
];

263 
ít
->
tbl
 =Åbl->tbl;

264 i‡(
	`ö_nuŒho°
(
n
->
mask
.
sö_addr
))

265 
ít
->
maskÀn
 = 0;

267 
ít
->
maskÀn
 = 33 - 
	`ffs
(
	`¡ohl
(
n
->
mask
.
sö_addr
.
s_addr
));

268 
ít
->
addr
 = 
n
->addr.
sö_addr
.
s_addr
;

269 
ít
->
vÆue
 = 
n
->value;

270 
tbl
->
˙t
++;

272 
	}
}

275 
	$ùfw_dump_èbÀ
(
ù_fw_chaö
 *
ch
, 
ùfw_èbÀ
 *
tbl
)

277 
ødix_node_hód
 *
∫h
;

279 i‡(
tbl
->tb»>
IPFW_TABLES_MAX
)

280  (
EINVAL
);

281 
∫h
 = 
ch
->
èbÀs
[
tbl
->tbl];

282 
tbl
->
˙t
 = 0;

283 
∫h
->
	`∫h_wÆkåì
‘nh, 
dump_èbÀ_íåy
, 
tbl
);

285 
	}
}

	@kipfw-mod/ipfw2_mod.c

48 
	~<sys/cdefs.h
>

49 
	~<sys/mbuf.h
>

50 
	~<sys/∑øm.h
>

52 #i‚de‡
D


53 
	#ND
(
fmt
, ...Ëdÿ{} 0)

	)

54 
	#D1
(
fmt
, ...Ëdÿ{} 0)

	)

55 
	#D
(
fmt
, ...Ë
	`¥ötf
("%-10s " fmt "\n", \

56 
__FUNCTION__
, ## 
__VA_ARGS__
)

	)

59 #ifde‡
__löux__


60 
	~<löux/moduÀ.h
>

61 
	~<löux/kî√l.h
>

63 #i‚de‡
CONFIG_NETFILTER


64 #îr‹ 
should
 
c⁄figuª
 
√tfûãr
 (
brokí
 
⁄
 2.6.26 
™d
 
bñow
 ?)

67 
	~<löux/√tfûãr.h
>

68 
	~<löux/√tfûãr_ùv4.h
>

70 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,25)

71 
	~<√t/√tfûãr/nf_queue.h
>

74 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,14)

75 
	#__ªad_mo°ly


	)

80 
	~<√töë/ö.h
>

81 
	~<√töë/ù_fw.h
>

82 
	~<√töë/ùfw/ù_fw_¥iv©e.h
>

83 
	~<√töë/ù_dummy√t.h
>

84 
	~<√t/pfû.h
>

86 #ifde‡
__löux__


88 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,13)

91 
	~<löux/t˝.h
>

92 
	~<√t/rouã.h
>

93 
	~<√t/sock.h
>

94 
ölöe
 
	$öë_iif
(c⁄° 
sk_buff
 *
skb
)

96  ((
πabÀ
 *)
skb
->
d°
)->
π_iif
;

97 
	}
}

100 
	~<√t/öë_hashèbÀs.h
>

104 
	~<√t/rouã.h
>

110 (*
ù_dn_˘l_±r
)(
sock›t
 *);

112 
ù_fw_˘l_t
 *
ù_fw_˘l_±r
;

114 (*
ù_dn_io_±r
)(
mbuf
 **
m
, 
dú
, 
ù_fw_¨gs
 *
fwa
);

115 
ù_fw_chk_t
 *
ù_fw_chk_±r
;

117 (*
bridge_dn_p
)(
mbuf
 *, 
i‚ë
 *);

120 (*
ù_divît_±r
)(
mbuf
 *
m
, 
öcomög
);

123 
ng_ùfw_öput_t
 *
ng_ùfw_öput_p
 = 
NULL
;

134 
	~<sys/moduÀ.h
>

135 
	smod_¨gs
 {

136 c⁄° *
«me
;

137 
‹dî
;

138 
moduÀd©a
 *
mod
;

139 (*
öô
)(), (*
unöô
)();

142 
mod_idx
;

143 
mod_¨gs
 
mods
[10];

146 
	`my_mod_ªgi°î
(c⁄° *
«me
, 
‹dî
,

147 
moduÀd©a
 *
mod
, *
öô
, *
unöô
);

154 
	$my_mod_ªgi°î
(c⁄° *
«me
, 
‹dî
,

155 
moduÀd©a
 *
mod
, *
öô
, *
unöô
)

157 
mod_¨gs
 
m
;

159 
m
.
«me
 =Çame;

160 
m
.
‹dî
 = order;

161 
m
.
mod
 = mod;

162 
m
.
öô
 = init;

163 
m
.
unöô
 = uninit;

165 
	`¥ötf
("%†%†ˇŒed\n", 
__FUNCTION__
, 
«me
);

166 i‡(
mod_idx
 < (
mods
) / (mods[0]))

167 
mods
[
mod_idx
++] = 
m
;

169 
	}
}

172 
	$öô_chûdªn
()

174 
i
;

177 
	`¥ötf
("%†mod_idx vÆuê%d\n", 
__FUNCTION__
, 
mod_idx
);

178 
i
 = 0; i < 
mod_idx
; i++) {

179 
mod_¨gs
 *
m
 = &
mods
[
i
];

180 
	`¥ötf
("+++ start module %d %s %sát %p order 0x%x\n",

181 
i
, 
m
->
«me
, m->
mod
 ? m->mod->name : "SYSINIT",

182 
m
->
mod
, m->
‹dî
);

183 i‡(
m
->
mod
 && m->mod->
evh™d
)

184 
m
->
mod
->
	`evh™d
(
NULL
, 
MOD_LOAD
, m->mod->
¥iv
);

185 i‡(
m
->
öô
)

186 
m
->
	`öô
();

188 
	}
}

191 
	$föi_chûdªn
()

193 
i
;

196 
i
 = 
mod_idx
 - 1; i >= 0; i--) {

197 
mod_¨gs
 *
m
 = &
mods
[
i
];

198 
	`¥ötf
("+++Énd module %d %s %sát %p order 0x%x\n",

199 
i
, 
m
->
«me
, m->
mod
 ? m->mod->name : "SYSINIT",

200 
m
->
mod
, m->
‹dî
);

201 i‡(
m
->
mod
 && m->mod->
evh™d
)

202 
m
->
mod
->
	`evh™d
(
NULL
, 
MOD_UNLOAD
, m->mod->
¥iv
);

203 i‡(
m
->
unöô
)

204 
m
->
	`unöô
();

206 
	}
}

216 
	$ùfw_˘l_h
(
sock›t
 *
s
, 
cmd
, 
dú
, 
Àn
, 
__u£r
 *
u£r
)

218 
thªad
 
t
;

219 
ªt
 = 
EINVAL
;

221 
	`mem£t
(
s
, 0, (s));

222 
s
->
s›t_«me
 = 
cmd
;

223 
s
->
s›t_dú
 = 
dú
;

224 
s
->
s›t_vÆsize
 = 
Àn
;

225 
s
->
s›t_vÆ
 = 
u£r
;

228 
	`mem£t
(&
t
, 0, (t));

229 
s
->
s›t_td
 = &
t
;

233 i‡(
ù_fw_˘l_±r
 && 
cmd
 !
IP_DUMMYNET3
 && (cmd =
IP_FW3
 ||

234 
cmd
 < 
IP_DUMMYNET_CONFIGURE
))

235 
ªt
 = 
	`ù_fw_˘l_±r
(
s
);

236 i‡(
ù_dn_˘l_±r
 && (
cmd
 =
IP_DUMMYNET3
 ||

237 
cmd
 >
IP_DUMMYNET_CONFIGURE
))

238 
ªt
 = 
	`ù_dn_˘l_±r
(
s
);

240  -
ªt
;

241 
	}
}

243 #ifde‡
löux


250 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,0)

251 
	$d°_ouçut
(
skbuff
 *
s
)

254 
	}
}

256 
sk_buff
 *

257 
	$mbuf2skbuff
(
mbuf
* 
m
)

259  
NULL
;

260 
	}
}

262 
sk_buff
 *

263 
	$mbuf2skbuff
(
mbuf
* 
m
)

265 
sk_buff
 *
skb
;

266 
size_t
 
Àn
 = 
m
->
m_pkthdr
.len;

269 
πabÀ
 *
r
;

270 
Êowi
 
Ê
;

271 
ªt
 = 0;

273 
ù
 *ù = 
	`mtod
(
m
, ip *);

277 
ù
->
ù_Àn
 = 
	`¡ohs
(ip->ip_len);

278 
ù
->
ù_off
 = 
	`¡ohs
(ip->ip_off);

280 
ù
->
ù_sum
 = 0;

281 
ù
->
ù_sum
 = 
	`ö_cksum
(
m
, ip->
ù_hl
<<2);

284 
	`bzîo
(&
Ê
, (fl));

285 
Êow_daddr
.
daddr
 = 
ù
->
ù_d°
.
s_addr
;

292 #i‡
LINUX_VERSION_CODE
 > 
	`KERNEL_VERSION
(2,6,38)

293 
r
 = 
	`ù_rouã_ouçut_key
(&
öô_√t
, &
Ê
.
u
.
ù4
);

294 #ñi‡
LINUX_VERSION_CODE
 > 
	`KERNEL_VERSION
(2,6,26)

295 
ªt
 = 
	`ù_rouã_ouçut_key
(&
öô_√t
, &
r
, &
Ê
);

297 
ªt
 = 
	`ù_rouã_ouçut_key
(&
r
, &
Ê
);

299 i‡(
ªt
 !0 || 
r
 =
NULL
 ) {

300 
	`¥ötf
("NO ROUTE FOUND\n");

301  
NULL
;

305 
skb
 = 
	`Æloc_skb
(
Àn
 + (
ëhhdr
), 
GFP_ATOMIC
);

306 i‡(
skb
 =
NULL
) {

307 
	`¥ötf
("%s: c™ÇŸáŒoˇã SKB buf„rs.\n", 
__FUNCTION__
);

308  
NULL
;

311 
skb
->
¥Ÿocﬁ
 = 
	`ht⁄s
(
ETH_P_IP
);

313 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,36)

314 
	`skb_d°_£t
(
skb
, &
r
->
u
.
d°
);

316 
	`skb_d°_£t
(
skb
, &
r
->
d°
);

318 
skb
->
dev
 = 
	`skb_d°
(skb)->dev;

321 
	`skb_ª£rve
(
skb
, (
ëhhdr
));

323 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2,6,22)

324 
	`skb_ª£t_√tw‹k_hódî
(
skb
);

326 
skb
->
nh
.
øw
 = skb->
d©a
;

329 
	`skb_put
(
skb
, 
Àn
);

330 
	`mem˝y
(
skb
->
d©a
, 
m
->
m_d©a
, 
Àn
);

332  
skb
;

333 
	}
}

349 
	$ù_ouçut
(
mbuf
 *
m
, mbu‡*
›t
, 
rouã
 *
ro
, 
Êags
,

350 
ù_m›ti⁄s
 *
imo
, 
öpcb
 *
öp
)

352 ()
›t
; ()
ro
; ()
Êags
; ()
imo
; ()
öp
;

353 i‡–
m
->
m_skb
 !
NULL
 ) {

354 
	`ND
("sending... ");

355 
	`√ti§_di•©ch
(0, 
m
);

358 #ifde‡
__löux__


359 
sk_buff
 *
skb
 = 
	`mbuf2skbuff
(
m
);

361 i‡(
skb
 !
NULL
)

362 
	`d°_ouçut
(
skb
);

364 
	`D
("unimplemented.");

366 
	`FREE_PKT
(
m
);

369 
	}
}

375 
	$do_ùfw_£t_˘l
(
sock
 *
sk
, 
cmd
, 
__u£r
 *
u£r
, 
Àn
)

377 
sock›t
 
s
;

378 ()
sk
;

379  
	`ùfw_˘l_h
(&
s
, 
cmd
, 
SOPT_SET
, 
Àn
, 
u£r
);

380 
	}
}

386 
	$do_ùfw_gë_˘l
(
sock
 *
sk
, 
cmd
, 
__u£r
 *
u£r
, *
Àn
)

388 
sock›t
 
s
;

389 
ªt
 = 
	`ùfw_˘l_h
(&
s
, 
cmd
, 
SOPT_GET
, *
Àn
, 
u£r
);

391 ()
sk
;

392 *
Àn
 = 
s
.
s›t_vÆsize
;

393  
ªt
;

394 
	}
}

396 #ifde‡
__löux__


401 
nf_sock›t_›s
 
	gùfw_sock›ts
 = {

402 .
pf
 = 
PF_INET
,

403 .
	g£t_›tmö
 = 
_IPFW_SOCKOPT_BASE
,

404 .
	g£t_›tmax
 = 
_IPFW_SOCKOPT_END
,

405 .
	g£t
 = 
do_ùfw_£t_˘l
,

406 .
	ggë_›tmö
 = 
_IPFW_SOCKOPT_BASE
,

407 .
	ggë_›tmax
 = 
_IPFW_SOCKOPT_END
,

408 .
	ggë
 = 
do_ùfw_gë_˘l
,

409 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,24)

410 .
	gow√r
 = 
THIS_MODULE
,

439 #i‚de‡
NF_IP_PRE_ROUTING


440 
	#NF_IP_PRE_ROUTING
 
NF_INET_PRE_ROUTING


	)

442 #i‚de‡
NF_IP_POST_ROUTING


443 
	#NF_IP_POST_ROUTING
 
NF_INET_POST_ROUTING


	)

455 
	#IPFW_HOOK_IN
 
NF_IP_LOCAL_IN


	)

457 
	#IPFW_HOOK_IN
 
NF_IP_PRE_ROUTING


	)

469 
ˇŒ_ùfw
(
hooknum
,

470 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,23)

471 
sk_buff
 **
skb
,

473 
sk_buff
 *
skb
,

475 c⁄° 
√t_devi˚
 *
ö
, c⁄° √t_devi˚ *
out
,

476 (*
ok‚
)(
sk_buff
 *))

478 ()
hooknum
; ()
skb
; ()
ö
; ()
out
; ()
ok‚
;

479  
NF_QUEUE
;

480 
	}
}

482 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,12)

483 
	#NF_STOP
 
NF_ACCEPT


	)

486 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,25)

492 
	#nf_queue_íåy
 
nf_öfo


	)

495 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,14)

497 
	#QH_ARGS
 
sk_buff
 *
skb
, 
nf_öfo
 *
öfo
, *
d©a


	)

499 
	#QH_ARGS
 
sk_buff
 *
skb
, 
nf_öfo
 *
öfo
, 
qnum
, *
d©a


	)

502 
	#DEFINE_SKB


	)

503 
	#REINJECT
(
_öf
, 
_vîd
Ë
	`nf_ªöje˘
(
skb
, _öf, _vîd)

	)

507 
	#QH_ARGS
 
nf_queue_íåy
 *
öfo
, 
queuíum


	)

508 
	#DEFINE_SKB
 
sk_buff
 *
skb
 = 
öfo
->skb;

	)

509 
	#REINJECT
(
_öf
, 
_vîd
Ë
	`nf_ªöje˘
(_öf, _vîd)

	)

517 
	$ªöje˘_dr›
(
mbuf
* 
m
)

519 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,25)

520 
sk_buff
 *
skb
 = (sk_buf‡*)
m
;

522 
	`REINJECT
(
m
->
queue_íåy
, 
NF_DROP
);

523 
	}
}

530 
	$ùfw2_queue_h™dÀr
(
QH_ARGS
)

532 
DEFINE_SKB


533 
ªt
 = 0;

534 
mbuf
 *
m
;

536 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,0)

537 i‡(
skb
->
nh
.
ùh
 =
NULL
) {

538 
	`¥ötf
("nuŒ dp,Üí %dÑeöje˘Çow\n", 
skb
->
Àn
);

539 
	`REINJECT
(
öfo
, 
NF_ACCEPT
);

543 
m
 = 
	`mÆloc
((*m), 0, 0);

544 i‡(
m
 =
NULL
) {

545 
	`¥ötf
("mÆlo¯Áû,Üí %dÑeöje˘Çow\n", 
skb
->
Àn
);

546 
	`REINJECT
(
öfo
, 
NF_ACCEPT
);

550 
m
->
m_skb
 = 
skb
;

551 
m
->
m_Àn
 = 
skb
->
Àn
;

552 
m
->
m_pkthdr
.
Àn
 = 
skb
->len;

553 
m
->
m_pkthdr
.
rcvif
 = 
öfo
->
ödev
;

554 
m
->
queue_íåy
 = 
öfo
;

555 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,22)

556 
m
->
m_d©a
 = (*)
skb
->
nh
.
ùh
;

558 
m
->
m_d©a
 = (*)
	`skb_√tw‹k_hódî
(
skb
);

562 i‡(
öfo
->
hook
 =
IPFW_HOOK_IN
) {

563 
ªt
 = 
	`ùfw_check_hook
(
NULL
, &
m
, 
öfo
->
ödev
, 
PFIL_IN
, NULL);

565 
ªt
 = 
	`ùfw_check_hook
(
NULL
, &
m
, 
öfo
->
outdev
, 
PFIL_OUT
, NULL);

568 i‡(
m
 !
NULL
) {

569 
	`REINJECT
(
öfo
, 
NF_ACCEPT
);

570 
	`m_‰ìm
(
m
);

571 } i‡(
ªt
 == 0) {

580 
	}
}

582 
	grouã
;

583 
	gù_m›ti⁄s
;

584 
	göpcb
;

593 
	$√ti§_di•©ch
(
num
, 
mbuf
 *
m
)

595 
nf_queue_íåy
 *
öfo
 = 
m
->
queue_íåy
;

596 
sk_buff
 *
skb
 = 
m
->
m_skb
;

603 
	`m_‰ìm
(
m
);

610 i‡(
öfo
 =
NULL
)

613 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2,6,22)

614 
	`__√t_time°amp
(
skb
);

618 
	`REINJECT
(
öfo
, ((
num
 =-1)?
NF_DROP
:
NF_STOP
));

619 
	}
}

649 
öë_hashöfo
 
t˝_hashöfo
;

651 
	$löux_lookup
(c⁄° 
¥Ÿo
, c⁄° 
__be32
 
ßddr
, c⁄° 
__be16
 
•‹t
,

652 c⁄° 
__be32
 
daddr
, c⁄° 
__be16
 
dp‹t
,

653 
sk_buff
 *
skb
, 
dú
, 
bsd_u¸ed
 *
u
)

655 #i‡
LINUX_VERSION_CODE
 <
	`KERNEL_VERSION
(2,6,13)

658 
sock
 *
sk
;

659 
ªt
 = -1;

660 
°
 = -1;

663 i‡(
¥Ÿo
 !
IPPROTO_TCP
)

666 i‡((
dú
 ? (*)
	`skb_d°
(
skb
Ë: (*)skb->
dev
Ë=
NULL
) {

667 
	`∑nic
(" --Åhis shouldÇot happen\n");

671 i‡(
skb
->
sk
) {

672 
sk
 = 
skb
->sk;

682 #i‡
LINUX_VERSION_CODE
 <
	`KERNEL_VERSION
(2,6,24)

683 
	#_OPT_NET_ARG


	)

685 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,26)

687 
	#_OPT_NET_ARG
 (
skb
->
dev
->
nd_√t
),

	)

689 
	#_OPT_NET_ARG
 
	`dev_√t
(
skb
->
dev
),

	)

692 
sk
 = (
dú
) ?

693 
	`öë_lookup
(
_OPT_NET_ARG
 &
t˝_hashöfo
,

694 
daddr
, 
dp‹t
, 
ßddr
, 
•‹t
,

695 
	`öë_iif
(
skb
)) :

696 
	`öë_lookup
(
_OPT_NET_ARG
 &
t˝_hashöfo
,

697 
ßddr
, 
•‹t
, 
daddr
, 
dp‹t
,

698 
skb
->
dev
->
ifödex
);

699 #unde‡
_OPT_NET_ARG


701 i‡(
sk
 =
NULL
)

704 
ªt
 = 1;

705 
°
 = 
sk
->
sk_°©e
;

706 #ifde‡
CONFIG_VSERVER


707 
u
->
xid
 = 
sk
->
sk_xid
;

708 
u
->
nid
 = 
sk
->
sk_nid
;

710 
u
->
xid
 = u->
nid
 = 0;

721 #i‡
LINUX_VERSION_CODE
 <
	`KERNEL_VERSION
(2,6,28)

723 
	#_CURR_UID
 
f_uid


	)

724 
	#_CURR_GID
 
f_gid


	)

727 
	#_CURR_UID
 
f_¸ed
->
fsuid


	)

728 
	#_CURR_GID
 
f_¸ed
->
fsgid


	)

731 
	#GOOD_STATES
 ( \

732 (1<<
TCP_LISTEN
Ë| (1<<
TCP_SYN_RECV
Ë| (1<<
TCP_SYN_SENT
) | \

733 (1<<
TCP_ESTABLISHED
Ë| (1<<
TCP_FIN_WAIT1
Ë| (1<<
TCP_FIN_WAIT2
Ë)

	)

737 i‡((1<<
°
Ë& 
GOOD_STATES
) {

738 
	`ªad_lock_bh
(&
sk
->
sk_ˇŒback_lock
);

739 i‡(
sk
->
sk_sockë
 && sk->sk_sockë->
fûe
) {

740 
u
->
uid
 = 
sk
->
sk_sockë
->
fûe
->
_CURR_UID
;

741 
u
->
gid
 = 
sk
->
sk_sockë
->
fûe
->
_CURR_GID
;

743 
	`ªad_u∆ock_bh
(&
sk
->
sk_ˇŒback_lock
);

745 
u
->
uid
 = u->
gid
 = 0;

747 i‡(!
skb
->
sk
)

748 
	`sock_put
(
sk
);

749 #unde‡
GOOD_STATES


750 #unde‡
_CURR_UID


751 #unde‡
_CURR_GID


752  
ªt
;

755 
	}
}

764 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,14)

765 
nf_queue_h™dÀr
 
	gùfw2_queue_h™dÀr_desc
 = {

766 .
out‚
 = 
ùfw2_queue_h™dÀr
,

767 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(3,8,2)

768 .
	g«me
 = "ipfw2 dummynet queue",

771 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(3,8,2)

772 
	#REG_QH_ARG
(
pf
, 
‚
Ëpf, &(‚ ## 
_desc
)

	)

774 
	#REG_QH_ARG
(
pf
, 
‚
Ë&(‚ ## 
_desc
)

	)

778 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,17)

780 
	$nf_ªgi°î_hooks
(
nf_hook_›s
 *
›s
, 
n
)

782 
i
, 
ªt
 = 0;

783 
i
 = 0; i < 
n
; i++) {

784 
ªt
 = 
	`nf_ªgi°î_hook
(
›s
 + 
i
);

785 i‡(
ªt
 < 0)

788  
ªt
;

789 
	}
}

792 
	$nf_uƒegi°î_hooks
(
nf_hook_›s
 *
›s
, 
n
)

794 
i
;

795 
i
 = 0; i < 
n
; i++) {

796 
	`nf_uƒegi°î_hook
(
›s
 + 
i
);

798 
	}
}

799 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,14)

800 
	#REG_QH_ARG
(
pf
, 
‚
Ëpf, fn, 
NULL


	)

802 
	#UNREG_QH_ARG
(
pf
, 
‚
)

803 
	#SET_MOD_OWNER


	)

807 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,24)

808 
	#UNREG_QH_ARG
(
pf
, 
‚
)

809 #ñi‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(3,8,2)

	)

810 
	#UNREG_QH_ARG
(
pf
, 
‚
Ëpf, &(‚ ## 
_desc
)

	)

812 
	#UNREG_QH_ARG
(
pf
, 
‚
)

	)

815 
	#SET_MOD_OWNER
 .
ow√r
 = 
THIS_MODULE
,

	)

819 
nf_hook_›s
 
	gùfw_›s
[] 
	g__ªad_mo°ly
 = {

821 .
hook
 = 
ˇŒ_ùfw
,

822 .
	gpf
 = 
PF_INET
,

823 .
	ghooknum
 = 
IPFW_HOOK_IN
,

824 .
	g¥i‹ôy
 = 
NF_IP_PRI_FILTER
,

825 
	gSET_MOD_OWNER


828 .
	ghook
 = 
ˇŒ_ùfw
,

829 .
	gpf
 = 
PF_INET
,

830 .
	ghooknum
 = 
NF_IP_POST_ROUTING
,

831 .
	g¥i‹ôy
 = 
NF_IP_PRI_FILTER
,

832 
	gSET_MOD_OWNER


840 
moduÀd©a_t
 *
moddesc_ùfw
;

841 
moduÀd©a_t
 *
moddesc_dummy√t
;

842 
moduÀd©a_t
 *
moddesc_dn_fifo
;

843 
moduÀd©a_t
 *
moddesc_dn_wf2qp
;

844 
moduÀd©a_t
 *
moddesc_dn_º
;

845 
moduÀd©a_t
 *
moddesc_dn_qfq
;

846 
moduÀd©a_t
 *
moddesc_dn_¥io
;

847 *
sysöô_ùfw_öô
;

848 *
sysunöô_ùfw_de°roy
;

849 *
sysöô_v√t_ùfw_öô
;

850 *
sysunöô_v√t_ùfw_unöô
;

855 
__öô


856 
	$ùfw_moduÀ_öô
()

858 
ªt
 = 0;

859 #ifde‡
_WIN32


860 
ªsﬁuti⁄
;

863 
	`∫_öô
(64);

864 
	`my_mod_ªgi°î
("ùfw", 1, 
moddesc_ùfw
, 
NULL
, NULL);

865 
	`my_mod_ªgi°î
("sy_ùfw", 2, 
NULL
,

866 
sysöô_ùfw_öô
, 
sysunöô_ùfw_de°roy
);

867 
	`my_mod_ªgi°î
("sy_V√t_ùfw", 3, 
NULL
,

868 
sysöô_v√t_ùfw_öô
, 
sysunöô_v√t_ùfw_unöô
);

869 
	`my_mod_ªgi°î
("dummy√t", 4, 
moddesc_dummy√t
, 
NULL
, NULL);

870 
	`my_mod_ªgi°î
("dn_fifo", 5, 
moddesc_dn_fifo
, 
NULL
, NULL);

871 
	`my_mod_ªgi°î
("dn_wf2qp", 6, 
moddesc_dn_wf2qp
, 
NULL
, NULL);

872 
	`my_mod_ªgi°î
("dn_º", 7, 
moddesc_dn_º
, 
NULL
, NULL);

873 
	`my_mod_ªgi°î
("dn_qfq", 8, 
moddesc_dn_qfq
, 
NULL
, NULL);

874 
	`my_mod_ªgi°î
("dn_¥io", 9, 
moddesc_dn_¥io
, 
NULL
, NULL);

875 
	`öô_chûdªn
();

877 #ifde‡
_WIN32


878 
ªsﬁuti⁄
 = 
	`ExSëTimîResﬁuti⁄
(1, 
TRUE
);

879 
	`¥ötf
("*** ExSëTimîResﬁuti⁄:Ñesﬁuti⁄ sëÅÿ%dÇ-£¯***\n",
ªsﬁuti⁄
);

881 #ifde‡
EMULATE_SYSCTL


882 
	`keöô_GST
();

885 #ifde‡
__löux__


887 
ªt
 = 
	`nf_ªgi°î_sock›t
(&
ùfw_sock›ts
);

888 i‡(
ªt
 < 0) {

889 
	`¥ötf
("îr‹ %d i¿nf_ªgi°î_sock›t\n", 
ªt
);

890 
˛ón_moduÀs
;

895 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(3,8,2)

896 
ªt
 =

898 
	`nf_ªgi°î_queue_h™dÀr
(
	`REG_QH_ARG
(
PF_INET
, 
ùfw2_queue_h™dÀr
) );

899 i‡(
ªt
 < 0)

900 
uƒegi°î_sock›t
;

902 
ªt
 = 
	`nf_ªgi°î_hooks
(
ùfw_›s
, 
	`ARRAY_SIZE
(ipfw_ops));

903 i‡(
ªt
 < 0)

904 
uƒegi°î_sock›t
;

906 
	`¥ötf
("%†lﬂded\n", 
__FUNCTION__
);

911 
uƒegi°î_sock›t
:

912 
	`nf_uƒegi°î_queue_h™dÀr
(
	`UNREG_QH_ARG
(
PF_INET
, 
ùfw2_queue_h™dÀr
) );

913 
	`nf_uƒegi°î_sock›t
(&
ùfw_sock›ts
);

915 
˛ón_moduÀs
:

916 
	`föi_chûdªn
();

917 
	`¥ötf
("%†îr‹\n", 
__FUNCTION__
);

920  
ªt
;

921 
	}
}

924 
__exô


925 
	$ùfw_moduÀ_exô
()

927 #ifde‡
EMULATE_SYSCTL


928 
	`kìxô_GST
();

930 #ifde‡
_WIN32


931 
	`ExSëTimîResﬁuti⁄
(0,
FALSE
);

934 
	`nf_uƒegi°î_hooks
(
ùfw_›s
, 
	`ARRAY_SIZE
(ipfw_ops));

936 
	`nf_uƒegi°î_queue_h™dÀr
(
	`UNREG_QH_ARG
(
PF_INET
, 
ùfw2_queue_h™dÀr
) );

937 
	`nf_uƒegi°î_sock›t
(&
ùfw_sock›ts
);

940 
	`föi_chûdªn
();

942 
	`¥ötf
("%†u∆ﬂded\n", 
__FUNCTION__
);

943 
	}
}

945 #ifde‡
__löux__


946 
	$moduÀ_öô
(
ùfw_moduÀ_öô
)

947 
	$moduÀ_exô
(
ùfw_moduÀ_exô
)

948 
	`MODULE_LICENSE
("Dual BSD/GPL");

	@kipfw-mod/md_win.c

30 
	~<√t/pfû.h
>

31 
	~<¨∑/öë.h
>

32 
	~<√töë/ö.h
>

33 
	~<ndis.h
>

34 
	~<sys/mbuf.h
>

35 
	~<∑s°hru.h
>

39 
	$¸ed_check
(*
_ö¢
, 
¥Ÿo
, 
i‚ë
 *
oif
,

40 
ö_addr
 
d°_ù
, 
u_öt16_t
 
d°_p‹t
, ö_add∏
§c_ù
,

41 
u_öt16_t
 
§c_p‹t
, 
bsd_u¸ed
 *
u
, *
ugid_lookuµ
,

42 
sk_buff
 *
skb
)

45 
	}
}

52 
	$my_Æloc
(
size
)

54 *
_ªt
 = 
	`ExAŒoˇãPoﬁWôhTag
(
N⁄PagedPoﬁ
, 
size
, 'wfpi');

55 i‡(
_ªt
)

56 
	`mem£t
(
_ªt
, 0, 
size
);

57  
_ªt
;

58 
	}
}

61 
	$∑nic
(c⁄° *
fmt
, ...)

63 
	`¥ötf
("%s", 
fmt
);

65 
	}
}

67 
	g£cuªÀvñ
 = 0;

69 
	$ffs
(
bôs
)

71 
i
;

72 i‡(
bôs
 == 0)

74 
i
 = 1; ; i++, 
bôs
 >>= 1) {

75 i‡(
bôs
 & 1)

78  (
i
);

79 
	}
}

82 
	$do_gëtimeofday
(
timevÆ
 *
tv
)

84 
LARGE_INTEGER
 
¥evtime
;

85 
LARGE_INTEGER
 
¥evcou¡
;

86 
LARGE_INTEGER
 
‰eq
;

88 
LARGE_INTEGER
 
cuºtime
;

89 
LARGE_INTEGER
 
cuºcou¡
;

90 i‡(
¥evtime
.
QuadP¨t
 == 0) {

91 
	`KeQuîySy°emTime
(&
¥evtime
);

92 
¥evcou¡
 = 
	`KeQuîyPîf‹m™˚Cou¡î
(&
‰eq
);

93 
cuºtime
.
QuadP¨t
 = 
¥evtime
.QuadPart;

95 
	`KeQuîySy°emTime
(&
cuºtime
);

96 
cuºcou¡
 = 
	`KeQuîyPîf‹m™˚Cou¡î
(&
‰eq
);

97 i‡(
cuºtime
.
QuadP¨t
 =
¥evtime
.QuadPart) {

99 
LONGLONG
 
dif·ime
 = 0;

100 
LONGLONG
 
diffcou¡
 = 0;

102 
diffcou¡
 = 
cuºcou¡
.
QuadP¨t
 - 
¥evcou¡
.QuadPart;

103 
diffcou¡
 *= 10000000;

104 
dif·ime
 = 
diffcou¡
 / 
‰eq
.
QuadP¨t
;

105 
cuºtime
.
QuadP¨t
 +
dif·ime
;

109 
¥evtime
.
QuadP¨t
 = 
cuºtime
.QuadPart;

110 
¥evcou¡
.
QuadP¨t
 = 
cuºcou¡
.QuadPart;

113 
cuºtime
.
QuadP¨t
 /= 10;

114 
tv
->
tv_£c
 = 
cuºtime
.
QuadP¨t
 / (
LONGLONG
)1000000;

115 
tv
->
tv_u£c
 = 
cuºtime
.
QuadP¨t
 % (
LONGLONG
)1000000;

117 
	}
}

119 
	$time_u±ime_w32
()

121 
ªt
;

122 
LARGE_INTEGER
 
tm
;

123 
	`KeQuîySy°emTime
(&
tm
);

124 
ªt
 = ()(
tm
.
QuadP¨t
 / (
LONGLONG
)1000000);

125  
ªt
;

126 
	}
}

143 
hexdump
(
PUCHAR
,, const *);

144 
	g_if_ö
[] = "incoming";

145 
	g_if_out
[] = "outgoing";

148 
	$ùfw2_qh™dÀr_w32
(
PNDIS_PACKET
 
pNdisPackë
, 
dúe˘i⁄
,

149 
NDIS_HANDLE
 
C⁄ãxt
)

151 
Buf„rCou¡
 = 0;

152 
TŸÆPackëLígth
 = 0;

153 
PNDIS_BUFFER
 
pCuºítBuf„r
 = 
NULL
;

154 
PNDIS_BUFFER
 
pNextBuf„r
 = 
NULL
;

155 
mbuf
* 
m
;

156 * 
∑ylﬂd
 = 
NULL
;

157 
ofs
, 
l
;

158 
EthîTy≥
 = 0;

159 
i
 = 0;

160 
ªt
 = 0;

161 
PNDIS_BUFFER
 
pNdisBuf„r
, 
ﬁd_hód
, 
ﬁd_èû
;

162 
NDIS_HANDLE
 
PackëPoﬁ
;

163 
PADAPT
 
pAd≠t
;

164 
NDIS_STATUS
 
Sètus
;

171 
	`NdisQuîyPackë
(
pNdisPackë
, 
NULL
, &
Buf„rCou¡
,

172 &
pCuºítBuf„r
, &
TŸÆPackëLígth
);

173 
m
 = 
	`mÆloc
((
mbuf
Ë+ 
TŸÆPackëLígth
, 0, 0 );

174 i‡(
m
 =
NULL
)

175 
dr›_pkt
;

180 
∑ylﬂd
 = (*)(
m
 + 1);

181 
m
->
m_Àn
 = m->
m_pkthdr
.
Àn
 = 
TŸÆPackëLígth
-14;

182 
m
->
m_pkthdr
.
rcvif
 = (*)((
dúe˘i⁄
==
INCOMING
Ë? 
_if_ö
 : 
NULL
);

183 
m
->
m_d©a
 = 
∑ylﬂd
 + 14;

184 
m
->
dúe˘i⁄
 = direction;

185 
m
->
c⁄ãxt
 = 
C⁄ãxt
;

186 
m
->
pkt
 = 
pNdisPackë
;

193 
m
->
m_skb
 = (*)
pNdisPackë
;

197 
i
=0, 
ofs
 = 0; i < 
Buf„rCou¡
; i++) {

198 * 
§c
;

199 
	`NdisQuîyBuf„rSa„
(
pCuºítBuf„r
, &
§c
, &
l
,

200 
N‹mÆPagePri‹ôy
);

201 
	`bc›y
(
§c
, 
∑ylﬂd
 + 
ofs
, 
l
);

202 
ofs
 +
l
;

203 
	`NdisGëNextBuf„r
(
pCuºítBuf„r
, &
pNextBuf„r
);

204 
pCuºítBuf„r
 = 
pNextBuf„r
;

210 
EthîTy≥
 = *(*)(
∑ylﬂd
 + 12);

211 
EthîTy≥
 = 
	`RéUsh‹tByãSw≠
(EtherType);

212 i‡(
EthîTy≥
 != 0x0800) {

214 
	`‰ì
(
m
, 0);

215  
PASS
;

221 
pAd≠t
 = 
C⁄ãxt
;

222 
PackëPoﬁ
 = 
dúe˘i⁄
 =
OUTGOING
 ?

223 
pAd≠t
->
SídPackëPoﬁH™dÀ
 :ÖAd≠t->
RecvPackëPoﬁH™dÀ
;

224 
	`NdisAŒoˇãBuf„r
(&
Sètus
, &
pNdisBuf„r
,

225 
PackëPoﬁ
, 
∑ylﬂd
, 
m
->
m_pkthdr
.
Àn
+14);

226 i‡(
Sètus
 !
NDIS_STATUS_SUCCESS
)

227 
dr›_pkt
;

232 
pNdisBuf„r
->
Next
 = 
NULL
;

233 
ﬁd_hód
 = 
	`NDIS_PACKET_FIRST_NDIS_BUFFER
(
pNdisPackë
);

234 
ﬁd_èû
 = 
	`NDIS_PACKET_LAST_NDIS_BUFFER
(
pNdisPackë
);

235 
	`NdisReöôülizePackë
(
pNdisPackë
);

236 
	`NdisChaöBuf„rAtFr⁄t
(
pNdisPackë
, 
pNdisBuf„r
);

238 i‡(
dúe˘i⁄
 =
INCOMING
) {

239 
	`DBGPRINT
(("öcomög:ÖrŸÿ%u (%s), sr¯%08X, d° %08X, sp‹à%u, dp‹à%u,Üí %u\n", *(
∑ylﬂd
+14+9), 
	`ãxify_¥Ÿo
(*’aylﬂd+14+9)), *(*)’aylﬂd+14+12), *(*)’aylﬂd+14+16), 
	`¡ohs
((*((*)’aylﬂd+14+20)))),Çtohs((*((*)’aylﬂd+14+22)))), 
TŸÆPackëLígth
));

241 
	`DBGPRINT
(("outgoög:ÖrŸÿ%u (%s), sr¯%08X, d° %08X, sp‹à%u, dp‹à%u,Üí %u\n", *(
∑ylﬂd
+14+9), 
	`ãxify_¥Ÿo
(*’aylﬂd+14+9)), *(*)’aylﬂd+14+12), *(*)’aylﬂd+14+16), 
	`¡ohs
((*((*)’aylﬂd+14+20)))),Çtohs((*((*)’aylﬂd+14+22)))), 
TŸÆPackëLígth
));

244 i‡(
dúe˘i⁄
 =
INCOMING
)

245 
ªt
 = 
	`ùfw_check_hook
(
NULL
, &
m
, NULL, 
PFIL_IN
, NULL);

247 
ªt
 = 
	`ùfw_check_hook
(
NULL
, &
m
, (
i‚ë
*)
_if_out
, 
PFIL_OUT
, NULL);

249 i‡(
m
 !
NULL
) {

254 
	`NdisReöôülizePackë
(
pNdisPackë
);

255 
	`NDIS_PACKET_FIRST_NDIS_BUFFER
(
pNdisPackë
Ë
ﬁd_hód
;

256 
	`NDIS_PACKET_LAST_NDIS_BUFFER
(
pNdisPackë
Ë
ﬁd_èû
;

257 
	`NdisFªeBuf„r
(
pNdisBuf„r
);

258 
	`m_‰ìm
(
m
);

259  
PASS
;

260 } i‡(
ªt
 == 0) {

263  
DUMMYNET
;

270  
DROP
;

272 
dr›_pkt
:

277 
	`NdisFªePackë
(
pNdisPackë
);

278  
DROP
;

279 
	}
}

304 
	$√ti§_di•©ch
(
num
, 
mbuf
 *
m
)

306 * 
∑ylﬂd
 = (*)(
m
+1);

307 
PADAPT
 
pAd≠t
 = 
m
->
c⁄ãxt
;

308 
NDIS_STATUS
 
Sètus
;

309 
PNDIS_PACKET
 
pPackë
 = 
m
->
pkt
;

310 
PNDIS_BUFFER
 
pNdisBuf„r
;

311 
NDIS_HANDLE
 
PackëPoﬁ
;

313 i‡(
num
 < 0)

314 
dr›_pkt
;

318 
	`DbgPröt
("ªöje˘ %s\n", 
m
->
dúe˘i⁄
 =
OUTGOING
 ?

321 
	`NdisAcquúeSpöLock
(&
pAd≠t
->
Lock
);

322 i‡(
m
->
dúe˘i⁄
 =
OUTGOING
) {

325 i‡(
pAd≠t
->
PTDevi˚Sèã
 > 
NdisDevi˚SèãD0
) {

326 
pAd≠t
->
Out°™dögSíds
--;

328 
	`NdisRñó£SpöLock
(&
pAd≠t
->
Lock
);

329 
dr›_pkt
;

336 i‡(!
pAd≠t
->
Möù‹tH™dÀ
 ||

337 
pAd≠t
->
MPDevi˚Sèã
 > 
NdisDevi˚SèãD0
) {

338 
	`NdisRñó£SpöLock
(&
pAd≠t
->
Lock
);

339 
dr›_pkt
;

342 
	`NdisRñó£SpöLock
(&
pAd≠t
->
Lock
);

344 i‡(
m
->
dúe˘i⁄
 =
OUTGOING
) {

345 
PSEND_RSVD
 
SídRsvd
;

352 
SídRsvd
 = (
PSEND_RSVD
)(
pPackë
->
PrŸocﬁRe£rved
);

353 
SídRsvd
->
OrigöÆPkt
 = 
NULL
;

354 
SídRsvd
->
pMbuf
 = 
m
;

356 
	`NdisSíd
(&
Sètus
, 
pAd≠t
->
BödögH™dÀ
, 
pPackë
);

357 i‡(
Sètus
 !
NDIS_STATUS_PENDING
) {

359 
	`PtSídCom∂ëe
(
m
->
c⁄ãxt
, m->
pkt
, 
Sètus
);

371 
ULONG
 
Proc
 = 
	`KeGëCuºítPro˚ss‹Numbî
();

372 
pAd≠t
->
Re˚ivedIndiˇti⁄Fœgs
[
Proc
] = 
TRUE
;

373 
	`NdisMEthIndiˇãRe˚ive
(
pAd≠t
->
Möù‹tH™dÀ
, 
NULL
, 
∑ylﬂd
, 14,Öaylﬂd+14, 
m
->
m_Àn
, m->m_len);

374 
	`NdisMEthIndiˇãRe˚iveCom∂ëe
(
pAd≠t
->
Möù‹tH™dÀ
);

375 
pAd≠t
->
Re˚ivedIndiˇti⁄Fœgs
[
Proc
] = 
FALSE
;

377 
dr›_pkt
:

382 i‡(
m
->
pkt
 !
NULL
)

384 
	`NdisUnchaöBuf„rAtFr⁄t
(
m
->
pkt
, &
pNdisBuf„r
);

385 
	`NdisFªeBuf„r
(
pNdisBuf„r
);

386 
	`NdisFªePackë
(
m
->
pkt
);

388 
	`m_‰ìm
(
m
);

389 
	}
}

391 
wö_‰ìm
(*);

393 
	$wö_‰ìm
(*
_m
)

395 
mbuf
 *
m
 = 
_m
;

396 
	`m_‰ìm
(
m
);

397 
	}
}

403 
size_t


404 
	$°æ˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
siz
)

406 *
d
 = 
d°
;

407 c⁄° *
s
 = 
§c
;

408 
size_t
 
n
 = 
siz
;

411 i‡(
n
 != 0 && --n != 0) {

413 i‡((*
d
++ = *
s
++) == 0)

415 } --
n
 != 0);

419 i‡(
n
 == 0) {

420 i‡(
siz
 != 0)

421 *
d
 = '\0';

422 *
s
++)

426 (
s
 - 
§c
 - 1);

427 
	}
}

429 
	$CÀ™upReöje˘ed
(
PNDIS_PACKET
 
Packë
, 
mbuf
* 
m
, 
PADAPT
 
pAd≠t
)

431 
PNDIS_BUFFER
 
pNdisBuf„r
;

433 
	`NdisQuîyPackë
(
Packë
, 
NULL
, NULL, &
pNdisBuf„r
, NULL);

434 
	`NdisUnchaöBuf„rAtFr⁄t
(
Packë
, &
pNdisBuf„r
);

435 
	`NdisFªeBuf„r
(
pNdisBuf„r
);

436 
	`wö_‰ìm
(
m
);

437 
	`NdisFªePackë
(
Packë
);

438 
	`ADAPT_DECR_PENDING_SENDS
(
pAd≠t
);

439 
	}
}

442 
	$ùfw2_qh™dÀr_w32_ﬁd°yÀ
(
dúe˘i⁄
,

443 
NDIS_HANDLE
 
PrŸocﬁBödögC⁄ãxt
,

444 * 
HódîBuf„r
,

445 
HódîBuf„rSize
,

446 * 
LookAhódBuf„r
,

447 
LookAhódBuf„rSize
,

448 
PackëSize
)

450 
mbuf
* 
m
;

451 * 
∑ylﬂd
 = 
NULL
;

452 
EthîTy≥
 = 0;

453 
ªt
 = 0;

462 
m
 = 
	`mÆloc
((
mbuf
Ë+ 
HódîBuf„rSize
 + 
LookAhódBuf„rSize
, 0, 0 );

463 i‡(
m
 =
NULL
)

464  
DROP
;

472 
∑ylﬂd
 = (*)(
m
 + 1);

473 
m
->
m_Àn
 = m->
m_pkthdr
.
Àn
 = 
HódîBuf„rSize
+
LookAhódBuf„rSize
-14;

474 
m
->
m_d©a
 = 
∑ylﬂd
 + 14;

475 
m
->
dúe˘i⁄
 = direction;

476 
m
->
c⁄ãxt
 = 
PrŸocﬁBödögC⁄ãxt
;

477 
m
->
pkt
 = 
NULL
;

482 
	`bc›y
(
HódîBuf„r
, 
∑ylﬂd
, 
HódîBuf„rSize
);

483 
	`bc›y
(
LookAhódBuf„r
, 
∑ylﬂd
+
HódîBuf„rSize
, 
LookAhódBuf„rSize
);

489 
EthîTy≥
 = *(*)(
∑ylﬂd
 + 12);

490 
EthîTy≥
 = 
	`RéUsh‹tByãSw≠
(EtherType);

491 i‡(
EthîTy≥
 != 0x0800) {

493 
	`‰ì
(
m
, 0);

494  
PASS
;

500 
ªt
 = 
	`ùfw_check_hook
(
NULL
, &
m
, NULL, 
PFIL_IN
, NULL);

502 i‡(
m
 !
NULL
) {

505 
	`m_‰ìm
(
m
);

506  
PASS
;

507 } i‡(
ªt
 == 0) {

510  
DUMMYNET
;

517  
DROP
;

519 
	}
}

523 
do_ùfw_£t_˘l
(
sock
 *
sk
, 
cmd
,

524 
__u£r
 *
u£r
, 
Àn
);

525 
do_ùfw_gë_˘l
(
sock
 *
sk
, 
cmd
,

526 
__u£r
 *
u£r
, *
Àn
);

528 
NTSTATUS


529 
	$DevIoC⁄åﬁ
(

530 
IN
 
PDEVICE_OBJECT
 
pDevi˚Obje˘
,

531 
IN
 
PIRP
 
pIΩ


551 
PIO_STACK_LOCATION
 
pIΩSp
;

552 
NTSTATUS
 
NtSètus
 = 
STATUS_SUCCESS
;

553 
ByãsRëu∫ed
 = 0;

554 
Fun˘i⁄Code
;

555 
Àn
;

556 
sock›t
 *
s›t
;

557 
ªt
 = 0;

559 
	`UNREFERENCED_PARAMETER
(
pDevi˚Obje˘
);

561 
pIΩSp
 = 
	`IoGëCuºítIΩSèckLoˇti⁄
(
pIΩ
);

576 
Àn
 = 
pIΩSp
->
P¨amëîs
.
Devi˚IoC⁄åﬁ
.
I≈utBuf„rLígth
;

577 i‡(
Àn
 < (
sock›t
))

579  
STATUS_NOT_SUPPORTED
;

581 
s›t
 = 
pIΩ
->
AssocüãdIΩ
.
Sy°emBuf„r
;

583 
Fun˘i⁄Code
 = 
pIΩSp
->
P¨amëîs
.
Devi˚IoC⁄åﬁ
.
IoC⁄åﬁCode
;

585 
Àn
 = 
s›t
->
s›t_vÆsize
;

587 
Fun˘i⁄Code
)

589 
IP_FW_SETSOCKOPT
:

590 
ªt
 = 
	`do_ùfw_£t_˘l
(
NULL
, 
s›t
->
s›t_«me
, s›t+1, 
Àn
);

593 
IP_FW_GETSOCKOPT
:

594 
ªt
 = 
	`do_ùfw_gë_˘l
(
NULL
, 
s›t
->
s›t_«me
, s›t+1, &
Àn
);

595 
s›t
->
s›t_vÆsize
 = 
Àn
;

597 i‡(
Àn
 + (
sock›t
Ë<
pIΩSp
->
P¨amëîs
.
Devi˚IoC⁄åﬁ
.
I≈utBuf„rLígth
)

598 
ByãsRëu∫ed
 = 
Àn
 + (
sock›t
);

600 
ByãsRëu∫ed
 = 
pIΩSp
->
P¨amëîs
.
Devi˚IoC⁄åﬁ
.
I≈utBuf„rLígth
;

604 
NtSètus
 = 
STATUS_NOT_SUPPORTED
;

608 
pIΩ
->
IoSètus
.
Inf‹m©i⁄
 = 
ByãsRëu∫ed
;

609 
pIΩ
->
IoSètus
.
Sètus
 = 
NtSètus
;

610 
	`IoCom∂ëeReque°
(
pIΩ
, 
IO_NO_INCREMENT
);

612  
NtSètus
;

613 
	}
}

615 
dummy√t
(* 
unu£d
);

616 
ùfw_tick
(* 
v√tx
);

618 
VOID
 
	$dummy√t_dpc
(

619 
__ö
 
_KDPC
 *
Dpc
,

620 
__ö_›t
 
PVOID
 
De„ºedC⁄ãxt
,

621 
__ö_›t
 
PVOID
 
Sy°emArgumít1
,

622 
__ö_›t
 
PVOID
 
Sy°emArgumít2


625 
	`dummy√t
(
NULL
);

626 
	}
}

628 
VOID
 
	$ùfw_dpc
(

629 
__ö
 
_KDPC
 *
Dpc
,

630 
__ö_›t
 
PVOID
 
De„ºedC⁄ãxt
,

631 
__ö_›t
 
PVOID
 
Sy°emArgumít1
,

632 
__ö_›t
 
PVOID
 
Sy°emArgumít2


635 
	`ùfw_tick
(
De„ºedC⁄ãxt
);

636 
	}
}

	@kipfw-mod/missing.h

33 #i‚de‡
_MISSING_H_


34 
	#_MISSING_H_


	)

36 
	~<sys/cdefs.h
>

37 #ifde‡
löux


38 
	~<löux/sys˘l.h
>

39 
	~<löux/moduÀ.h
>

40 
	~<löux/moduÀ∑øm.h
>

44 
	#HAVE_NET_IPLEN


	)

45 
	#WITHOUT_BPF


	)

47 #ifde‡
_WIN32


49 #i‚de‡
DEFINE_SPINLOCK


50 
	#DEFINE_SPINLOCK
(
x
Ë
FAST_MUTEX
 
	)
x

54 
	#•ö_lock_öô
(
_l
)

	)

55 
	#•ö_lock_bh
(
_l
)

	)

56 
	#•ö_u∆ock_bh
(
_l
)

	)

58 
	~<sys/sockë.h
>

59 
	~<√töë/ö.h
>

60 
	~<√töë/ù.h
>

61 
	#INADDR_TO_IFP
(
a
, 
b
Ëb = 
NULL


	)

65 
	#MALLOC_DECLARE
(
x
Ë

	)

66 
	~<löux/time.h
>

67 
	~<√töë/ù.h
>

68 
	göpcb
;

78 #i‚de‡
DEFINE_SPINLOCK


79 
	#DEFINE_SPINLOCK
(
x
Ë
•ölock_t
 x = 
SPIN_LOCK_UNLOCKED


	)

83 
	#rw_as£π
(
a
, 
b
)

	)

84 
	#rw_de°roy
(
_l
)

	)

85 
	#rw_öô
(
_l
, 
msg
Ë
	`•ö_lock_öô
(_l)

	)

86 
	#rw_æock
(
_l
Ë
	`•ö_lock_bh
(_l)

	)

87 
	#rw_ru∆ock
(
_l
Ë
	`•ö_u∆ock_bh
(_l)

	)

88 
	#rw_wlock
(
_l
Ë
	`•ö_lock_bh
(_l)

	)

89 
	#rw_wu∆ock
(
_l
Ë
	`•ö_u∆ock_bh
(_l)

	)

90 
	#rw_öô_Êags
(
_l
, 
s
, 
v
)

	)

92 
	#mtx_as£π
(
a
, 
b
)

	)

93 
	#mtx_de°roy
(
m
)

	)

94 
	#mtx_öô
(
m
, 
a
,
b
,
c
Ë
	`•ö_lock_öô
(m)

	)

95 
	#mtx_lock
(
_l
Ë
	`•ö_lock_bh
(_l)

	)

96 
	#mtx_u∆ock
(
_l
Ë
	`•ö_u∆ock_bh
(_l)

	)

115 
	sùfw_ruÀ_ªf
 {

116 
uöt32_t
 
	m¶Ÿ
;

117 
uöt32_t
 
	mruÀnum
;

118 
uöt32_t
 
	mruÀ_id
;

119 
uöt32_t
 
	mchaö_id
;

120 
uöt32_t
 
	möfo
;

124 
	mIPFW_INFO_MASK
 = 0x0000ffff,

125 
	mIPFW_INFO_OUT
 = 0x00000000,

126 
	mIPFW_INFO_IN
 = 0x80000000,

127 
	mIPFW_ONEPASS
 = 0x40000000,

128 
	mIPFW_IS_MASK
 = 0x30000000,

129 
	mIPFW_IS_DIVERT
 = 0x20000000,

130 
	mIPFW_IS_DUMMYNET
 =0x10000000,

131 
	mIPFW_IS_PIPE
 = 0x08000000,

135 
	#ö_nuŒho°
(
x
Ë((x).
s_addr
 =
INADDR_ANY
)

	)

138 
	#bzîo
(
s
, 
n
Ë
	`mem£t
(s, 0,Ç)

	)

139 
	#bcmp
(
p1
, 
p2
, 
n
Ë
	`memcmp
’1,Ö2,Ç)

	)

142 
	#ETHERTYPE_IP
 0x0800

	)

144 
	sëhî_hódî
 {

145 
u_ch¨
 
	mëhî_dho°
[
ETHER_ADDR_LEN
];

146 
u_ch¨
 
	mëhî_sho°
[
ETHER_ADDR_LEN
];

147 
u_sh‹t
 
	mëhî_ty≥
;

150 
	#ETHER_TYPE_LEN
 2

	)

151 
	#ETHER_HDR_LEN
 (
ETHER_ADDR_LEN
*2+
ETHER_TYPE_LEN
)

	)

162 #i‡(
BYTE_ORDER
 =
BIG_ENDIAN
Ë|| 
deföed
(
HAVE_NET_IPLEN
)

163 
	#SET_NET_IPLEN
(
p
Ëdÿ{} 0)

	)

164 
	#SET_HOST_IPLEN
(
p
Ëdÿ{} 0)

	)

166 
	#SET_NET_IPLEN
(
p
) do { \

167 
ù
 *
h_ù
 = (
p
); \

168 
h_ù
->
ù_Àn
 = 
	`ht⁄s
(h_ip->ip_len); \

169 
h_ù
->
ù_off
 = 
	`ht⁄s
(h_ip->ip_off); \

170 } 0)

	)

172 
	#SET_HOST_IPLEN
(
p
) do { \

173 
ù
 *
h_ù
 = (
p
); \

174 
h_ù
->
ù_Àn
 = 
	`¡ohs
(h_ip->ip_len); \

175 
h_ù
->
ù_off
 = 
	`¡ohs
(h_ip->ip_off); \

176 } 0)

	)

180 
	#__FªeBSD_vîsi⁄
 500035

	)

182 #ifde‡
__löux__


183 
	gmoduÀd©a
;

184 
my_mod_ªgi°î
(c⁄° *
«me
,

185 
‹dî
, 
moduÀd©a
 *
mod
, *
öô
, *
unöô
);

189 
	smÆloc_ty≥
 {

192 
	#MALLOC_DEFINE
(
ty≥
, 
sh‹tdesc
, 
l⁄gdesc
) \

193 
mÆloc_ty≥
 
ty≥
[1]; *
md_dummy_
 ##Åy≥ = 
	)
type

195 
	#CTASSERT
(
x
)

	)

198 
	#LOG_ERR
 0x100

	)

199 
	#LOG_INFO
 0x200

	)

200 
	#log
(
_Àvñ
, 
fmt
, 
¨g
...) do { \

201 
_qwîty
=
_Àvñ
;()_qwîty; 
	`¥ötk
(
KERN_ERR
 
fmt
, ##
¨g
); } 0)

	)

207 
gëtimeofday
(
timevÆ
 *, 
timez⁄e
 *);

210 
	#MALLOC_DEFINE
(
a
,
b
,
c
)

	)

213 
hz
;

214 
tick
;

215 
boŸvîbo£
;

216 
timevÆ
 
boŸtime
;

219 #ifde‡
__löux__


220 #i‡
LINUX_VERSION_CODE
 > 
KERNEL_VERSION
(2,4,37)

221 
	#time_u±ime
 
	`gë_£c⁄ds
()

	)

223 
	#time_u±ime
 
CURRENT_TIME


	)

226 
	#time_u±ime
 
	`time_u±ime_w32
()

	)

229 
max_lökhdr
;

230 
ù_de·é
;

231 
u_l⁄g
 
ö_iÁddrhmask
;

232 
ö_iÁddrhashhód
 *
ö_iÁddrhashtbl
;

238 
	~<¨∑/öë.h
>

240 
	gmbuf
;

243 
ªöje˘_dr›
(
mbuf
* 
m
);

245 
	~<löux/î∫o.h
>

246 
	~<löux/if.h
>

248 
∫_öô
();

256 #ifde‡
__löux__


257 
	#icmp_code
 
code


	)

258 
	#icmp_ty≥
 
ty≥


	)

263 
	#__u6_addr
 
ö6_u


	)

264 
	#__u6_addr32
 
u6_addr32


	)

268 
	ss˘phdr
 {

269 
uöt16_t
 
	m§c_p‹t
;

270 
uöt16_t
 
	mde°_p‹t
;

271 
uöt32_t
 
	mv_èg
;

272 
uöt32_t
 
	mchecksum
;

277 
	#TH_FIN
 0x01

	)

278 
	#TH_SYN
 0x02

	)

279 
	#TH_RST
 0x04

	)

280 
	#TH_ACK
 0x10

	)

282 
	#RTF_CLONING
 0x100

	)

284 
	#IPPROTO_OSPFIGP
 89

	)

285 
	#IPPROTO_CARP
 112

	)

286 #i‚de‡
_WIN32


287 
	#IPPROTO_IPV4
 
IPPROTO_IPIP


	)

290 
	#CARP_VERSION
 2

	)

291 
	#CARP_ADVERTISEMENT
 0x01

	)

293 
	#PRIV_NETINET_IPFW
 491

	)

295 
	#IP_FORWARDING
 0x1

	)

297 
	#NETISR_IP
 2

	)

299 
	#PRIV_NETINET_DUMMYNET
 494

	)

301 
£cuªÀvñ
;

303 
	sˇΩ_hódî
 {

304 #i‡
BYTE_ORDER
 =
LITTLE_ENDIAN


305 
u_öt8_t
 
	mˇΩ_ty≥
:4,

306 
	mˇΩ_vîsi⁄
:4;

308 #i‡
BYTE_ORDER
 =
BIG_ENDIAN


309 
u_öt8_t
 
	mˇΩ_vîsi⁄
:4,

310 
	mˇΩ_ty≥
:4;

314 
	spim
 {

315 
	mdummy
;

318 #i‚de‡
_WIN32


319 
	srouã
 {

320 
πíåy
 *
	mro_π
;

321 
sockaddr
 
	mro_d°
;

325 
	siÁ…q
 {

326 *
	mifq_hód
;

333 #i‡
deföed
–
__löux__
)

334 
	#if_x«me
 
«me


	)

335 
	#if_¢d
 
XXX


	)

337 
	~<löux/öëdevi˚.h
>

339 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,25)

340 
	#INADDR_TO_IFP
(
ù
, 
b
) \

341 
b
 = 
	`ù_dev_föd
(
ù
.
s_addr
)

	)

343 
	#INADDR_TO_IFP
(
ù
, 
b
) \

344 
b
 = 
	`ù_dev_föd
((
√t
 *)&
öô_√t
, 
ù
.
s_addr
)

	)

347 #ñi‡
deföed
–
_WIN32
 )

349 
	si‚ë
 {

350 
	mif_x«me
[
IFNAMSIZ
];

354 
	s√t_devi˚
 {

355 
	mif_x«me
[
IFNAMSIZ
];

360 
ö_cksum
(
mbuf
 *
m
, 
Àn
);

361 
	#divît_cookõ
(
mèg
Ë0

	)

362 
	#divît_öfo
(
mèg
Ë0

	)

363 
	#pf_föd_mèg
(
a
Ë
NULL


	)

364 
	#pf_gë_mèg
(
a
Ë
NULL


	)

365 #i‚de‡
_WIN32


366 
	#AF_LINK
 
AF_ASH


	)

370 
	#m_puŒup
(
m
, 
x
) \

371 ((
m
)->
m_Àn
 >
x
 ? (mË: (
	`FREE_PKT
(m), 
NULL
))

	)

373 
	spf_mèg
 {

374 *
	mhdr
;

375 
ß_Ámûy_t
 
	maf
;

376 
u_öt32_t
 
	mqid
;

381 
	sødix_node
 {

382 
ˇddr_t
 
	m∫_key
;

383 
ˇddr_t
 
	m∫_mask
;

388 *
öë_¡ﬂ
(
ö_addr
 
öa
);

389 
øndom
();

398 
öt64_t


399 
div64
(
öt64_t
 
a
, i¡64_à
b
);

402 
öë_¡ﬂ_r
(
ö_addr
 
öa
, *
buf
);

405 
	#TAILQ_FOREACH_SAFE
(
v¨
, 
hód
, 
fõld
, 
tv¨
) \

406 (
v¨
Ë
	`TAILQ_FIRST
((
hód
)); \

407 (
v¨
Ë&& ((
tv¨
Ë
	`TAILQ_NEXT
((v¨), 
fõld
), 1); \

408 (
v¨
Ë(
tv¨
))

	)

410 
	#SLIST_FOREACH_SAFE
(
v¨
, 
hód
, 
fõld
, 
tv¨
) \

411 (
v¨
Ë
	`SLIST_FIRST
((
hód
)); \

412 (
v¨
Ë&& ((
tv¨
Ë
	`SLIST_NEXT
((v¨), 
fõld
), 1); \

413 (
v¨
Ë(
tv¨
))

	)

416 #i‚de‡
ETHERTYPE_IPV6


417 
	#ETHERTYPE_IPV6
 0x86dd

	)

421 
	#RT_NUMFIBS
 1

	)

422 
u_öt
 
π_numfibs
;

425 #ifde‡
RTFREE


426 #unde‡
RTFREE


427 
	#RTFREE
(
a
Ë
	`Ârötf
(
°dîr
, "RTFREE: commíãd ouàlocks\n");

	)

430 
gëmi¸ou±ime
(
timevÆ
 *
tv
);

433 
	gù_m›ti⁄s
;

434 
	grouã
;

435 
	gù
;

437 
mbuf
 *
ù_ªass
(mbuf *);

438 
u_sh‹t
 
ö_cksum_hdr
(
ù
 *);

439 
ù_ouçut
(
mbuf
 *
m
, mbu‡*
›t
, 
rouã
 *
ro
, 
Êags
,

440 
ù_m›ti⁄s
 *
imo
, 
öpcb
 *
öp
);

443 
√ti§_di•©ch
(
num
, 
mbuf
 *
m
);

446 
so›tc›yout
(
sock›t
 *
s›t
, c⁄° *
buf
, 
size_t
 
Àn
);

448 
so›tc›yö
(
sock›t
 *
s›t
, *
buf
, 
size_t
 
Àn
, size_à
möÀn
);

451 
¥iv_check
(
thªad
 *
td
, 
¥iv
);

457 
	sbsd_u¸ed
 {

458 
uid_t
 
	muid
;

459 
gid_t
 
	mgid
;

460 
uöt32_t
 
	mxid
;

461 
uöt32_t
 
	mnid
;

465 
¸ed_check
(*
ö¢
, 
¥Ÿo
, 
i‚ë
 *
oif
,

466 
ö_addr
 
d°_ù
, 
u_öt16_t
 
d°_p‹t
, ö_add∏
§c_ù
,

467 
u_öt16_t
 
§c_p‹t
, 
bsd_u¸ed
 *
u
, *
ugid_lookuµ
,

468 
sk_buff
 *
skb
);

470 
£cuªÀvñ_ge
(
u¸ed
 *
¸
, 
Àvñ
);

472 
	gsys˘l_oid
;

473 
	gsys˘l_ªq
;

475 #ifde‡
_WIN32


476 
	#moduÀ_∑øm_«med
(
_«me
, 
_v¨
, 
_ty
, 
_≥rm
)

	)

480 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,0)

481 
	~<löux/bô›s.h
>

482 
uöt32_t
 
	t__be32
;

483 
uöt16_t
 
	t__be16
;

484 
	gsock
;

485 
	g√t
;

486 
	göë_hashöfo
;

487 
sock
 *
öë_lookup
(

488 
öë_hashöfo
 *
hashöfo
,

489 c⁄° 
__be32
 
ßddr
, c⁄° 
__be16
 
•‹t
,

490 c⁄° 
__be32
 
daddr
, c⁄° 
__be16
 
dp‹t
,

491 c⁄° 
dif
);

492 
sock
 *
t˝_v4_lookup
(
u32
 
ßddr
, 
u16
 
•‹t
, u32 
daddr
, u16 
dp‹t
, 
dif
);

495 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,17) && \

496 
	gLINUX_VERSION_CODE
 > 
	$KERNEL_VERSION
(2,6,16)

497 
	#moduÀ_∑øm_«med
(
_«me
, 
_v¨
, 
_ty
, 
_≥rm
) \

500 

	)

501 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,24)

502 
	tuöçå_t
;

504 #ifde‡
__i386__


505 
ölöe
 
	$__Ês
(
w‹d
)

507 
	`asm
("bsr %1,%0"

508 : "Ù" (
w‹d
)

509 : "rm" (
w‹d
));

510  
w‹d
;

511 
	}
}

518 #i‡
deföed
 (
__löux__
Ë&& !deföed (
EMULATE_SYSCTL
)

519 
	#SYSCTL_DECL
(
_1
)

	)

520 
	#SYSCTL_OID
(
_1
, 
_2
, 
_3
, 
_4
, 
_5
, 
_6
, 
_7
, 
_8
)

	)

521 
	#SYSCTL_NODE
(
_1
, 
_2
, 
_3
, 
_4
, 
_5
, 
_6
)

	)

522 
	#_SYSCTL_BASE
(
_«me
, 
_v¨
, 
_ty
, 
_≥rm
) \

523 
	`moduÀ_∑øm_«med
(
_«me
, *(
_v¨
), 
_ty
, \

524 –(
_≥rm
Ë=
CTLFLAG_RD
Ë? 0444: 0644 )

	)

525 
	#SYSCTL_PROC
(
_ba£
, 
_oid
, 
_«me
, 
_mode
, 
_v¨
, 
_vÆ
, 
_desc
, 
_a
, 
_b
)

	)

527 
	#SYSCTL_INT
(
_ba£
, 
_oid
, 
_«me
, 
_mode
, 
_v¨
, 
_vÆ
, 
_desc
) \

528 
	`_SYSCTL_BASE
(
_«me
, 
_v¨
, , 
_mode
)

	)

530 
	#SYSCTL_LONG
(
_ba£
, 
_oid
, 
_«me
, 
_mode
, 
_v¨
, 
_vÆ
, 
_desc
) \

531 
	`_SYSCTL_BASE
(
_«me
, 
_v¨
, , 
_mode
)

	)

533 
	#SYSCTL_ULONG
(
_ba£
, 
_oid
, 
_«me
, 
_mode
, 
_v¨
, 
_vÆ
, 
_desc
) \

534 
	`_SYSCTL_BASE
(
_«me
, 
_v¨
, 
ul⁄g
, 
_mode
)

	)

536 
	#SYSCTL_UINT
(
_ba£
, 
_oid
, 
_«me
, 
_mode
, 
_v¨
, 
_vÆ
, 
_desc
) \

537 
	`_SYSCTL_BASE
(
_«me
, 
_v¨
, 
uöt
, 
_mode
)

	)

539 
	#TUNABLE_INT
(
_«me
, 
_±r
)

	)

541 
	#SYSCTL_VNET_PROC
 
SYSCTL_PROC


	)

542 
	#SYSCTL_VNET_INT
 
SYSCTL_INT


	)

543 
	#SYSCTL_VNET_UINT
 
SYSCTL_UINT


	)

547 
	#SYSCTL_HANDLER_ARGS
 \

548 
sys˘l_oid
 *
oidp
, *
¨g1
, 
¨g2
, 
sys˘l_ªq
 *
ªq


	)

549 
sys˘l_h™dÀ_öt
(
SYSCTL_HANDLER_ARGS
);

550 
sys˘l_h™dÀ_l⁄g
(
SYSCTL_HANDLER_ARGS
);

553 
ëhî_demux
(
i‚ë
 *
iÂ
, 
mbuf
 *
m
);

555 
ëhî_ouçut_‰ame
(
i‚ë
 *
iÂ
, 
mbuf
 *
m
);

557 
ö_πÆloc_ign
(
rouã
 *
ro
, 
u_l⁄g
 
ignÊags
, 
u_öt
 
fibnum
);

559 
icmp_îr‹
(
mbuf
 *
n
, 
ty≥
, 
code
, 
uöt32_t
 
de°
, 
mtu
);

561 
π‰ì
(
πíåy
 *
π
);

563 
u_sh‹t
 
ö_cksum_skù
(
mbuf
 *
m
, 
Àn
, 
skù
);

565 #ifde‡
INP_LOCK_ASSERT


566 #unde‡
INP_LOCK_ASSERT


567 
	#INP_LOCK_ASSERT
(
a
)

	)

570 
jaûed
(
u¸ed
 *
¸ed
);

578 
ö_loˇœddr
(
ö_addr
 
ö
);

583 
‚m©ch
(c⁄° *
∑âîn
, c⁄° *
°rög
, 
Êags
);

586 
löux_lookup
(c⁄° 
¥Ÿo
, c⁄° 
__be32
 
ßddr
, c⁄° 
__be16
 
•‹t
,

587 c⁄° 
__be32
 
daddr
, c⁄° 
__be16
 
dp‹t
,

588 
sk_buff
 *
skb
, 
dú
, 
bsd_u¸ed
 *
u
);

594 
	#MTAG_IPFW
 1148380143

	)

595 
	#MTAG_IPFW_RULE
 1262273568

	)

597 
	gù_fw_¨gs
;

598 (*
ù_dn_io_±r
)(
mbuf
 **
m
, 
dú
, 
ù_fw_¨gs
 *
fwa
);

600 
	#curv√t
 
NULL


	)

601 
	#CURVNET_SET
(
_v
)

	)

602 
	#CURVNET_RESTORE
()

	)

603 
	#VNET_ASSERT
(
c⁄dôi⁄
)

	)

605 
	#VNET_NAME
(
n
Ë
	)
n

606 
	#VNET_DECLARE
(
t
, 
n
Ëà
	)
n

607 
	#VNET_DEFINE
(
t
, 
n
Ëà
	)
n

608 
	#_VNET_PTR
(
b
, 
n
Ë&
	`VNET_NAME
“)

	)

612 
	#VNET_VNET_PTR
(
v√t
, 
n
Ë(&“))

	)

613 
	#VNET_VNET
(
v√t
, 
n
Ë“)

	)

615 
	#VNET_PTR
(
n
Ë(&“))

	)

616 
	#VNET
(
n
Ë“)

	)

618 
	`VNET_DECLARE
(, 
ù_de·é
);

619 
	#V_ù_de·é
 
	`VNET
(
ù_de·é
);

	)

621 
	`ùfw_check_hook
(*
¨g
, 
mbuf
 **
m0
, 
i‚ë
 *
iÂ
,

622 
dú
, 
öpcb
 *
öp
);

625 (*
ù_divît_±r
)(
mbuf
 *
m
, 
öcomög
);

627 (*
ù_dn_˘l_±r
)(
sock›t
 *);

628 
	tù_fw_˘l_t
(
	tsock›t
 *);

629 
ù_fw_˘l_t
 *
ù_fw_˘l_±r
;

632 
	tng_ùfw_öput_t
(
	tmbuf
 **, , 
	tù_fw_¨gs
 *, );

633 
ng_ùfw_öput_t
 *
ng_ùfw_öput_p
;

636 
ù_fw_¨gs
;

637 
	tù_fw_chk_t
(
	tù_fw_¨gs
 *
	t¨gs
);

638 
ù_fw_chk_t
 *
ù_fw_chk_±r
;

640 
	#V_ù_fw_chk_±r
 
	`VNET
(
ù_fw_chk_±r
)

	)

641 
	#V_ù_fw_˘l_±r
 
	`VNET
(
ù_fw_˘l_±r
)

	)

642 
	#V_tcböfo
 
	`VNET
(
tcböfo
)

	)

643 
	#V_udböfo
 
	`VNET
(
udböfo
)

	)

	@kipfw-mod/radix.c

36 
	~<sys/∑øm.h
>

37 #ifdef 
_KERNEL


38 
	~<sys/lock.h
>

39 
	~<sys/muãx.h
>

40 
	~<sys/rwlock.h
>

41 
	~<sys/sy°m.h
>

42 
	~<sys/mÆloc.h
>

43 
	~<sys/sy¶og.h
>

44 
	~<√t/ødix.h
>

45 
	~"›t_m∑th.h
"

46 #ifde‡
RADIX_MPATH


47 
	~<√t/ødix_m∑th.h
>

50 
	~<°dio.h
>

51 
	~<°rögs.h
>

52 
	~<°dlib.h
>

53 
	#log
(
x
, 
¨g
...Ë
	`Ârötf
(
°dîr
, ##árg)

	)

54 
	#∑nic
(
x
Ë
	`Ârötf
(
°dîr
, "PANIC: %s", x), 
	`exô
(1)

	)

55 
	#mö
(
a
, 
b
Ë(◊Ë< (bË? (aË: (bË)

	)

56 
	~<√t/ødix.h
>

59 
∫_wÆkåì_‰om
(
ødix_node_hód
 *
h
, *
a
, *
m
,

60 
wÆkåì_f_t
 *
f
, *
w
);

61 
∫_wÆkåì
(
ødix_node_hód
 *, 
wÆkåì_f_t
 *, *);

62 
ødix_node


63 *
∫_ö£π
(*, 
ødix_node_hód
 *, *,

64 
ødix_node
 [2]),

65 *
∫_√w∑ú
(*, , 
ødix_node
[2]),

66 *
∫_£¨ch
(*, 
ødix_node
 *),

67 *
∫_£¨ch_m
(*, 
ødix_node
 *, *);

69 
	gmax_keyÀn
;

70 
ødix_mask
 *
	g∫_mk‰ìli°
;

71 
ødix_node_hód
 *
	gmask_∫hód
;

78 *
	g∫_zîos
, *
	g∫_⁄es
, *
	gaddmask_key
;

80 
	#MKGë
(
m
) { \

81 i‡(
∫_mk‰ìli°
) { \

82 
m
 = 
∫_mk‰ìli°
; \

83 
∫_mk‰ìli°
 = (
m
)->
rm_mkli°
; \

85 
	`R_MÆloc
(
m
, 
ødix_mask
 *,  (ødix_mask)); }

	)

87 
	#MKFªe
(
m
Ë{ (m)->
rm_mkli°
 = 
∫_mk‰ìli°
;Ñn_mk‰ìli° = (m);}

	)

89 
	#∫_maskt›
 (
mask_∫hód
->
∫h_åìt›
)

	)

91 
∫_Àxobëãr
(*
m_¨g
, *
n_¨g
);

92 
ødix_mask
 *

93 
∫_√w_ødix_mask
(
ødix_node
 *
â
,

94 
ødix_mask
 *
√xt
);

95 
∫_ßtisfõs_Àaf
(*
åül
, 
ødix_node
 *
Àaf
,

96 
skù
);

142 
	#LEN
(
x
Ë–(Ë(*(c⁄° 
u_ch¨
 *)(x)Ë)

	)

158 
ødix_node
 *

159 
	$∫_£¨ch
(
v_¨g
, 
hód
)

160 *
v_¨g
;

161 
ødix_node
 *
hód
;

163 
ødix_node
 *
x
;

164 
ˇddr_t
 
v
;

166 
x
 = 
hód
, 
v
 = 
v_¨g
; x->
∫_bô
 >= 0;) {

167 i‡(
x
->
∫_bmask
 & 
v
[x->
∫_off£t
])

168 
x
 = x->
∫_right
;

170 
x
 = x->
∫_À·
;

172  (
x
);

173 
	}
}

179 
ødix_node
 *

180 
	$∫_£¨ch_m
(
v_¨g
, 
hód
, 
m_¨g
)

181 
ødix_node
 *
hód
;

182 *
v_¨g
, *
m_¨g
;

184 
ødix_node
 *
x
;

185 
ˇddr_t
 
v
 = 
v_¨g
, 
m
 = 
m_¨g
;

187 
x
 = 
hód
; x->
∫_bô
 >= 0;) {

188 i‡((
x
->
∫_bmask
 & 
m
[x->
∫_off£t
]) &&

189 (
x
->
∫_bmask
 & 
v
[x->
∫_off£t
]))

190 
x
 = x->
∫_right
;

192 
x
 = x->
∫_À·
;

194  
x
;

195 
	}
}

198 
	$∫_ªföes
(
m_¨g
, 
n_¨g
)

199 *
m_¨g
, *
n_¨g
;

201 
ˇddr_t
 
m
 = 
m_¨g
, 
n
 = 
n_¨g
;

202 
ˇddr_t
 
lim
, 
lim2
 =Üim = 
n
 + 
	`LEN
(n);

203 
l⁄gî
 = 
	`LEN
(
n
++Ë- LEN(
m
++);

204 
masks_¨e_equÆ
 = 1;

206 i‡(
l⁄gî
 > 0)

207 
lim
 -
l⁄gî
;

208 
n
 < 
lim
) {

209 i‡(*
n
 & ~(*
m
))

211 i‡(*
n
++ !*
m
++)

212 
masks_¨e_equÆ
 = 0;

214 
n
 < 
lim2
)

215 i‡(*
n
++)

217 i‡(
masks_¨e_equÆ
 && (
l⁄gî
 < 0))

218 
lim2
 = 
m
 - 
l⁄gî
; m <Üim2; )

219 i‡(*
m
++)

221  (!
masks_¨e_equÆ
);

222 
	}
}

224 
ødix_node
 *

225 
	$∫_lookup
(
v_¨g
, 
m_¨g
, 
hód
)

226 *
v_¨g
, *
m_¨g
;

227 
ødix_node_hód
 *
hód
;

229 
ødix_node
 *
x
;

230 
ˇddr_t
 
√tmask
 = 0;

232 i‡(
m_¨g
) {

233 
x
 = 
	`∫_addmask
(
m_¨g
, 1, 
hód
->
∫h_åìt›
->
∫_off£t
);

234 i‡(
x
 == 0)

236 
√tmask
 = 
x
->
∫_key
;

238 
x
 = 
	`∫_m©ch
(
v_¨g
, 
hód
);

239 i‡(
x
 && 
√tmask
) {

240 
x
 && x->
∫_mask
 !
√tmask
)

241 
x
 = x->
∫_du≥dkey
;

243  
x
;

244 
	}
}

247 
	$∫_ßtisfõs_Àaf
(
åül
, 
Àaf
, 
skù
)

248 *
åül
;

249 
ødix_node
 *
Àaf
;

250 
skù
;

252 *
˝
 = 
åül
, *
˝2
 = 
Àaf
->
∫_key
, *
˝3
 =Üóf->
∫_mask
;

253 *
˝lim
;

254 
Àngth
 = 
	`mö
(
	`LEN
(
˝
), LEN(
˝2
));

256 i‡(
˝3
 =
NULL
)

257 
˝3
 = 
∫_⁄es
;

259 
Àngth
 = 
	`mö
÷ígth, 
	`LEN
(
˝3
));

260 
˝lim
 = 
˝
 + 
Àngth
; 
˝3
 +
skù
; 
˝2
 += skip;

261 
˝
 +
skù
; c∞< 
˝lim
; cp++, 
˝2
++, 
˝3
++)

262 i‡((*
˝
 ^ *
˝2
Ë& *
˝3
)

265 
	}
}

267 
ødix_node
 *

268 
	$∫_m©ch
(
v_¨g
, 
hód
)

269 *
v_¨g
;

270 
ødix_node_hód
 *
hód
;

272 
ˇddr_t
 
v
 = 
v_¨g
;

273 
ødix_node
 *
t
 = 
hód
->
∫h_åìt›
, *
x
;

274 
ˇddr_t
 
˝
 = 
v
, 
˝2
;

275 
ˇddr_t
 
˝lim
;

276 
ødix_node
 *
ßved_t
, *
t›
 = 
t
;

277 
off
 = 
t
->
∫_off£t
, 
vÀn
 = 
	`LEN
(
˝
), 
m©ched_off
;

278 
ã°
, 
b
, 
∫_bô
;

284 ; 
t
->
∫_bô
 >= 0; ) {

285 i‡(
t
->
∫_bmask
 & 
˝
[t->
∫_off£t
])

286 
t
 =Å->
∫_right
;

288 
t
 =Å->
∫_À·
;

301 i‡(
t
->
∫_mask
)

302 
vÀn
 = *(
u_ch¨
 *)
t
->
∫_mask
;

303 
˝
 +
off
; 
˝2
 = 
t
->
∫_key
 + off; 
˝lim
 = 
v
 + 
vÀn
;

304 ; 
˝
 < 
˝lim
; cp++, 
˝2
++)

305 i‡(*
˝
 !*
˝2
)

306 
⁄1
;

314 i‡(
t
->
∫_Êags
 & 
RNF_ROOT
)

315 
t
 =Å->
∫_du≥dkey
;

316  
t
;

317 
⁄1
:

318 
ã°
 = (*
˝
 ^ *
˝2
) & 0xff;

319 
b
 = 7; (
ã°
 >>= 1) > 0;)

320 
b
--;

321 
m©ched_off
 = 
˝
 - 
v
;

322 
b
 +
m©ched_off
 << 3;

323 
∫_bô
 = -1 - 
b
;

327 i‡((
ßved_t
 = 
t
)->
∫_mask
 == 0)

328 
t
 =Å->
∫_du≥dkey
;

329 ; 
t
;Å =Å->
∫_du≥dkey
)

335 i‡(
t
->
∫_Êags
 & 
RNF_NORMAL
) {

336 i‡(
∫_bô
 <
t
->rn_bit)

337  
t
;

338 } i‡(
	`∫_ßtisfõs_Àaf
(
v
, 
t
, 
m©ched_off
))

339  
t
;

340 
t
 = 
ßved_t
;

343 
ødix_mask
 *
m
;

344 
t
 =Å->
∫_∑ª¡
;

345 
m
 = 
t
->
∫_mkli°
;

352 
m
) {

353 i‡(
m
->
rm_Êags
 & 
RNF_NORMAL
) {

354 i‡(
∫_bô
 <
m
->
rm_bô
)

355  (
m
->
rm_Àaf
);

357 
off
 = 
	`mö
(
t
->
∫_off£t
, 
m©ched_off
);

358 
x
 = 
	`∫_£¨ch_m
(
v
, 
t
, 
m
->
rm_mask
);

359 
x
 && x->
∫_mask
 !
m
->
rm_mask
)

360 
x
 = x->
∫_du≥dkey
;

361 i‡(
x
 && 
	`∫_ßtisfõs_Àaf
(
v
, x, 
off
))

362  
x
;

364 
m
 = m->
rm_mkli°
;

366 } 
t
 !
t›
);

368 
	}
}

370 #ifde‡
RN_DEBUG


371 
	g∫_nodíum
;

372 
ødix_node
 *
	g∫_˛i°
;

373 
	g∫_ßveöfo
;

374 
	g∫_debug
 = 1;

388 
ødix_node
 *

389 
	$∫_√w∑ú
(
v
, 
b
, 
nodes
)

390 *
v
;

391 
b
;

392 
ødix_node
 
nodes
[2];

394 
ødix_node
 *
â
 = 
nodes
, *
t
 =Åt + 1;

395 
t
->
∫_bô
 = 
b
;

396 
t
->
∫_bmask
 = 0x80 >> (
b
 & 7);

397 
t
->
∫_À·
 = 
â
;

398 
t
->
∫_off£t
 = 
b
 >> 3;

401 
t
->
∫_∑ª¡
 =Å->
∫_right
 = 
NULL
;

403 
â
->
∫_mask
 = 
NULL
;

404 
â
->
∫_du≥dkey
 = 
NULL
;

405 
â
->
∫_bmask
 = 0;

407 
â
->
∫_bô
 = -1;

408 
â
->
∫_key
 = (
ˇddr_t
)
v
;

409 
â
->
∫_∑ª¡
 = 
t
;

410 
â
->
∫_Êags
 = 
t
->∫_Êag†
RNF_ACTIVE
;

411 
â
->
∫_mkli°
 = 
t
->rn_mklist = 0;

412 #ifde‡
RN_DEBUG


413 
â
->
∫_öfo
 = 
∫_nodíum
++; 
t
->rn_info =Ñn_nodenum++;

414 
â
->
∫_twö
 = 
t
;

415 
â
->
∫_ybro
 = 
∫_˛i°
;

416 
∫_˛i°
 = 
â
;

418  
t
;

419 
	}
}

421 
ødix_node
 *

422 
	$∫_ö£π
(
v_¨g
, 
hód
, 
du≥¡ry
, 
nodes
)

423 *
v_¨g
;

424 
ødix_node_hód
 *
hód
;

425 *
du≥¡ry
;

426 
ødix_node
 
nodes
[2];

428 
ˇddr_t
 
v
 = 
v_¨g
;

429 
ødix_node
 *
t›
 = 
hód
->
∫h_åìt›
;

430 
hód_off
 = 
t›
->
∫_off£t
, 
vÀn
 = 
	`LEN
(
v
);

431 
ødix_node
 *
t
 = 
	`∫_£¨ch
(
v_¨g
, 
t›
);

432 
ˇddr_t
 
˝
 = 
v
 + 
hód_off
;

433 
b
;

434 
ødix_node
 *
â
;

439 
ˇddr_t
 
˝2
 = 
t
->
∫_key
 + 
hód_off
;

440 
cmp_ªs
;

441 
ˇddr_t
 
˝lim
 = 
v
 + 
vÀn
;

443 
˝
 < 
˝lim
)

444 i‡(*
˝2
++ !*
˝
++)

445 
⁄1
;

446 *
du≥¡ry
 = 1;

447  
t
;

448 
⁄1
:

449 *
du≥¡ry
 = 0;

450 
cmp_ªs
 = (
˝
[-1] ^ 
˝2
[-1]) & 0xff;

451 
b
 = (
˝
 - 
v
Ë<< 3; 
cmp_ªs
; b--)

452 
cmp_ªs
 >>= 1;

455 
ødix_node
 *
p
, *
x
 = 
t›
;

456 
˝
 = 
v
;

458 
p
 = 
x
;

459 i‡(
˝
[
x
->
∫_off£t
] & x->
∫_bmask
)

460 
x
 = x->
∫_right
;

462 
x
 = x->
∫_À·
;

463 } 
b
 > (Ë
x
->
∫_bô
);

465 #ifde‡
RN_DEBUG


466 i‡(
∫_debug
)

467 
	`log
(
LOG_DEBUG
, "∫_ö£π: Goög In:\n"), 
	`åavî£
(
p
);

469 
t
 = 
	`∫_√w∑ú
(
v_¨g
, 
b
, 
nodes
);

470 
â
 = 
t
->
∫_À·
;

471 i‡((
˝
[
p
->
∫_off£t
] &Ö->
∫_bmask
) == 0)

472 
p
->
∫_À·
 = 
t
;

474 
p
->
∫_right
 = 
t
;

475 
x
->
∫_∑ª¡
 = 
t
;

476 
t
->
∫_∑ª¡
 = 
p
;

477 i‡((
˝
[
t
->
∫_off£t
] &Å->
∫_bmask
) == 0) {

478 
t
->
∫_right
 = 
x
;

480 
t
->
∫_right
 = 
â
;

481 
t
->
∫_À·
 = 
x
;

483 #ifde‡
RN_DEBUG


484 i‡(
∫_debug
)

485 
	`log
(
LOG_DEBUG
, "∫_ö£π: Comög Out:\n"), 
	`åavî£
(
p
);

488  (
â
);

489 
	}
}

491 
ødix_node
 *

492 
	$∫_addmask
(
n_¨g
, 
£¨ch
, 
skù
)

493 
£¨ch
, 
skù
;

494 *
n_¨g
;

496 
ˇddr_t
 
√tmask
 = (ˇddr_t)
n_¨g
;

497 
ødix_node
 *
x
;

498 
ˇddr_t
 
˝
, 
˝lim
;

499 
b
 = 0, 
mÀn
, 
j
;

500 
maskdu∂iˇãd
, 
m0
, 
i¢‹mÆ
;

501 
ødix_node
 *
ßved_x
;

502 
œ°_zî€d
 = 0;

504 i‡((
mÀn
 = 
	`LEN
(
√tmask
)Ë> 
max_keyÀn
)

505 
mÀn
 = 
max_keyÀn
;

506 i‡(
skù
 == 0)

507 
skù
 = 1;

508 i‡(
mÀn
 <
skù
)

509  (
mask_∫hód
->
∫h_nodes
);

510 i‡(
skù
 > 1)

511 
	`bc›y
(
∫_⁄es
 + 1, 
addmask_key
 + 1, 
skù
 - 1);

512 i‡((
m0
 = 
mÀn
Ë> 
skù
)

513 
	`bc›y
(
√tmask
 + 
skù
, 
addmask_key
 + skù, 
mÀn
 - skip);

517 
˝
 = 
addmask_key
 + 
mÀn
; (cp >áddmask_key) && cp[-1] == 0;)

518 
˝
--;

519 
mÀn
 = 
˝
 - 
addmask_key
;

520 i‡(
mÀn
 <
skù
) {

521 i‡(
m0
 >
œ°_zî€d
)

522 
œ°_zî€d
 = 
mÀn
;

523  (
mask_∫hód
->
∫h_nodes
);

525 i‡(
m0
 < 
œ°_zî€d
)

526 
	`bzîo
(
addmask_key
 + 
m0
, 
œ°_zî€d
 - m0);

527 *
addmask_key
 = 
œ°_zî€d
 = 
mÀn
;

528 
x
 = 
	`∫_£¨ch
(
addmask_key
, 
∫_maskt›
);

529 i‡(
	`bcmp
(
addmask_key
, 
x
->
∫_key
, 
mÀn
) != 0)

530 
x
 = 0;

531 i‡(
x
 || 
£¨ch
)

532  (
x
);

533 
	`R_ZÆloc
(
x
, 
ødix_node
 *, 
max_keyÀn
 + 2 *  (*x));

534 i‡((
ßved_x
 = 
x
) == 0)

536 
√tmask
 = 
˝
 = (
ˇddr_t
)(
x
 + 2);

537 
	`bc›y
(
addmask_key
, 
˝
, 
mÀn
);

538 
x
 = 
	`∫_ö£π
(
˝
, 
mask_∫hód
, &
maskdu∂iˇãd
, x);

539 i‡(
maskdu∂iˇãd
) {

540 
	`log
(
LOG_ERR
, "rn_addmask: mask impossiblyálready inÅree");

541 
	`Fªe
(
ßved_x
);

542  (
x
);

551 
˝lim
 = 
√tmask
 + 
mÀn
;

552 
i¢‹mÆ
 = 1;

553 
˝
 = 
√tmask
 + 
skù
; (˝ < 
˝lim
Ë&& *(
u_ch¨
 *)cp == 0xff;)

554 
˝
++;

555 i‡(
˝
 !
˝lim
) {

556 
n‹mÆ_ch¨s
[] = {

559 
j
 = 0x80; (j & *
˝
) != 0; j >>= 1)

560 
b
++;

561 i‡(*
˝
 !
n‹mÆ_ch¨s
[
b
] || c∞!(
˝lim
 - 1))

562 
i¢‹mÆ
 = 0;

564 
b
 +(
˝
 - 
√tmask
) << 3;

565 
x
->
∫_bô
 = -1 - 
b
;

566 i‡(
i¢‹mÆ
)

567 
x
->
∫_Êags
 |
RNF_NORMAL
;

568  (
x
);

569 
	}
}

572 
	$∫_Àxobëãr
(
m_¨g
, 
n_¨g
)

573 *
m_¨g
, *
n_¨g
;

575 
u_ch¨
 *
mp
 = 
m_¨g
, *
≈
 = 
n_¨g
, *
lim
;

577 i‡(
	`LEN
(
mp
Ë> LEN(
≈
))

579 i‡(
	`LEN
(
mp
Ë=LEN(
≈
))

580 
lim
 = 
mp
 + 
	`LEN
(mp); mp <Üim;)

581 i‡(*
mp
++ > *
≈
++)

584 
	}
}

586 
ødix_mask
 *

587 
	$∫_√w_ødix_mask
(
â
, 
√xt
)

588 
ødix_node
 *
â
;

589 
ødix_mask
 *
√xt
;

591 
ødix_mask
 *
m
;

593 
	`MKGë
(
m
);

594 i‡(
m
 == 0) {

595 
	`log
(
LOG_ERR
, "Mask forÑouteÇotÉntered\n");

598 
	`bzîo
(
m
,  *m);

599 
m
->
rm_bô
 = 
â
->
∫_bô
;

600 
m
->
rm_Êags
 = 
â
->
∫_Êags
;

601 i‡(
â
->
∫_Êags
 & 
RNF_NORMAL
)

602 
m
->
rm_Àaf
 = 
â
;

604 
m
->
rm_mask
 = 
â
->
∫_mask
;

605 
m
->
rm_mkli°
 = 
√xt
;

606 
â
->
∫_mkli°
 = 
m
;

607  
m
;

608 
	}
}

610 
ødix_node
 *

611 
	$∫_addrouã
(
v_¨g
, 
n_¨g
, 
hód
, 
åìnodes
)

612 *
v_¨g
, *
n_¨g
;

613 
ødix_node_hód
 *
hód
;

614 
ødix_node
 
åìnodes
[2];

616 
ˇddr_t
 
v
 = (ˇddr_t)
v_¨g
, 
√tmask
 = (ˇddr_t)
n_¨g
;

617 
ødix_node
 *
t
, *
x
 = 0, *
â
;

618 
ødix_node
 *
ßved_â
, *
t›
 = 
hód
->
∫h_åìt›
;

619 
b
 = 0, 
b_Àaf
 = 0;

620 
keydu∂iˇãd
;

621 
ˇddr_t
 
mmask
;

622 
ødix_mask
 *
m
, **
mp
;

631 i‡(
√tmask
) {

632 i‡((
x
 = 
	`∫_addmask
(
√tmask
, 0, 
t›
->
∫_off£t
)) == 0)

634 
b_Àaf
 = 
x
->
∫_bô
;

635 
b
 = -1 - 
x
->
∫_bô
;

636 
√tmask
 = 
x
->
∫_key
;

641 
ßved_â
 = 
â
 = 
	`∫_ö£π
(
v
, 
hód
, &
keydu∂iˇãd
, 
åìnodes
);

642 i‡(
keydu∂iˇãd
) {

643 
t
 = 
â
;Åt;Å =Åt,Åàâ->
∫_du≥dkey
) {

644 #ifde‡
RADIX_MPATH


646 i‡(
	`∫_m∑th_ˇ∑bÀ
(
hód
Ë&& 
√tmask
 =
â
->
∫_mask
) {

653 
t
 = 
â
;

654 
â
 =Åt->
∫_du≥dkey
;

655 } 
â
 && 
t
->
∫_mask
 ==Åt->rn_mask);

659 i‡(
â
->
∫_mask
 =
√tmask
)

661 i‡(
√tmask
 == 0 ||

662 (
â
->
∫_mask
 &&

663 ((
b_Àaf
 < 
â
->
∫_bô
)

664 || 
	`∫_ªföes
(
√tmask
, 
â
->
∫_mask
)

665 || 
	`∫_Àxobëãr
(
√tmask
, 
â
->
∫_mask
))))

681 i‡(
â
 =
ßved_â
) {

682 
ødix_node
 *
xx
 = 
x
;

684 (
â
 = 
åìnodes
)->
∫_du≥dkey
 = 
t
;

685 
â
->
∫_Êags
 = 
t
->rn_flags;

686 
â
->
∫_∑ª¡
 = 
x
 = 
t
->rn_parent;

687 
t
->
∫_∑ª¡
 = 
â
;

688 i‡(
x
->
∫_À·
 =
t
)

689 
x
->
∫_À·
 = 
â
;

691 
x
->
∫_right
 = 
â
;

692 
ßved_â
 = 
â
; 
x
 = 
xx
;

694 (
â
 = 
åìnodes
)->
∫_du≥dkey
 = 
t
->rn_dupedkey;

695 
t
->
∫_du≥dkey
 = 
â
;

696 
â
->
∫_∑ª¡
 = 
t
;

697 i‡(
â
->
∫_du≥dkey
)

698 
â
->
∫_du≥dkey
->
∫_∑ª¡
 =Åt;

700 #ifde‡
RN_DEBUG


701 
t
=
â
+1;Åt->
∫_öfo
 = 
∫_nodíum
++;Å->rn_info =Ñn_nodenum++;

702 
â
->
∫_twö
 = 
t
;Åt->
∫_ybro
 = 
∫_˛i°
;Ñn_clist =Åt;

704 
â
->
∫_key
 = (
ˇddr_t
Ë
v
;

705 
â
->
∫_bô
 = -1;

706 
â
->
∫_Êags
 = 
RNF_ACTIVE
;

711 i‡(
√tmask
) {

712 
â
->
∫_mask
 = 
√tmask
;

713 
â
->
∫_bô
 = 
x
->rn_bit;

714 
â
->
∫_Êags
 |
x
->∫_Êag†& 
RNF_NORMAL
;

716 
t
 = 
ßved_â
->
∫_∑ª¡
;

717 i‡(
keydu∂iˇãd
)

718 
⁄2
;

719 
b_Àaf
 = -1 - 
t
->
∫_bô
;

720 i‡(
t
->
∫_right
 =
ßved_â
)

721 
x
 = 
t
->
∫_À·
;

723 
x
 = 
t
->
∫_right
;

725 i‡(
x
->
∫_bô
 < 0) {

726 
mp
 = &
t
->
∫_mkli°
; 
x
; x = x->
∫_du≥dkey
)

727 i‡(
x
->
∫_mask
 && (x->
∫_bô
 >
b_Àaf
Ë&& x->
∫_mkli°
 == 0) {

728 *
mp
 = 
m
 = 
	`∫_√w_ødix_mask
(
x
, 0);

729 i‡(
m
)

730 
mp
 = &
m
->
rm_mkli°
;

732 } i‡(
x
->
∫_mkli°
) {

736 
mp
 = &
x
->
∫_mkli°
; (
m
 = *mp); m∞&m->
rm_mkli°
)

737 i‡(
m
->
rm_bô
 >
b_Àaf
)

739 
t
->
∫_mkli°
 = 
m
; *
mp
 = 0;

741 
⁄2
:

743 i‡((
√tmask
 =0Ë|| (
b
 > 
t
->
∫_bô
 ))

744  
â
;

745 
b_Àaf
 = 
â
->
∫_bô
;

747 
x
 = 
t
;

748 
t
 =Å->
∫_∑ª¡
;

749 } 
b
 <
t
->
∫_bô
 && 
x
 !
t›
);

756 
mp
 = &
x
->
∫_mkli°
; (
m
 = *mp); m∞&m->
rm_mkli°
) {

757 i‡(
m
->
rm_bô
 < 
b_Àaf
)

759 i‡(
m
->
rm_bô
 > 
b_Àaf
)

761 i‡(
m
->
rm_Êags
 & 
RNF_NORMAL
) {

762 
mmask
 = 
m
->
rm_Àaf
->
∫_mask
;

763 i‡(
â
->
∫_Êags
 & 
RNF_NORMAL
) {

764 #i‡!
	`deföed
(
RADIX_MPATH
)

765 
	`log
(
LOG_ERR
,

768  
â
;

771 
mmask
 = 
m
->
rm_mask
;

772 i‡(
mmask
 =
√tmask
) {

773 
m
->
rm_ªfs
++;

774 
â
->
∫_mkli°
 = 
m
;

775  
â
;

777 i‡(
	`∫_ªföes
(
√tmask
, 
mmask
)

778 || 
	`∫_Àxobëãr
(
√tmask
, 
mmask
))

781 *
mp
 = 
	`∫_√w_ødix_mask
(
â
, *mp);

782  
â
;

783 
	}
}

785 
ødix_node
 *

786 
	$∫_dñëe
(
v_¨g
, 
√tmask_¨g
, 
hód
)

787 *
v_¨g
, *
√tmask_¨g
;

788 
ødix_node_hód
 *
hód
;

790 
ødix_node
 *
t
, *
p
, *
x
, *
â
;

791 
ødix_mask
 *
m
, *
ßved_m
, **
mp
;

792 
ødix_node
 *
du≥dkey
, *
ßved_â
, *
t›
;

793 
ˇddr_t
 
v
, 
√tmask
;

794 
b
, 
hód_off
, 
vÀn
;

796 
v
 = 
v_¨g
;

797 
√tmask
 = 
√tmask_¨g
;

798 
x
 = 
hód
->
∫h_åìt›
;

799 
â
 = 
	`∫_£¨ch
(
v
, 
x
);

800 
hód_off
 = 
x
->
∫_off£t
;

801 
vÀn
 = 
	`LEN
(
v
);

802 
ßved_â
 = 
â
;

803 
t›
 = 
x
;

804 i‡(
â
 == 0 ||

805 
	`bcmp
(
v
 + 
hód_off
, 
â
->
∫_key
 + hód_off, 
vÀn
 - head_off))

810 i‡(
√tmask
) {

811 i‡((
x
 = 
	`∫_addmask
(
√tmask
, 1, 
hód_off
)) == 0)

813 
√tmask
 = 
x
->
∫_key
;

814 
â
->
∫_mask
 !
√tmask
)

815 i‡((
â
 =Åt->
∫_du≥dkey
) == 0)

818 i‡(
â
->
∫_mask
 =0 || (
ßved_m
 = 
m
 =Åt->
∫_mkli°
) == 0)

819 
⁄1
;

820 i‡(
â
->
∫_Êags
 & 
RNF_NORMAL
) {

821 i‡(
m
->
rm_Àaf
 !
â
 || m->
rm_ªfs
 > 0) {

822 
	`log
(
LOG_ERR
, "rn_delete: inconsistentánnotation\n");

826 i‡(
m
->
rm_mask
 !
â
->
∫_mask
) {

827 
	`log
(
LOG_ERR
, "rn_delete: inconsistentánnotation\n");

828 
⁄1
;

830 i‡(--
m
->
rm_ªfs
 >= 0)

831 
⁄1
;

833 
b
 = -1 - 
â
->
∫_bô
;

834 
t
 = 
ßved_â
->
∫_∑ª¡
;

835 i‡(
b
 > 
t
->
∫_bô
)

836 
⁄1
;

838 
x
 = 
t
;

839 
t
 =Å->
∫_∑ª¡
;

840 } 
b
 <
t
->
∫_bô
 && 
x
 !
t›
);

841 
mp
 = &
x
->
∫_mkli°
; (
m
 = *mp); m∞&m->
rm_mkli°
)

842 i‡(
m
 =
ßved_m
) {

843 *
mp
 = 
m
->
rm_mkli°
;

844 
	`MKFªe
(
m
);

847 i‡(
m
 == 0) {

848 
	`log
(
LOG_ERR
, "rn_delete: couldn't find ouránnotation\n");

849 i‡(
â
->
∫_Êags
 & 
RNF_NORMAL
)

852 
⁄1
:

856 i‡(
â
->
∫_Êags
 & 
RNF_ROOT
)

858 #ifde‡
RN_DEBUG


860 
t
 = 
∫_˛i°
;Å &&Å->
∫_ybro
 !
â
;Å =Å->rn_ybro) {}

861 i‡(
t
Ët->
∫_ybro
 = 
â
->rn_ybro;

863 
t
 = 
â
->
∫_∑ª¡
;

864 
du≥dkey
 = 
ßved_â
->
∫_du≥dkey
;

865 i‡(
du≥dkey
) {

870 i‡(
â
 =
ßved_â
) {

872 
x
 = 
du≥dkey
; x->
∫_∑ª¡
 = 
t
;

873 i‡(
t
->
∫_À·
 =
â
)

874 
t
->
∫_À·
 = 
x
;

876 
t
->
∫_right
 = 
x
;

879 
x
 = 
p
 = 
ßved_â
;Ö &&Ö->
∫_du≥dkey
 !
â
;)

880 
p
 =Ö->
∫_du≥dkey
;

881 i‡(
p
) {

882 
p
->
∫_du≥dkey
 = 
â
->rn_dupedkey;

883 i‡(
â
->
∫_du≥dkey
)

884 
â
->
∫_du≥dkey
->
∫_∑ª¡
 = 
p
;

886 } 
	`log
(
LOG_ERR
, "rn_delete: couldn't find us\n");

888 
t
 = 
â
 + 1;

889 i‡(
t
->
∫_Êags
 & 
RNF_ACTIVE
) {

890 #i‚de‡
RN_DEBUG


891 *++
x
 = *
t
;

892 
p
 = 
t
->
∫_∑ª¡
;

894 
b
 = 
t
->
∫_öfo
;

895 *++
x
 = *
t
;

896 
t
->
∫_öfo
 = 
b
;

897 
p
 = 
t
->
∫_∑ª¡
;

899 i‡(
p
->
∫_À·
 =
t
)

900 
p
->
∫_À·
 = 
x
;

902 
p
->
∫_right
 = 
x
;

903 
x
->
∫_À·
->
∫_∑ª¡
 = x;

904 
x
->
∫_right
->
∫_∑ª¡
 = x;

906 
out
;

908 i‡(
t
->
∫_À·
 =
â
)

909 
x
 = 
t
->
∫_right
;

911 
x
 = 
t
->
∫_À·
;

912 
p
 = 
t
->
∫_∑ª¡
;

913 i‡(
p
->
∫_right
 =
t
)

914 
p
->
∫_right
 = 
x
;

916 
p
->
∫_À·
 = 
x
;

917 
x
->
∫_∑ª¡
 = 
p
;

921 i‡(
t
->
∫_mkli°
) {

922 i‡(
x
->
∫_bô
 >= 0) {

923 
mp
 = &
x
->
∫_mkli°
; (
m
 = *mp);)

924 
mp
 = &
m
->
rm_mkli°
;

925 *
mp
 = 
t
->
∫_mkli°
;

930 
m
 = 
t
->
∫_mkli°
; m && 
x
; x = x->
∫_du≥dkey
)

931 i‡(
m
 =
x
->
∫_mkli°
) {

932 
ødix_mask
 *
mm
 = 
m
->
rm_mkli°
;

933 
x
->
∫_mkli°
 = 0;

934 i‡(--(
m
->
rm_ªfs
) < 0)

935 
	`MKFªe
(
m
);

936 
m
 = 
mm
;

938 i‡(
m
)

939 
	`log
(
LOG_ERR
,

941 
m
, 
x
);

947 
x
 = 
â
 + 1;

948 i‡(
t
 !
x
) {

949 #i‚de‡
RN_DEBUG


950 *
t
 = *
x
;

952 
b
 = 
t
->
∫_öfo
;

953 *
t
 = *
x
;

954 
t
->
∫_öfo
 = 
b
;

956 
t
->
∫_À·
->
∫_∑ª¡
 =Å;

957 
t
->
∫_right
->
∫_∑ª¡
 =Å;

958 
p
 = 
x
->
∫_∑ª¡
;

959 i‡(
p
->
∫_À·
 =
x
)

960 
p
->
∫_À·
 = 
t
;

962 
p
->
∫_right
 = 
t
;

964 
out
:

965 
â
->
∫_Êags
 &~
RNF_ACTIVE
;

966 
â
[1].
∫_Êags
 &~
RNF_ACTIVE
;

967  (
â
);

968 
	}
}

975 
	$∫_wÆkåì_‰om
(
h
, 
a
, 
m
, 
f
, 
w
)

976 
ødix_node_hód
 *
h
;

977 *
a
, *
m
;

978 
wÆkåì_f_t
 *
f
;

979 *
w
;

981 
îr‹
;

982 
ødix_node
 *
ba£
, *
√xt
;

983 
u_ch¨
 *
xa
 = (u_ch¨ *)
a
;

984 
u_ch¨
 *
xm
 = (u_ch¨ *)
m
;

985 
ødix_node
 *
∫
, *
œ°
 = 0 ;

986 
°›pög
 = 0;

987 
œ°b
;

994 
∫
 = 
h
->
∫h_åìt›
;Ñn->
∫_bô
 >= 0; ) {

995 
œ°
 = 
∫
;

998 i‡(!(
∫
->
∫_bmask
 & 
xm
[∫->
∫_off£t
])) {

1001 i‡(
∫
->
∫_bmask
 & 
xa
[∫->
∫_off£t
]) {

1002 
∫
 =Ñn->
∫_right
;

1004 
∫
 =Ñn->
∫_À·
;

1015 
∫
 = 
œ°
;

1016 
œ°b
 = 
∫
->
∫_bô
;

1025 
∫
->
∫_bô
 >= 0)

1026 
∫
 =Ñn->
∫_À·
;

1028 !
°›pög
) {

1030 
ba£
 = 
∫
;

1032 
∫
->
∫_∑ª¡
->
∫_right
 ==Ñn

1033 && !(
∫
->
∫_Êags
 & 
RNF_ROOT
)) {

1034 
∫
 =Ñn->
∫_∑ª¡
;

1037 i‡(
∫
->
∫_bô
 <
œ°b
) {

1038 
°›pög
 = 1;

1055 i‡(
∫
->
∫_∑ª¡
->
∫_Êags
 & 
RNF_ROOT
)

1056 
°›pög
 = 1;

1059 
∫
 =Ñn->
∫_∑ª¡
->
∫_right
;Ñn->
∫_bô
 >= 0;)

1060 
∫
 =Ñn->
∫_À·
;

1061 
√xt
 = 
∫
;

1063 (
∫
 = 
ba£
) != 0) {

1064 
ba£
 = 
∫
->
∫_du≥dkey
;

1066 i‡(!(
∫
->
∫_Êags
 & 
RNF_ROOT
)

1067 && (
îr‹
 = (*
f
)(
∫
, 
w
)))

1068  (
îr‹
);

1070 
∫
 = 
√xt
;

1072 i‡(
∫
->
∫_Êags
 & 
RNF_ROOT
) {

1074 
°›pög
 = 1;

1079 
	}
}

1082 
	$∫_wÆkåì
(
h
, 
f
, 
w
)

1083 
ødix_node_hód
 *
h
;

1084 
wÆkåì_f_t
 *
f
;

1085 *
w
;

1087 
îr‹
;

1088 
ødix_node
 *
ba£
, *
√xt
;

1089 
ødix_node
 *
∫
 = 
h
->
∫h_åìt›
;

1097 
∫
->
∫_bô
 >= 0)

1098 
∫
 =Ñn->
∫_À·
;

1100 
ba£
 = 
∫
;

1102 
∫
->
∫_∑ª¡
->
∫_right
 ==Ñn

1103 && (
∫
->
∫_Êags
 & 
RNF_ROOT
) == 0)

1104 
∫
 =Ñn->
∫_∑ª¡
;

1106 
∫
 =Ñn->
∫_∑ª¡
->
∫_right
;Ñn->
∫_bô
 >= 0;)

1107 
∫
 =Ñn->
∫_À·
;

1108 
√xt
 = 
∫
;

1110 (
∫
 = 
ba£
)) {

1111 
ba£
 = 
∫
->
∫_du≥dkey
;

1112 i‡(!(
∫
->
∫_Êags
 & 
RNF_ROOT
)

1113 && (
îr‹
 = (*
f
)(
∫
, 
w
)))

1114  (
îr‹
);

1116 
∫
 = 
√xt
;

1117 i‡(
∫
->
∫_Êags
 & 
RNF_ROOT
)

1121 
	}
}

1132 
	$∫_öôhód
(
hód
, 
off
)

1133 **
hód
;

1134 
off
;

1136 
ødix_node_hód
 *
∫h
;

1137 
ødix_node
 *
t
, *
â
, *
ât
;

1138 i‡(*
hód
)

1140 
	`R_ZÆloc
(
∫h
, 
ødix_node_hód
 *,  (*rnh));

1141 i‡(
∫h
 == 0)

1143 #ifde‡
_KERNEL


1144 
	`RADIX_NODE_HEAD_LOCK_INIT
(
∫h
);

1146 *
hód
 = 
∫h
;

1147 
t
 = 
	`∫_√w∑ú
(
∫_zîos
, 
off
, 
∫h
->
∫h_nodes
);

1148 
ât
 = 
∫h
->
∫h_nodes
 + 2;

1149 
t
->
∫_right
 = 
ât
;

1150 
t
->
∫_∑ª¡
 =Å;

1151 
â
 = 
t
->
∫_À·
;

1152 
â
->
∫_Êags
 = 
t
->∫_Êag†
RNF_ROOT
 | 
RNF_ACTIVE
;

1153 
â
->
∫_bô
 = -1 - 
off
;

1154 *
ât
 = *
â
;

1155 
ât
->
∫_key
 = 
∫_⁄es
;

1156 
∫h
->
∫h_addaddr
 = 
∫_addrouã
;

1157 
∫h
->
∫h_dñaddr
 = 
∫_dñëe
;

1158 
∫h
->
∫h_m©chaddr
 = 
∫_m©ch
;

1159 
∫h
->
∫h_lookup
 = 
∫_lookup
;

1160 
∫h
->
∫h_wÆkåì
 = 
∫_wÆkåì
;

1161 
∫h
->
∫h_wÆkåì_‰om
 = 
∫_wÆkåì_‰om
;

1162 
∫h
->
∫h_åìt›
 = 
t
;

1164 
	}
}

1167 
	$∫_dëachhód
(**
hód
)

1169 
ødix_node_hód
 *
∫h
;

1171 
	`KASSERT
((
hód
 !
NULL
 && *head != NULL),

1172 ("%s: hódáÃódy fªed", 
__func__
));

1173 
∫h
 = *
hód
;

1176 
	`Fªe
(
∫h
);

1178 *
hód
 = 
NULL
;

1180 
	}
}

1183 
	$∫_öô
(
maxk
)

1185 *
˝
, *
˝lim
;

1187 
max_keyÀn
 = 
maxk
;

1188 i‡(
max_keyÀn
 == 0) {

1189 
	`log
(
LOG_ERR
,

1193 
	`R_MÆloc
(
∫_zîos
, *, 3 * 
max_keyÀn
);

1194 i‡(
∫_zîos
 =
NULL
)

1195 
	`∑nic
("rn_init");

1196 
	`bzîo
(
∫_zîos
, 3 * 
max_keyÀn
);

1197 
∫_⁄es
 = 
˝
 = 
∫_zîos
 + 
max_keyÀn
;

1198 
addmask_key
 = 
˝lim
 = 
∫_⁄es
 + 
max_keyÀn
;

1199 
˝
 < 
˝lim
)

1200 *
˝
++ = -1;

1201 i‡(
	`∫_öôhód
((**)(*)&
mask_∫hód
, 0) == 0)

1202 
	`∑nic
("rn_init 2");

1203 
	}
}

	@kipfw-mod/winmissing.h

32 #i‚de‡
_WINMISSING_H_


33 
	#_WINMISSING_H_


	)

35 
	~<¡ifs.h
>

36 
	~<¡ddk.h
>

37 
	~<ba£tsd.h
>

38 
	~<wödef.h
>

39 
	~<°dio.h
>

40 
	~<ndis.h
>

42 
UCHAR
 
	tu_ch¨
;

43 
UCHAR
 
	tu_öt8_t
;

44 
UCHAR
 
	tuöt8_t
;

45 
USHORT
 
	tu_sh‹t
;

46 
USHORT
 
	tu_öt16_t
;

47 
USHORT
 
	tuöt16_t
;

48 
USHORT
 
	tn_sh‹t
;

49 
UINT
 
	tu_öt
;

50 
INT32
 
	töt32_t
;

51 
UINT32
 
	tu_öt32_t
;

52 
UINT32
 
	tuöt32_t
;

53 
ULONG
 
	tu_l⁄g
;

54 
ULONG
 
	tn_l⁄g
;

55 
UINT64
 
	tuöt64_t
;

56 
UINT64
 
	tu_öt64_t
;

57 
INT64
 
	töt64_t
;

59 
UINT32
 
	tö_addr_t
;

60 
UCHAR
 
	tß_Ámûy_t
;

61 
USHORT
 
	tö_p‹t_t
;

62 
UINT32
 
	t__gid_t
;

63 
UINT32
 
	tgid_t
;

64 
UINT32
 
	t__uid_t
;

65 
UINT32
 
	tuid_t
;

66 
ULONG
 
	tn_time
;

67 * 
	tˇddr_t
;

70 
uöt32_t
 
	t__be32
;

71 
uöt16_t
 
	t__be16
;

78 
	#¥ötf
 
DbgPröt


	)

79 
	#log
(
Àv
, ...Ë
	`DbgPröt
(
__VA_ARGS__
)

	)

80 c⁄° * 
ãxify_cmd
(
i
);

81 c⁄° * 
ãxify_¥Ÿo
(
p
);

84 
	#¢¥ötf
 
_¢¥ötf


	)

85 
	#time•ec
 
timevÆ


	)

86 
	stimevÆ
 {

87 
	mtv_£c
;

88 
	mtv_u£c
;

91 
	sö_addr
 {

92 
ö_addr_t
 
	ms_addr
;

95 
	ssockaddr_ö
 {

96 
uöt8_t
 
	msö_Àn
;

97 
ß_Ámûy_t
 
	msö_Ámûy
;

98 
ö_p‹t_t
 
	msö_p‹t
;

99 
ö_addr
 
	msö_addr
;

100 
	msö_zîo
[8];

104 
	#IFNAMSIZ
 16

	)

105 
	#IF_NAMESIZE
 16

	)

107 
	#ETHER_ADDR_LEN
 6

	)

112 
	sö6_addr
 {

114 
uöt8_t
 
	m__u6_addr8
[16];

115 
uöt16_t
 
	m__u6_addr16
[8];

116 
uöt32_t
 
	m__u6_addr32
[4];

117 } 
	m__u6_addr
;

120 
	#ht⁄s
(
x
Ë
	`RéUsh‹tByãSw≠
(x)

	)

121 
	#¡ohs
(
x
Ë
	`RéUsh‹tByãSw≠
(x)

	)

122 
	#ht⁄l
(
x
Ë
	`RéUl⁄gByãSw≠
(x)

	)

123 
	#¡ohl
(
x
Ë
	`RéUl⁄gByãSw≠
(x)

	)

125 
	#ENOSPC
 28

	)

126 
	#EOPNOTSUPP
 45

	)

127 
	#EACCES
 13

	)

128 
	#ENOENT
 2

	)

129 
	#EINVAL
 22

	)

130 
	#EPROTONOSUPPORT
 43

	)

131 
	#ENOMEM
 12

	)

132 
	#EEXIST
 17

	)

133 
	#ESRCH
 3

	)

134 
	#ENOBUFS
 55

	)

135 
	#EBUSY
 16

	)

138 
	#off£tof
(
TYPE
, 
MEMBER
Ë((
size_t
Ë&((TYPE *)0)->MEMBER)

	)

139 
	#__∑cked


	)

140 
	#__Æig√d
(
x
);

	)

141 
	#__u£r


	)

142 
	#__öô


	)

143 
	#__exô


	)

144 
	#__func__
 
__FUNCTION__


	)

145 
	#ölöe
 
__ölöe


	)

147 
	ssockaddr_ö6
 {

148 
	mdummy
;

152 
	#DEFINE_SPINLOCK
(
x
Ë
NDIS_SPIN_LOCK
 
	)
x

153 
	#mtx_öô
(
m
,
a
,
b
,
c
Ë
	`NdisAŒoˇãSpöLock
(m)

	)

154 
	#mtx_lock
(
_l
Ë
	`NdisAcquúeSpöLock
(_l)

	)

155 
	#mtx_u∆ock
(
_l
Ë
	`NdisRñó£SpöLock
(_l)

	)

156 
	#mtx_de°roy
(
m
Ë
	`NdisFªeSpöLock
(m)

	)

157 
	#mtx_as£π
(
a
, 
b
)

	)

159 
	#rw_æock
(
_l
Ë
	`NdisAcquúeSpöLock
(_l)

	)

160 
	#rw_ru∆ock
(
_l
Ë
	`NdisRñó£SpöLock
(_l)

	)

161 
	#rw_as£π
(
a
, 
b
)

	)

162 
	#rw_wlock
(
_l
Ë
	`NdisAcquúeSpöLock
(_l)

	)

163 
	#rw_wu∆ock
(
_l
Ë
	`NdisRñó£SpöLock
(_l)

	)

164 
	#rw_de°roy
(
_l
Ë
	`NdisFªeSpöLock
(_l)

	)

165 
	#rw_öô
(
_l
, 
msg
Ë
	`NdisAŒoˇãSpöLock
(_l)

	)

166 
	#rw_öô_Êags
(
_l
, 
s
, 
v
Ë
	`NdisAŒoˇãSpöLock
(_l)

	)

168 
	#rwlock_t
 
NDIS_SPIN_LOCK


	)

169 
	#•ölock_t
 
NDIS_SPIN_LOCK


	)

171 
	#s6_addr
 
__u6_addr
.
__u6_addr8


	)

174 
	sicmphdr
 {

175 
u_ch¨
 
	micmp_ty≥
;

176 
u_ch¨
 
	micmp_code
;

177 
u_sh‹t
 
	micmp_cksum
;

180 
	#ICMP_ECHO
 8

	)

182 
	#IPOPT_OPTVAL
 0

	)

183 
	#IPOPT_OLEN
 1

	)

184 
	#IPOPT_EOL
 0

	)

185 
	#IPOPT_NOP
 1

	)

186 
	#IPOPT_LSRR
 131

	)

187 
	#IPOPT_SSRR
 137

	)

188 
	#IPOPT_RR
 7

	)

189 
	#IPOPT_TS
 68

	)

191 
	#IPPROTO_ICMP
 1

	)

192 
	#IPPROTO_TCP
 6

	)

193 
	#IPPROTO_UDP
 17

	)

194 
	#IPPROTO_ICMPV6
 58

	)

195 
	#IPPROTO_SCTP
 132

	)

196 
	#IPPROTO_HOPOPTS
 0

	)

197 
	#IPPROTO_ROUTING
 43

	)

198 
	#IPPROTO_FRAGMENT
 44

	)

199 
	#IPPROTO_DSTOPTS
 60

	)

200 
	#IPPROTO_AH
 51

	)

201 
	#IPPROTO_ESP
 50

	)

202 
	#IPPROTO_NONE
 59

	)

203 
	#IPPROTO_PIM
 103

	)

205 
	#IPPROTO_IPV6
 41

	)

206 
	#IPPROTO_IPV4
 4

	)

209 
	#INADDR_ANY
 (
uöt32_t
)0x00000000

	)

211 
	#AF_INET
 2

	)

212 
	#AF_LINK
 18

	)

214 
	#IN_CLASSD
(
i
Ë(((
uöt32_t
)(iË& 0xf0000000Ë=0xe0000000)

	)

215 
	#IN_MULTICAST
(
i
Ë
	`IN_CLASSD
(i)

	)

217 
	#DROP
 0

	)

218 
	#PASS
 1

	)

219 
	#DUMMYNET
 2

	)

220 
	#INCOMING
 0

	)

221 
	#OUTGOING
 1

	)

223 
size_t
 
°æ˝y
(*
d°
, c⁄° *
§c
, size_à
siz
);

224 
do_gëtimeofday
(
timevÆ
 *
tv
);

225 
ffs
(
bôs
);

226 
time_u±ime_w32
();

	@kipfw/bsd_compat.c

32 
	~<sys/cdefs.h
>

33 
	~<asm/div64.h
>

34 
	~<löux/øndom.h
>

35 
	~<√töë/ù_fw.h
>

36 
	~<√töë/ù_dummy√t.h
>

37 
	~<sys/mÆloc.h
>

43 
gëtimeofday
(
timevÆ
 *, 
timez⁄e
 *);

45 
	gticks
;

46 
	ghz
 = 1000;

47 
	gtick
 = 1000;

48 
	gboŸvîbo£
 = 0;

49 
timevÆ
 
	gboŸtime
;

51 
	gù_de·é
 = 64;

52 
	gmax_lökhdr
 = 16;

53 
	gfw_⁄e_∑ss
 = 1;

54 
u_l⁄g
 
	gö_iÁddrhmask
;

55 
ö_iÁddrhashhód
 *
	gö_iÁddrhashtbl
;

57 
u_öt
 
	gπ_numfibs
 = 
RT_NUMFIBS
;

64 
	gpfû_hód
;

65 (
	tpfû_hook_t
)

66 (*, 
	tmbuf
 **, 
	ti‚ë
 *, , 
	töpcb
 *);

68 
pfû_hód
 *

69 
	$pfû_hód_gë
(
¥Ÿo
, 
u_l⁄g
 
Êags
)

71 
dummy
;

72  (
pfû_hód
 *)&
dummy
;

73 
	}
}

76 
	$pfû_add_hook
(
pfû_hook_t
 *
func
, *
¨g
, 
dú
, 
pfû_hód
 *
h
)

79 
	}
}

82 
	$pfû_ªmove_hook
(
pfû_hook_t
 *
func
, *
¨g
, 
dú
, 
pfû_hód
 *
h
)

85 
	}
}

89 
	$¥iv_check
(
thªad
 *
td
, 
¥iv
)

92 
	}
}

95 
	$£cuªÀvñ_ge
(
u¸ed
 *
¸
, 
Àvñ
)

98 
	}
}

101 
	$sys˘l_h™dÀ_öt
(
SYSCTL_HANDLER_ARGS
)

104 
	}
}

107 
	$sys˘l_h™dÀ_l⁄g
(
SYSCTL_HANDLER_ARGS
)

110 
	}
}

113 
	$ëhî_demux
(
i‚ë
 *
iÂ
, 
mbuf
 *
m
)

116 
	}
}

119 
	$ëhî_ouçut_‰ame
(
i‚ë
 *
iÂ
, 
mbuf
 *
m
)

122 
	}
}

125 
	$ö_πÆloc_ign
(
rouã
 *
ro
, 
u_l⁄g
 
ignÊags
, 
u_öt
 
fibnum
)

128 
	}
}

131 
	$icmp_îr‹
(
mbuf
 *
n
, 
ty≥
, 
code
, 
uöt32_t
 
de°
, 
mtu
)

134 
	}
}

136 
u_sh‹t


137 
	$ö_cksum_skù
(
mbuf
 *
m
, 
Àn
, 
skù
)

140 
	}
}

142 
u_sh‹t


143 
	$ö_cksum_hdr
(
ù
 *ip)

146 
	}
}

151 
mbuf
 *

152 
	$ù_ªass
(
mbuf
 *
˛⁄e
)

154  
˛⁄e
;

155 
	}
}

156 #ifde‡
INP_LOCK_ASSERT


157 #unde‡
INP_LOCK_ASSERT


158 
	#INP_LOCK_ASSERT
(
a
)

	)

162 
	~<√töë/ù_fw.h
>

163 #ifde‡
__löux__


165 
	$¸ed_check
(*
_ö¢
, 
¥Ÿo
, 
i‚ë
 *
oif
,

166 
ö_addr
 
d°_ù
, 
u_öt16_t
 
d°_p‹t
, ö_add∏
§c_ù
,

167 
u_öt16_t
 
§c_p‹t
, 
bsd_u¸ed
 *
u
, *
ugid_lookuµ
,

168 
sk_buff
 *
skb
)

170 
m©ch
 = 0;

171 
ùfw_ö¢_u32
 *
ö¢
 = (ùfw_ö¢_u32 *)
_ö¢
;

173 i‡(*
ugid_lookuµ
 == 0) {

177 *
ugid_lookuµ
 = 
	`löux_lookup
(
¥Ÿo
,

178 
§c_ù
.
s_addr
, 
	`ht⁄s
(
§c_p‹t
),

179 
d°_ù
.
s_addr
, 
	`ht⁄s
(
d°_p‹t
),

180 
skb
, 
oif
 ? 1 : 0, 
u
);

182 i‡(*
ugid_lookuµ
 < 0)

185 i‡(
ö¢
->
o
.
›code
 =
O_UID
)

186 
m©ch
 = (
u
->
uid
 =(
uid_t
)
ö¢
->
d
[0]);

187 i‡(
ö¢
->
o
.
›code
 =
O_JAIL
)

188 
m©ch
 = (
u
->
xid
 =(
uid_t
)
ö¢
->
d
[0]);

189 i‡(
ö¢
->
o
.
›code
 =
O_GID
)

190 
m©ch
 = (
u
->
gid
 =(
uid_t
)
ö¢
->
d
[0]);

191  
m©ch
;

192 
	}
}

196 
	$jaûed
(
u¸ed
 *
¸ed
)

199 
	}
}

208 
	$ö_loˇœddr
(
ö_addr
 
ö
)

211 
	}
}

214 
	$so›tc›yout
(
sock›t
 *
s›t
, c⁄° *
buf
, 
size_t
 
Àn
)

216 
size_t
 
vÆsize
 = 
s›t
->
s›t_vÆsize
;

218 i‡(
Àn
 < 
vÆsize
)

219 
s›t
->
s›t_vÆsize
 = 
vÆsize
 = 
Àn
;

221 
	`bc›y
(
buf
, 
s›t
->
s›t_vÆ
, 
vÆsize
);

223 
	}
}

229 
	$so›tc›yö
(
sock›t
 *
s›t
, *
buf
, 
size_t
 
Àn
, size_à
möÀn
)

231 
size_t
 
vÆsize
 = 
s›t
->
s›t_vÆsize
;

233 i‡(
vÆsize
 < 
möÀn
)

234  
EINVAL
;

235 i‡(
vÆsize
 > 
Àn
)

236 
s›t
->
s›t_vÆsize
 = 
vÆsize
 = 
Àn
;

238 
	`bc›y
(
s›t
->
s›t_vÆ
, 
buf
, 
vÆsize
);

240 
	}
}

243 
	$gëmi¸ou±ime
(
timevÆ
 *
tv
)

245 
	`do_gëtimeofday
(
tv
);

246 
	}
}

249 
	~<¨∑/öë.h
>

252 
	$öë_¡ﬂ_r
(
ö_addr
 
öa
, *
buf
)

254 #ifde‡
_WIN32


256 *
u˝
 = (*)&
öa
;

258 
	`•rötf
(
buf
, "%d.%d.%d.%d",

259 
u˝
[0] & 0xff,

260 
u˝
[1] & 0xff,

261 
u˝
[2] & 0xff,

262 
u˝
[3] & 0xff);

264  
buf
;

265 
	}
}

268 
	$öë_¡ﬂ
(
ö_addr
 
öa
)

270 
buf
[16];

271  
	`öë_¡ﬂ_r
(
öa
, 
buf
);

272 
	}
}

275 
	$øndom
()

277 #ifde‡
_WIN32


278 
£ed
;

279 i‡(
£ed
 == 0) {

280 
LARGE_INTEGER
 
tm
;

281 
	`KeQuîySy°emTime
(&
tm
);

282 
£ed
 = 
tm
.
LowP¨t
;

284  
	`RéR™domEx
(&
£ed
) & 0x7fffffff;

286 
r
;

287 
	`gë_øndom_byãs
(&
r
, (r));

288  
r
 & 0x7fffffff;

290 
	}
}

298 
öt64_t


299 
	$div64
(
öt64_t
 
a
, i¡64_à
b
)

301 #ifde‡
_WIN32


302 
a1
 = 
a
, 
b1
 = 
b
;

303  
a1
/
b1
;

305 
uöt64_t
 
ua
, 
ub
;

306 
sign
 = ((
a
>0)?1:-1Ë* ((
b
>0)?1:-1);

308 
ua
 = ((
a
>0)?a:-a);

309 
ub
 = ((
b
>0)?b:-b);

310 
	`do_div
(
ua
, 
ub
);

311  
sign
*
ua
;

313 
	}
}

315 #ifde‡
__MIPSEL__


316 
size_t


317 
	$°æ˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
siz
)

319 *
d
 = 
d°
;

320 c⁄° *
s
 = 
§c
;

321 
size_t
 
n
 = 
siz
;

324 i‡(
n
 != 0 && --n != 0) {

326 i‡((*
d
++ = *
s
++) == 0)

328 } --
n
 != 0);

332 i‡(
n
 == 0) {

333 i‡(
siz
 != 0)

334 *
d
 = '\0';

335 *
s
++)

339 (
s
 - 
§c
 - 1);

340 
	}
}

347 
	$‚m©ch
(c⁄° *
∑âîn
, c⁄° *
°rög
, 
Êags
)

349 
s
;

351 i‡(!
°rög
 || !
∑âîn
)

353  (
s
 = *
°rög
++) ) {

354 
p
 = *
∑âîn
++;

355 i‡(
p
 == '\0')

357 i‡(
p
 == '*')

359 i‡(
p
 ='.' ||Ö =
s
)

364 i‡(*
∑âîn
 == '\0' || *pattern == '*')

367 
	}
}

375 #ifde‡
löux


376 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,31)

377 
ölöe
 
	$skb_d°_£t
(
sk_buff
 *
skb
, 
d°_íåy
 *
d°
)

379 
skb
->
d°
 = dst;

380 
	}
}

382 
ölöe
 
d°_íåy
 *
	$skb_d°
(c⁄° 
sk_buff
 *
skb
)

384  (
d°_íåy
 *)
skb
->
d°
;

385 
	}
}

393 #ifde‡
EMULATE_SYSCTL


394 
sys˘…abÀ
 
	gGST
;

397 
	$kesys˘l_emu_gë
(
sock›t
* 
s›t
)

399 
dn_id
* 
oid
 = 
s›t
->
s›t_vÆ
;

400 
sys˘lhód
* 
íåy
;

401 
sizíìded
 = (
dn_id
Ë+ 
GST
.
tŸÆsize
 +

402 (
sys˘lhód
);

403 * 
p°rög
;

404 * 
pd©a
;

405 
i
;

407 i‡(
s›t
->
s›t_vÆsize
 < 
sizíìded
) {

410 
oid
->
id
 = 
sizíìded
;

411 
s›t
->
s›t_vÆsize
 = (
dn_id
);

415 
íåy
 = (
sys˘lhód
*)(
oid
+1);

416  
i
=0; i<
GST
.
cou¡
; i++) {

417 
íåy
->
blockÀn
 = 
GST
.íåy[
i
].
hód
.blocklen;

418 
íåy
->
«mñí
 = 
GST
.íåy[
i
].
hód
.namelen;

419 
íåy
->
Êags
 = 
GST
.íåy[
i
].
hód
.flags;

420 
íåy
->
d©Æí
 = 
GST
.íåy[
i
].
hód
.datalen;

421 
pd©a
 = (*)(
íåy
+1);

422 
p°rög
 = 
pd©a
+
GST
.
íåy
[
i
].
hód
.
d©Æí
;

423 
	`bc›y
(
GST
.
íåy
[
i
].
d©a
, 
pd©a
, GST.íåy[i].
hód
.
d©Æí
);

424 
	`bc›y
(
GST
.
íåy
[
i
].
«me
, 
p°rög
, GST.íåy[i].
hód
.
«mñí
);

425 
íåy
 = (
sys˘lhód
*)

426 ((*)(
íåy
Ë+ 
GST
.íåy[
i
].
hód
.
blockÀn
);

428 
s›t
->
s›t_vÆsize
 = 
sizíìded
;

430 
	}
}

433 
	$kesys˘l_emu_£t
(* 
p
, 
l
)

435 
sys˘lhód
* 
íåy
;

436 * 
pd©a
;

437 * 
p°rög
;

438 
i
 = 0;

440 
íåy
 = (
sys˘lhód
*)(((
dn_id
*)
p
)+1);

441 
pd©a
 = (*)(
íåy
+1);

442 
p°rög
 = 
pd©a
 + 
íåy
->
d©Æí
;

444 
i
=0; i<
GST
.
cou¡
; i++) {

445 i‡(
	`°rcmp
(
GST
.
íåy
[
i
].
«me
, 
p°rög
) != 0)

447 
	`¥ötf
("%s: m©ch found! %s\n",
__FUNCTION__
,
p°rög
);

450 i‡(
íåy
->
d©Æí
 !
GST
.íåy[
i
].
hód
.datalen) {

451 
	`¥ötf
("%s:Üen mismatch, user %d vs kernel %d\n",

452 
__FUNCTION__
, 
íåy
->
d©Æí
,

453 
GST
.
íåy
[
i
].
hód
.
d©Æí
);

458 if–(
GST
.
íåy
[
i
].
hód
.
Êags
 & 3Ë=
CTLFLAG_RD
) {

459 
	`¥ötf
("%s:ÅheÉntry %s isÑead only\n",

460 
__FUNCTION__
,
GST
.
íåy
[
i
].
«me
);

463 
	`bc›y
(
pd©a
, 
GST
.
íåy
[
i
].
d©a
, GST.íåy[i].
hód
.
d©Æí
);

466 
	`¥ötf
("%s: m©chÇŸ found\n",
__FUNCTION__
);

468 
	}
}

472 
	$undîsc‹ë›oöt
(* 
s
)

474 ; *
s
 && *s != '.'; s++)

475 i‡(*
s
 == '_')

476 *
s
 = '.';

477 
	}
}

480 
	$f‹m©«mes
()

482 
i
;

483 
size
=0;

484 * 
«me
;

486 
i
=0; i<
GST
.
cou¡
; i++)

487 
size
 +
GST
.
íåy
[
i
].
hód
.
«mñí
;

488 
GST
.
«mebuf„r
 = 
	`mÆloc
(
size
, 0, 0);

489 i‡(
GST
.
«mebuf„r
 =
NULL
)

491 
«me
 = 
GST
.
«mebuf„r
;

492 
i
=0; i<
GST
.
cou¡
; i++) {

493 
	`bc›y
(
GST
.
íåy
[
i
].
«me
,Çame, GST.íåy[i].
hód
.
«mñí
);

494 
	`undîsc‹ë›oöt
(
«me
);

495 
GST
.
íåy
[
i
].
«me
 =Çame;

496 
«me
 +
GST
.
íåy
[
i
].
hód
.
«mñí
;

499 
	}
}

502 
	$dumpGST
()

504 
i
;

506 
i
=0; i<
GST
.
cou¡
; i++) {

507 
	`¥ötf
("SYSCTL:É¡ry %i\n", 
i
);

508 
	`¥ötf
("«mê%s\n", 
GST
.
íåy
[
i
].
«me
);

509 
	`¥ötf
("«mñí %i\n", 
GST
.
íåy
[
i
].
hód
.
«mñí
);

510 
	`¥ötf
("type %iáccess %i\n",

511 
GST
.
íåy
[
i
].
hód
.
Êags
 >> 2,

512 
GST
.
íåy
[
i
].
hód
.
Êags
 & 0x00000003);

513 
	`¥ötf
("d©®%i\n", *(*)(
GST
.
íåy
[
i
].
d©a
));

514 
	`¥ötf
("d©Æí %i\n", 
GST
.
íåy
[
i
].
hód
.
d©Æí
);

515 
	`¥ötf
("blockÀ¿%i\n", 
GST
.
íåy
[
i
].
hód
.
blockÀn
);

517 
	}
}

519 
sys˘l_addgroup_f1
();

520 
sys˘l_addgroup_f2
();

521 
sys˘l_addgroup_f3
();

522 
sys˘l_addgroup_f4
();

525 
	$keöô_GST
()

527 
ªt
;

529 
	`sys˘l_addgroup_f1
();

530 
	`sys˘l_addgroup_f2
();

531 
	`sys˘l_addgroup_f3
();

532 
	`sys˘l_addgroup_f4
();

533 
ªt
 = 
	`f‹m©«mes
();

534 i‡(
ªt
 != 0)

535 
	`¥ötf
("conversion ofÇames failed for someÑeason\n");

537 
	`¥ötf
("*** Global Sysctl TableÉntries = %i,Åotal size = %i ***\n",

538 
GST
.
cou¡
, GST.
tŸÆsize
);

539 
	}
}

542 
	$kìxô_GST
()

544 i‡(
GST
.
«mebuf„r
 !
NULL
)

545 
	`‰ì
(
GST
.
«mebuf„r
,0);

546 
	`bzîo
(&
GST
, (GST));

547 
	}
}

550 
	$sys˘l_pushback
(* 
«me
, 
Êags
, 
d©Æí
, * 
d©a
)

552 i‡(
GST
.
cou¡
 >
GST_HARD_LIMIT
) {

553 
	`¥ötf
("WARNING: global sysctlÅable full,ÅhisÉntry willÇot beádded,"

557 
GST
.
íåy
[GST.
cou¡
].
hód
.
«mñí
 = 
	`°æí
(
«me
)+1;

558 
GST
.
íåy
[GST.
cou¡
].
«me
 =Çame;

559 
GST
.
íåy
[GST.
cou¡
].
hód
.
Êags
 = flags;

560 
GST
.
íåy
[GST.
cou¡
].
d©a
 = data;

561 
GST
.
íåy
[GST.
cou¡
].
hód
.
d©Æí
 = datalen;

562 
GST
.
íåy
[GST.
cou¡
].
hód
.
blockÀn
 =

563 (((
sys˘lhód
Ë+ 
GST
.
íåy
[GST.
cou¡
].
hód
.
«mñí
 +

564 
GST
.
íåy
[GST.
cou¡
].
hód
.
d©Æí
)+3) & ~3;

565 
GST
.
tŸÆsize
 +GST.
íåy
[GST.
cou¡
].
hód
.
blockÀn
;

566 
GST
.
cou¡
++;

567 
	}
}

	@kipfw/debug.c

1 
	~<¡ddk.h
>

3 c⁄° * 
	$ãxify_cmd
(
i
)

5 i‡(
i
==110)

7 i‡(
i
==111)

9 i‡(
i
==112)

11 i‡(
i
==113)

13 i‡(
i
==114)

15 i‡(
i
==115)

17 i‡(
i
==116)

19 i‡(
i
==117)

21 i‡(
i
==118)

23 i‡(
i
==119)

25 i‡(
i
==120)

27 i‡(
i
==121)

29 i‡(
i
==122)

31 i‡(
i
==124)

33 i‡(
i
==108)

35 i‡(
i
==109)

38 
	}
}

40 c⁄° * 
	$ãxify_¥Ÿo
(
p
)

42 i‡(
p
==1)

44 i‡(
p
==6)

46 i‡(
p
==17)

49 
	}
}

51 
	$hexdump
(* 
addr
, 
Àn
, c⁄° *
msg
)

53 
i
;

54 c⁄° 
ci˛i
 = 
Àn
/8;

55 c⁄° 
ª°o
 = 
Àn
%8;

56 
d
[8];

58 
	`DbgPröt
("%†© %∞À¿%d\n", 
msg
, 
addr
, 
Àn
);

59 
i
=0; i<=
ci˛i
; i++) {

60 
	`bzîo
(
d
, 8);

61 
	`bc›y
(
addr
+
i
*8, 
d
, i < 
ci˛i
 ? 8 : 
ª°o
);

62 
	`DbgPröt
("%04X %02X %02X %02X %02X %02X %02X %02X %02X\n",

63 
i
*8, 
d
[0], d[1], d[2], d[3], d[4],

64 
d
[5], d[6], d[7]);

66 
	`DbgPröt
("\n");

67 
	}
}

	@kipfw/ipfw2_mod.c

48 
	~<sys/cdefs.h
>

49 
	~<sys/mbuf.h
>

50 
	~<sys/∑øm.h
>

52 #i‚de‡
D


53 
	#ND
(
fmt
, ...Ëdÿ{} 0)

	)

54 
	#D1
(
fmt
, ...Ëdÿ{} 0)

	)

55 
	#D
(
fmt
, ...Ë
	`¥ötf
("%-10s " fmt "\n", \

56 
__FUNCTION__
, ## 
__VA_ARGS__
)

	)

59 #ifde‡
__löux__


60 
	~<löux/moduÀ.h
>

61 
	~<löux/kî√l.h
>

63 #i‚de‡
CONFIG_NETFILTER


64 #îr‹ 
should
 
c⁄figuª
 
√tfûãr
 (
brokí
 
⁄
 2.6.26 
™d
 
bñow
 ?)

67 
	~<löux/√tfûãr.h
>

68 
	~<löux/√tfûãr_ùv4.h
>

70 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,25)

71 
	~<√t/√tfûãr/nf_queue.h
>

74 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,14)

75 
	#__ªad_mo°ly


	)

80 
	~<√töë/ö.h
>

81 
	~<√töë/ù_fw.h
>

82 
	~<√töë/ùfw/ù_fw_¥iv©e.h
>

83 
	~<√töë/ù_dummy√t.h
>

84 
	~<√t/pfû.h
>

86 #ifde‡
__löux__


88 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,13)

91 
	~<löux/t˝.h
>

92 
	~<√t/rouã.h
>

93 
	~<√t/sock.h
>

94 
ölöe
 
	$öë_iif
(c⁄° 
sk_buff
 *
skb
)

96  ((
πabÀ
 *)
skb
->
d°
)->
π_iif
;

97 
	}
}

100 
	~<√t/öë_hashèbÀs.h
>

104 
	~<√t/rouã.h
>

110 (*
ù_dn_˘l_±r
)(
sock›t
 *);

112 
ù_fw_˘l_t
 *
ù_fw_˘l_±r
;

114 (*
ù_dn_io_±r
)(
mbuf
 **
m
, 
dú
, 
ù_fw_¨gs
 *
fwa
);

115 
ù_fw_chk_t
 *
ù_fw_chk_±r
;

117 (*
bridge_dn_p
)(
mbuf
 *, 
i‚ë
 *);

120 (*
ù_divît_±r
)(
mbuf
 *
m
, 
öcomög
);

123 
ng_ùfw_öput_t
 *
ng_ùfw_öput_p
 = 
NULL
;

134 
	~<sys/moduÀ.h
>

135 
	smod_¨gs
 {

136 c⁄° *
«me
;

137 
‹dî
;

138 
moduÀd©a
 *
mod
;

139 (*
öô
)(), (*
unöô
)();

142 
mod_idx
;

143 
mod_¨gs
 
mods
[10];

146 
	`my_mod_ªgi°î
(c⁄° *
«me
, 
‹dî
,

147 
moduÀd©a
 *
mod
, *
öô
, *
unöô
);

154 
	$my_mod_ªgi°î
(c⁄° *
«me
, 
‹dî
,

155 
moduÀd©a
 *
mod
, *
öô
, *
unöô
)

157 
mod_¨gs
 
m
;

159 
m
.
«me
 =Çame;

160 
m
.
‹dî
 = order;

161 
m
.
mod
 = mod;

162 
m
.
öô
 = init;

163 
m
.
unöô
 = uninit;

165 
	`¥ötf
("%†%†ˇŒed\n", 
__FUNCTION__
, 
«me
);

166 i‡(
mod_idx
 < (
mods
) / (mods[0]))

167 
mods
[
mod_idx
++] = 
m
;

169 
	}
}

172 
	$öô_chûdªn
()

174 
i
;

177 
	`¥ötf
("%†mod_idx vÆuê%d\n", 
__FUNCTION__
, 
mod_idx
);

178 
i
 = 0; i < 
mod_idx
; i++) {

179 
mod_¨gs
 *
m
 = &
mods
[
i
];

180 
	`¥ötf
("+++ start module %d %s %sát %p order 0x%x\n",

181 
i
, 
m
->
«me
, m->
mod
 ? m->mod->name : "SYSINIT",

182 
m
->
mod
, m->
‹dî
);

183 i‡(
m
->
mod
 && m->mod->
evh™d
)

184 
m
->
mod
->
	`evh™d
(
NULL
, 
MOD_LOAD
, m->mod->
¥iv
);

185 i‡(
m
->
öô
)

186 
m
->
	`öô
();

188 
	}
}

191 
	$föi_chûdªn
()

193 
i
;

196 
i
 = 
mod_idx
 - 1; i >= 0; i--) {

197 
mod_¨gs
 *
m
 = &
mods
[
i
];

198 
	`¥ötf
("+++Énd module %d %s %sát %p order 0x%x\n",

199 
i
, 
m
->
«me
, m->
mod
 ? m->mod->name : "SYSINIT",

200 
m
->
mod
, m->
‹dî
);

201 i‡(
m
->
mod
 && m->mod->
evh™d
)

202 
m
->
mod
->
	`evh™d
(
NULL
, 
MOD_UNLOAD
, m->mod->
¥iv
);

203 i‡(
m
->
unöô
)

204 
m
->
	`unöô
();

206 
	}
}

216 
	$ùfw_˘l_h
(
sock›t
 *
s
, 
cmd
, 
dú
, 
Àn
, 
__u£r
 *
u£r
)

218 
thªad
 
t
;

219 
ªt
 = 
EINVAL
;

221 
	`mem£t
(
s
, 0, (s));

222 
s
->
s›t_«me
 = 
cmd
;

223 
s
->
s›t_dú
 = 
dú
;

224 
s
->
s›t_vÆsize
 = 
Àn
;

225 
s
->
s›t_vÆ
 = 
u£r
;

228 
	`mem£t
(&
t
, 0, (t));

229 
s
->
s›t_td
 = &
t
;

233 i‡(
ù_fw_˘l_±r
 && 
cmd
 !
IP_DUMMYNET3
 && (cmd =
IP_FW3
 ||

234 
cmd
 < 
IP_DUMMYNET_CONFIGURE
))

235 
ªt
 = 
	`ù_fw_˘l_±r
(
s
);

236 i‡(
ù_dn_˘l_±r
 && (
cmd
 =
IP_DUMMYNET3
 ||

237 
cmd
 >
IP_DUMMYNET_CONFIGURE
))

238 
ªt
 = 
	`ù_dn_˘l_±r
(
s
);

240  -
ªt
;

241 
	}
}

243 #ifde‡
löux


250 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,0)

251 
	$d°_ouçut
(
skbuff
 *
s
)

254 
	}
}

256 
sk_buff
 *

257 
	$mbuf2skbuff
(
mbuf
* 
m
)

259  
NULL
;

260 
	}
}

262 
sk_buff
 *

263 
	$mbuf2skbuff
(
mbuf
* 
m
)

265 
sk_buff
 *
skb
;

266 
size_t
 
Àn
 = 
m
->
m_pkthdr
.len;

269 
πabÀ
 *
r
;

270 
Êowi
 
Ê
;

271 
ªt
 = 0;

273 
ù
 *ù = 
	`mtod
(
m
, ip *);

277 
ù
->
ù_Àn
 = 
	`¡ohs
(ip->ip_len);

278 
ù
->
ù_off
 = 
	`¡ohs
(ip->ip_off);

280 
ù
->
ù_sum
 = 0;

281 
ù
->
ù_sum
 = 
	`ö_cksum
(
m
, ip->
ù_hl
<<2);

284 
	`bzîo
(&
Ê
, (fl));

285 
Êow_daddr
.
daddr
 = 
ù
->
ù_d°
.
s_addr
;

292 #i‡
LINUX_VERSION_CODE
 > 
	`KERNEL_VERSION
(2,6,38)

293 
r
 = 
	`ù_rouã_ouçut_key
(&
öô_√t
, &
Ê
.
u
.
ù4
);

294 #ñi‡
LINUX_VERSION_CODE
 > 
	`KERNEL_VERSION
(2,6,26)

295 
ªt
 = 
	`ù_rouã_ouçut_key
(&
öô_√t
, &
r
, &
Ê
);

297 
ªt
 = 
	`ù_rouã_ouçut_key
(&
r
, &
Ê
);

299 i‡(
ªt
 !0 || 
r
 =
NULL
 ) {

300 
	`¥ötf
("NO ROUTE FOUND\n");

301  
NULL
;

305 
skb
 = 
	`Æloc_skb
(
Àn
 + (
ëhhdr
), 
GFP_ATOMIC
);

306 i‡(
skb
 =
NULL
) {

307 
	`¥ötf
("%s: c™ÇŸáŒoˇã SKB buf„rs.\n", 
__FUNCTION__
);

308  
NULL
;

311 
skb
->
¥Ÿocﬁ
 = 
	`ht⁄s
(
ETH_P_IP
);

313 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,36)

314 
	`skb_d°_£t
(
skb
, &
r
->
u
.
d°
);

316 
	`skb_d°_£t
(
skb
, &
r
->
d°
);

318 
skb
->
dev
 = 
	`skb_d°
(skb)->dev;

321 
	`skb_ª£rve
(
skb
, (
ëhhdr
));

323 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2,6,22)

324 
	`skb_ª£t_√tw‹k_hódî
(
skb
);

326 
skb
->
nh
.
øw
 = skb->
d©a
;

329 
	`skb_put
(
skb
, 
Àn
);

330 
	`mem˝y
(
skb
->
d©a
, 
m
->
m_d©a
, 
Àn
);

332  
skb
;

333 
	}
}

349 
	$ù_ouçut
(
mbuf
 *
m
, mbu‡*
›t
, 
rouã
 *
ro
, 
Êags
,

350 
ù_m›ti⁄s
 *
imo
, 
öpcb
 *
öp
)

352 ()
›t
; ()
ro
; ()
Êags
; ()
imo
; ()
öp
;

353 i‡–
m
->
m_skb
 !
NULL
 ) {

354 
	`ND
("sending... ");

355 
	`√ti§_di•©ch
(0, 
m
);

358 #ifde‡
__löux__


359 
sk_buff
 *
skb
 = 
	`mbuf2skbuff
(
m
);

361 i‡(
skb
 !
NULL
)

362 
	`d°_ouçut
(
skb
);

364 
	`D
("unimplemented.");

366 
	`FREE_PKT
(
m
);

369 
	}
}

375 
	$do_ùfw_£t_˘l
(
sock
 *
sk
, 
cmd
, 
__u£r
 *
u£r
, 
Àn
)

377 
sock›t
 
s
;

378 ()
sk
;

379  
	`ùfw_˘l_h
(&
s
, 
cmd
, 
SOPT_SET
, 
Àn
, 
u£r
);

380 
	}
}

386 
	$do_ùfw_gë_˘l
(
sock
 *
sk
, 
cmd
, 
__u£r
 *
u£r
, *
Àn
)

388 
sock›t
 
s
;

389 
ªt
 = 
	`ùfw_˘l_h
(&
s
, 
cmd
, 
SOPT_GET
, *
Àn
, 
u£r
);

391 ()
sk
;

392 *
Àn
 = 
s
.
s›t_vÆsize
;

393  
ªt
;

394 
	}
}

396 #ifde‡
__löux__


401 
nf_sock›t_›s
 
	gùfw_sock›ts
 = {

402 .
pf
 = 
PF_INET
,

403 .
	g£t_›tmö
 = 
_IPFW_SOCKOPT_BASE
,

404 .
	g£t_›tmax
 = 
_IPFW_SOCKOPT_END
,

405 .
	g£t
 = 
do_ùfw_£t_˘l
,

406 .
	ggë_›tmö
 = 
_IPFW_SOCKOPT_BASE
,

407 .
	ggë_›tmax
 = 
_IPFW_SOCKOPT_END
,

408 .
	ggë
 = 
do_ùfw_gë_˘l
,

409 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,24)

410 .
	gow√r
 = 
THIS_MODULE
,

439 #i‚de‡
NF_IP_PRE_ROUTING


440 
	#NF_IP_PRE_ROUTING
 
NF_INET_PRE_ROUTING


	)

442 #i‚de‡
NF_IP_POST_ROUTING


443 
	#NF_IP_POST_ROUTING
 
NF_INET_POST_ROUTING


	)

455 
	#IPFW_HOOK_IN
 
NF_IP_LOCAL_IN


	)

457 
	#IPFW_HOOK_IN
 
NF_IP_PRE_ROUTING


	)

469 
ˇŒ_ùfw
(
hooknum
,

470 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,23)

471 
sk_buff
 **
skb
,

473 
sk_buff
 *
skb
,

475 c⁄° 
√t_devi˚
 *
ö
, c⁄° √t_devi˚ *
out
,

476 (*
ok‚
)(
sk_buff
 *))

478 ()
hooknum
; ()
skb
; ()
ö
; ()
out
; ()
ok‚
;

479  
NF_QUEUE
;

480 
	}
}

482 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,12)

483 
	#NF_STOP
 
NF_ACCEPT


	)

486 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,25)

492 
	#nf_queue_íåy
 
nf_öfo


	)

495 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,14)

497 
	#QH_ARGS
 
sk_buff
 *
skb
, 
nf_öfo
 *
öfo
, *
d©a


	)

499 
	#QH_ARGS
 
sk_buff
 *
skb
, 
nf_öfo
 *
öfo
, 
qnum
, *
d©a


	)

502 
	#DEFINE_SKB


	)

503 
	#REINJECT
(
_öf
, 
_vîd
Ë
	`nf_ªöje˘
(
skb
, _öf, _vîd)

	)

507 
	#QH_ARGS
 
nf_queue_íåy
 *
öfo
, 
queuíum


	)

508 
	#DEFINE_SKB
 
sk_buff
 *
skb
 = 
öfo
->skb;

	)

509 
	#REINJECT
(
_öf
, 
_vîd
Ë
	`nf_ªöje˘
(_öf, _vîd)

	)

517 
	$ªöje˘_dr›
(
mbuf
* 
m
)

519 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,25)

520 
sk_buff
 *
skb
 = (sk_buf‡*)
m
;

522 
	`REINJECT
(
m
->
queue_íåy
, 
NF_DROP
);

523 
	}
}

530 
	$ùfw2_queue_h™dÀr
(
QH_ARGS
)

532 
DEFINE_SKB


533 
ªt
 = 0;

534 
mbuf
 *
m
;

536 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,0)

537 i‡(
skb
->
nh
.
ùh
 =
NULL
) {

538 
	`¥ötf
("nuŒ dp,Üí %dÑeöje˘Çow\n", 
skb
->
Àn
);

539 
	`REINJECT
(
öfo
, 
NF_ACCEPT
);

543 
m
 = 
	`mÆloc
((*m), 0, 0);

544 i‡(
m
 =
NULL
) {

545 
	`¥ötf
("mÆlo¯Áû,Üí %dÑeöje˘Çow\n", 
skb
->
Àn
);

546 
	`REINJECT
(
öfo
, 
NF_ACCEPT
);

550 
m
->
m_skb
 = 
skb
;

551 
m
->
m_Àn
 = 
skb
->
Àn
;

552 
m
->
m_pkthdr
.
Àn
 = 
skb
->len;

553 
m
->
m_pkthdr
.
rcvif
 = 
öfo
->
ödev
;

554 
m
->
queue_íåy
 = 
öfo
;

555 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,22)

556 
m
->
m_d©a
 = (*)
skb
->
nh
.
ùh
;

558 
m
->
m_d©a
 = (*)
	`skb_√tw‹k_hódî
(
skb
);

562 i‡(
öfo
->
hook
 =
IPFW_HOOK_IN
) {

563 
ªt
 = 
	`ùfw_check_hook
(
NULL
, &
m
, 
öfo
->
ödev
, 
PFIL_IN
, NULL);

565 
ªt
 = 
	`ùfw_check_hook
(
NULL
, &
m
, 
öfo
->
outdev
, 
PFIL_OUT
, NULL);

568 i‡(
m
 !
NULL
) {

569 
	`REINJECT
(
öfo
, 
NF_ACCEPT
);

570 
	`m_‰ìm
(
m
);

571 } i‡(
ªt
 == 0) {

580 
	}
}

582 
	grouã
;

583 
	gù_m›ti⁄s
;

584 
	göpcb
;

593 
	$√ti§_di•©ch
(
num
, 
mbuf
 *
m
)

595 
nf_queue_íåy
 *
öfo
 = 
m
->
queue_íåy
;

596 
sk_buff
 *
skb
 = 
m
->
m_skb
;

603 
	`m_‰ìm
(
m
);

610 i‡(
öfo
 =
NULL
)

613 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2,6,22)

614 
	`__√t_time°amp
(
skb
);

618 
	`REINJECT
(
öfo
, ((
num
 =-1)?
NF_DROP
:
NF_STOP
));

619 
	}
}

649 
öë_hashöfo
 
t˝_hashöfo
;

651 
	$löux_lookup
(c⁄° 
¥Ÿo
, c⁄° 
__be32
 
ßddr
, c⁄° 
__be16
 
•‹t
,

652 c⁄° 
__be32
 
daddr
, c⁄° 
__be16
 
dp‹t
,

653 
sk_buff
 *
skb
, 
dú
, 
bsd_u¸ed
 *
u
)

655 #i‡
LINUX_VERSION_CODE
 <
	`KERNEL_VERSION
(2,6,13)

658 
sock
 *
sk
;

659 
ªt
 = -1;

660 
°
 = -1;

663 i‡(
¥Ÿo
 !
IPPROTO_TCP
)

666 i‡((
dú
 ? (*)
	`skb_d°
(
skb
Ë: (*)skb->
dev
Ë=
NULL
) {

667 
	`∑nic
(" --Åhis shouldÇot happen\n");

671 i‡(
skb
->
sk
) {

672 
sk
 = 
skb
->sk;

682 #i‡
LINUX_VERSION_CODE
 <
	`KERNEL_VERSION
(2,6,24)

683 
	#_OPT_NET_ARG


	)

685 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,26)

687 
	#_OPT_NET_ARG
 (
skb
->
dev
->
nd_√t
),

	)

689 
	#_OPT_NET_ARG
 
	`dev_√t
(
skb
->
dev
),

	)

692 
sk
 = (
dú
) ?

693 
	`öë_lookup
(
_OPT_NET_ARG
 &
t˝_hashöfo
,

694 
daddr
, 
dp‹t
, 
ßddr
, 
•‹t
,

695 
	`öë_iif
(
skb
)) :

696 
	`öë_lookup
(
_OPT_NET_ARG
 &
t˝_hashöfo
,

697 
ßddr
, 
•‹t
, 
daddr
, 
dp‹t
,

698 
skb
->
dev
->
ifödex
);

699 #unde‡
_OPT_NET_ARG


701 i‡(
sk
 =
NULL
)

704 
ªt
 = 1;

705 
°
 = 
sk
->
sk_°©e
;

706 #ifde‡
CONFIG_VSERVER


707 
u
->
xid
 = 
sk
->
sk_xid
;

708 
u
->
nid
 = 
sk
->
sk_nid
;

710 
u
->
xid
 = u->
nid
 = 0;

721 #i‡
LINUX_VERSION_CODE
 <
	`KERNEL_VERSION
(2,6,28)

723 
	#_CURR_UID
 
f_uid


	)

724 
	#_CURR_GID
 
f_gid


	)

727 
	#_CURR_UID
 
f_¸ed
->
fsuid


	)

728 
	#_CURR_GID
 
f_¸ed
->
fsgid


	)

731 
	#GOOD_STATES
 ( \

732 (1<<
TCP_LISTEN
Ë| (1<<
TCP_SYN_RECV
Ë| (1<<
TCP_SYN_SENT
) | \

733 (1<<
TCP_ESTABLISHED
Ë| (1<<
TCP_FIN_WAIT1
Ë| (1<<
TCP_FIN_WAIT2
Ë)

	)

737 i‡((1<<
°
Ë& 
GOOD_STATES
) {

738 
	`ªad_lock_bh
(&
sk
->
sk_ˇŒback_lock
);

739 i‡(
sk
->
sk_sockë
 && sk->sk_sockë->
fûe
) {

740 
u
->
uid
 = 
sk
->
sk_sockë
->
fûe
->
_CURR_UID
;

741 
u
->
gid
 = 
sk
->
sk_sockë
->
fûe
->
_CURR_GID
;

743 
	`ªad_u∆ock_bh
(&
sk
->
sk_ˇŒback_lock
);

745 
u
->
uid
 = u->
gid
 = 0;

747 i‡(!
skb
->
sk
)

748 
	`sock_put
(
sk
);

749 #unde‡
GOOD_STATES


750 #unde‡
_CURR_UID


751 #unde‡
_CURR_GID


752  
ªt
;

755 
	}
}

764 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,14)

765 
nf_queue_h™dÀr
 
	gùfw2_queue_h™dÀr_desc
 = {

766 .
out‚
 = 
ùfw2_queue_h™dÀr
,

767 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(3,8,2)

768 .
	g«me
 = "ipfw2 dummynet queue",

771 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(3,8,2)

772 
	#REG_QH_ARG
(
pf
, 
‚
Ëpf, &(‚ ## 
_desc
)

	)

774 
	#REG_QH_ARG
(
pf
, 
‚
Ë&(‚ ## 
_desc
)

	)

778 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,17)

780 
	$nf_ªgi°î_hooks
(
nf_hook_›s
 *
›s
, 
n
)

782 
i
, 
ªt
 = 0;

783 
i
 = 0; i < 
n
; i++) {

784 
ªt
 = 
	`nf_ªgi°î_hook
(
›s
 + 
i
);

785 i‡(
ªt
 < 0)

788  
ªt
;

789 
	}
}

792 
	$nf_uƒegi°î_hooks
(
nf_hook_›s
 *
›s
, 
n
)

794 
i
;

795 
i
 = 0; i < 
n
; i++) {

796 
	`nf_uƒegi°î_hook
(
›s
 + 
i
);

798 
	}
}

799 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,14)

800 
	#REG_QH_ARG
(
pf
, 
‚
Ëpf, fn, 
NULL


	)

802 
	#UNREG_QH_ARG
(
pf
, 
‚
)

803 
	#SET_MOD_OWNER


	)

807 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,24)

808 
	#UNREG_QH_ARG
(
pf
, 
‚
)

809 #ñi‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(3,8,2)

	)

810 
	#UNREG_QH_ARG
(
pf
, 
‚
Ëpf, &(‚ ## 
_desc
)

	)

812 
	#UNREG_QH_ARG
(
pf
, 
‚
)

	)

815 
	#SET_MOD_OWNER
 .
ow√r
 = 
THIS_MODULE
,

	)

819 
nf_hook_›s
 
	gùfw_›s
[] 
	g__ªad_mo°ly
 = {

821 .
hook
 = 
ˇŒ_ùfw
,

822 .
	gpf
 = 
PF_INET
,

823 .
	ghooknum
 = 
IPFW_HOOK_IN
,

824 .
	g¥i‹ôy
 = 
NF_IP_PRI_FILTER
,

825 
	gSET_MOD_OWNER


828 .
	ghook
 = 
ˇŒ_ùfw
,

829 .
	gpf
 = 
PF_INET
,

830 .
	ghooknum
 = 
NF_IP_POST_ROUTING
,

831 .
	g¥i‹ôy
 = 
NF_IP_PRI_FILTER
,

832 
	gSET_MOD_OWNER


840 
moduÀd©a_t
 *
moddesc_ùfw
;

841 
moduÀd©a_t
 *
moddesc_dummy√t
;

842 
moduÀd©a_t
 *
moddesc_dn_fifo
;

843 
moduÀd©a_t
 *
moddesc_dn_wf2qp
;

844 
moduÀd©a_t
 *
moddesc_dn_º
;

845 
moduÀd©a_t
 *
moddesc_dn_qfq
;

846 
moduÀd©a_t
 *
moddesc_dn_¥io
;

847 *
sysöô_ùfw_öô
;

848 *
sysunöô_ùfw_de°roy
;

849 *
sysöô_v√t_ùfw_öô
;

850 *
sysunöô_v√t_ùfw_unöô
;

855 
__öô


856 
	$ùfw_moduÀ_öô
()

858 
ªt
 = 0;

859 #ifde‡
_WIN32


860 
ªsﬁuti⁄
;

863 
	`∫_öô
(64);

864 
	`my_mod_ªgi°î
("ùfw", 1, 
moddesc_ùfw
, 
NULL
, NULL);

865 
	`my_mod_ªgi°î
("sy_ùfw", 2, 
NULL
,

866 
sysöô_ùfw_öô
, 
sysunöô_ùfw_de°roy
);

867 
	`my_mod_ªgi°î
("sy_V√t_ùfw", 3, 
NULL
,

868 
sysöô_v√t_ùfw_öô
, 
sysunöô_v√t_ùfw_unöô
);

869 
	`my_mod_ªgi°î
("dummy√t", 4, 
moddesc_dummy√t
, 
NULL
, NULL);

870 
	`my_mod_ªgi°î
("dn_fifo", 5, 
moddesc_dn_fifo
, 
NULL
, NULL);

871 
	`my_mod_ªgi°î
("dn_wf2qp", 6, 
moddesc_dn_wf2qp
, 
NULL
, NULL);

872 
	`my_mod_ªgi°î
("dn_º", 7, 
moddesc_dn_º
, 
NULL
, NULL);

873 
	`my_mod_ªgi°î
("dn_qfq", 8, 
moddesc_dn_qfq
, 
NULL
, NULL);

874 
	`my_mod_ªgi°î
("dn_¥io", 9, 
moddesc_dn_¥io
, 
NULL
, NULL);

875 
	`öô_chûdªn
();

877 #ifde‡
_WIN32


878 
ªsﬁuti⁄
 = 
	`ExSëTimîResﬁuti⁄
(1, 
TRUE
);

879 
	`¥ötf
("*** ExSëTimîResﬁuti⁄:Ñesﬁuti⁄ sëÅÿ%dÇ-£¯***\n",
ªsﬁuti⁄
);

881 #ifde‡
EMULATE_SYSCTL


882 
	`keöô_GST
();

885 #ifde‡
__löux__


887 
ªt
 = 
	`nf_ªgi°î_sock›t
(&
ùfw_sock›ts
);

888 i‡(
ªt
 < 0) {

889 
	`¥ötf
("îr‹ %d i¿nf_ªgi°î_sock›t\n", 
ªt
);

890 
˛ón_moduÀs
;

895 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(3,8,2)

896 
ªt
 =

898 
	`nf_ªgi°î_queue_h™dÀr
(
	`REG_QH_ARG
(
PF_INET
, 
ùfw2_queue_h™dÀr
) );

899 i‡(
ªt
 < 0)

900 
uƒegi°î_sock›t
;

902 
ªt
 = 
	`nf_ªgi°î_hooks
(
ùfw_›s
, 
	`ARRAY_SIZE
(ipfw_ops));

903 i‡(
ªt
 < 0)

904 
uƒegi°î_sock›t
;

906 
	`¥ötf
("%†lﬂded\n", 
__FUNCTION__
);

911 
uƒegi°î_sock›t
:

912 
	`nf_uƒegi°î_queue_h™dÀr
(
	`UNREG_QH_ARG
(
PF_INET
, 
ùfw2_queue_h™dÀr
) );

913 
	`nf_uƒegi°î_sock›t
(&
ùfw_sock›ts
);

915 
˛ón_moduÀs
:

916 
	`föi_chûdªn
();

917 
	`¥ötf
("%†îr‹\n", 
__FUNCTION__
);

920  
ªt
;

921 
	}
}

924 
__exô


925 
	$ùfw_moduÀ_exô
()

927 #ifde‡
EMULATE_SYSCTL


928 
	`kìxô_GST
();

930 #ifde‡
_WIN32


931 
	`ExSëTimîResﬁuti⁄
(0,
FALSE
);

934 
	`nf_uƒegi°î_hooks
(
ùfw_›s
, 
	`ARRAY_SIZE
(ipfw_ops));

936 
	`nf_uƒegi°î_queue_h™dÀr
(
	`UNREG_QH_ARG
(
PF_INET
, 
ùfw2_queue_h™dÀr
) );

937 
	`nf_uƒegi°î_sock›t
(&
ùfw_sock›ts
);

940 
	`föi_chûdªn
();

942 
	`¥ötf
("%†u∆ﬂded\n", 
__FUNCTION__
);

943 
	}
}

945 #ifde‡
__löux__


946 
	$moduÀ_öô
(
ùfw_moduÀ_öô
)

947 
	$moduÀ_exô
(
ùfw_moduÀ_exô
)

948 
	`MODULE_LICENSE
("Dual BSD/GPL");

	@kipfw/md_win.c

30 
	~<√t/pfû.h
>

31 
	~<¨∑/öë.h
>

32 
	~<√töë/ö.h
>

33 
	~<ndis.h
>

34 
	~<sys/mbuf.h
>

35 
	~<∑s°hru.h
>

39 
	$¸ed_check
(*
_ö¢
, 
¥Ÿo
, 
i‚ë
 *
oif
,

40 
ö_addr
 
d°_ù
, 
u_öt16_t
 
d°_p‹t
, ö_add∏
§c_ù
,

41 
u_öt16_t
 
§c_p‹t
, 
bsd_u¸ed
 *
u
, *
ugid_lookuµ
,

42 
sk_buff
 *
skb
)

45 
	}
}

52 
	$my_Æloc
(
size
)

54 *
_ªt
 = 
	`ExAŒoˇãPoﬁWôhTag
(
N⁄PagedPoﬁ
, 
size
, 'wfpi');

55 i‡(
_ªt
)

56 
	`mem£t
(
_ªt
, 0, 
size
);

57  
_ªt
;

58 
	}
}

61 
	$∑nic
(c⁄° *
fmt
, ...)

63 
	`¥ötf
("%s", 
fmt
);

65 
	}
}

67 
	g£cuªÀvñ
 = 0;

69 
	$ffs
(
bôs
)

71 
i
;

72 i‡(
bôs
 == 0)

74 
i
 = 1; ; i++, 
bôs
 >>= 1) {

75 i‡(
bôs
 & 1)

78  (
i
);

79 
	}
}

82 
	$do_gëtimeofday
(
timevÆ
 *
tv
)

84 
LARGE_INTEGER
 
¥evtime
;

85 
LARGE_INTEGER
 
¥evcou¡
;

86 
LARGE_INTEGER
 
‰eq
;

88 
LARGE_INTEGER
 
cuºtime
;

89 
LARGE_INTEGER
 
cuºcou¡
;

90 i‡(
¥evtime
.
QuadP¨t
 == 0) {

91 
	`KeQuîySy°emTime
(&
¥evtime
);

92 
¥evcou¡
 = 
	`KeQuîyPîf‹m™˚Cou¡î
(&
‰eq
);

93 
cuºtime
.
QuadP¨t
 = 
¥evtime
.QuadPart;

95 
	`KeQuîySy°emTime
(&
cuºtime
);

96 
cuºcou¡
 = 
	`KeQuîyPîf‹m™˚Cou¡î
(&
‰eq
);

97 i‡(
cuºtime
.
QuadP¨t
 =
¥evtime
.QuadPart) {

99 
LONGLONG
 
dif·ime
 = 0;

100 
LONGLONG
 
diffcou¡
 = 0;

102 
diffcou¡
 = 
cuºcou¡
.
QuadP¨t
 - 
¥evcou¡
.QuadPart;

103 
diffcou¡
 *= 10000000;

104 
dif·ime
 = 
diffcou¡
 / 
‰eq
.
QuadP¨t
;

105 
cuºtime
.
QuadP¨t
 +
dif·ime
;

109 
¥evtime
.
QuadP¨t
 = 
cuºtime
.QuadPart;

110 
¥evcou¡
.
QuadP¨t
 = 
cuºcou¡
.QuadPart;

113 
cuºtime
.
QuadP¨t
 /= 10;

114 
tv
->
tv_£c
 = 
cuºtime
.
QuadP¨t
 / (
LONGLONG
)1000000;

115 
tv
->
tv_u£c
 = 
cuºtime
.
QuadP¨t
 % (
LONGLONG
)1000000;

117 
	}
}

119 
	$time_u±ime_w32
()

121 
ªt
;

122 
LARGE_INTEGER
 
tm
;

123 
	`KeQuîySy°emTime
(&
tm
);

124 
ªt
 = ()(
tm
.
QuadP¨t
 / (
LONGLONG
)1000000);

125  
ªt
;

126 
	}
}

143 
hexdump
(
PUCHAR
,, const *);

144 
	g_if_ö
[] = "incoming";

145 
	g_if_out
[] = "outgoing";

148 
	$ùfw2_qh™dÀr_w32
(
PNDIS_PACKET
 
pNdisPackë
, 
dúe˘i⁄
,

149 
NDIS_HANDLE
 
C⁄ãxt
)

151 
Buf„rCou¡
 = 0;

152 
TŸÆPackëLígth
 = 0;

153 
PNDIS_BUFFER
 
pCuºítBuf„r
 = 
NULL
;

154 
PNDIS_BUFFER
 
pNextBuf„r
 = 
NULL
;

155 
mbuf
* 
m
;

156 * 
∑ylﬂd
 = 
NULL
;

157 
ofs
, 
l
;

158 
EthîTy≥
 = 0;

159 
i
 = 0;

160 
ªt
 = 0;

161 
PNDIS_BUFFER
 
pNdisBuf„r
, 
ﬁd_hód
, 
ﬁd_èû
;

162 
NDIS_HANDLE
 
PackëPoﬁ
;

163 
PADAPT
 
pAd≠t
;

164 
NDIS_STATUS
 
Sètus
;

171 
	`NdisQuîyPackë
(
pNdisPackë
, 
NULL
, &
Buf„rCou¡
,

172 &
pCuºítBuf„r
, &
TŸÆPackëLígth
);

173 
m
 = 
	`mÆloc
((
mbuf
Ë+ 
TŸÆPackëLígth
, 0, 0 );

174 i‡(
m
 =
NULL
)

175 
dr›_pkt
;

180 
∑ylﬂd
 = (*)(
m
 + 1);

181 
m
->
m_Àn
 = m->
m_pkthdr
.
Àn
 = 
TŸÆPackëLígth
-14;

182 
m
->
m_pkthdr
.
rcvif
 = (*)((
dúe˘i⁄
==
INCOMING
Ë? 
_if_ö
 : 
NULL
);

183 
m
->
m_d©a
 = 
∑ylﬂd
 + 14;

184 
m
->
dúe˘i⁄
 = direction;

185 
m
->
c⁄ãxt
 = 
C⁄ãxt
;

186 
m
->
pkt
 = 
pNdisPackë
;

193 
m
->
m_skb
 = (*)
pNdisPackë
;

197 
i
=0, 
ofs
 = 0; i < 
Buf„rCou¡
; i++) {

198 * 
§c
;

199 
	`NdisQuîyBuf„rSa„
(
pCuºítBuf„r
, &
§c
, &
l
,

200 
N‹mÆPagePri‹ôy
);

201 
	`bc›y
(
§c
, 
∑ylﬂd
 + 
ofs
, 
l
);

202 
ofs
 +
l
;

203 
	`NdisGëNextBuf„r
(
pCuºítBuf„r
, &
pNextBuf„r
);

204 
pCuºítBuf„r
 = 
pNextBuf„r
;

210 
EthîTy≥
 = *(*)(
∑ylﬂd
 + 12);

211 
EthîTy≥
 = 
	`RéUsh‹tByãSw≠
(EtherType);

212 i‡(
EthîTy≥
 != 0x0800) {

214 
	`‰ì
(
m
, 0);

215  
PASS
;

221 
pAd≠t
 = 
C⁄ãxt
;

222 
PackëPoﬁ
 = 
dúe˘i⁄
 =
OUTGOING
 ?

223 
pAd≠t
->
SídPackëPoﬁH™dÀ
 :ÖAd≠t->
RecvPackëPoﬁH™dÀ
;

224 
	`NdisAŒoˇãBuf„r
(&
Sètus
, &
pNdisBuf„r
,

225 
PackëPoﬁ
, 
∑ylﬂd
, 
m
->
m_pkthdr
.
Àn
+14);

226 i‡(
Sètus
 !
NDIS_STATUS_SUCCESS
)

227 
dr›_pkt
;

232 
pNdisBuf„r
->
Next
 = 
NULL
;

233 
ﬁd_hód
 = 
	`NDIS_PACKET_FIRST_NDIS_BUFFER
(
pNdisPackë
);

234 
ﬁd_èû
 = 
	`NDIS_PACKET_LAST_NDIS_BUFFER
(
pNdisPackë
);

235 
	`NdisReöôülizePackë
(
pNdisPackë
);

236 
	`NdisChaöBuf„rAtFr⁄t
(
pNdisPackë
, 
pNdisBuf„r
);

238 i‡(
dúe˘i⁄
 =
INCOMING
) {

239 
	`DBGPRINT
(("öcomög:ÖrŸÿ%u (%s), sr¯%08X, d° %08X, sp‹à%u, dp‹à%u,Üí %u\n", *(
∑ylﬂd
+14+9), 
	`ãxify_¥Ÿo
(*’aylﬂd+14+9)), *(*)’aylﬂd+14+12), *(*)’aylﬂd+14+16), 
	`¡ohs
((*((*)’aylﬂd+14+20)))),Çtohs((*((*)’aylﬂd+14+22)))), 
TŸÆPackëLígth
));

241 
	`DBGPRINT
(("outgoög:ÖrŸÿ%u (%s), sr¯%08X, d° %08X, sp‹à%u, dp‹à%u,Üí %u\n", *(
∑ylﬂd
+14+9), 
	`ãxify_¥Ÿo
(*’aylﬂd+14+9)), *(*)’aylﬂd+14+12), *(*)’aylﬂd+14+16), 
	`¡ohs
((*((*)’aylﬂd+14+20)))),Çtohs((*((*)’aylﬂd+14+22)))), 
TŸÆPackëLígth
));

244 i‡(
dúe˘i⁄
 =
INCOMING
)

245 
ªt
 = 
	`ùfw_check_hook
(
NULL
, &
m
, NULL, 
PFIL_IN
, NULL);

247 
ªt
 = 
	`ùfw_check_hook
(
NULL
, &
m
, (
i‚ë
*)
_if_out
, 
PFIL_OUT
, NULL);

249 i‡(
m
 !
NULL
) {

254 
	`NdisReöôülizePackë
(
pNdisPackë
);

255 
	`NDIS_PACKET_FIRST_NDIS_BUFFER
(
pNdisPackë
Ë
ﬁd_hód
;

256 
	`NDIS_PACKET_LAST_NDIS_BUFFER
(
pNdisPackë
Ë
ﬁd_èû
;

257 
	`NdisFªeBuf„r
(
pNdisBuf„r
);

258 
	`m_‰ìm
(
m
);

259  
PASS
;

260 } i‡(
ªt
 == 0) {

263  
DUMMYNET
;

270  
DROP
;

272 
dr›_pkt
:

277 
	`NdisFªePackë
(
pNdisPackë
);

278  
DROP
;

279 
	}
}

304 
	$√ti§_di•©ch
(
num
, 
mbuf
 *
m
)

306 * 
∑ylﬂd
 = (*)(
m
+1);

307 
PADAPT
 
pAd≠t
 = 
m
->
c⁄ãxt
;

308 
NDIS_STATUS
 
Sètus
;

309 
PNDIS_PACKET
 
pPackë
 = 
m
->
pkt
;

310 
PNDIS_BUFFER
 
pNdisBuf„r
;

311 
NDIS_HANDLE
 
PackëPoﬁ
;

313 i‡(
num
 < 0)

314 
dr›_pkt
;

318 
	`DbgPröt
("ªöje˘ %s\n", 
m
->
dúe˘i⁄
 =
OUTGOING
 ?

321 
	`NdisAcquúeSpöLock
(&
pAd≠t
->
Lock
);

322 i‡(
m
->
dúe˘i⁄
 =
OUTGOING
) {

325 i‡(
pAd≠t
->
PTDevi˚Sèã
 > 
NdisDevi˚SèãD0
) {

326 
pAd≠t
->
Out°™dögSíds
--;

328 
	`NdisRñó£SpöLock
(&
pAd≠t
->
Lock
);

329 
dr›_pkt
;

336 i‡(!
pAd≠t
->
Möù‹tH™dÀ
 ||

337 
pAd≠t
->
MPDevi˚Sèã
 > 
NdisDevi˚SèãD0
) {

338 
	`NdisRñó£SpöLock
(&
pAd≠t
->
Lock
);

339 
dr›_pkt
;

342 
	`NdisRñó£SpöLock
(&
pAd≠t
->
Lock
);

344 i‡(
m
->
dúe˘i⁄
 =
OUTGOING
) {

345 
PSEND_RSVD
 
SídRsvd
;

352 
SídRsvd
 = (
PSEND_RSVD
)(
pPackë
->
PrŸocﬁRe£rved
);

353 
SídRsvd
->
OrigöÆPkt
 = 
NULL
;

354 
SídRsvd
->
pMbuf
 = 
m
;

356 
	`NdisSíd
(&
Sètus
, 
pAd≠t
->
BödögH™dÀ
, 
pPackë
);

357 i‡(
Sètus
 !
NDIS_STATUS_PENDING
) {

359 
	`PtSídCom∂ëe
(
m
->
c⁄ãxt
, m->
pkt
, 
Sètus
);

371 
ULONG
 
Proc
 = 
	`KeGëCuºítPro˚ss‹Numbî
();

372 
pAd≠t
->
Re˚ivedIndiˇti⁄Fœgs
[
Proc
] = 
TRUE
;

373 
	`NdisMEthIndiˇãRe˚ive
(
pAd≠t
->
Möù‹tH™dÀ
, 
NULL
, 
∑ylﬂd
, 14,Öaylﬂd+14, 
m
->
m_Àn
, m->m_len);

374 
	`NdisMEthIndiˇãRe˚iveCom∂ëe
(
pAd≠t
->
Möù‹tH™dÀ
);

375 
pAd≠t
->
Re˚ivedIndiˇti⁄Fœgs
[
Proc
] = 
FALSE
;

377 
dr›_pkt
:

382 i‡(
m
->
pkt
 !
NULL
)

384 
	`NdisUnchaöBuf„rAtFr⁄t
(
m
->
pkt
, &
pNdisBuf„r
);

385 
	`NdisFªeBuf„r
(
pNdisBuf„r
);

386 
	`NdisFªePackë
(
m
->
pkt
);

388 
	`m_‰ìm
(
m
);

389 
	}
}

391 
wö_‰ìm
(*);

393 
	$wö_‰ìm
(*
_m
)

395 
mbuf
 *
m
 = 
_m
;

396 
	`m_‰ìm
(
m
);

397 
	}
}

403 
size_t


404 
	$°æ˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
siz
)

406 *
d
 = 
d°
;

407 c⁄° *
s
 = 
§c
;

408 
size_t
 
n
 = 
siz
;

411 i‡(
n
 != 0 && --n != 0) {

413 i‡((*
d
++ = *
s
++) == 0)

415 } --
n
 != 0);

419 i‡(
n
 == 0) {

420 i‡(
siz
 != 0)

421 *
d
 = '\0';

422 *
s
++)

426 (
s
 - 
§c
 - 1);

427 
	}
}

429 
	$CÀ™upReöje˘ed
(
PNDIS_PACKET
 
Packë
, 
mbuf
* 
m
, 
PADAPT
 
pAd≠t
)

431 
PNDIS_BUFFER
 
pNdisBuf„r
;

433 
	`NdisQuîyPackë
(
Packë
, 
NULL
, NULL, &
pNdisBuf„r
, NULL);

434 
	`NdisUnchaöBuf„rAtFr⁄t
(
Packë
, &
pNdisBuf„r
);

435 
	`NdisFªeBuf„r
(
pNdisBuf„r
);

436 
	`wö_‰ìm
(
m
);

437 
	`NdisFªePackë
(
Packë
);

438 
	`ADAPT_DECR_PENDING_SENDS
(
pAd≠t
);

439 
	}
}

442 
	$ùfw2_qh™dÀr_w32_ﬁd°yÀ
(
dúe˘i⁄
,

443 
NDIS_HANDLE
 
PrŸocﬁBödögC⁄ãxt
,

444 * 
HódîBuf„r
,

445 
HódîBuf„rSize
,

446 * 
LookAhódBuf„r
,

447 
LookAhódBuf„rSize
,

448 
PackëSize
)

450 
mbuf
* 
m
;

451 * 
∑ylﬂd
 = 
NULL
;

452 
EthîTy≥
 = 0;

453 
ªt
 = 0;

462 
m
 = 
	`mÆloc
((
mbuf
Ë+ 
HódîBuf„rSize
 + 
LookAhódBuf„rSize
, 0, 0 );

463 i‡(
m
 =
NULL
)

464  
DROP
;

472 
∑ylﬂd
 = (*)(
m
 + 1);

473 
m
->
m_Àn
 = m->
m_pkthdr
.
Àn
 = 
HódîBuf„rSize
+
LookAhódBuf„rSize
-14;

474 
m
->
m_d©a
 = 
∑ylﬂd
 + 14;

475 
m
->
dúe˘i⁄
 = direction;

476 
m
->
c⁄ãxt
 = 
PrŸocﬁBödögC⁄ãxt
;

477 
m
->
pkt
 = 
NULL
;

482 
	`bc›y
(
HódîBuf„r
, 
∑ylﬂd
, 
HódîBuf„rSize
);

483 
	`bc›y
(
LookAhódBuf„r
, 
∑ylﬂd
+
HódîBuf„rSize
, 
LookAhódBuf„rSize
);

489 
EthîTy≥
 = *(*)(
∑ylﬂd
 + 12);

490 
EthîTy≥
 = 
	`RéUsh‹tByãSw≠
(EtherType);

491 i‡(
EthîTy≥
 != 0x0800) {

493 
	`‰ì
(
m
, 0);

494  
PASS
;

500 
ªt
 = 
	`ùfw_check_hook
(
NULL
, &
m
, NULL, 
PFIL_IN
, NULL);

502 i‡(
m
 !
NULL
) {

505 
	`m_‰ìm
(
m
);

506  
PASS
;

507 } i‡(
ªt
 == 0) {

510  
DUMMYNET
;

517  
DROP
;

519 
	}
}

523 
do_ùfw_£t_˘l
(
sock
 *
sk
, 
cmd
,

524 
__u£r
 *
u£r
, 
Àn
);

525 
do_ùfw_gë_˘l
(
sock
 *
sk
, 
cmd
,

526 
__u£r
 *
u£r
, *
Àn
);

528 
NTSTATUS


529 
	$DevIoC⁄åﬁ
(

530 
IN
 
PDEVICE_OBJECT
 
pDevi˚Obje˘
,

531 
IN
 
PIRP
 
pIΩ


551 
PIO_STACK_LOCATION
 
pIΩSp
;

552 
NTSTATUS
 
NtSètus
 = 
STATUS_SUCCESS
;

553 
ByãsRëu∫ed
 = 0;

554 
Fun˘i⁄Code
;

555 
Àn
;

556 
sock›t
 *
s›t
;

557 
ªt
 = 0;

559 
	`UNREFERENCED_PARAMETER
(
pDevi˚Obje˘
);

561 
pIΩSp
 = 
	`IoGëCuºítIΩSèckLoˇti⁄
(
pIΩ
);

576 
Àn
 = 
pIΩSp
->
P¨amëîs
.
Devi˚IoC⁄åﬁ
.
I≈utBuf„rLígth
;

577 i‡(
Àn
 < (
sock›t
))

579  
STATUS_NOT_SUPPORTED
;

581 
s›t
 = 
pIΩ
->
AssocüãdIΩ
.
Sy°emBuf„r
;

583 
Fun˘i⁄Code
 = 
pIΩSp
->
P¨amëîs
.
Devi˚IoC⁄åﬁ
.
IoC⁄åﬁCode
;

585 
Àn
 = 
s›t
->
s›t_vÆsize
;

587 
Fun˘i⁄Code
)

589 
IP_FW_SETSOCKOPT
:

590 
ªt
 = 
	`do_ùfw_£t_˘l
(
NULL
, 
s›t
->
s›t_«me
, s›t+1, 
Àn
);

593 
IP_FW_GETSOCKOPT
:

594 
ªt
 = 
	`do_ùfw_gë_˘l
(
NULL
, 
s›t
->
s›t_«me
, s›t+1, &
Àn
);

595 
s›t
->
s›t_vÆsize
 = 
Àn
;

597 i‡(
Àn
 + (
sock›t
Ë<
pIΩSp
->
P¨amëîs
.
Devi˚IoC⁄åﬁ
.
I≈utBuf„rLígth
)

598 
ByãsRëu∫ed
 = 
Àn
 + (
sock›t
);

600 
ByãsRëu∫ed
 = 
pIΩSp
->
P¨amëîs
.
Devi˚IoC⁄åﬁ
.
I≈utBuf„rLígth
;

604 
NtSètus
 = 
STATUS_NOT_SUPPORTED
;

608 
pIΩ
->
IoSètus
.
Inf‹m©i⁄
 = 
ByãsRëu∫ed
;

609 
pIΩ
->
IoSètus
.
Sètus
 = 
NtSètus
;

610 
	`IoCom∂ëeReque°
(
pIΩ
, 
IO_NO_INCREMENT
);

612  
NtSètus
;

613 
	}
}

615 
dummy√t
(* 
unu£d
);

616 
ùfw_tick
(* 
v√tx
);

618 
VOID
 
	$dummy√t_dpc
(

619 
__ö
 
_KDPC
 *
Dpc
,

620 
__ö_›t
 
PVOID
 
De„ºedC⁄ãxt
,

621 
__ö_›t
 
PVOID
 
Sy°emArgumít1
,

622 
__ö_›t
 
PVOID
 
Sy°emArgumít2


625 
	`dummy√t
(
NULL
);

626 
	}
}

628 
VOID
 
	$ùfw_dpc
(

629 
__ö
 
_KDPC
 *
Dpc
,

630 
__ö_›t
 
PVOID
 
De„ºedC⁄ãxt
,

631 
__ö_›t
 
PVOID
 
Sy°emArgumít1
,

632 
__ö_›t
 
PVOID
 
Sy°emArgumít2


635 
	`ùfw_tick
(
De„ºedC⁄ãxt
);

636 
	}
}

	@kipfw/missing.h

33 #i‚de‡
_MISSING_H_


34 
	#_MISSING_H_


	)

36 
	~<sys/cdefs.h
>

37 #ifde‡
löux


38 
	~<löux/sys˘l.h
>

39 
	~<löux/moduÀ.h
>

40 
	~<löux/moduÀ∑øm.h
>

44 
	#HAVE_NET_IPLEN


	)

45 
	#WITHOUT_BPF


	)

47 #ifde‡
_WIN32


49 #i‚de‡
DEFINE_SPINLOCK


50 
	#DEFINE_SPINLOCK
(
x
Ë
FAST_MUTEX
 
	)
x

54 
	#•ö_lock_öô
(
_l
)

	)

55 
	#•ö_lock_bh
(
_l
)

	)

56 
	#•ö_u∆ock_bh
(
_l
)

	)

58 
	~<sys/sockë.h
>

59 
	~<√töë/ö.h
>

60 
	~<√töë/ù.h
>

61 
	#INADDR_TO_IFP
(
a
, 
b
Ëb = 
NULL


	)

65 
	#MALLOC_DECLARE
(
x
Ë

	)

66 
	~<löux/time.h
>

67 
	~<√töë/ù.h
>

68 
	göpcb
;

78 #i‚de‡
DEFINE_SPINLOCK


79 
	#DEFINE_SPINLOCK
(
x
Ë
•ölock_t
 x = 
SPIN_LOCK_UNLOCKED


	)

83 
	#rw_as£π
(
a
, 
b
)

	)

84 
	#rw_de°roy
(
_l
)

	)

85 
	#rw_öô
(
_l
, 
msg
Ë
	`•ö_lock_öô
(_l)

	)

86 
	#rw_æock
(
_l
Ë
	`•ö_lock_bh
(_l)

	)

87 
	#rw_ru∆ock
(
_l
Ë
	`•ö_u∆ock_bh
(_l)

	)

88 
	#rw_wlock
(
_l
Ë
	`•ö_lock_bh
(_l)

	)

89 
	#rw_wu∆ock
(
_l
Ë
	`•ö_u∆ock_bh
(_l)

	)

90 
	#rw_öô_Êags
(
_l
, 
s
, 
v
)

	)

92 
	#mtx_as£π
(
a
, 
b
)

	)

93 
	#mtx_de°roy
(
m
)

	)

94 
	#mtx_öô
(
m
, 
a
,
b
,
c
Ë
	`•ö_lock_öô
(m)

	)

95 
	#mtx_lock
(
_l
Ë
	`•ö_lock_bh
(_l)

	)

96 
	#mtx_u∆ock
(
_l
Ë
	`•ö_u∆ock_bh
(_l)

	)

115 
	sùfw_ruÀ_ªf
 {

116 
uöt32_t
 
	m¶Ÿ
;

117 
uöt32_t
 
	mruÀnum
;

118 
uöt32_t
 
	mruÀ_id
;

119 
uöt32_t
 
	mchaö_id
;

120 
uöt32_t
 
	möfo
;

124 
	mIPFW_INFO_MASK
 = 0x0000ffff,

125 
	mIPFW_INFO_OUT
 = 0x00000000,

126 
	mIPFW_INFO_IN
 = 0x80000000,

127 
	mIPFW_ONEPASS
 = 0x40000000,

128 
	mIPFW_IS_MASK
 = 0x30000000,

129 
	mIPFW_IS_DIVERT
 = 0x20000000,

130 
	mIPFW_IS_DUMMYNET
 =0x10000000,

131 
	mIPFW_IS_PIPE
 = 0x08000000,

135 
	#ö_nuŒho°
(
x
Ë((x).
s_addr
 =
INADDR_ANY
)

	)

138 
	#bzîo
(
s
, 
n
Ë
	`mem£t
(s, 0,Ç)

	)

139 
	#bcmp
(
p1
, 
p2
, 
n
Ë
	`memcmp
’1,Ö2,Ç)

	)

142 
	#ETHERTYPE_IP
 0x0800

	)

144 
	sëhî_hódî
 {

145 
u_ch¨
 
	mëhî_dho°
[
ETHER_ADDR_LEN
];

146 
u_ch¨
 
	mëhî_sho°
[
ETHER_ADDR_LEN
];

147 
u_sh‹t
 
	mëhî_ty≥
;

150 
	#ETHER_TYPE_LEN
 2

	)

151 
	#ETHER_HDR_LEN
 (
ETHER_ADDR_LEN
*2+
ETHER_TYPE_LEN
)

	)

162 #i‡(
BYTE_ORDER
 =
BIG_ENDIAN
Ë|| 
deföed
(
HAVE_NET_IPLEN
)

163 
	#SET_NET_IPLEN
(
p
Ëdÿ{} 0)

	)

164 
	#SET_HOST_IPLEN
(
p
Ëdÿ{} 0)

	)

166 
	#SET_NET_IPLEN
(
p
) do { \

167 
ù
 *
h_ù
 = (
p
); \

168 
h_ù
->
ù_Àn
 = 
	`ht⁄s
(h_ip->ip_len); \

169 
h_ù
->
ù_off
 = 
	`ht⁄s
(h_ip->ip_off); \

170 } 0)

	)

172 
	#SET_HOST_IPLEN
(
p
) do { \

173 
ù
 *
h_ù
 = (
p
); \

174 
h_ù
->
ù_Àn
 = 
	`¡ohs
(h_ip->ip_len); \

175 
h_ù
->
ù_off
 = 
	`¡ohs
(h_ip->ip_off); \

176 } 0)

	)

180 
	#__FªeBSD_vîsi⁄
 500035

	)

182 #ifde‡
__löux__


183 
	gmoduÀd©a
;

184 
my_mod_ªgi°î
(c⁄° *
«me
,

185 
‹dî
, 
moduÀd©a
 *
mod
, *
öô
, *
unöô
);

189 
	smÆloc_ty≥
 {

192 
	#MALLOC_DEFINE
(
ty≥
, 
sh‹tdesc
, 
l⁄gdesc
) \

193 
mÆloc_ty≥
 
ty≥
[1]; *
md_dummy_
 ##Åy≥ = 
	)
type

195 
	#CTASSERT
(
x
)

	)

198 
	#LOG_ERR
 0x100

	)

199 
	#LOG_INFO
 0x200

	)

200 
	#log
(
_Àvñ
, 
fmt
, 
¨g
...) do { \

201 
_qwîty
=
_Àvñ
;()_qwîty; 
	`¥ötk
(
KERN_ERR
 
fmt
, ##
¨g
); } 0)

	)

207 
gëtimeofday
(
timevÆ
 *, 
timez⁄e
 *);

210 
	#MALLOC_DEFINE
(
a
,
b
,
c
)

	)

213 
hz
;

214 
tick
;

215 
boŸvîbo£
;

216 
timevÆ
 
boŸtime
;

219 #ifde‡
__löux__


220 #i‡
LINUX_VERSION_CODE
 > 
KERNEL_VERSION
(2,4,37)

221 
	#time_u±ime
 
	`gë_£c⁄ds
()

	)

223 
	#time_u±ime
 
CURRENT_TIME


	)

226 
	#time_u±ime
 
	`time_u±ime_w32
()

	)

229 
max_lökhdr
;

230 
ù_de·é
;

231 
u_l⁄g
 
ö_iÁddrhmask
;

232 
ö_iÁddrhashhód
 *
ö_iÁddrhashtbl
;

238 
	~<¨∑/öë.h
>

240 
	gmbuf
;

243 
ªöje˘_dr›
(
mbuf
* 
m
);

245 
	~<löux/î∫o.h
>

246 
	~<löux/if.h
>

248 
∫_öô
();

256 #ifde‡
__löux__


257 
	#icmp_code
 
code


	)

258 
	#icmp_ty≥
 
ty≥


	)

263 
	#__u6_addr
 
ö6_u


	)

264 
	#__u6_addr32
 
u6_addr32


	)

268 
	ss˘phdr
 {

269 
uöt16_t
 
	m§c_p‹t
;

270 
uöt16_t
 
	mde°_p‹t
;

271 
uöt32_t
 
	mv_èg
;

272 
uöt32_t
 
	mchecksum
;

277 
	#TH_FIN
 0x01

	)

278 
	#TH_SYN
 0x02

	)

279 
	#TH_RST
 0x04

	)

280 
	#TH_ACK
 0x10

	)

282 
	#RTF_CLONING
 0x100

	)

284 
	#IPPROTO_OSPFIGP
 89

	)

285 
	#IPPROTO_CARP
 112

	)

286 #i‚de‡
_WIN32


287 
	#IPPROTO_IPV4
 
IPPROTO_IPIP


	)

290 
	#CARP_VERSION
 2

	)

291 
	#CARP_ADVERTISEMENT
 0x01

	)

293 
	#PRIV_NETINET_IPFW
 491

	)

295 
	#IP_FORWARDING
 0x1

	)

297 
	#NETISR_IP
 2

	)

299 
	#PRIV_NETINET_DUMMYNET
 494

	)

301 
£cuªÀvñ
;

303 
	sˇΩ_hódî
 {

304 #i‡
BYTE_ORDER
 =
LITTLE_ENDIAN


305 
u_öt8_t
 
	mˇΩ_ty≥
:4,

306 
	mˇΩ_vîsi⁄
:4;

308 #i‡
BYTE_ORDER
 =
BIG_ENDIAN


309 
u_öt8_t
 
	mˇΩ_vîsi⁄
:4,

310 
	mˇΩ_ty≥
:4;

314 
	spim
 {

315 
	mdummy
;

318 #i‚de‡
_WIN32


319 
	srouã
 {

320 
πíåy
 *
	mro_π
;

321 
sockaddr
 
	mro_d°
;

325 
	siÁ…q
 {

326 *
	mifq_hód
;

333 #i‡
deföed
–
__löux__
)

334 
	#if_x«me
 
«me


	)

335 
	#if_¢d
 
XXX


	)

337 
	~<löux/öëdevi˚.h
>

339 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,25)

340 
	#INADDR_TO_IFP
(
ù
, 
b
) \

341 
b
 = 
	`ù_dev_föd
(
ù
.
s_addr
)

	)

343 
	#INADDR_TO_IFP
(
ù
, 
b
) \

344 
b
 = 
	`ù_dev_föd
((
√t
 *)&
öô_√t
, 
ù
.
s_addr
)

	)

347 #ñi‡
deföed
–
_WIN32
 )

349 
	si‚ë
 {

350 
	mif_x«me
[
IFNAMSIZ
];

354 
	s√t_devi˚
 {

355 
	mif_x«me
[
IFNAMSIZ
];

360 
ö_cksum
(
mbuf
 *
m
, 
Àn
);

361 
	#divît_cookõ
(
mèg
Ë0

	)

362 
	#divît_öfo
(
mèg
Ë0

	)

363 
	#pf_föd_mèg
(
a
Ë
NULL


	)

364 
	#pf_gë_mèg
(
a
Ë
NULL


	)

365 #i‚de‡
_WIN32


366 
	#AF_LINK
 
AF_ASH


	)

370 
	#m_puŒup
(
m
, 
x
) \

371 ((
m
)->
m_Àn
 >
x
 ? (mË: (
	`FREE_PKT
(m), 
NULL
))

	)

373 
	spf_mèg
 {

374 *
	mhdr
;

375 
ß_Ámûy_t
 
	maf
;

376 
u_öt32_t
 
	mqid
;

381 
	sødix_node
 {

382 
ˇddr_t
 
	m∫_key
;

383 
ˇddr_t
 
	m∫_mask
;

388 *
öë_¡ﬂ
(
ö_addr
 
öa
);

389 
øndom
();

398 
öt64_t


399 
div64
(
öt64_t
 
a
, i¡64_à
b
);

402 
öë_¡ﬂ_r
(
ö_addr
 
öa
, *
buf
);

405 
	#TAILQ_FOREACH_SAFE
(
v¨
, 
hód
, 
fõld
, 
tv¨
) \

406 (
v¨
Ë
	`TAILQ_FIRST
((
hód
)); \

407 (
v¨
Ë&& ((
tv¨
Ë
	`TAILQ_NEXT
((v¨), 
fõld
), 1); \

408 (
v¨
Ë(
tv¨
))

	)

410 
	#SLIST_FOREACH_SAFE
(
v¨
, 
hód
, 
fõld
, 
tv¨
) \

411 (
v¨
Ë
	`SLIST_FIRST
((
hód
)); \

412 (
v¨
Ë&& ((
tv¨
Ë
	`SLIST_NEXT
((v¨), 
fõld
), 1); \

413 (
v¨
Ë(
tv¨
))

	)

416 #i‚de‡
ETHERTYPE_IPV6


417 
	#ETHERTYPE_IPV6
 0x86dd

	)

421 
	#RT_NUMFIBS
 1

	)

422 
u_öt
 
π_numfibs
;

425 #ifde‡
RTFREE


426 #unde‡
RTFREE


427 
	#RTFREE
(
a
Ë
	`Ârötf
(
°dîr
, "RTFREE: commíãd ouàlocks\n");

	)

430 
gëmi¸ou±ime
(
timevÆ
 *
tv
);

433 
	gù_m›ti⁄s
;

434 
	grouã
;

435 
	gù
;

437 
mbuf
 *
ù_ªass
(mbuf *);

438 
u_sh‹t
 
ö_cksum_hdr
(
ù
 *);

439 
ù_ouçut
(
mbuf
 *
m
, mbu‡*
›t
, 
rouã
 *
ro
, 
Êags
,

440 
ù_m›ti⁄s
 *
imo
, 
öpcb
 *
öp
);

443 
√ti§_di•©ch
(
num
, 
mbuf
 *
m
);

446 
so›tc›yout
(
sock›t
 *
s›t
, c⁄° *
buf
, 
size_t
 
Àn
);

448 
so›tc›yö
(
sock›t
 *
s›t
, *
buf
, 
size_t
 
Àn
, size_à
möÀn
);

451 
¥iv_check
(
thªad
 *
td
, 
¥iv
);

457 
	sbsd_u¸ed
 {

458 
uid_t
 
	muid
;

459 
gid_t
 
	mgid
;

460 
uöt32_t
 
	mxid
;

461 
uöt32_t
 
	mnid
;

465 
¸ed_check
(*
ö¢
, 
¥Ÿo
, 
i‚ë
 *
oif
,

466 
ö_addr
 
d°_ù
, 
u_öt16_t
 
d°_p‹t
, ö_add∏
§c_ù
,

467 
u_öt16_t
 
§c_p‹t
, 
bsd_u¸ed
 *
u
, *
ugid_lookuµ
,

468 
sk_buff
 *
skb
);

470 
£cuªÀvñ_ge
(
u¸ed
 *
¸
, 
Àvñ
);

472 
	gsys˘l_oid
;

473 
	gsys˘l_ªq
;

475 #ifde‡
_WIN32


476 
	#moduÀ_∑øm_«med
(
_«me
, 
_v¨
, 
_ty
, 
_≥rm
)

	)

480 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,0)

481 
	~<löux/bô›s.h
>

482 
uöt32_t
 
	t__be32
;

483 
uöt16_t
 
	t__be16
;

484 
	gsock
;

485 
	g√t
;

486 
	göë_hashöfo
;

487 
sock
 *
öë_lookup
(

488 
öë_hashöfo
 *
hashöfo
,

489 c⁄° 
__be32
 
ßddr
, c⁄° 
__be16
 
•‹t
,

490 c⁄° 
__be32
 
daddr
, c⁄° 
__be16
 
dp‹t
,

491 c⁄° 
dif
);

492 
sock
 *
t˝_v4_lookup
(
u32
 
ßddr
, 
u16
 
•‹t
, u32 
daddr
, u16 
dp‹t
, 
dif
);

495 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,17) && \

496 
	gLINUX_VERSION_CODE
 > 
	$KERNEL_VERSION
(2,6,16)

497 
	#moduÀ_∑øm_«med
(
_«me
, 
_v¨
, 
_ty
, 
_≥rm
) \

500 

	)

501 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,24)

502 
	tuöçå_t
;

504 #ifde‡
__i386__


505 
ölöe
 
	$__Ês
(
w‹d
)

507 
	`asm
("bsr %1,%0"

508 : "Ù" (
w‹d
)

509 : "rm" (
w‹d
));

510  
w‹d
;

511 
	}
}

518 #i‡
deföed
 (
__löux__
Ë&& !deföed (
EMULATE_SYSCTL
)

519 
	#SYSCTL_DECL
(
_1
)

	)

520 
	#SYSCTL_OID
(
_1
, 
_2
, 
_3
, 
_4
, 
_5
, 
_6
, 
_7
, 
_8
)

	)

521 
	#SYSCTL_NODE
(
_1
, 
_2
, 
_3
, 
_4
, 
_5
, 
_6
)

	)

522 
	#_SYSCTL_BASE
(
_«me
, 
_v¨
, 
_ty
, 
_≥rm
) \

523 
	`moduÀ_∑øm_«med
(
_«me
, *(
_v¨
), 
_ty
, \

524 –(
_≥rm
Ë=
CTLFLAG_RD
Ë? 0444: 0644 )

	)

525 
	#SYSCTL_PROC
(
_ba£
, 
_oid
, 
_«me
, 
_mode
, 
_v¨
, 
_vÆ
, 
_desc
, 
_a
, 
_b
)

	)

527 
	#SYSCTL_INT
(
_ba£
, 
_oid
, 
_«me
, 
_mode
, 
_v¨
, 
_vÆ
, 
_desc
) \

528 
	`_SYSCTL_BASE
(
_«me
, 
_v¨
, , 
_mode
)

	)

530 
	#SYSCTL_LONG
(
_ba£
, 
_oid
, 
_«me
, 
_mode
, 
_v¨
, 
_vÆ
, 
_desc
) \

531 
	`_SYSCTL_BASE
(
_«me
, 
_v¨
, , 
_mode
)

	)

533 
	#SYSCTL_ULONG
(
_ba£
, 
_oid
, 
_«me
, 
_mode
, 
_v¨
, 
_vÆ
, 
_desc
) \

534 
	`_SYSCTL_BASE
(
_«me
, 
_v¨
, 
ul⁄g
, 
_mode
)

	)

536 
	#SYSCTL_UINT
(
_ba£
, 
_oid
, 
_«me
, 
_mode
, 
_v¨
, 
_vÆ
, 
_desc
) \

537 
	`_SYSCTL_BASE
(
_«me
, 
_v¨
, 
uöt
, 
_mode
)

	)

539 
	#TUNABLE_INT
(
_«me
, 
_±r
)

	)

541 
	#SYSCTL_VNET_PROC
 
SYSCTL_PROC


	)

542 
	#SYSCTL_VNET_INT
 
SYSCTL_INT


	)

543 
	#SYSCTL_VNET_UINT
 
SYSCTL_UINT


	)

547 
	#SYSCTL_HANDLER_ARGS
 \

548 
sys˘l_oid
 *
oidp
, *
¨g1
, 
¨g2
, 
sys˘l_ªq
 *
ªq


	)

549 
sys˘l_h™dÀ_öt
(
SYSCTL_HANDLER_ARGS
);

550 
sys˘l_h™dÀ_l⁄g
(
SYSCTL_HANDLER_ARGS
);

553 
ëhî_demux
(
i‚ë
 *
iÂ
, 
mbuf
 *
m
);

555 
ëhî_ouçut_‰ame
(
i‚ë
 *
iÂ
, 
mbuf
 *
m
);

557 
ö_πÆloc_ign
(
rouã
 *
ro
, 
u_l⁄g
 
ignÊags
, 
u_öt
 
fibnum
);

559 
icmp_îr‹
(
mbuf
 *
n
, 
ty≥
, 
code
, 
uöt32_t
 
de°
, 
mtu
);

561 
π‰ì
(
πíåy
 *
π
);

563 
u_sh‹t
 
ö_cksum_skù
(
mbuf
 *
m
, 
Àn
, 
skù
);

565 #ifde‡
INP_LOCK_ASSERT


566 #unde‡
INP_LOCK_ASSERT


567 
	#INP_LOCK_ASSERT
(
a
)

	)

570 
jaûed
(
u¸ed
 *
¸ed
);

578 
ö_loˇœddr
(
ö_addr
 
ö
);

583 
‚m©ch
(c⁄° *
∑âîn
, c⁄° *
°rög
, 
Êags
);

586 
löux_lookup
(c⁄° 
¥Ÿo
, c⁄° 
__be32
 
ßddr
, c⁄° 
__be16
 
•‹t
,

587 c⁄° 
__be32
 
daddr
, c⁄° 
__be16
 
dp‹t
,

588 
sk_buff
 *
skb
, 
dú
, 
bsd_u¸ed
 *
u
);

594 
	#MTAG_IPFW
 1148380143

	)

595 
	#MTAG_IPFW_RULE
 1262273568

	)

597 
	gù_fw_¨gs
;

598 (*
ù_dn_io_±r
)(
mbuf
 **
m
, 
dú
, 
ù_fw_¨gs
 *
fwa
);

600 
	#curv√t
 
NULL


	)

601 
	#CURVNET_SET
(
_v
)

	)

602 
	#CURVNET_RESTORE
()

	)

603 
	#VNET_ASSERT
(
c⁄dôi⁄
)

	)

605 
	#VNET_NAME
(
n
Ë
	)
n

606 
	#VNET_DECLARE
(
t
, 
n
Ëà
	)
n

607 
	#VNET_DEFINE
(
t
, 
n
Ëà
	)
n

608 
	#_VNET_PTR
(
b
, 
n
Ë&
	`VNET_NAME
“)

	)

612 
	#VNET_VNET_PTR
(
v√t
, 
n
Ë(&“))

	)

613 
	#VNET_VNET
(
v√t
, 
n
Ë“)

	)

615 
	#VNET_PTR
(
n
Ë(&“))

	)

616 
	#VNET
(
n
Ë“)

	)

618 
	`VNET_DECLARE
(, 
ù_de·é
);

619 
	#V_ù_de·é
 
	`VNET
(
ù_de·é
);

	)

621 
	`ùfw_check_hook
(*
¨g
, 
mbuf
 **
m0
, 
i‚ë
 *
iÂ
,

622 
dú
, 
öpcb
 *
öp
);

625 (*
ù_divît_±r
)(
mbuf
 *
m
, 
öcomög
);

627 (*
ù_dn_˘l_±r
)(
sock›t
 *);

628 
	tù_fw_˘l_t
(
	tsock›t
 *);

629 
ù_fw_˘l_t
 *
ù_fw_˘l_±r
;

632 
	tng_ùfw_öput_t
(
	tmbuf
 **, , 
	tù_fw_¨gs
 *, );

633 
ng_ùfw_öput_t
 *
ng_ùfw_öput_p
;

636 
ù_fw_¨gs
;

637 
	tù_fw_chk_t
(
	tù_fw_¨gs
 *
	t¨gs
);

638 
ù_fw_chk_t
 *
ù_fw_chk_±r
;

640 
	#V_ù_fw_chk_±r
 
	`VNET
(
ù_fw_chk_±r
)

	)

641 
	#V_ù_fw_˘l_±r
 
	`VNET
(
ù_fw_˘l_±r
)

	)

642 
	#V_tcböfo
 
	`VNET
(
tcböfo
)

	)

643 
	#V_udböfo
 
	`VNET
(
udböfo
)

	)

	@kipfw/winmissing.h

32 #i‚de‡
_WINMISSING_H_


33 
	#_WINMISSING_H_


	)

35 
	~<¡ifs.h
>

36 
	~<¡ddk.h
>

37 
	~<ba£tsd.h
>

38 
	~<wödef.h
>

39 
	~<°dio.h
>

40 
	~<ndis.h
>

42 
UCHAR
 
	tu_ch¨
;

43 
UCHAR
 
	tu_öt8_t
;

44 
UCHAR
 
	tuöt8_t
;

45 
USHORT
 
	tu_sh‹t
;

46 
USHORT
 
	tu_öt16_t
;

47 
USHORT
 
	tuöt16_t
;

48 
USHORT
 
	tn_sh‹t
;

49 
UINT
 
	tu_öt
;

50 
INT32
 
	töt32_t
;

51 
UINT32
 
	tu_öt32_t
;

52 
UINT32
 
	tuöt32_t
;

53 
ULONG
 
	tu_l⁄g
;

54 
ULONG
 
	tn_l⁄g
;

55 
UINT64
 
	tuöt64_t
;

56 
UINT64
 
	tu_öt64_t
;

57 
INT64
 
	töt64_t
;

59 
UINT32
 
	tö_addr_t
;

60 
UCHAR
 
	tß_Ámûy_t
;

61 
USHORT
 
	tö_p‹t_t
;

62 
UINT32
 
	t__gid_t
;

63 
UINT32
 
	tgid_t
;

64 
UINT32
 
	t__uid_t
;

65 
UINT32
 
	tuid_t
;

66 
ULONG
 
	tn_time
;

67 * 
	tˇddr_t
;

70 
uöt32_t
 
	t__be32
;

71 
uöt16_t
 
	t__be16
;

78 
	#¥ötf
 
DbgPröt


	)

79 
	#log
(
Àv
, ...Ë
	`DbgPröt
(
__VA_ARGS__
)

	)

80 c⁄° * 
ãxify_cmd
(
i
);

81 c⁄° * 
ãxify_¥Ÿo
(
p
);

84 
	#¢¥ötf
 
_¢¥ötf


	)

85 
	#time•ec
 
timevÆ


	)

86 
	stimevÆ
 {

87 
	mtv_£c
;

88 
	mtv_u£c
;

91 
	sö_addr
 {

92 
ö_addr_t
 
	ms_addr
;

95 
	ssockaddr_ö
 {

96 
uöt8_t
 
	msö_Àn
;

97 
ß_Ámûy_t
 
	msö_Ámûy
;

98 
ö_p‹t_t
 
	msö_p‹t
;

99 
ö_addr
 
	msö_addr
;

100 
	msö_zîo
[8];

104 
	#IFNAMSIZ
 16

	)

105 
	#IF_NAMESIZE
 16

	)

107 
	#ETHER_ADDR_LEN
 6

	)

112 
	sö6_addr
 {

114 
uöt8_t
 
	m__u6_addr8
[16];

115 
uöt16_t
 
	m__u6_addr16
[8];

116 
uöt32_t
 
	m__u6_addr32
[4];

117 } 
	m__u6_addr
;

120 
	#ht⁄s
(
x
Ë
	`RéUsh‹tByãSw≠
(x)

	)

121 
	#¡ohs
(
x
Ë
	`RéUsh‹tByãSw≠
(x)

	)

122 
	#ht⁄l
(
x
Ë
	`RéUl⁄gByãSw≠
(x)

	)

123 
	#¡ohl
(
x
Ë
	`RéUl⁄gByãSw≠
(x)

	)

125 
	#ENOSPC
 28

	)

126 
	#EOPNOTSUPP
 45

	)

127 
	#EACCES
 13

	)

128 
	#ENOENT
 2

	)

129 
	#EINVAL
 22

	)

130 
	#EPROTONOSUPPORT
 43

	)

131 
	#ENOMEM
 12

	)

132 
	#EEXIST
 17

	)

133 
	#ESRCH
 3

	)

134 
	#ENOBUFS
 55

	)

135 
	#EBUSY
 16

	)

138 
	#off£tof
(
TYPE
, 
MEMBER
Ë((
size_t
Ë&((TYPE *)0)->MEMBER)

	)

139 
	#__∑cked


	)

140 
	#__Æig√d
(
x
);

	)

141 
	#__u£r


	)

142 
	#__öô


	)

143 
	#__exô


	)

144 
	#__func__
 
__FUNCTION__


	)

145 
	#ölöe
 
__ölöe


	)

147 
	ssockaddr_ö6
 {

148 
	mdummy
;

152 
	#DEFINE_SPINLOCK
(
x
Ë
NDIS_SPIN_LOCK
 
	)
x

153 
	#mtx_öô
(
m
,
a
,
b
,
c
Ë
	`NdisAŒoˇãSpöLock
(m)

	)

154 
	#mtx_lock
(
_l
Ë
	`NdisAcquúeSpöLock
(_l)

	)

155 
	#mtx_u∆ock
(
_l
Ë
	`NdisRñó£SpöLock
(_l)

	)

156 
	#mtx_de°roy
(
m
Ë
	`NdisFªeSpöLock
(m)

	)

157 
	#mtx_as£π
(
a
, 
b
)

	)

159 
	#rw_æock
(
_l
Ë
	`NdisAcquúeSpöLock
(_l)

	)

160 
	#rw_ru∆ock
(
_l
Ë
	`NdisRñó£SpöLock
(_l)

	)

161 
	#rw_as£π
(
a
, 
b
)

	)

162 
	#rw_wlock
(
_l
Ë
	`NdisAcquúeSpöLock
(_l)

	)

163 
	#rw_wu∆ock
(
_l
Ë
	`NdisRñó£SpöLock
(_l)

	)

164 
	#rw_de°roy
(
_l
Ë
	`NdisFªeSpöLock
(_l)

	)

165 
	#rw_öô
(
_l
, 
msg
Ë
	`NdisAŒoˇãSpöLock
(_l)

	)

166 
	#rw_öô_Êags
(
_l
, 
s
, 
v
Ë
	`NdisAŒoˇãSpöLock
(_l)

	)

168 
	#rwlock_t
 
NDIS_SPIN_LOCK


	)

169 
	#•ölock_t
 
NDIS_SPIN_LOCK


	)

171 
	#s6_addr
 
__u6_addr
.
__u6_addr8


	)

174 
	sicmphdr
 {

175 
u_ch¨
 
	micmp_ty≥
;

176 
u_ch¨
 
	micmp_code
;

177 
u_sh‹t
 
	micmp_cksum
;

180 
	#ICMP_ECHO
 8

	)

182 
	#IPOPT_OPTVAL
 0

	)

183 
	#IPOPT_OLEN
 1

	)

184 
	#IPOPT_EOL
 0

	)

185 
	#IPOPT_NOP
 1

	)

186 
	#IPOPT_LSRR
 131

	)

187 
	#IPOPT_SSRR
 137

	)

188 
	#IPOPT_RR
 7

	)

189 
	#IPOPT_TS
 68

	)

191 
	#IPPROTO_ICMP
 1

	)

192 
	#IPPROTO_TCP
 6

	)

193 
	#IPPROTO_UDP
 17

	)

194 
	#IPPROTO_ICMPV6
 58

	)

195 
	#IPPROTO_SCTP
 132

	)

196 
	#IPPROTO_HOPOPTS
 0

	)

197 
	#IPPROTO_ROUTING
 43

	)

198 
	#IPPROTO_FRAGMENT
 44

	)

199 
	#IPPROTO_DSTOPTS
 60

	)

200 
	#IPPROTO_AH
 51

	)

201 
	#IPPROTO_ESP
 50

	)

202 
	#IPPROTO_NONE
 59

	)

203 
	#IPPROTO_PIM
 103

	)

205 
	#IPPROTO_IPV6
 41

	)

206 
	#IPPROTO_IPV4
 4

	)

209 
	#INADDR_ANY
 (
uöt32_t
)0x00000000

	)

211 
	#AF_INET
 2

	)

212 
	#AF_LINK
 18

	)

214 
	#IN_CLASSD
(
i
Ë(((
uöt32_t
)(iË& 0xf0000000Ë=0xe0000000)

	)

215 
	#IN_MULTICAST
(
i
Ë
	`IN_CLASSD
(i)

	)

217 
	#DROP
 0

	)

218 
	#PASS
 1

	)

219 
	#DUMMYNET
 2

	)

220 
	#INCOMING
 0

	)

221 
	#OUTGOING
 1

	)

223 
size_t
 
°æ˝y
(*
d°
, c⁄° *
§c
, size_à
siz
);

224 
do_gëtimeofday
(
timevÆ
 *
tv
);

225 
ffs
(
bôs
);

226 
time_u±ime_w32
();

	@sys/net/if.h

1 
	~<löux/if.h
>

	@sys/net/pfil.h

32 #i‚de‡
_NET_PFIL_H_


33 
	#_NET_PFIL_H_


	)

35 
	~<sys/sy°m.h
>

36 
	~<sys/queue.h
>

37 
	~<sys/_lock.h
>

38 
	~<sys/_muãx.h
>

39 
	~<sys/lock.h
>

40 
	~<sys/rmlock.h
>

42 
	gmbuf
;

43 
	gi‚ë
;

44 
	göpcb
;

50 
	s∑ckë_fûãr_hook
 {

51 
TAILQ_ENTRY
(
∑ckë_fûãr_hook
Ë
	mpfû_lök
;

52 (*
	mpfû_func
)(*, 
	mmbuf
 **, 
	mi‚ë
 *, ,

53 
	möpcb
 *);

54 *
	mpfû_¨g
;

57 
	#PFIL_IN
 0x00000001

	)

58 
	#PFIL_OUT
 0x00000002

	)

59 
	#PFIL_WAITOK
 0x00000004

	)

60 
	#PFIL_ALL
 (
PFIL_IN
|
PFIL_OUT
)

	)

62 
	$TAILQ_HEAD
(
	tpfû_li°
, 
	t∑ckë_fûãr_hook
Ë
	tpfû_li°_t
;

64 
	#PFIL_TYPE_AF
 1

	)

65 
	#PFIL_TYPE_IFNET
 2

	)

67 
	spfû_hód
 {

68 
pfû_li°_t
 
ph_ö
;

69 
pfû_li°_t
 
ph_out
;

70 
ph_ty≥
;

71 
ph_nhooks
;

72 #i‡
	`deföed
–
__löux__
 ) || deföed–
_WIN32
 )

73 
rwlock_t
 
ph_mtx
;

75 
rmlock
 
ph_lock
;

78 
u_l⁄g
 
phu_vÆ
;

79 *
phu_±r
;

80 } 
ph_un
;

81 
	#ph_af
 
ph_un
.
phu_vÆ


	)

82 
	#ph_i‚ë
 
ph_un
.
phu_±r


	)

83 
	`LIST_ENTRY
(
pfû_hód
Ë
ph_li°
;

86 
	`pfû_add_hook
((*
func
)(*, 
mbuf
 **, 
i‚ë
 *,

87 , 
öpcb
 *), *, , 
pfû_hód
 *);

88 
	`pfû_ªmove_hook
((*
func
)(*, 
mbuf
 **, 
i‚ë
 *,

89 , 
öpcb
 *), *, , 
pfû_hód
 *);

90 
	`pfû_run_hooks
(
pfû_hód
 *, 
mbuf
 **, 
i‚ë
 *,

91 , 
öpcb
 *
öp
);

93 
	`pfû_hód_ªgi°î
(
pfû_hód
 *);

94 
	`pfû_hód_uƒegi°î
(
pfû_hód
 *);

96 
pfû_hód
 *
	`pfû_hód_gë
(, 
u_l⁄g
);

98 
	#PFIL_HOOKED
(
p
Ë(’)->
ph_nhooks
 > 0)

	)

99 
	#PFIL_LOCK_INIT
(
p
) \

100 
	`rm_öô_Êags
(&(
p
)->
ph_lock
, "PFû hookÑód/wrôêmuãx", 
RM_RECURSE
)

	)

101 
	#PFIL_LOCK_DESTROY
(
p
Ë
	`rm_de°roy
(&’)->
ph_lock
)

	)

102 
	#PFIL_RLOCK
(
p
, 
t
Ë
	`rm_æock
(&’)->
ph_lock
, (t))

	)

103 
	#PFIL_WLOCK
(
p
Ë
	`rm_wlock
(&’)->
ph_lock
)

	)

104 
	#PFIL_RUNLOCK
(
p
, 
t
Ë
	`rm_ru∆ock
(&’)->
ph_lock
, (t))

	)

105 
	#PFIL_WUNLOCK
(
p
Ë
	`rm_wu∆ock
(&’)->
ph_lock
)

	)

106 
	#PFIL_LIST_LOCK
(Ë
	`mtx_lock
(&
pfû_globÆ_lock
)

	)

107 
	#PFIL_LIST_UNLOCK
(Ë
	`mtx_u∆ock
(&
pfû_globÆ_lock
)

	)

109 
__ölöe
 
∑ckë_fûãr_hook
 *

110 
	$pfû_hook_gë
(
dú
, 
pfû_hód
 *
ph
)

113 i‡(
dú
 =
PFIL_IN
)

114  (
	`TAILQ_FIRST
(&
ph
->
ph_ö
));

115 i‡(
dú
 =
PFIL_OUT
)

116  (
	`TAILQ_FIRST
(&
ph
->
ph_out
));

118  (
NULL
);

119 
	}
}

	@sys/net/radix.c

36 
	~<sys/∑øm.h
>

37 #ifdef 
_KERNEL


38 
	~<sys/lock.h
>

39 
	~<sys/muãx.h
>

40 
	~<sys/rwlock.h
>

41 
	~<sys/sy°m.h
>

42 
	~<sys/mÆloc.h
>

43 
	~<sys/sy¶og.h
>

44 
	~<√t/ødix.h
>

45 
	~"›t_m∑th.h
"

46 #ifde‡
RADIX_MPATH


47 
	~<√t/ødix_m∑th.h
>

50 
	~<°dio.h
>

51 
	~<°rögs.h
>

52 
	~<°dlib.h
>

53 
	#log
(
x
, 
¨g
...Ë
	`Ârötf
(
°dîr
, ##árg)

	)

54 
	#∑nic
(
x
Ë
	`Ârötf
(
°dîr
, "PANIC: %s", x), 
	`exô
(1)

	)

55 
	#mö
(
a
, 
b
Ë(◊Ë< (bË? (aË: (bË)

	)

56 
	~<√t/ødix.h
>

59 
∫_wÆkåì_‰om
(
ødix_node_hód
 *
h
, *
a
, *
m
,

60 
wÆkåì_f_t
 *
f
, *
w
);

61 
∫_wÆkåì
(
ødix_node_hód
 *, 
wÆkåì_f_t
 *, *);

62 
ødix_node


63 *
∫_ö£π
(*, 
ødix_node_hód
 *, *,

64 
ødix_node
 [2]),

65 *
∫_√w∑ú
(*, , 
ødix_node
[2]),

66 *
∫_£¨ch
(*, 
ødix_node
 *),

67 *
∫_£¨ch_m
(*, 
ødix_node
 *, *);

69 
	gmax_keyÀn
;

70 
ødix_mask
 *
	g∫_mk‰ìli°
;

71 
ødix_node_hód
 *
	gmask_∫hód
;

78 *
	g∫_zîos
, *
	g∫_⁄es
, *
	gaddmask_key
;

80 
	#MKGë
(
m
) { \

81 i‡(
∫_mk‰ìli°
) { \

82 
m
 = 
∫_mk‰ìli°
; \

83 
∫_mk‰ìli°
 = (
m
)->
rm_mkli°
; \

85 
	`R_MÆloc
(
m
, 
ødix_mask
 *,  (ødix_mask)); }

	)

87 
	#MKFªe
(
m
Ë{ (m)->
rm_mkli°
 = 
∫_mk‰ìli°
;Ñn_mk‰ìli° = (m);}

	)

89 
	#∫_maskt›
 (
mask_∫hód
->
∫h_åìt›
)

	)

91 
∫_Àxobëãr
(*
m_¨g
, *
n_¨g
);

92 
ødix_mask
 *

93 
∫_√w_ødix_mask
(
ødix_node
 *
â
,

94 
ødix_mask
 *
√xt
);

95 
∫_ßtisfõs_Àaf
(*
åül
, 
ødix_node
 *
Àaf
,

96 
skù
);

142 
	#LEN
(
x
Ë–(Ë(*(c⁄° 
u_ch¨
 *)(x)Ë)

	)

158 
ødix_node
 *

159 
	$∫_£¨ch
(
v_¨g
, 
hód
)

160 *
v_¨g
;

161 
ødix_node
 *
hód
;

163 
ødix_node
 *
x
;

164 
ˇddr_t
 
v
;

166 
x
 = 
hód
, 
v
 = 
v_¨g
; x->
∫_bô
 >= 0;) {

167 i‡(
x
->
∫_bmask
 & 
v
[x->
∫_off£t
])

168 
x
 = x->
∫_right
;

170 
x
 = x->
∫_À·
;

172  (
x
);

173 
	}
}

179 
ødix_node
 *

180 
	$∫_£¨ch_m
(
v_¨g
, 
hód
, 
m_¨g
)

181 
ødix_node
 *
hód
;

182 *
v_¨g
, *
m_¨g
;

184 
ødix_node
 *
x
;

185 
ˇddr_t
 
v
 = 
v_¨g
, 
m
 = 
m_¨g
;

187 
x
 = 
hód
; x->
∫_bô
 >= 0;) {

188 i‡((
x
->
∫_bmask
 & 
m
[x->
∫_off£t
]) &&

189 (
x
->
∫_bmask
 & 
v
[x->
∫_off£t
]))

190 
x
 = x->
∫_right
;

192 
x
 = x->
∫_À·
;

194  
x
;

195 
	}
}

198 
	$∫_ªföes
(
m_¨g
, 
n_¨g
)

199 *
m_¨g
, *
n_¨g
;

201 
ˇddr_t
 
m
 = 
m_¨g
, 
n
 = 
n_¨g
;

202 
ˇddr_t
 
lim
, 
lim2
 =Üim = 
n
 + 
	`LEN
(n);

203 
l⁄gî
 = 
	`LEN
(
n
++Ë- LEN(
m
++);

204 
masks_¨e_equÆ
 = 1;

206 i‡(
l⁄gî
 > 0)

207 
lim
 -
l⁄gî
;

208 
n
 < 
lim
) {

209 i‡(*
n
 & ~(*
m
))

211 i‡(*
n
++ !*
m
++)

212 
masks_¨e_equÆ
 = 0;

214 
n
 < 
lim2
)

215 i‡(*
n
++)

217 i‡(
masks_¨e_equÆ
 && (
l⁄gî
 < 0))

218 
lim2
 = 
m
 - 
l⁄gî
; m <Üim2; )

219 i‡(*
m
++)

221  (!
masks_¨e_equÆ
);

222 
	}
}

224 
ødix_node
 *

225 
	$∫_lookup
(
v_¨g
, 
m_¨g
, 
hód
)

226 *
v_¨g
, *
m_¨g
;

227 
ødix_node_hód
 *
hód
;

229 
ødix_node
 *
x
;

230 
ˇddr_t
 
√tmask
 = 0;

232 i‡(
m_¨g
) {

233 
x
 = 
	`∫_addmask
(
m_¨g
, 1, 
hód
->
∫h_åìt›
->
∫_off£t
);

234 i‡(
x
 == 0)

236 
√tmask
 = 
x
->
∫_key
;

238 
x
 = 
	`∫_m©ch
(
v_¨g
, 
hód
);

239 i‡(
x
 && 
√tmask
) {

240 
x
 && x->
∫_mask
 !
√tmask
)

241 
x
 = x->
∫_du≥dkey
;

243  
x
;

244 
	}
}

247 
	$∫_ßtisfõs_Àaf
(
åül
, 
Àaf
, 
skù
)

248 *
åül
;

249 
ødix_node
 *
Àaf
;

250 
skù
;

252 *
˝
 = 
åül
, *
˝2
 = 
Àaf
->
∫_key
, *
˝3
 =Üóf->
∫_mask
;

253 *
˝lim
;

254 
Àngth
 = 
	`mö
(
	`LEN
(
˝
), LEN(
˝2
));

256 i‡(
˝3
 =
NULL
)

257 
˝3
 = 
∫_⁄es
;

259 
Àngth
 = 
	`mö
÷ígth, 
	`LEN
(
˝3
));

260 
˝lim
 = 
˝
 + 
Àngth
; 
˝3
 +
skù
; 
˝2
 += skip;

261 
˝
 +
skù
; c∞< 
˝lim
; cp++, 
˝2
++, 
˝3
++)

262 i‡((*
˝
 ^ *
˝2
Ë& *
˝3
)

265 
	}
}

267 
ødix_node
 *

268 
	$∫_m©ch
(
v_¨g
, 
hód
)

269 *
v_¨g
;

270 
ødix_node_hód
 *
hód
;

272 
ˇddr_t
 
v
 = 
v_¨g
;

273 
ødix_node
 *
t
 = 
hód
->
∫h_åìt›
, *
x
;

274 
ˇddr_t
 
˝
 = 
v
, 
˝2
;

275 
ˇddr_t
 
˝lim
;

276 
ødix_node
 *
ßved_t
, *
t›
 = 
t
;

277 
off
 = 
t
->
∫_off£t
, 
vÀn
 = 
	`LEN
(
˝
), 
m©ched_off
;

278 
ã°
, 
b
, 
∫_bô
;

284 ; 
t
->
∫_bô
 >= 0; ) {

285 i‡(
t
->
∫_bmask
 & 
˝
[t->
∫_off£t
])

286 
t
 =Å->
∫_right
;

288 
t
 =Å->
∫_À·
;

301 i‡(
t
->
∫_mask
)

302 
vÀn
 = *(
u_ch¨
 *)
t
->
∫_mask
;

303 
˝
 +
off
; 
˝2
 = 
t
->
∫_key
 + off; 
˝lim
 = 
v
 + 
vÀn
;

304 ; 
˝
 < 
˝lim
; cp++, 
˝2
++)

305 i‡(*
˝
 !*
˝2
)

306 
⁄1
;

314 i‡(
t
->
∫_Êags
 & 
RNF_ROOT
)

315 
t
 =Å->
∫_du≥dkey
;

316  
t
;

317 
⁄1
:

318 
ã°
 = (*
˝
 ^ *
˝2
) & 0xff;

319 
b
 = 7; (
ã°
 >>= 1) > 0;)

320 
b
--;

321 
m©ched_off
 = 
˝
 - 
v
;

322 
b
 +
m©ched_off
 << 3;

323 
∫_bô
 = -1 - 
b
;

327 i‡((
ßved_t
 = 
t
)->
∫_mask
 == 0)

328 
t
 =Å->
∫_du≥dkey
;

329 ; 
t
;Å =Å->
∫_du≥dkey
)

335 i‡(
t
->
∫_Êags
 & 
RNF_NORMAL
) {

336 i‡(
∫_bô
 <
t
->rn_bit)

337  
t
;

338 } i‡(
	`∫_ßtisfõs_Àaf
(
v
, 
t
, 
m©ched_off
))

339  
t
;

340 
t
 = 
ßved_t
;

343 
ødix_mask
 *
m
;

344 
t
 =Å->
∫_∑ª¡
;

345 
m
 = 
t
->
∫_mkli°
;

352 
m
) {

353 i‡(
m
->
rm_Êags
 & 
RNF_NORMAL
) {

354 i‡(
∫_bô
 <
m
->
rm_bô
)

355  (
m
->
rm_Àaf
);

357 
off
 = 
	`mö
(
t
->
∫_off£t
, 
m©ched_off
);

358 
x
 = 
	`∫_£¨ch_m
(
v
, 
t
, 
m
->
rm_mask
);

359 
x
 && x->
∫_mask
 !
m
->
rm_mask
)

360 
x
 = x->
∫_du≥dkey
;

361 i‡(
x
 && 
	`∫_ßtisfõs_Àaf
(
v
, x, 
off
))

362  
x
;

364 
m
 = m->
rm_mkli°
;

366 } 
t
 !
t›
);

368 
	}
}

370 #ifde‡
RN_DEBUG


371 
	g∫_nodíum
;

372 
ødix_node
 *
	g∫_˛i°
;

373 
	g∫_ßveöfo
;

374 
	g∫_debug
 = 1;

388 
ødix_node
 *

389 
	$∫_√w∑ú
(
v
, 
b
, 
nodes
)

390 *
v
;

391 
b
;

392 
ødix_node
 
nodes
[2];

394 
ødix_node
 *
â
 = 
nodes
, *
t
 =Åt + 1;

395 
t
->
∫_bô
 = 
b
;

396 
t
->
∫_bmask
 = 0x80 >> (
b
 & 7);

397 
t
->
∫_À·
 = 
â
;

398 
t
->
∫_off£t
 = 
b
 >> 3;

401 
t
->
∫_∑ª¡
 =Å->
∫_right
 = 
NULL
;

403 
â
->
∫_mask
 = 
NULL
;

404 
â
->
∫_du≥dkey
 = 
NULL
;

405 
â
->
∫_bmask
 = 0;

407 
â
->
∫_bô
 = -1;

408 
â
->
∫_key
 = (
ˇddr_t
)
v
;

409 
â
->
∫_∑ª¡
 = 
t
;

410 
â
->
∫_Êags
 = 
t
->∫_Êag†
RNF_ACTIVE
;

411 
â
->
∫_mkli°
 = 
t
->rn_mklist = 0;

412 #ifde‡
RN_DEBUG


413 
â
->
∫_öfo
 = 
∫_nodíum
++; 
t
->rn_info =Ñn_nodenum++;

414 
â
->
∫_twö
 = 
t
;

415 
â
->
∫_ybro
 = 
∫_˛i°
;

416 
∫_˛i°
 = 
â
;

418  
t
;

419 
	}
}

421 
ødix_node
 *

422 
	$∫_ö£π
(
v_¨g
, 
hód
, 
du≥¡ry
, 
nodes
)

423 *
v_¨g
;

424 
ødix_node_hód
 *
hód
;

425 *
du≥¡ry
;

426 
ødix_node
 
nodes
[2];

428 
ˇddr_t
 
v
 = 
v_¨g
;

429 
ødix_node
 *
t›
 = 
hód
->
∫h_åìt›
;

430 
hód_off
 = 
t›
->
∫_off£t
, 
vÀn
 = 
	`LEN
(
v
);

431 
ødix_node
 *
t
 = 
	`∫_£¨ch
(
v_¨g
, 
t›
);

432 
ˇddr_t
 
˝
 = 
v
 + 
hód_off
;

433 
b
;

434 
ødix_node
 *
â
;

439 
ˇddr_t
 
˝2
 = 
t
->
∫_key
 + 
hód_off
;

440 
cmp_ªs
;

441 
ˇddr_t
 
˝lim
 = 
v
 + 
vÀn
;

443 
˝
 < 
˝lim
)

444 i‡(*
˝2
++ !*
˝
++)

445 
⁄1
;

446 *
du≥¡ry
 = 1;

447  
t
;

448 
⁄1
:

449 *
du≥¡ry
 = 0;

450 
cmp_ªs
 = (
˝
[-1] ^ 
˝2
[-1]) & 0xff;

451 
b
 = (
˝
 - 
v
Ë<< 3; 
cmp_ªs
; b--)

452 
cmp_ªs
 >>= 1;

455 
ødix_node
 *
p
, *
x
 = 
t›
;

456 
˝
 = 
v
;

458 
p
 = 
x
;

459 i‡(
˝
[
x
->
∫_off£t
] & x->
∫_bmask
)

460 
x
 = x->
∫_right
;

462 
x
 = x->
∫_À·
;

463 } 
b
 > (Ë
x
->
∫_bô
);

465 #ifde‡
RN_DEBUG


466 i‡(
∫_debug
)

467 
	`log
(
LOG_DEBUG
, "∫_ö£π: Goög In:\n"), 
	`åavî£
(
p
);

469 
t
 = 
	`∫_√w∑ú
(
v_¨g
, 
b
, 
nodes
);

470 
â
 = 
t
->
∫_À·
;

471 i‡((
˝
[
p
->
∫_off£t
] &Ö->
∫_bmask
) == 0)

472 
p
->
∫_À·
 = 
t
;

474 
p
->
∫_right
 = 
t
;

475 
x
->
∫_∑ª¡
 = 
t
;

476 
t
->
∫_∑ª¡
 = 
p
;

477 i‡((
˝
[
t
->
∫_off£t
] &Å->
∫_bmask
) == 0) {

478 
t
->
∫_right
 = 
x
;

480 
t
->
∫_right
 = 
â
;

481 
t
->
∫_À·
 = 
x
;

483 #ifde‡
RN_DEBUG


484 i‡(
∫_debug
)

485 
	`log
(
LOG_DEBUG
, "∫_ö£π: Comög Out:\n"), 
	`åavî£
(
p
);

488  (
â
);

489 
	}
}

491 
ødix_node
 *

492 
	$∫_addmask
(
n_¨g
, 
£¨ch
, 
skù
)

493 
£¨ch
, 
skù
;

494 *
n_¨g
;

496 
ˇddr_t
 
√tmask
 = (ˇddr_t)
n_¨g
;

497 
ødix_node
 *
x
;

498 
ˇddr_t
 
˝
, 
˝lim
;

499 
b
 = 0, 
mÀn
, 
j
;

500 
maskdu∂iˇãd
, 
m0
, 
i¢‹mÆ
;

501 
ødix_node
 *
ßved_x
;

502 
œ°_zî€d
 = 0;

504 i‡((
mÀn
 = 
	`LEN
(
√tmask
)Ë> 
max_keyÀn
)

505 
mÀn
 = 
max_keyÀn
;

506 i‡(
skù
 == 0)

507 
skù
 = 1;

508 i‡(
mÀn
 <
skù
)

509  (
mask_∫hód
->
∫h_nodes
);

510 i‡(
skù
 > 1)

511 
	`bc›y
(
∫_⁄es
 + 1, 
addmask_key
 + 1, 
skù
 - 1);

512 i‡((
m0
 = 
mÀn
Ë> 
skù
)

513 
	`bc›y
(
√tmask
 + 
skù
, 
addmask_key
 + skù, 
mÀn
 - skip);

517 
˝
 = 
addmask_key
 + 
mÀn
; (cp >áddmask_key) && cp[-1] == 0;)

518 
˝
--;

519 
mÀn
 = 
˝
 - 
addmask_key
;

520 i‡(
mÀn
 <
skù
) {

521 i‡(
m0
 >
œ°_zî€d
)

522 
œ°_zî€d
 = 
mÀn
;

523  (
mask_∫hód
->
∫h_nodes
);

525 i‡(
m0
 < 
œ°_zî€d
)

526 
	`bzîo
(
addmask_key
 + 
m0
, 
œ°_zî€d
 - m0);

527 *
addmask_key
 = 
œ°_zî€d
 = 
mÀn
;

528 
x
 = 
	`∫_£¨ch
(
addmask_key
, 
∫_maskt›
);

529 i‡(
	`bcmp
(
addmask_key
, 
x
->
∫_key
, 
mÀn
) != 0)

530 
x
 = 0;

531 i‡(
x
 || 
£¨ch
)

532  (
x
);

533 
	`R_ZÆloc
(
x
, 
ødix_node
 *, 
max_keyÀn
 + 2 *  (*x));

534 i‡((
ßved_x
 = 
x
) == 0)

536 
√tmask
 = 
˝
 = (
ˇddr_t
)(
x
 + 2);

537 
	`bc›y
(
addmask_key
, 
˝
, 
mÀn
);

538 
x
 = 
	`∫_ö£π
(
˝
, 
mask_∫hód
, &
maskdu∂iˇãd
, x);

539 i‡(
maskdu∂iˇãd
) {

540 
	`log
(
LOG_ERR
, "rn_addmask: mask impossiblyálready inÅree");

541 
	`Fªe
(
ßved_x
);

542  (
x
);

551 
˝lim
 = 
√tmask
 + 
mÀn
;

552 
i¢‹mÆ
 = 1;

553 
˝
 = 
√tmask
 + 
skù
; (˝ < 
˝lim
Ë&& *(
u_ch¨
 *)cp == 0xff;)

554 
˝
++;

555 i‡(
˝
 !
˝lim
) {

556 
n‹mÆ_ch¨s
[] = {

559 
j
 = 0x80; (j & *
˝
) != 0; j >>= 1)

560 
b
++;

561 i‡(*
˝
 !
n‹mÆ_ch¨s
[
b
] || c∞!(
˝lim
 - 1))

562 
i¢‹mÆ
 = 0;

564 
b
 +(
˝
 - 
√tmask
) << 3;

565 
x
->
∫_bô
 = -1 - 
b
;

566 i‡(
i¢‹mÆ
)

567 
x
->
∫_Êags
 |
RNF_NORMAL
;

568  (
x
);

569 
	}
}

572 
	$∫_Àxobëãr
(
m_¨g
, 
n_¨g
)

573 *
m_¨g
, *
n_¨g
;

575 
u_ch¨
 *
mp
 = 
m_¨g
, *
≈
 = 
n_¨g
, *
lim
;

577 i‡(
	`LEN
(
mp
Ë> LEN(
≈
))

579 i‡(
	`LEN
(
mp
Ë=LEN(
≈
))

580 
lim
 = 
mp
 + 
	`LEN
(mp); mp <Üim;)

581 i‡(*
mp
++ > *
≈
++)

584 
	}
}

586 
ødix_mask
 *

587 
	$∫_√w_ødix_mask
(
â
, 
√xt
)

588 
ødix_node
 *
â
;

589 
ødix_mask
 *
√xt
;

591 
ødix_mask
 *
m
;

593 
	`MKGë
(
m
);

594 i‡(
m
 == 0) {

595 
	`log
(
LOG_ERR
, "Mask forÑouteÇotÉntered\n");

598 
	`bzîo
(
m
,  *m);

599 
m
->
rm_bô
 = 
â
->
∫_bô
;

600 
m
->
rm_Êags
 = 
â
->
∫_Êags
;

601 i‡(
â
->
∫_Êags
 & 
RNF_NORMAL
)

602 
m
->
rm_Àaf
 = 
â
;

604 
m
->
rm_mask
 = 
â
->
∫_mask
;

605 
m
->
rm_mkli°
 = 
√xt
;

606 
â
->
∫_mkli°
 = 
m
;

607  
m
;

608 
	}
}

610 
ødix_node
 *

611 
	$∫_addrouã
(
v_¨g
, 
n_¨g
, 
hód
, 
åìnodes
)

612 *
v_¨g
, *
n_¨g
;

613 
ødix_node_hód
 *
hód
;

614 
ødix_node
 
åìnodes
[2];

616 
ˇddr_t
 
v
 = (ˇddr_t)
v_¨g
, 
√tmask
 = (ˇddr_t)
n_¨g
;

617 
ødix_node
 *
t
, *
x
 = 0, *
â
;

618 
ødix_node
 *
ßved_â
, *
t›
 = 
hód
->
∫h_åìt›
;

619 
b
 = 0, 
b_Àaf
 = 0;

620 
keydu∂iˇãd
;

621 
ˇddr_t
 
mmask
;

622 
ødix_mask
 *
m
, **
mp
;

631 i‡(
√tmask
) {

632 i‡((
x
 = 
	`∫_addmask
(
√tmask
, 0, 
t›
->
∫_off£t
)) == 0)

634 
b_Àaf
 = 
x
->
∫_bô
;

635 
b
 = -1 - 
x
->
∫_bô
;

636 
√tmask
 = 
x
->
∫_key
;

641 
ßved_â
 = 
â
 = 
	`∫_ö£π
(
v
, 
hód
, &
keydu∂iˇãd
, 
åìnodes
);

642 i‡(
keydu∂iˇãd
) {

643 
t
 = 
â
;Åt;Å =Åt,Åàâ->
∫_du≥dkey
) {

644 #ifde‡
RADIX_MPATH


646 i‡(
	`∫_m∑th_ˇ∑bÀ
(
hód
Ë&& 
√tmask
 =
â
->
∫_mask
) {

653 
t
 = 
â
;

654 
â
 =Åt->
∫_du≥dkey
;

655 } 
â
 && 
t
->
∫_mask
 ==Åt->rn_mask);

659 i‡(
â
->
∫_mask
 =
√tmask
)

661 i‡(
√tmask
 == 0 ||

662 (
â
->
∫_mask
 &&

663 ((
b_Àaf
 < 
â
->
∫_bô
)

664 || 
	`∫_ªföes
(
√tmask
, 
â
->
∫_mask
)

665 || 
	`∫_Àxobëãr
(
√tmask
, 
â
->
∫_mask
))))

681 i‡(
â
 =
ßved_â
) {

682 
ødix_node
 *
xx
 = 
x
;

684 (
â
 = 
åìnodes
)->
∫_du≥dkey
 = 
t
;

685 
â
->
∫_Êags
 = 
t
->rn_flags;

686 
â
->
∫_∑ª¡
 = 
x
 = 
t
->rn_parent;

687 
t
->
∫_∑ª¡
 = 
â
;

688 i‡(
x
->
∫_À·
 =
t
)

689 
x
->
∫_À·
 = 
â
;

691 
x
->
∫_right
 = 
â
;

692 
ßved_â
 = 
â
; 
x
 = 
xx
;

694 (
â
 = 
åìnodes
)->
∫_du≥dkey
 = 
t
->rn_dupedkey;

695 
t
->
∫_du≥dkey
 = 
â
;

696 
â
->
∫_∑ª¡
 = 
t
;

697 i‡(
â
->
∫_du≥dkey
)

698 
â
->
∫_du≥dkey
->
∫_∑ª¡
 =Åt;

700 #ifde‡
RN_DEBUG


701 
t
=
â
+1;Åt->
∫_öfo
 = 
∫_nodíum
++;Å->rn_info =Ñn_nodenum++;

702 
â
->
∫_twö
 = 
t
;Åt->
∫_ybro
 = 
∫_˛i°
;Ñn_clist =Åt;

704 
â
->
∫_key
 = (
ˇddr_t
Ë
v
;

705 
â
->
∫_bô
 = -1;

706 
â
->
∫_Êags
 = 
RNF_ACTIVE
;

711 i‡(
√tmask
) {

712 
â
->
∫_mask
 = 
√tmask
;

713 
â
->
∫_bô
 = 
x
->rn_bit;

714 
â
->
∫_Êags
 |
x
->∫_Êag†& 
RNF_NORMAL
;

716 
t
 = 
ßved_â
->
∫_∑ª¡
;

717 i‡(
keydu∂iˇãd
)

718 
⁄2
;

719 
b_Àaf
 = -1 - 
t
->
∫_bô
;

720 i‡(
t
->
∫_right
 =
ßved_â
)

721 
x
 = 
t
->
∫_À·
;

723 
x
 = 
t
->
∫_right
;

725 i‡(
x
->
∫_bô
 < 0) {

726 
mp
 = &
t
->
∫_mkli°
; 
x
; x = x->
∫_du≥dkey
)

727 i‡(
x
->
∫_mask
 && (x->
∫_bô
 >
b_Àaf
Ë&& x->
∫_mkli°
 == 0) {

728 *
mp
 = 
m
 = 
	`∫_√w_ødix_mask
(
x
, 0);

729 i‡(
m
)

730 
mp
 = &
m
->
rm_mkli°
;

732 } i‡(
x
->
∫_mkli°
) {

736 
mp
 = &
x
->
∫_mkli°
; (
m
 = *mp); m∞&m->
rm_mkli°
)

737 i‡(
m
->
rm_bô
 >
b_Àaf
)

739 
t
->
∫_mkli°
 = 
m
; *
mp
 = 0;

741 
⁄2
:

743 i‡((
√tmask
 =0Ë|| (
b
 > 
t
->
∫_bô
 ))

744  
â
;

745 
b_Àaf
 = 
â
->
∫_bô
;

747 
x
 = 
t
;

748 
t
 =Å->
∫_∑ª¡
;

749 } 
b
 <
t
->
∫_bô
 && 
x
 !
t›
);

756 
mp
 = &
x
->
∫_mkli°
; (
m
 = *mp); m∞&m->
rm_mkli°
) {

757 i‡(
m
->
rm_bô
 < 
b_Àaf
)

759 i‡(
m
->
rm_bô
 > 
b_Àaf
)

761 i‡(
m
->
rm_Êags
 & 
RNF_NORMAL
) {

762 
mmask
 = 
m
->
rm_Àaf
->
∫_mask
;

763 i‡(
â
->
∫_Êags
 & 
RNF_NORMAL
) {

764 #i‡!
	`deföed
(
RADIX_MPATH
)

765 
	`log
(
LOG_ERR
,

768  
â
;

771 
mmask
 = 
m
->
rm_mask
;

772 i‡(
mmask
 =
√tmask
) {

773 
m
->
rm_ªfs
++;

774 
â
->
∫_mkli°
 = 
m
;

775  
â
;

777 i‡(
	`∫_ªföes
(
√tmask
, 
mmask
)

778 || 
	`∫_Àxobëãr
(
√tmask
, 
mmask
))

781 *
mp
 = 
	`∫_√w_ødix_mask
(
â
, *mp);

782  
â
;

783 
	}
}

785 
ødix_node
 *

786 
	$∫_dñëe
(
v_¨g
, 
√tmask_¨g
, 
hód
)

787 *
v_¨g
, *
√tmask_¨g
;

788 
ødix_node_hód
 *
hód
;

790 
ødix_node
 *
t
, *
p
, *
x
, *
â
;

791 
ødix_mask
 *
m
, *
ßved_m
, **
mp
;

792 
ødix_node
 *
du≥dkey
, *
ßved_â
, *
t›
;

793 
ˇddr_t
 
v
, 
√tmask
;

794 
b
, 
hód_off
, 
vÀn
;

796 
v
 = 
v_¨g
;

797 
√tmask
 = 
√tmask_¨g
;

798 
x
 = 
hód
->
∫h_åìt›
;

799 
â
 = 
	`∫_£¨ch
(
v
, 
x
);

800 
hód_off
 = 
x
->
∫_off£t
;

801 
vÀn
 = 
	`LEN
(
v
);

802 
ßved_â
 = 
â
;

803 
t›
 = 
x
;

804 i‡(
â
 == 0 ||

805 
	`bcmp
(
v
 + 
hód_off
, 
â
->
∫_key
 + hód_off, 
vÀn
 - head_off))

810 i‡(
√tmask
) {

811 i‡((
x
 = 
	`∫_addmask
(
√tmask
, 1, 
hód_off
)) == 0)

813 
√tmask
 = 
x
->
∫_key
;

814 
â
->
∫_mask
 !
√tmask
)

815 i‡((
â
 =Åt->
∫_du≥dkey
) == 0)

818 i‡(
â
->
∫_mask
 =0 || (
ßved_m
 = 
m
 =Åt->
∫_mkli°
) == 0)

819 
⁄1
;

820 i‡(
â
->
∫_Êags
 & 
RNF_NORMAL
) {

821 i‡(
m
->
rm_Àaf
 !
â
 || m->
rm_ªfs
 > 0) {

822 
	`log
(
LOG_ERR
, "rn_delete: inconsistentánnotation\n");

826 i‡(
m
->
rm_mask
 !
â
->
∫_mask
) {

827 
	`log
(
LOG_ERR
, "rn_delete: inconsistentánnotation\n");

828 
⁄1
;

830 i‡(--
m
->
rm_ªfs
 >= 0)

831 
⁄1
;

833 
b
 = -1 - 
â
->
∫_bô
;

834 
t
 = 
ßved_â
->
∫_∑ª¡
;

835 i‡(
b
 > 
t
->
∫_bô
)

836 
⁄1
;

838 
x
 = 
t
;

839 
t
 =Å->
∫_∑ª¡
;

840 } 
b
 <
t
->
∫_bô
 && 
x
 !
t›
);

841 
mp
 = &
x
->
∫_mkli°
; (
m
 = *mp); m∞&m->
rm_mkli°
)

842 i‡(
m
 =
ßved_m
) {

843 *
mp
 = 
m
->
rm_mkli°
;

844 
	`MKFªe
(
m
);

847 i‡(
m
 == 0) {

848 
	`log
(
LOG_ERR
, "rn_delete: couldn't find ouránnotation\n");

849 i‡(
â
->
∫_Êags
 & 
RNF_NORMAL
)

852 
⁄1
:

856 i‡(
â
->
∫_Êags
 & 
RNF_ROOT
)

858 #ifde‡
RN_DEBUG


860 
t
 = 
∫_˛i°
;Å &&Å->
∫_ybro
 !
â
;Å =Å->rn_ybro) {}

861 i‡(
t
Ët->
∫_ybro
 = 
â
->rn_ybro;

863 
t
 = 
â
->
∫_∑ª¡
;

864 
du≥dkey
 = 
ßved_â
->
∫_du≥dkey
;

865 i‡(
du≥dkey
) {

870 i‡(
â
 =
ßved_â
) {

872 
x
 = 
du≥dkey
; x->
∫_∑ª¡
 = 
t
;

873 i‡(
t
->
∫_À·
 =
â
)

874 
t
->
∫_À·
 = 
x
;

876 
t
->
∫_right
 = 
x
;

879 
x
 = 
p
 = 
ßved_â
;Ö &&Ö->
∫_du≥dkey
 !
â
;)

880 
p
 =Ö->
∫_du≥dkey
;

881 i‡(
p
) {

882 
p
->
∫_du≥dkey
 = 
â
->rn_dupedkey;

883 i‡(
â
->
∫_du≥dkey
)

884 
â
->
∫_du≥dkey
->
∫_∑ª¡
 = 
p
;

886 } 
	`log
(
LOG_ERR
, "rn_delete: couldn't find us\n");

888 
t
 = 
â
 + 1;

889 i‡(
t
->
∫_Êags
 & 
RNF_ACTIVE
) {

890 #i‚de‡
RN_DEBUG


891 *++
x
 = *
t
;

892 
p
 = 
t
->
∫_∑ª¡
;

894 
b
 = 
t
->
∫_öfo
;

895 *++
x
 = *
t
;

896 
t
->
∫_öfo
 = 
b
;

897 
p
 = 
t
->
∫_∑ª¡
;

899 i‡(
p
->
∫_À·
 =
t
)

900 
p
->
∫_À·
 = 
x
;

902 
p
->
∫_right
 = 
x
;

903 
x
->
∫_À·
->
∫_∑ª¡
 = x;

904 
x
->
∫_right
->
∫_∑ª¡
 = x;

906 
out
;

908 i‡(
t
->
∫_À·
 =
â
)

909 
x
 = 
t
->
∫_right
;

911 
x
 = 
t
->
∫_À·
;

912 
p
 = 
t
->
∫_∑ª¡
;

913 i‡(
p
->
∫_right
 =
t
)

914 
p
->
∫_right
 = 
x
;

916 
p
->
∫_À·
 = 
x
;

917 
x
->
∫_∑ª¡
 = 
p
;

921 i‡(
t
->
∫_mkli°
) {

922 i‡(
x
->
∫_bô
 >= 0) {

923 
mp
 = &
x
->
∫_mkli°
; (
m
 = *mp);)

924 
mp
 = &
m
->
rm_mkli°
;

925 *
mp
 = 
t
->
∫_mkli°
;

930 
m
 = 
t
->
∫_mkli°
; m && 
x
; x = x->
∫_du≥dkey
)

931 i‡(
m
 =
x
->
∫_mkli°
) {

932 
ødix_mask
 *
mm
 = 
m
->
rm_mkli°
;

933 
x
->
∫_mkli°
 = 0;

934 i‡(--(
m
->
rm_ªfs
) < 0)

935 
	`MKFªe
(
m
);

936 
m
 = 
mm
;

938 i‡(
m
)

939 
	`log
(
LOG_ERR
,

941 
m
, 
x
);

947 
x
 = 
â
 + 1;

948 i‡(
t
 !
x
) {

949 #i‚de‡
RN_DEBUG


950 *
t
 = *
x
;

952 
b
 = 
t
->
∫_öfo
;

953 *
t
 = *
x
;

954 
t
->
∫_öfo
 = 
b
;

956 
t
->
∫_À·
->
∫_∑ª¡
 =Å;

957 
t
->
∫_right
->
∫_∑ª¡
 =Å;

958 
p
 = 
x
->
∫_∑ª¡
;

959 i‡(
p
->
∫_À·
 =
x
)

960 
p
->
∫_À·
 = 
t
;

962 
p
->
∫_right
 = 
t
;

964 
out
:

965 
â
->
∫_Êags
 &~
RNF_ACTIVE
;

966 
â
[1].
∫_Êags
 &~
RNF_ACTIVE
;

967  (
â
);

968 
	}
}

975 
	$∫_wÆkåì_‰om
(
h
, 
a
, 
m
, 
f
, 
w
)

976 
ødix_node_hód
 *
h
;

977 *
a
, *
m
;

978 
wÆkåì_f_t
 *
f
;

979 *
w
;

981 
îr‹
;

982 
ødix_node
 *
ba£
, *
√xt
;

983 
u_ch¨
 *
xa
 = (u_ch¨ *)
a
;

984 
u_ch¨
 *
xm
 = (u_ch¨ *)
m
;

985 
ødix_node
 *
∫
, *
œ°
 = 0 ;

986 
°›pög
 = 0;

987 
œ°b
;

994 
∫
 = 
h
->
∫h_åìt›
;Ñn->
∫_bô
 >= 0; ) {

995 
œ°
 = 
∫
;

998 i‡(!(
∫
->
∫_bmask
 & 
xm
[∫->
∫_off£t
])) {

1001 i‡(
∫
->
∫_bmask
 & 
xa
[∫->
∫_off£t
]) {

1002 
∫
 =Ñn->
∫_right
;

1004 
∫
 =Ñn->
∫_À·
;

1015 
∫
 = 
œ°
;

1016 
œ°b
 = 
∫
->
∫_bô
;

1025 
∫
->
∫_bô
 >= 0)

1026 
∫
 =Ñn->
∫_À·
;

1028 !
°›pög
) {

1030 
ba£
 = 
∫
;

1032 
∫
->
∫_∑ª¡
->
∫_right
 ==Ñn

1033 && !(
∫
->
∫_Êags
 & 
RNF_ROOT
)) {

1034 
∫
 =Ñn->
∫_∑ª¡
;

1037 i‡(
∫
->
∫_bô
 <
œ°b
) {

1038 
°›pög
 = 1;

1055 i‡(
∫
->
∫_∑ª¡
->
∫_Êags
 & 
RNF_ROOT
)

1056 
°›pög
 = 1;

1059 
∫
 =Ñn->
∫_∑ª¡
->
∫_right
;Ñn->
∫_bô
 >= 0;)

1060 
∫
 =Ñn->
∫_À·
;

1061 
√xt
 = 
∫
;

1063 (
∫
 = 
ba£
) != 0) {

1064 
ba£
 = 
∫
->
∫_du≥dkey
;

1066 i‡(!(
∫
->
∫_Êags
 & 
RNF_ROOT
)

1067 && (
îr‹
 = (*
f
)(
∫
, 
w
)))

1068  (
îr‹
);

1070 
∫
 = 
√xt
;

1072 i‡(
∫
->
∫_Êags
 & 
RNF_ROOT
) {

1074 
°›pög
 = 1;

1079 
	}
}

1082 
	$∫_wÆkåì
(
h
, 
f
, 
w
)

1083 
ødix_node_hód
 *
h
;

1084 
wÆkåì_f_t
 *
f
;

1085 *
w
;

1087 
îr‹
;

1088 
ødix_node
 *
ba£
, *
√xt
;

1089 
ødix_node
 *
∫
 = 
h
->
∫h_åìt›
;

1097 
∫
->
∫_bô
 >= 0)

1098 
∫
 =Ñn->
∫_À·
;

1100 
ba£
 = 
∫
;

1102 
∫
->
∫_∑ª¡
->
∫_right
 ==Ñn

1103 && (
∫
->
∫_Êags
 & 
RNF_ROOT
) == 0)

1104 
∫
 =Ñn->
∫_∑ª¡
;

1106 
∫
 =Ñn->
∫_∑ª¡
->
∫_right
;Ñn->
∫_bô
 >= 0;)

1107 
∫
 =Ñn->
∫_À·
;

1108 
√xt
 = 
∫
;

1110 (
∫
 = 
ba£
)) {

1111 
ba£
 = 
∫
->
∫_du≥dkey
;

1112 i‡(!(
∫
->
∫_Êags
 & 
RNF_ROOT
)

1113 && (
îr‹
 = (*
f
)(
∫
, 
w
)))

1114  (
îr‹
);

1116 
∫
 = 
√xt
;

1117 i‡(
∫
->
∫_Êags
 & 
RNF_ROOT
)

1121 
	}
}

1132 
	$∫_öôhód
(
hód
, 
off
)

1133 **
hód
;

1134 
off
;

1136 
ødix_node_hód
 *
∫h
;

1137 
ødix_node
 *
t
, *
â
, *
ât
;

1138 i‡(*
hód
)

1140 
	`R_ZÆloc
(
∫h
, 
ødix_node_hód
 *,  (*rnh));

1141 i‡(
∫h
 == 0)

1143 #ifde‡
_KERNEL


1144 
	`RADIX_NODE_HEAD_LOCK_INIT
(
∫h
);

1146 *
hód
 = 
∫h
;

1147 
t
 = 
	`∫_√w∑ú
(
∫_zîos
, 
off
, 
∫h
->
∫h_nodes
);

1148 
ât
 = 
∫h
->
∫h_nodes
 + 2;

1149 
t
->
∫_right
 = 
ât
;

1150 
t
->
∫_∑ª¡
 =Å;

1151 
â
 = 
t
->
∫_À·
;

1152 
â
->
∫_Êags
 = 
t
->∫_Êag†
RNF_ROOT
 | 
RNF_ACTIVE
;

1153 
â
->
∫_bô
 = -1 - 
off
;

1154 *
ât
 = *
â
;

1155 
ât
->
∫_key
 = 
∫_⁄es
;

1156 
∫h
->
∫h_addaddr
 = 
∫_addrouã
;

1157 
∫h
->
∫h_dñaddr
 = 
∫_dñëe
;

1158 
∫h
->
∫h_m©chaddr
 = 
∫_m©ch
;

1159 
∫h
->
∫h_lookup
 = 
∫_lookup
;

1160 
∫h
->
∫h_wÆkåì
 = 
∫_wÆkåì
;

1161 
∫h
->
∫h_wÆkåì_‰om
 = 
∫_wÆkåì_‰om
;

1162 
∫h
->
∫h_åìt›
 = 
t
;

1164 
	}
}

1167 
	$∫_dëachhód
(**
hód
)

1169 
ødix_node_hód
 *
∫h
;

1171 
	`KASSERT
((
hód
 !
NULL
 && *head != NULL),

1172 ("%s: hódáÃódy fªed", 
__func__
));

1173 
∫h
 = *
hód
;

1176 
	`Fªe
(
∫h
);

1178 *
hód
 = 
NULL
;

1180 
	}
}

1183 
	$∫_öô
(
maxk
)

1185 *
˝
, *
˝lim
;

1187 
max_keyÀn
 = 
maxk
;

1188 i‡(
max_keyÀn
 == 0) {

1189 
	`log
(
LOG_ERR
,

1193 
	`R_MÆloc
(
∫_zîos
, *, 3 * 
max_keyÀn
);

1194 i‡(
∫_zîos
 =
NULL
)

1195 
	`∑nic
("rn_init");

1196 
	`bzîo
(
∫_zîos
, 3 * 
max_keyÀn
);

1197 
∫_⁄es
 = 
˝
 = 
∫_zîos
 + 
max_keyÀn
;

1198 
addmask_key
 = 
˝lim
 = 
∫_⁄es
 + 
max_keyÀn
;

1199 
˝
 < 
˝lim
)

1200 *
˝
++ = -1;

1201 i‡(
	`∫_öôhód
((**)(*)&
mask_∫hód
, 0) == 0)

1202 
	`∑nic
("rn_init 2");

1203 
	}
}

	@sys/net/radix.h

33 #i‚de‡
_RADIX_H_


34 
	#_RADIX_H_


	)

36 #ifde‡
_KERNEL


37 
	~<sys/_lock.h
>

38 
	~<sys/_muãx.h
>

39 
	~<sys/_rwlock.h
>

42 #ifde‡
MALLOC_DECLARE


43 
MALLOC_DECLARE
(
M_RTABLE
);

50 
	sødix_node
 {

51 
ødix_mask
 *
	m∫_mkli°
;

52 
ødix_node
 *
	m∫_∑ª¡
;

53 
	m∫_bô
;

54 
	m∫_bmask
;

55 
u_ch¨
 
	m∫_Êags
;

56 
	#RNF_NORMAL
 1

	)

57 
	#RNF_ROOT
 2

	)

58 
	#RNF_ACTIVE
 4

	)

61 
ˇddr_t
 
	m∫_Key
;

62 
ˇddr_t
 
	m∫_Mask
;

63 
ødix_node
 *
	m∫_Du≥dkey
;

64 } 
	m∫_Àaf
;

66 
	m∫_Off
;

67 
ødix_node
 *
	m∫_L
;

68 
ødix_node
 *
	m∫_R
;

69 } 
	m∫_node
;

70 } 
	m∫_u
;

71 #ifde‡
RN_DEBUG


72 
	m∫_öfo
;

73 
ødix_node
 *
	m∫_twö
;

74 
ødix_node
 *
	m∫_ybro
;

78 
	#∫_du≥dkey
 
∫_u
.
∫_Àaf
.
∫_Du≥dkey


	)

79 
	#∫_key
 
∫_u
.
∫_Àaf
.
∫_Key


	)

80 
	#∫_mask
 
∫_u
.
∫_Àaf
.
∫_Mask


	)

81 
	#∫_off£t
 
∫_u
.
∫_node
.
∫_Off


	)

82 
	#∫_À·
 
∫_u
.
∫_node
.
∫_L


	)

83 
	#∫_right
 
∫_u
.
∫_node
.
∫_R


	)

89 
	sødix_mask
 {

90 
	mrm_bô
;

91 
	mrm_unu£d
;

92 
u_ch¨
 
	mrm_Êags
;

93 
ødix_mask
 *
	mrm_mkli°
;

95 
ˇddr_t
 
	mrmu_mask
;

96 
ødix_node
 *
	mrmu_Àaf
;

97 } 
	mrm_rmu
;

98 
	mrm_ªfs
;

101 
	#rm_mask
 
rm_rmu
.
rmu_mask


	)

102 
	#rm_Àaf
 
rm_rmu
.
rmu_Àaf


	)

104 
	twÆkåì_f_t
(
	tødix_node
 *, *);

106 
	sødix_node_hód
 {

107 
ødix_node
 *
	m∫h_åìt›
;

108 
u_öt
 
	m∫h_gí
;

109 
	m∫h_mu…ù©h
;

110 
	m∫h_addrsize
;

111 
	m∫h_pktsize
;

112 
	mødix_node
 *(*
	m∫h_addaddr
)

113 (*
	mv
, *
	mmask
,

114 
ødix_node_hód
 *
	mhód
, 
ødix_node
 
	mnodes
[]);

115 
	mødix_node
 *(*
	m∫h_addpkt
)

116 (*
	mv
, *
	mmask
,

117 
ødix_node_hód
 *
	mhód
, 
ødix_node
 
	mnodes
[]);

118 
	mødix_node
 *(*
	m∫h_dñaddr
)

119 (*
	mv
, *
	mmask
, 
ødix_node_hód
 *
	mhód
);

120 
	mødix_node
 *(*
	m∫h_dñpkt
)

121 (*
	mv
, *
	mmask
, 
ødix_node_hód
 *
	mhód
);

122 
	mødix_node
 *(*
	m∫h_m©chaddr
)

123 (*
	mv
, 
ødix_node_hód
 *
	mhód
);

124 
	mødix_node
 *(*
	m∫h_lookup
)

125 (*
	mv
, *
	mmask
, 
ødix_node_hód
 *
	mhód
);

126 
	mødix_node
 *(*
	m∫h_m©chpkt
)

127 (*
	mv
, 
ødix_node_hód
 *
	mhód
);

128 (*
	m∫h_wÆkåì
)

129 (
ødix_node_hód
 *
	mhód
, 
wÆkåì_f_t
 *
	mf
, *
	mw
);

130 (*
	m∫h_wÆkåì_‰om
)

131 (
ødix_node_hód
 *
	mhód
, *
	ma
, *
	mm
,

132 
wÆkåì_f_t
 *
	mf
, *
	mw
);

133 (*
	m∫h_˛o£
)

134 (
ødix_node
 *
	m∫
, 
ødix_node_hód
 *
	mhód
);

135 
ødix_node
 
	m∫h_nodes
[3];

136 #ifde‡
_KERNEL


137 #i‡
deföed
–
__löux__
 ) || deföed–
_WIN32
 )

138 
•ölock_t
 
	m∫h_lock
;

140 
rwlock
 
	m∫h_lock
;

145 #i‚de‡
_KERNEL


146 
	#R_MÆloc
(
p
, 
t
, 
n
Ë’ = (tË
	`mÆloc
(()“)))

	)

147 
	#R_ZÆloc
(
p
, 
t
, 
n
Ë’ = (tË
	`ˇŒoc
(1,()“)))

	)

148 
	#Fªe
(
p
Ë
	`‰ì
((*Ì);

	)

150 
	#R_MÆloc
(
p
, 
t
, 
n
Ë’ = (tË
	`mÆloc
(()“), 
M_RTABLE
, 
M_NOWAIT
))

	)

151 
	#R_ZÆloc
(
p
, 
t
, 
n
Ë’ = (tË
	`mÆloc
(()“), 
M_RTABLE
, 
M_NOWAIT
 | 
M_ZERO
))

	)

152 
	#Fªe
(
p
Ë
	`‰ì
((
ˇddr_t
Ì, 
M_RTABLE
);

	)

154 
	#RADIX_NODE_HEAD_LOCK_INIT
(
∫h
) \

155 
	`rw_öô_Êags
(&(
∫h
)->
∫h_lock
, "ødixÇodêhód", 0)

	)

156 
	#RADIX_NODE_HEAD_LOCK
(
∫h
Ë
	`rw_wlock
(&‘nh)->
∫h_lock
)

	)

157 
	#RADIX_NODE_HEAD_UNLOCK
(
∫h
Ë
	`rw_wu∆ock
(&‘nh)->
∫h_lock
)

	)

158 
	#RADIX_NODE_HEAD_RLOCK
(
∫h
Ë
	`rw_æock
(&‘nh)->
∫h_lock
)

	)

159 
	#RADIX_NODE_HEAD_RUNLOCK
(
∫h
Ë
	`rw_ru∆ock
(&‘nh)->
∫h_lock
)

	)

160 
	#RADIX_NODE_HEAD_LOCK_TRY_UPGRADE
(
∫h
Ë
	`rw_åy_upgøde
(&‘nh)->
∫h_lock
)

	)

163 
	#RADIX_NODE_HEAD_DESTROY
(
∫h
Ë
	`rw_de°roy
(&‘nh)->
∫h_lock
)

	)

164 
	#RADIX_NODE_HEAD_LOCK_ASSERT
(
∫h
Ë
	`rw_as£π
(&‘nh)->
∫h_lock
, 
RA_LOCKED
)

	)

165 
	#RADIX_NODE_HEAD_WLOCK_ASSERT
(
∫h
Ë
	`rw_as£π
(&‘nh)->
∫h_lock
, 
RA_WLOCKED
)

	)

168 
∫_öô
();

169 
∫_öôhód
(**, );

170 
∫_dëachhód
(**);

171 
∫_ªföes
(*, *);

172 
ødix_node


173 *
∫_addmask
(*, , ),

174 *
∫_addrouã
 (*, *, 
ødix_node_hód
 *,

175 
ødix_node
 [2]),

176 *
∫_dñëe
(*, *, 
ødix_node_hód
 *),

177 *
∫_lookup
 (*
v_¨g
, *
m_¨g
,

178 
ødix_node_hód
 *
hód
),

179 *
∫_m©ch
(*, 
ødix_node_hód
 *);

	@sys/netgraph/ng_ipfw.h

29 #i‚de‡
_NG_IPFW_H


30 
	#_NG_IPFW_H


	)

31 
	#NG_IPFW_NODE_TYPE
 "ùfw"

	)

32 
	#NGM_IPFW_COOKIE
 1105988990

	)

	@sys/netinet/in_cksum.c

32 
	~<sys/cdefs.h
>

33 
__FBSDID
("$FreeBSD: src/sys/netinet/in_cksum.c,v 1.10 2007/10/07 20:44:22 silby Exp $");

35 
	~<sys/∑øm.h
>

36 
	~<sys/mbuf.h
>

45 
	#ADDCARRY
(
x
Ë(x > 65535 ? x -65535 : x)

	)

46 
	#REDUCE
 {
l_utû
.
l
 = 
sum
; sum =Ü_utû.
s
[0] +Ü_utû.s[1]; 
	`ADDCARRY
(sum);}

	)

49 
	$ö_cksum
(
mbuf
 *
m
, 
Àn
)

51 
u_sh‹t
 *
w
;

52 
sum
 = 0;

53 
mÀn
 = 0;

54 
byã_sw≠≥d
 = 0;

57 
c
[2];

58 
u_sh‹t
 
s
;

59 } 
s_utû
;

61 
u_sh‹t
 
s
[2];

62 
l
;

63 } 
l_utû
;

65 ;
m
 && 
Àn
; m = m->
m_√xt
) {

66 i‡(
m
->
m_Àn
 == 0)

68 
w
 = 
	`mtod
(
m
, 
u_sh‹t
 *);

69 i‡(
mÀn
 == -1) {

78 
s_utû
.
c
[1] = *(*)
w
;

79 
sum
 +
s_utû
.
s
;

80 
w
 = (
u_sh‹t
 *)((*)w + 1);

81 
mÀn
 = 
m
->
m_Àn
 - 1;

82 
Àn
--;

84 
mÀn
 = 
m
->
m_Àn
;

85 i‡(
Àn
 < 
mÀn
)

86 
mÀn
 = 
Àn
;

87 
Àn
 -
mÀn
;

91 i‡((1 & (
uöçå_t
Ë
w
Ë&& (
mÀn
 > 0)) {

92 
REDUCE
;

93 
sum
 <<= 8;

94 
s_utû
.
c
[0] = *(
u_ch¨
 *)
w
;

95 
w
 = (
u_sh‹t
 *)((*)w + 1);

96 
mÀn
--;

97 
byã_sw≠≥d
 = 1;

103 (
mÀn
 -= 32) >= 0) {

104 
sum
 +
w
[0]; sum += w[1]; sum += w[2]; sum += w[3];

105 
sum
 +
w
[4]; sum += w[5]; sum += w[6]; sum += w[7];

106 
sum
 +
w
[8]; sum += w[9]; sum += w[10]; sum += w[11];

107 
sum
 +
w
[12]; sum += w[13]; sum += w[14]; sum += w[15];

108 
w
 += 16;

110 
mÀn
 += 32;

111 (
mÀn
 -= 8) >= 0) {

112 
sum
 +
w
[0]; sum += w[1]; sum += w[2]; sum += w[3];

113 
w
 += 4;

115 
mÀn
 += 8;

116 i‡(
mÀn
 =0 && 
byã_sw≠≥d
 == 0)

118 
REDUCE
;

119 (
mÀn
 -= 2) >= 0) {

120 
sum
 +*
w
++;

122 i‡(
byã_sw≠≥d
) {

123 
REDUCE
;

124 
sum
 <<= 8;

125 
byã_sw≠≥d
 = 0;

126 i‡(
mÀn
 == -1) {

127 
s_utû
.
c
[1] = *(*)
w
;

128 
sum
 +
s_utû
.
s
;

129 
mÀn
 = 0;

131 
mÀn
 = -1;

132 } i‡(
mÀn
 == -1)

133 
s_utû
.
c
[0] = *(*)
w
;

135 i‡(
Àn
)

136 
	`¥ötf
("cksum: out of data\n");

137 i‡(
mÀn
 == -1) {

141 
s_utû
.
c
[1] = 0;

142 
sum
 +
s_utû
.
s
;

144 
REDUCE
;

145  (~
sum
 & 0xffff);

146 
	}
}

	@sys/netinet/ip.h

1 #i‚de‡
_NETINET_IP_H_


2 
	#_NETINET_IP_H_


	)

4 
	#LITTLE_ENDIAN
 1234

	)

5 
	#BIG_ENDIAN
 4321

	)

6 #i‡
deföed
(
__BIG_ENDIAN
)

7 
	#BYTE_ORDER
 
BIG_ENDIAN


	)

9 #ñi‡
deföed
(
__LITTLE_ENDIAN
)

11 
	#BYTE_ORDER
 
LITTLE_ENDIAN


	)

13 #îr‹ 
no
 
∂©f‹m


24 
	sù
 {

25 #i‡
BYTE_ORDER
 =
LITTLE_ENDIAN


26 
u_ch¨
 
	mù_hl
:4,

27 
	mù_v
:4;

29 #i‡
BYTE_ORDER
 =
BIG_ENDIAN


30 
u_ch¨
 
	mù_v
:4,

31 
	mù_hl
:4;

33 
u_ch¨
 
	mù_tos
;

34 
u_sh‹t
 
	mù_Àn
;

35 
u_sh‹t
 
	mù_id
;

36 
u_sh‹t
 
	mù_off
;

37 
	#IP_RF
 0x8000

	)

38 
	#IP_DF
 0x4000

	)

39 
	#IP_MF
 0x2000

	)

40 
	#IP_OFFMASK
 0x1ff‡

	)

41 
u_ch¨
 
	mù_âl
;

42 
u_ch¨
 
	mù_p
;

43 
u_sh‹t
 
	mù_sum
;

44 
ö_addr
 
	mù_§c
,
	mù_d°
;

45 } 
__∑cked
 
__Æig√d
(4);

47 
	#IPTOS_LOWDELAY
 0x10

	)

	@sys/netinet/ip6.h

1 #i‚de‡
_NETINET_IP6_H_


2 
	#_NETINET_IP6_H_


	)

3 
	#IN6_ARE_ADDR_EQUAL
(
a
, 
b
) \

4 (
	`memcmp
(&(
a
)->
s6_addr
[0], &(
b
)->s6_addr[0], (
ö6_addr
)Ë=0)

	)

6 
	sù6_hdr
 {

8 
	sù6_hdr˘l
 {

9 
u_öt32_t
 
	mù6_un1_Êow
;

10 
u_öt16_t
 
	mù6_un1_∂í
;

11 
u_öt8_t
 
	mù6_un1_nxt
;

12 
u_öt8_t
 
	mù6_un1_hlim
;

13 } 
	mù6_un1
;

14 
u_öt8_t
 
	mù6_un2_vfc
;

15 } 
	mù6_˘lun
;

16 
ö6_addr
 
	mù6_§c
;

17 
ö6_addr
 
	mù6_d°
;

19 
	#ù6_nxt
 
ù6_˘lun
.
ù6_un1
.
ù6_un1_nxt


	)

20 
	#ù6_Êow
 
ù6_˘lun
.
ù6_un1
.
ù6_un1_Êow


	)

23 
	sicmp6_hdr
 {

24 
u_öt8_t
 
	micmp6_ty≥
;

25 
u_öt8_t
 
	micmp6_code
;

26 
u_öt16_t
 
	micmp6_cksum
;

28 
u_öt32_t
 
	micmp6_un_d©a32
[1];

29 
u_öt16_t
 
	micmp6_un_d©a16
[2];

30 
u_öt8_t
 
	micmp6_un_d©a8
[4];

31 } 
	micmp6_d©aun
;

34 
	sù6_hbh
 {

35 
u_öt8_t
 
	mù6h_nxt
;

36 
u_öt8_t
 
	mù6h_Àn
;

39 
	sù6_πhdr
 {

40 
u_öt8_t
 
	mù6r_nxt
;

41 
u_öt8_t
 
	mù6r_Àn
;

42 
u_öt8_t
 
	mù6r_ty≥
;

43 
u_öt8_t
 
	mù6r_£gÀ·
;

46 
	sù6_‰ag
 {

47 
u_öt8_t
 
	mù6f_nxt
;

48 
u_öt8_t
 
	mù6f_ª£rved
;

49 
u_öt16_t
 
	mù6f_ofÊg
;

50 
u_öt32_t
 
	mù6f_idít
;

52 
	#IP6F_OFF_MASK
 0xfff8

	)

53 
	#IP6F_MORE_FRAG
 0x0001

	)

54 
	sù6_ext
 {

55 
u_öt8_t
 
	mù6e_nxt
;

56 
u_öt8_t
 
	mù6e_Àn
;

	@sys/netinet/ip_dummynet.h

30 #i‚de‡
_IP_DUMMYNET_H


31 
	#_IP_DUMMYNET_H


	)

49 
	#DN_API_VERSION
 12500000

	)

50 
	#DN_MAX_ID
 0x10000

	)

52 
	sdn_id
 {

53 
uöt16_t
 
	mÀn
;

54 
uöt8_t
 
	mty≥
;

55 
uöt8_t
 
	msubty≥
;

56 
uöt32_t
 
	mid
;

65 
	mDN_NONE
 = 0,

66 
	mDN_LINK
 = 1,

67 
	mDN_FS
,

68 
	mDN_SCH
,

69 
	mDN_SCH_I
,

70 
	mDN_QUEUE
,

71 
	mDN_DELAY_LINE
,

72 
	mDN_PROFILE
,

73 
	mDN_FLOW
,

74 
	mDN_TEXT
,

76 
	mDN_CMD_CONFIG
 = 0x80,

77 
	mDN_CMD_DELETE
,

78 
	mDN_CMD_GET
,

79 
	mDN_CMD_FLUSH
,

81 
	mDN_COMPAT_PIPE
,

82 
	mDN_COMPAT_QUEUE
,

83 
	mDN_GET_COMPAT
,

86 
	mDN_SYSCTL_GET
,

87 
	mDN_SYSCTL_SET
,

89 
	mDN_LAST
,

93 
	mDN_SCHED_UNKNOWN
 = 0,

94 
	mDN_SCHED_FIFO
 = 1,

95 
	mDN_SCHED_WF2QP
 = 2,

100 
	mDN_HAVE_MASK
 = 0x0001,

101 
	mDN_NOERROR
 = 0x0002,

102 
	mDN_QHT_HASH
 = 0x0004,

103 
	mDN_QSIZE_BYTES
 = 0x0008,

104 
	mDN_HAS_PROFILE
 = 0x0010,

105 
	mDN_IS_RED
 = 0x0020,

106 
	mDN_IS_GENTLE_RED
= 0x0040,

107 
	mDN_PIPE_CMD
 = 0x1000,

113 
	sdn_lök
 {

114 
dn_id
 
	moid
;

121 
öt32_t
 
	mlök_ƒ
;

122 
	mb™dwidth
;

123 
	mdñay
;

124 
uöt64_t
 
	mbur°
;

133 
	sdn_fs
 {

134 
dn_id
 
	moid
;

135 
uöt32_t
 
	mfs_ƒ
;

136 
uöt32_t
 
	mÊags
;

137 
	mqsize
;

138 
öt32_t
 
	m∂r
;

139 
uöt32_t
 
	mbuckës
;

141 
ùfw_Êow_id
 
	mÊow_mask
;

142 
uöt32_t
 
	msched_ƒ
;

146 
	m∑r
[4];

152 
	#SCALE_RED
 16

	)

153 
	#SCALE
(
x
Ë–(xË<< 
SCALE_RED
 )

	)

154 
	#SCALE_VAL
(
x
Ë–(xË>> 
SCALE_RED
 )

	)

155 
	#SCALE_MUL
(
x
,
y
Ë––(xË* (yËË>> 
SCALE_RED
 )

	)

156 
	mw_q
 ;

157 
	mmax_th
 ;

158 
	mmö_th
 ;

159 
	mmax_p
 ;

169 
	sdn_Êow
 {

170 
dn_id
 
	moid
;

171 
ùfw_Êow_id
 
	mfid
;

172 
uöt64_t
 
	mtŸ_pkts
;

173 
uöt64_t
 
	mtŸ_byãs
;

174 
uöt32_t
 
	mÀngth
;

175 
uöt32_t
 
	mÀn_byãs
;

176 
uöt32_t
 
	mdr›s
;

184 
	sdn_sch
 {

185 
dn_id
 
	moid
;

186 
uöt32_t
 
	msched_ƒ
;

187 
uöt32_t
 
	mbuckës
;

188 
uöt32_t
 
	mÊags
;

190 
	m«me
[16];

192 
ùfw_Êow_id
 
	msched_mask
;

199 
	#ED_MAX_SAMPLES_NO
 1024

	)

200 
	sdn_¥ofûe
 {

201 
dn_id
 
	moid
;

203 
	#ED_MAX_NAME_LEN
 32

	)

204 
	m«me
[
ED_MAX_NAME_LEN
];

205 
	mlök_ƒ
;

206 
	mloss_Àvñ
;

207 
	mb™dwidth
;

208 
	mßm∂es_no
;

209 
	mßm∂es
[0];

	@sys/netinet/ip_fw.h

28 #i‚de‡
_IPFW2_H


29 
	#_IPFW2_H


	)

37 
	#IPFW_DEFAULT_RULE
 65535

	)

43 
	#IPFW_TABLES_MAX
 128

	)

55 
	#IPFW_ARG_MIN
 1

	)

56 
	#IPFW_ARG_MAX
 65534

	)

57 
	#IP_FW_TABLEARG
 65535

	)

63 
	#IPFW_CALLSTACK_SIZE
 16

	)

66 
	s_ù_fw3_›hódî
 {

67 
uöt16_t
 
	m›code
;

68 
uöt16_t
 
	mª£rved
[3];

69 } 
	tù_fw3_›hódî
;

73 
	#IP_FW_TABLE_XADD
 86

	)

74 
	#IP_FW_TABLE_XDEL
 87

	)

75 
	#IP_FW_TABLE_XGETSIZE
 88

	)

76 
	#IP_FW_TABLE_XLIST
 89

	)

100 
	eùfw_›codes
 {

101 
	mO_NOP
,

103 
	mO_IP_SRC
,

104 
	mO_IP_SRC_MASK
,

105 
	mO_IP_SRC_ME
,

106 
	mO_IP_SRC_SET
,

108 
	mO_IP_DST
,

109 
	mO_IP_DST_MASK
,

110 
	mO_IP_DST_ME
,

111 
	mO_IP_DST_SET
,

113 
	mO_IP_SRCPORT
,

114 
	mO_IP_DSTPORT
,

115 
	mO_PROTO
,

117 
	mO_MACADDR2
,

118 
	mO_MAC_TYPE
,

120 
	mO_LAYER2
,

121 
	mO_IN
,

122 
	mO_FRAG
,

124 
	mO_RECV
,

125 
	mO_XMIT
,

126 
	mO_VIA
,

128 
	mO_IPOPT
,

129 
	mO_IPLEN
,

130 
	mO_IPID
,

132 
	mO_IPTOS
,

133 
	mO_IPPRECEDENCE
,

134 
	mO_IPTTL
,

136 
	mO_IPVER
,

137 
	mO_UID
,

138 
	mO_GID
,

139 
	mO_ESTAB
,

140 
	mO_TCPFLAGS
,

141 
	mO_TCPWIN
,

142 
	mO_TCPSEQ
,

143 
	mO_TCPACK
,

144 
	mO_ICMPTYPE
,

145 
	mO_TCPOPTS
,

147 
	mO_VERREVPATH
,

148 
	mO_VERSRCREACH
,

150 
	mO_PROBE_STATE
,

151 
	mO_KEEP_STATE
,

152 
	mO_LIMIT
,

153 
	mO_LIMIT_PARENT
,

159 
	mO_LOG
,

160 
	mO_PROB
,

162 
	mO_CHECK_STATE
,

163 
	mO_ACCEPT
,

164 
	mO_DENY
,

165 
	mO_REJECT
,

166 
	mO_COUNT
,

167 
	mO_SKIPTO
,

168 
	mO_PIPE
,

169 
	mO_QUEUE
,

170 
	mO_DIVERT
,

171 
	mO_TEE
,

172 
	mO_FORWARD_IP
,

173 
	mO_FORWARD_MAC
,

174 
	mO_NAT
,

175 
	mO_REASS
,

180 
	mO_IPSEC
,

181 
	mO_IP_SRC_LOOKUP
,

182 
	mO_IP_DST_LOOKUP
,

183 
	mO_ANTISPOOF
,

184 
	mO_JAIL
,

185 
	mO_ALTQ
,

186 
	mO_DIVERTED
,

187 
	mO_TCPDATALEN
,

188 
	mO_IP6_SRC
,

189 
	mO_IP6_SRC_ME
,

190 
	mO_IP6_SRC_MASK
,

191 
	mO_IP6_DST
,

192 
	mO_IP6_DST_ME
,

193 
	mO_IP6_DST_MASK
,

194 
	mO_FLOW6ID
,

195 
	mO_ICMP6TYPE
,

196 
	mO_EXT_HDR
,

197 
	mO_IP6
,

202 
	mO_NETGRAPH
,

203 
	mO_NGTEE
,

205 
	mO_IP4
,

207 
	mO_UNREACH6
,

209 
	mO_TAG
,

210 
	mO_TAGGED
,

212 
	mO_SETFIB
,

213 
	mO_FIB
,

215 
	mO_SOCKARG
,

217 
	mO_CALLRETURN
,

219 
	mO_FORWARD_IP6
,

221 
	mO_LAST_OPCODE


229 
	#EXT_FRAGMENT
 0x1

	)

230 
	#EXT_HOPOPTS
 0x2

	)

231 
	#EXT_ROUTING
 0x4

	)

232 
	#EXT_AH
 0x8

	)

233 
	#EXT_ESP
 0x10

	)

234 
	#EXT_DSTOPTS
 0x20

	)

235 
	#EXT_RTHDR0
 0x40

	)

236 
	#EXT_RTHDR2
 0x80

	)

265 
	s_ùfw_ö¢
 {

266 
u_öt8_t
 
	m›code
;

267 
u_öt8_t
 
	mÀn
;

268 
	#F_NOT
 0x80

	)

269 
	#F_OR
 0x40

	)

270 
	#F_LEN_MASK
 0x3f

	)

271 
	#F_LEN
(
cmd
Ë((cmd)->
Àn
 & 
F_LEN_MASK
)

	)

273 
u_öt16_t
 
	m¨g1
;

274 } 
	tùfw_ö¢
;

280 
	#F_INSN_SIZE
(
t
Ë(( (t))/(
u_öt32_t
))

	)

285 
	s_ùfw_ö¢_u16
 {

286 
ùfw_ö¢
 
	mo
;

287 
u_öt16_t
 
	mp‹ts
[2];

288 } 
	tùfw_ö¢_u16
;

294 
	s_ùfw_ö¢_u32
 {

295 
ùfw_ö¢
 
	mo
;

296 
u_öt32_t
 
	md
[1];

297 } 
	tùfw_ö¢_u32
;

302 
	s_ùfw_ö¢_ù
 {

303 
ùfw_ö¢
 
	mo
;

304 
ö_addr
 
	maddr
;

305 
ö_addr
 
	mmask
;

306 } 
	tùfw_ö¢_ù
;

311 
	s_ùfw_ö¢_ß
 {

312 
ùfw_ö¢
 
	mo
;

313 
sockaddr_ö
 
	mß
;

314 } 
	tùfw_ö¢_ß
;

319 
	s_ùfw_ö¢_ß6
 {

320 
ùfw_ö¢
 
	mo
;

321 
sockaddr_ö6
 
	mß
;

322 } 
	tùfw_ö¢_ß6
;

327 
	s_ùfw_ö¢_mac
 {

328 
ùfw_ö¢
 
	mo
;

329 
u_ch¨
 
	maddr
[12];

330 
u_ch¨
 
	mmask
[12];

331 } 
	tùfw_ö¢_mac
;

336 
	s_ùfw_ö¢_if
 {

337 
ùfw_ö¢
 
	mo
;

339 
ö_addr
 
	mù
;

340 
	mglob
;

341 } 
	mp
;

342 
	m«me
[
IFNAMSIZ
];

343 } 
	tùfw_ö¢_if
;

348 
	s_ùfw_ö¢_Ætq
 {

349 
ùfw_ö¢
 
	mo
;

350 
u_öt32_t
 
	mqid
;

351 } 
	tùfw_ö¢_Ætq
;

356 
	s_ùfw_ö¢_limô
 {

357 
ùfw_ö¢
 
	mo
;

358 
u_öt8_t
 
	m_∑d
;

359 
u_öt8_t
 
	mlimô_mask
;

360 
	#DYN_SRC_ADDR
 0x1

	)

361 
	#DYN_SRC_PORT
 0x2

	)

362 
	#DYN_DST_ADDR
 0x4

	)

363 
	#DYN_DST_PORT
 0x8

	)

365 
u_öt16_t
 
	mc⁄n_limô
;

366 } 
	tùfw_ö¢_limô
;

371 
	s_ùfw_ö¢_log
 {

372 
ùfw_ö¢
 
	mo
;

373 
u_öt32_t
 
	mmax_log
;

374 
u_öt32_t
 
	mlog_À·
;

375 } 
	tùfw_ö¢_log
;

381 #ifde‡
IPFW_INTERNAL


383 
	scfg_•oﬁ
 {

384 
LIST_ENTRY
(
cfg_•oﬁ
Ë
	m_√xt
;

385 
ö_addr
 
	maddr
;

386 
u_sh‹t
 
	mp‹t
;

391 
	#REDIR_ADDR
 0x01

	)

392 
	#REDIR_PORT
 0x02

	)

393 
	#REDIR_PROTO
 0x04

	)

395 #ifde‡
IPFW_INTERNAL


397 
	scfg_ªdú
 {

398 
LIST_ENTRY
(
cfg_ªdú
Ë
	m_√xt
;

399 
u_öt16_t
 
	mmode
;

400 
ö_addr
 
	mœddr
;

401 
ö_addr
 
	m∑ddr
;

402 
ö_addr
 
	møddr
;

403 
u_sh‹t
 
	mÕ‹t
;

404 
u_sh‹t
 
	mµ‹t
;

405 
u_sh‹t
 
	mΩ‹t
;

406 
u_sh‹t
 
	mµ‹t_˙t
;

407 
u_sh‹t
 
	mΩ‹t_˙t
;

408 
	m¥Ÿo
;

409 
Æüs_lök
 **
	mÆök
;

411 
u_öt16_t
 
	m•oﬁ_˙t
;

413 
LIST_HEAD
(
•oﬁ_chaö
, 
cfg_•oﬁ
Ë
	m•oﬁ_chaö
;

417 
	#NAT_BUF_LEN
 1024

	)

419 #ifde‡
IPFW_INTERNAL


421 
	scfg_«t
 {

423 
LIST_ENTRY
(
cfg_«t
Ë
	m_√xt
;

424 
	mid
;

425 
ö_addr
 
	mù
;

426 
	mif_«me
[
IF_NAMESIZE
];

427 
	mmode
;

428 
libÆüs
 *
	mlib
;

430 
	mªdú_˙t
;

432 
LIST_HEAD
(
ªdú_chaö
, 
cfg_ªdú
Ë
	mªdú_chaö
;

436 
	#SOF_NAT
 (
cfg_«t
)

	)

437 
	#SOF_REDIR
 (
cfg_ªdú
)

	)

438 
	#SOF_SPOOL
 (
cfg_•oﬁ
)

	)

441 
	s_ùfw_ö¢_«t
 {

442 
ùfw_ö¢
 
	mo
;

443 
cfg_«t
 *
	m«t
;

444 } 
	tùfw_ö¢_«t
;

447 
	#APPLY_MASK
(
addr
,
mask
) \

448 (
addr
)->
__u6_addr
.
__u6_addr32
[0] &(
mask
)->__u6_addr.__u6_addr32[0]; \

449 (
addr
)->
__u6_addr
.
__u6_addr32
[1] &(
mask
)->__u6_addr.__u6_addr32[1]; \

450 (
addr
)->
__u6_addr
.
__u6_addr32
[2] &(
mask
)->__u6_addr.__u6_addr32[2]; \

451 (
addr
)->
__u6_addr
.
__u6_addr32
[3] &(
mask
)->__u6_addr.__u6_addr32[3];

	)

454 
	s_ùfw_ö¢_ù6
 {

455 
ùfw_ö¢
 
	mo
;

456 
ö6_addr
 
	maddr6
;

457 
ö6_addr
 
	mmask6
;

458 } 
	tùfw_ö¢_ù6
;

461 
	s_ùfw_ö¢_icmp6
 {

462 
ùfw_ö¢
 
	mo
;

463 
uöt32_t
 
	md
[7];

468 } 
	tùfw_ö¢_icmp6
;

497 
	sù_fw
 {

498 #ifde‡
_X64EMU


499 
öt32_t
 
	m∑d1
;

501 
ù_fw
 *
	mx_√xt
;

502 #ifde‡
_X64EMU


503 
öt32_t
 
	m∑d2
;

505 
ù_fw
 *
	m√xt_ruÀ
;

508 
uöt16_t
 
	ma˘_ofs
;

509 
uöt16_t
 
	mcmd_Àn
;

510 
uöt16_t
 
	mruÀnum
;

511 
uöt8_t
 
	m£t
;

512 
	#RESVD_SET
 31

	)

513 
uöt8_t
 
	m_∑d
;

514 
uöt32_t
 
	mid
;

517 
uöt64_t
 
	mp˙t
;

518 
uöt64_t
 
	mb˙t
;

519 
uöt32_t
 
	mtime°amp
;

521 
ùfw_ö¢
 
	mcmd
[1];

524 
	#ACTION_PTR
(
ruÀ
) \

525 (
ùfw_ö¢
 *)–(
u_öt32_t
 *)((
ruÀ
)->
cmd
Ë+ (‘uÀ)->
a˘_ofs
Ë)

	)

527 
	#RULESIZE
(
ruÀ
Ë((
ù_fw
) + \

528 ((
ù_fw
 *)(
ruÀ
))->
cmd_Àn
 * 4 - 4)

	)

538 
	sùfw_Êow_id
 {

539 
uöt32_t
 
	md°_ù
;

540 
uöt32_t
 
	m§c_ù
;

541 
uöt16_t
 
	md°_p‹t
;

542 
uöt16_t
 
	m§c_p‹t
;

543 
uöt8_t
 
	mfib
;

544 
uöt8_t
 
	m¥Ÿo
;

545 
uöt8_t
 
	m_Êags
;

546 
uöt8_t
 
	maddr_ty≥
;

547 
ö6_addr
 
	md°_ù6
;

548 
ö6_addr
 
	m§c_ù6
;

549 
uöt32_t
 
	mÊow_id6
;

550 
uöt32_t
 
	mexåa
;

554 
	#IS_IP6_FLOW_ID
(
id
Ë((id)->
addr_ty≥
 =6)

	)

559 
_ùfw_dyn_ruÀ
 
	tùfw_dyn_ruÀ
;

561 
	s_ùfw_dyn_ruÀ
 {

562 
ùfw_dyn_ruÀ
 *
	m√xt
;

563 
ù_fw
 *
	mruÀ
;

566 
ùfw_dyn_ruÀ
 *
	m∑ª¡
;

567 
u_öt64_t
 
	mp˙t
;

568 
u_öt64_t
 
	mb˙t
;

569 
ùfw_Êow_id
 
	mid
;

570 
u_öt32_t
 
	mexpúe
;

571 
u_öt32_t
 
	mbuckë
;

572 
u_öt32_t
 
	m°©e
;

575 
u_öt32_t
 
	mack_fwd
;

576 
u_öt32_t
 
	mack_ªv
;

578 
u_öt16_t
 
	mdyn_ty≥
;

579 
u_öt16_t
 
	mcou¡
;

585 
	#IP_FW_IPOPT_LSRR
 0x01

	)

586 
	#IP_FW_IPOPT_SSRR
 0x02

	)

587 
	#IP_FW_IPOPT_RR
 0x04

	)

588 
	#IP_FW_IPOPT_TS
 0x08

	)

593 
	#IP_FW_TCPOPT_MSS
 0x01

	)

594 
	#IP_FW_TCPOPT_WINDOW
 0x02

	)

595 
	#IP_FW_TCPOPT_SACK
 0x04

	)

596 
	#IP_FW_TCPOPT_TS
 0x08

	)

597 
	#IP_FW_TCPOPT_CC
 0x10

	)

599 
	#ICMP_REJECT_RST
 0x100

	)

600 
	#ICMP6_UNREACH_RST
 0x100

	)

606 
	#IPFW_TABLE_CIDR
 1

	)

607 
	#IPFW_TABLE_INTERFACE
 2

	)

608 
	#IPFW_TABLE_MAXTYPE
 2

	)

610 
	s_ùfw_èbÀ_íåy
 {

611 
ö_addr_t
 
	maddr
;

612 
u_öt32_t
 
	mvÆue
;

613 
u_öt16_t
 
	mtbl
;

614 
u_öt8_t
 
	mmaskÀn
;

615 } 
	tùfw_èbÀ_íåy
;

617 
	s_ùfw_èbÀ_xíåy
 {

618 
uöt16_t
 
	mÀn
;

619 
uöt8_t
 
	mty≥
;

620 
uöt8_t
 
	mmaskÀn
;

621 
uöt16_t
 
	mtbl
;

622 
uöt32_t
 
	mvÆue
;

625 
ö6_addr
 
	maddr6
;

626 
	miÁ˚
[
IF_NAMESIZE
];

627 } 
	mk
;

628 } 
	tùfw_èbÀ_xíåy
;

630 
	s_ùfw_èbÀ
 {

631 
u_öt32_t
 
	msize
;

632 
u_öt32_t
 
	m˙t
;

633 
u_öt16_t
 
	mtbl
;

634 
ùfw_èbÀ_íåy
 
	mít
[0];

635 } 
	tùfw_èbÀ
;

637 
	s_ùfw_xèbÀ
 {

638 
ù_fw3_›hódî
 
	m›hódî
;

639 
uöt32_t
 
	msize
;

640 
uöt32_t
 
	m˙t
;

641 
uöt16_t
 
	mtbl
;

642 
uöt8_t
 
	mty≥
;

643 
ùfw_èbÀ_xíåy
 
	mxít
[0];

644 } 
	tùfw_xèbÀ
;

	@sys/netinet/ip_icmp.h

5 #i‚de‡
_NETINET_IP_ICMP_H_


6 
	#_NETINET_IP_ICMP_H_


	)

8 
	#ICMP_MAXTYPE
 40

	)

9 
	#ICMP_ROUTERSOLICIT
 10

	)

10 
	#ICMP_TSTAMP
 13

	)

11 
	#ICMP_IREQ
 15

	)

12 
	#ICMP_MASKREQ
 17

	)

13 
	#ICMP_UNREACH_HOST
 1

	)

15 
	#ICMP_UNREACH
 3

	)

	@sys/netinet/ipfw/dn_heap.c

33 
	~<sys/cdefs.h
>

34 
	~<sys/∑øm.h
>

35 #ifde‡
_KERNEL


36 
__FBSDID
("$FreeBSD: user/luigi/ipfw3-head/sys/netinet/ipfw/dn_heap.c 203279 2010-01-31 12:20:29ZÜuigi $");

37 
	~<sys/sy°m.h
>

38 
	~<sys/mÆloc.h
>

39 
	~<sys/kî√l.h
>

40 
	~<√töë/ùfw/dn_hóp.h
>

41 #i‚de‡
log


42 
	#log
(
x
, 
¨g
...)

	)

47 
	~<°dio.h
>

48 
	~<dn_ã°.h
>

49 
	~<°rögs.h
>

50 
	~<°dlib.h
>

52 
	~"dn_hóp.h
"

53 
	#log
(
x
, 
¨g
...Ë
	`Ârötf
(
°dîr
, ##árg)

	)

54 
	#∑nic
(
x
...Ë
	`Ârötf
(
°dîr
, ## x), 
	`exô
(1)

	)

55 
	#MALLOC_DEFINE
(
a
, 
b
, 
c
)

	)

56 *
	$my_mÆloc
(
s
Ë{  
	`mÆloc
(s); 
	}
}

57 
	$my_‰ì
(*
p
Ë{ 
	`‰ì
’); 
	}
}

58 
	#mÆloc
(
s
, 
t
, 
w
Ë
	`my_mÆloc
(s)

	)

59 
	#‰ì
(
p
, 
t
Ë
	`my_‰ì
’)

	)

62 
MALLOC_DEFINE
(
M_DN_HEAP
, "dummynet", "dummynet heap");

74 
	#HEAP_FATHER
(
x
Ë––(xË- 1 ) / 2 )

	)

75 
	#HEAP_LEFT
(
x
Ë–(x)+(xË+ 1 )

	)

76 
	#HEAP_SWAP
(
a
, 
b
, 
buf„r
Ë{ buf„∏®;á = b ; b = buf„∏; }

	)

77 
	#HEAP_INCREMENT
 15

	)

80 
	$hóp_ªsize
(
dn_hóp
 *
h
, 
√w_size
)

82 
dn_hóp_íåy
 *
p
;

84 i‡(
h
->
size
 >
√w_size
 )

87 
√w_size
 |=Çew_size >> 1;

88 
√w_size
 |=Çew_size >> 2;

89 
√w_size
 |=Çew_size >> 4;

90 
√w_size
 |=Çew_size >> 8;

91 
√w_size
 |=Çew_size >> 16;

93 
√w_size
 = (√w_sizê+ 
HEAP_INCREMENT
 ) & ~HEAP_INCREMENT;

95 
p
 = 
	`mÆloc
(
√w_size
 * (*p), 
M_DN_HEAP
, 
M_NOWAIT
);

96 i‡(
p
 =
NULL
) {

97 
	`¥ötf
("--- %s,Ñesizê%d faûed\n", 
__func__
, 
√w_size
 );

100 i‡(
h
->
size
 > 0) {

101 
	`bc›y
(
h
->
p
,Ö, h->
size
 * (*p) );

102 
	`‰ì
(
h
->
p
, 
M_DN_HEAP
);

104 
h
->
p
 =Ö;

105 
h
->
size
 = 
√w_size
;

107 
	}
}

110 
	$hóp_öô
(
dn_hóp
 *
h
, 
size
, 
ofs
)

112 i‡(
	`hóp_ªsize
(
h
, 
size
))

114 
h
->
ñemíts
 = 0;

115 
h
->
ofs
 = ofs;

117 
	}
}

129 
	#SET_OFFSET
(
h
, 
i
) do { \

130 i‡(
h
->
ofs
 > 0) \

131 *((
öt32_t
 *)((*)(
h
->
p
[
i
].
obje˘
Ë+ h->
ofs
)) = i; \

132 } 0)

	)

137 
	#RESET_OFFSET
(
h
, 
i
) do { \

138 i‡(
h
->
ofs
 > 0) \

139 *((
öt32_t
 *)((*)(
h
->
p
[
i
].
obje˘
Ë+ h->
ofs
)) = -16; \

140 } 0)

	)

143 
	$hóp_ö£π
(
dn_hóp
 *
h
, 
uöt64_t
 
key1
, *
p
)

145 
s⁄
 = 
h
->
ñemíts
;

148 i‡(
p
 =
NULL
) {

149 
s⁄
 = 
key1
;

151 
s⁄
 = 
h
->
ñemíts
;

152 i‡(
s⁄
 =
h
->
size
)

154 i‡(
	`hóp_ªsize
(
h
, h->
ñemíts
+16) )

156 
h
->
p
[
s⁄
].
obje˘
 =Ö;

157 
h
->
p
[
s⁄
].
key
 = 
key1
;

158 
h
->
ñemíts
++;

161 
s⁄
 > 0) {

162 
Áthî
 = 
	`HEAP_FATHER
(
s⁄
);

163 
dn_hóp_íåy
 
tmp
;

165 i‡(
	`DN_KEY_LT
–
h
->
p
[
Áthî
].
key
, h->p[
s⁄
].key ) )

168 
	`HEAP_SWAP
(
h
->
p
[
s⁄
], h->p[
Áthî
], 
tmp
);

169 
	`SET_OFFSET
(
h
, 
s⁄
);

170 
s⁄
 = 
Áthî
;

172 
	`SET_OFFSET
(
h
, 
s⁄
);

174 
	}
}

180 
	$hóp_exåa˘
(
dn_hóp
 *
h
, *
obj
)

182 
chûd
, 
Áthî
, 
max
 = 
h
->
ñemíts
 - 1;

184 i‡(
max
 < 0) {

185 
	`¥ötf
("--- %s:Ém±y hó∞0x%p\n", 
__FUNCTION__
, 
h
);

188 i‡(
obj
 =
NULL
)

189 
Áthî
 = 0;

191 i‡(
h
->
ofs
 <= 0)

192 
	`∑nic
("%s:Éxtract from middleÇot set on %p\n",

193 
__FUNCTION__
, 
h
);

194 
Áthî
 = *((*)((*)
obj
 + 
h
->
ofs
));

195 i‡(
Áthî
 < 0 || f©hî >
h
->
ñemíts
) {

196 
	`∑nic
("%s: father %d out of bound 0..%d\n",

197 
__FUNCTION__
, 
Áthî
, 
h
->
ñemíts
);

206 
	`RESET_OFFSET
(
h
, 
Áthî
);

207  (
chûd
 = 
	`HEAP_LEFT
(
Áthî
)Ë<
max
 ) {

208 i‡(
chûd
 !
max
 &&

209 
	`DN_KEY_LT
(
h
->
p
[
chûd
+1].
key
, h->p[child].key) )

210 
chûd
++;

211 
h
->
p
[
Áthî
] = h->p[
chûd
];

212 
	`SET_OFFSET
(
h
, 
Áthî
);

213 
Áthî
 = 
chûd
;

215 
h
->
ñemíts
--;

216 i‡(
Áthî
 !
max
) {

221 
h
->
p
[
Áthî
] = h->p[
max
];

222 
	`hóp_ö£π
(
h
, 
Áthî
, 
NULL
);

224 
	}
}

232 
	$hóp_move
(
dn_hóp
 *
h
, 
uöt64_t
 
√w_key
, *
obje˘
)

234 
ãmp
, 
i
, 
max
 = 
h
->
ñemíts
-1;

235 
dn_hóp_íåy
 *
p
, 
buf
;

237 i‡(
h
->
ofs
 <= 0)

238 
	`∑nic
("cannot move items onÅhis heap");

239 
p
 = 
h
->p;

241 
i
 = *((*)((*)
obje˘
 + 
h
->
ofs
));

242 i‡(
	`DN_KEY_LT
(
√w_key
, 
p
[
i
].
key
) ) {

243 
p
[
i
].
key
 = 
√w_key
;

244 ; 
i
>0 &&

245 
	`DN_KEY_LT
(
√w_key
, 
p
[(
ãmp
 = 
	`HEAP_FATHER
(
i
))].
key
);

246 
i
 = 
ãmp
 ) {

247 
	`HEAP_SWAP
(
p
[
i
],Ö[
ãmp
], 
buf
);

248 
	`SET_OFFSET
(
h
, 
i
);

251 
p
[
i
].
key
 = 
√w_key
;

252  (
ãmp
 = 
	`HEAP_LEFT
(
i
)Ë<
max
 ) {

254 i‡(
ãmp
 !
max
 &&

255 
	`DN_KEY_LT
(
p
[
ãmp
+1].
key
,Ö[temp].key))

256 
ãmp
++;

257 i‡(
	`DN_KEY_LT
(>
p
[
ãmp
].
key
, 
√w_key
)) {

259 
	`HEAP_SWAP
(
p
[
i
],Ö[
ãmp
], 
buf
);

260 
	`SET_OFFSET
(
h
, 
i
);

263 
i
 = 
ãmp
;

266 
	`SET_OFFSET
(
h
, 
i
);

267 
	}
}

275 
	$hópify
(
dn_hóp
 *
h
)

277 
i
;

279 
i
 = 0; i < 
h
->
ñemíts
; i++ )

280 
	`hóp_ö£π
(
h
, 
i
 , 
NULL
);

281 
	}
}

284 
hóp_sˇn
(
dn_hóp
 *
h
, (*
‚
)(*, 
uöçå_t
),

285 
uöçå_t
 
¨g
)

287 
i
, 
ªt
, 
found
;

289 
i
 = 
found
 = 0 ; i < 
h
->
ñemíts
 ;) {

290 
ªt
 = 
	`‚
(
h
->
p
[
i
].
obje˘
, 
¨g
);

291 i‡(
ªt
 & 
HEAP_SCAN_DEL
) {

292 
h
->
ñemíts
-- ;

293 
h
->
p
[
i
] = h->p[h->
ñemíts
] ;

294 
found
++ ;

296 
i
++ ;

297 i‡(
ªt
 & 
HEAP_SCAN_END
)

300 i‡(
found
)

301 
	`hópify
(
h
);

302  
found
;

303 
	}
}

309 
	$hóp_‰ì
(
dn_hóp
 *
h
)

311 i‡(
h
->
size
 >0 )

312 
	`‰ì
(
h
->
p
, 
M_DN_HEAP
);

313 
	`bzîo
(
h
, (*h) );

314 
	}
}

320 
	sdn_ht
 {

321 
	mbuckës
;

322 
	míåõs
;

323 
	mofs
;

324 
uöt32_t
 (*
hash
)(
	muöçå_t
, , *
	m¨g
);

325 (*
	mm©ch
)(*
	m_ñ
, 
uöçå_t
 
	mkey
, , *);

326 *(*
	m√wh
)(
	muöçå_t
, , *);

327 **
	mht
;

335 
dn_ht
 *

336 
dn_ht_öô
(
dn_ht
 *
ht
, 
buckës
, 
ofs
,

337 
	$uöt32_t
 (*
h
)(
uöçå_t
, , *),

338 (*
m©ch
)(*, 
uöçå_t
, , *),

339 *(*
√wh
)(
uöçå_t
, , *))

341 
l
;

361 
b_mö
;

362 
b_max
;

363 
b_‹i
;

365 i‡(
h
 =
NULL
 || 
m©ch
 == NULL) {

366 
	`¥ötf
("--- missing hash or match function");

367  
NULL
;

369 i‡(
buckës
 < 1 || buckets > 65536)

370  
NULL
;

372 
b_‹i
 = 
buckës
;

374 
buckës
 |= buckets >> 1;

375 
buckës
 |= buckets >> 2;

376 
buckës
 |= buckets >> 4;

377 
buckës
 |= buckets >> 8;

378 
buckës
 |= buckets >> 16;

380 
b_max
 = 
buckës
;

381 
b_mö
 = 
buckës
 >> 1;

384 i‡(
b_mö
 * 4000 / 3000 < 
b_‹i
)

385 
buckës
 = 
b_max
;

387 
buckës
 = 
b_mö
;

389 i‡(
ht
) {

390 i‡(
buckës
 <
ht
->buckets) {

391 
ht
->
buckës
 = buckets;

394 i‡(
ht
->ht != (*)(ht + 1))

395 
	`‰ì
(
ht
->ht, 
M_DN_HEAP
);

396 
	`‰ì
(
ht
, 
M_DN_HEAP
);

397 
ht
 = 
NULL
;

400 i‡(
ht
 =
NULL
) {

404 
l
 = (*
ht
Ë+ (
buckës
 + 1) * (**);

405 
ht
 = 
	`mÆloc
(
l
, 
M_DN_HEAP
, 
M_NOWAIT
 | 
M_ZERO
);

407 i‡(
ht
) {

408 
ht
->ht = (**)(ht + 1);

409 
ht
->
buckës
 = buckets;

410 
ht
->
ofs
 = ofs;

411 
ht
->
hash
 = 
h
;

412 
ht
->
m©ch
 = match;

413 
ht
->
√wh
 =Çewh;

415  
ht
;

416 
	}
}

420 
	$do_dñ
(*
obj
, *
¨g
)

422  
DNHT_SCAN_DEL
;

423 
	}
}

426 
	$dn_ht_‰ì
(
dn_ht
 *
ht
, 
Êags
)

428 i‡(
ht
 =
NULL
)

430 i‡(
Êags
 & 
DNHT_REMOVE
) {

431 ()
	`dn_ht_sˇn
(
ht
, 
do_dñ
, 
NULL
);

433 i‡(
ht
->ht && ht->ht != (*)(ht + 1))

434 
	`‰ì
(
ht
->ht, 
M_DN_HEAP
);

435 
	`‰ì
(
ht
, 
M_DN_HEAP
);

437 
	}
}

440 
	$dn_ht_íåõs
(
dn_ht
 *
ht
)

442  
ht
 ? ht->
íåõs
 : 0;

443 
	}
}

456 
	#NEXT
(
_h
, 
_p
Ë*((**)((*)(_pË+ (_h)->
ofs
))

	)

458 
dn_ht_sˇn_body
(
dn_ht
 *
ht
, *
buckë
,

459 (*
‚
)(*, *), *
¨g
)

461 
ªt
, 
found
 = 0, 
i
 = *
buckë
;

462 *
èû
, *
µ
, *
p
, *
√xç
;

464 
µ
 = 
èû
 = 
ht
->ht[
i
];

466 
p
 = 
	`NEXT
(
ht
, 
µ
);

467 
√xç
 = 
	`NEXT
(
ht
, 
p
);

468 
ªt
 = 
	`‚
(
p
, 
¨g
);

469 i‡((
ªt
 & 
DNHT_SCAN_DEL
) == 0) {

470 
µ
 = 
p
;

472 
found
++;

473 
ht
->
íåõs
--;

475 i‡(
µ
 !
p
)

477 
	`NEXT
(
ht
, 
µ
Ë
√xç
;

478 i‡(
p
 =
èû
)

479 
ht
->ht[
i
] = (
µ
 !
p
Ë?Ö∞: 
NULL
;

481 i‡(
ªt
 & 
DNHT_SCAN_END
) {

483 
ht
->ht[
i
] = (ht->ht[i] =
NULL
Ë? NULL : 
µ
;

484  
found
;

486 } 
p
 !
èû
);

488 (*
buckë
)++;

489  
found
;

490 
	}
}

498 
	$dn_ht_föd
(
dn_ht
 *
ht
, 
uöçå_t
 
key
, 
Êags
, *
¨g
)

500 
i
, 
found
;

501 *
èû
, *
µ
, *
p
;

503 i‡(
ht
 =
NULL
)

504  
NULL
;

505 
i
 = (
ht
->
buckës
 == 1) ? 0 :

506 (
ht
->
	`hash
(
key
, 
Êags
, 
¨g
Ë& ht->
buckës
);

508 
µ
 = 
èû
 = 
ht
->ht[
i
];

509 i‡(
èû
) {

511 
p
 = 
	`NEXT
(
ht
, 
µ
);

512 
found
 = (
Êags
 & 
DNHT_MATCH_PTR
Ë? 
key
 =(
uöçå_t
)
p
 :

513 
ht
->
	`m©ch
(
p
, 
key
, 
Êags
, 
¨g
);

514 i‡(!
found
)

516 i‡(
Êags
 & 
DNHT_REMOVE
) {

517 
ht
->
íåõs
--;

518 i‡(
p
 !
µ
)

519 
	`NEXT
(
ht
, 
µ
ËNEXT(ht, 
p
);

520 i‡(
p
 =
èû
)

521 
ht
->ht[
i
] = (
µ
 !
p
Ë?Ö∞: 
NULL
;

523  
p
;

524 }  (
µ
 = 
p
Ë!
èû
);

527 i‡((
Êags
 & 
DNHT_INSERT
) == 0)

528  
NULL
;

529 
p
 = 
ht
->
√wh
 ? ht->
	`√wh
(
key
, 
Êags
, 
¨g
) : (*)key;

530 i‡(
p
) {

531 
ht
->
íåõs
++;

532 i‡(
èû
 =
NULL
) {

533 
ht
->ht[
i
] = 
	`NEXT
(ht, 
p
) =Ö;

535 
	`NEXT
(
ht
, 
p
ËNEXT(ht, 
èû
);

536 
	`NEXT
(
ht
, 
èû
Ë
p
;

540  
p
;

541 
	}
}

550 
dn_ht_sˇn
(
dn_ht
 *
ht
, (*
‚
)(*, *), *
¨g
)

552 
i
, 
buckë
, 
found
 = 0;

554 i‡(
ht
 =
NULL
 || 
‚
 == NULL)

556 
i
 = 0; i <
ht
->
buckës
; i++) {

557 i‡(
ht
->ht[
i
] =
NULL
)

559 
buckë
 = 
i
;

560 
found
 +
	`dn_ht_sˇn_body
(
ht
, &
buckë
, 
‚
, 
¨g
);

561 i‡(
buckë
 =
i
)

562  
found
;

564  
found
;

565 
	}
}

576 
dn_ht_sˇn_buckë
(
dn_ht
 *
ht
, *
buckë
, (*
‚
)(*, *),

577 *
¨g
)

579 i‡(
ht
 =
NULL
 || 
‚
 == NULL)

581 i‡(*
buckë
 > 
ht
->
buckës
 || *bucket < 0)

582 *
buckë
 = 0;

583 i‡(
ht
->ht[*
buckë
] =
NULL
) {

584 (*
buckë
)++;

587  
	`dn_ht_sˇn_body
(
ht
, 
buckë
, 
‚
, 
¨g
);

588 
	}
}

	@sys/netinet/ipfw/dn_heap.h

33 #i‚de‡
_IP_DN_HEAP_H


34 
	#_IP_DN_HEAP_H


	)

36 
	#DN_KEY_LT
(
a
,
b
Ë((
öt64_t
)(◊)-(b)Ë< 0)

	)

37 
	#DN_KEY_LEQ
(
a
,
b
Ë((
öt64_t
)(◊)-(b)Ë<0)

	)

56 
	sdn_hóp_íåy
 {

57 
uöt64_t
 
	mkey
;

58 *
	mobje˘
;

61 
	sdn_hóp
 {

62 
	msize
;

63 
	mñemíts
;

64 
	mofs
;

65 
dn_hóp_íåy
 *
	mp
;

69 
	mHEAP_SCAN_DEL
 = 1,

70 
	mHEAP_SCAN_END
 = 2,

99 
	#HEAP_TOP
(
h
Ë((h)->
p
)

	)

100 
	#SET_HEAP_OFS
(
h
, 
n
Ëdÿ{ (h)->
ofs
 =Ç; } 0)

	)

101 
hóp_öô
(
dn_hóp
 *
h
, 
size
, 
ofs
);

102 
hóp_ö£π
(
dn_hóp
 *
h
, 
uöt64_t
 
key1
, *
p
);

103 
hóp_exåa˘
(
dn_hóp
 *
h
, *
obj
);

104 
hóp_‰ì
(
dn_hóp
 *
h
);

105 
hóp_sˇn
(
dn_hóp
 *, (*)(*, 
uöçå_t
), uintptr_t);

165 
dn_ht
;

167 
dn_ht
 *
	`dn_ht_öô
(dn_hà*, 
buckës
, 
ofs
,

168 
	$uöt32_t
 (*
hash
)(
uöçå_t
, , *),

169 (*
m©ch
)(*, 
uöçå_t
, , *),

170 *(*
√wh
)(
uöçå_t
, , *));

171 
	`dn_ht_‰ì
(
dn_ht
 *, 
Êags
);

173 *
	`dn_ht_föd
(
dn_ht
 *, 
uöçå_t
, , *);

174 
	`dn_ht_sˇn
(
dn_ht
 *, (*)(*, *), *);

175 
	`dn_ht_sˇn_buckë
(
dn_ht
 *, * , (*)(*, *), *);

176 
	`dn_ht_íåõs
(
dn_ht
 *);

182 
DNHT_SCAN_DEL
 = 0x0001,

183 
DNHT_SCAN_END
 = 0x0002,

184 
DNHT_KEY_IS_OBJ
 = 0x0004,

185 
DNHT_MATCH_PTR
 = 0x0008,

186 
DNHT_INSERT
 = 0x0010,

187 
DNHT_UNIQUE
 = 0x0020,

188 
DNHT_REMOVE
 = 0x0040,

	@sys/netinet/ipfw/dn_sched.h

33 #i‚de‡
_DN_SCHED_H


34 
	#_DN_SCHED_H


	)

36 
	#DN_MULTIQUEUE
 0x01

	)

43 
	sdn_Æg
 {

44 
uöt32_t
 
	mty≥
;

45 c⁄° *
	m«me
;

46 
uöt32_t
 
	mÊags
;

57 
size_t
 
	mschk_d©Æí
;

62 
size_t
 
	msi_d©Æí
;

64 
size_t
 
	mq_d©Æí
;

127 (*
	míqueue
)(
	mdn_sch_ö°
 *, 
	mdn_queue
 *,

128 
	mmbuf
 *);

129 
	mmbuf
 * (*
	mdequeue
)(
	mdn_sch_ö°
 *);

131 (*
	mc⁄fig
)(
	mdn_schk
 *);

132 (*
	mde°roy
)(
	mdn_schk
*);

133 (*
	m√w_sched
)(
	mdn_sch_ö°
 *);

134 (*
	m‰ì_sched
)(
	mdn_sch_ö°
 *);

135 (*
	m√w_fsk
)(
dn_fsk
 *
	mf
);

136 (*
	m‰ì_fsk
)(
dn_fsk
 *
	mf
);

137 (*
	m√w_queue
)(
dn_queue
 *
	mq
);

138 (*
	m‰ì_queue
)(
dn_queue
 *
	mq
, 
	mß„
);

141 
	mªf_cou¡
;

142 
SLIST_ENTRY
(
dn_Æg
Ë
	m√xt
;

146 #ifde‡
_WIN32


147 
	#_SI
(
Êd
)

	)

149 
	#_SI
(
Êd
Ë
	)
fld

157 
dn_‰ì_pkts
(
mbuf
 *
m√xt
);

158 
dn_íqueue
(
dn_queue
 *
q
, 
mbuf
* 
m
, 
dr›
);

160 
ùdn_bound_v¨
(*
v
, 
dÊt
, 
lo
, 
hi
, c⁄° *
msg
);

166 
__ölöe
 
mbuf
*

167 
	$dn_dequeue
(
dn_queue
 *
q
)

169 
mbuf
 *
m
 = 
q
->
mq
.
hód
;

170 i‡(
m
 =
NULL
)

171  
NULL
;

172 
q
->
mq
.
hód
 = 
m
->
m_√xçkt
;

175 
q
->
ni
.
Àngth
--;

176 
q
->
ni
.
Àn_byãs
 -
m
->
m_pkthdr
.
Àn
;

180 i‡(
q
->
ni
.
Àngth
 == 0) {

181 
dn_cfg
.
idÀ_queue
++;

182 
q
->
q_time
 = 
dn_cfg
.
cuº_time
;

184 i‡(
q
->
_si
) {

185 
dn_Êow
 *
ni
 = &(
q
->
_si
->ni);

189 
ni
->
Àngth
--;

190 
ni
->
Àn_byãs
 -
m
->
m_pkthdr
.
Àn
;

191 i‡(
ni
->
Àngth
 == 0)

192 
dn_cfg
.
idÀ_si
++;

194  
m
;

195 
	}
}

197 
dn_sched_modevít
(
moduÀ_t
 
mod
, 
cmd
, *
¨g
);

199 
	#DECLARE_DNSCHED_MODULE
(
«me
, 
dnsched
) \

200 
moduÀd©a_t
 
«me
##
_mod
 = { \

201 #«me, 
dn_sched_modevít
, 
dnsched
 \

203 
	`DECLARE_MODULE
(
«me
,Çame##
_mod
, \

204 
SI_SUB_PROTO_IFATTACHDOMAIN
, 
SI_ORDER_ANY
); \

205 
	`MODULE_DEPEND
(
«me
, 
dummy√t
, 3, 3, 3);

	)

	@sys/netinet/ipfw/dn_sched_fifo.c

31 #ifde‡
_KERNEL


32 
	~<sys/mÆloc.h
>

33 
	~<sys/sockë.h
>

34 
	~<sys/sockëv¨.h
>

35 
	~<sys/kî√l.h
>

36 
	~<sys/mbuf.h
>

37 
	~<sys/moduÀ.h
>

38 
	~<√t/if.h
>

39 
	~<√töë/ö.h
>

40 
	~<√töë/ù_v¨.h
>

41 
	~<√töë/ù_fw.h
>

42 
	~<√töë/ù_dummy√t.h
>

43 
	~<√töë/ùfw/dn_hóp.h
>

44 
	~<√töë/ùfw/ù_dn_¥iv©e.h
>

45 
	~<√töë/ùfw/dn_sched.h
>

47 
	~<dn_ã°.h
>

58 
	$fifo_íqueue
(
dn_sch_ö°
 *
si
, 
dn_queue
 *
q
, 
mbuf
 *
m
)

64  
	`dn_íqueue
((
dn_queue
 *)(
si
+1), 
m
, 0);

65 
	}
}

67 
mbuf
 *

68 
	$fifo_dequeue
(
dn_sch_ö°
 *
si
)

70  
	`dn_dequeue
((
dn_queue
 *)(
si
 + 1));

71 
	}
}

74 
	$fifo_√w_sched
(
dn_sch_ö°
 *
si
)

77 
dn_queue
 *
q
 = (dn_queuê*)(
si
 + 1);

79 
	`£t_oid
(&
q
->
ni
.
oid
, 
DN_QUEUE
, (*q));

80 
q
->
_si
 = 
si
;

81 
q
->
fs
 = 
si
->
sched
->fs;

83 
	}
}

86 
	$fifo_‰ì_sched
(
dn_sch_ö°
 *
si
)

88 
dn_queue
 *
q
 = (dn_queuê*)(
si
 + 1);

89 
	`dn_‰ì_pkts
(
q
->
mq
.
hód
);

90 
	`bzîo
(
q
, (*q));

92 
	}
}

99 
dn_Æg
 
	gfifo_desc
 = {

100 
_SI
–.
ty≥
 = ) 
DN_SCHED_FIFO
,

101 
_SI
–.
«me
 = ) "FIFO",

102 
_SI
–.
Êags
 = ) 0,

104 
_SI
–.
schk_d©Æí
 = ) 0,

105 
_SI
–.
si_d©Æí
 = ) (
dn_queue
),

106 
_SI
–.
q_d©Æí
 = ) 0,

108 
_SI
–.
íqueue
 = ) 
fifo_íqueue
,

109 
_SI
–.
dequeue
 = ) 
fifo_dequeue
,

110 
_SI
–.
c⁄fig
 = ) 
NULL
,

111 
_SI
–.
de°roy
 = ) 
NULL
,

112 
_SI
–.
√w_sched
 = ) 
fifo_√w_sched
,

113 
_SI
–.
‰ì_sched
 = ) 
fifo_‰ì_sched
,

114 
_SI
–.
√w_fsk
 = ) 
NULL
,

115 
_SI
–.
‰ì_fsk
 = ) 
NULL
,

116 
_SI
–.
√w_queue
 = ) 
NULL
,

117 
_SI
–.
‰ì_queue
 = ) 
NULL
,

120 
DECLARE_DNSCHED_MODULE
(
dn_fifo
, &
fifo_desc
);

	@sys/netinet/ipfw/dn_sched_prio.c

30 #ifde‡
_KERNEL


31 
	~<sys/mÆloc.h
>

32 
	~<sys/sockë.h
>

33 
	~<sys/sockëv¨.h
>

34 
	~<sys/kî√l.h
>

35 
	~<sys/mbuf.h
>

36 
	~<sys/moduÀ.h
>

37 
	~<√t/if.h
>

38 
	~<√töë/ö.h
>

39 
	~<√töë/ù_v¨.h
>

40 
	~<√töë/ù_fw.h
>

41 
	~<√töë/ù_dummy√t.h
>

42 
	~<√töë/ùfw/dn_hóp.h
>

43 
	~<√töë/ùfw/ù_dn_¥iv©e.h
>

44 
	~<√töë/ùfw/dn_sched.h
>

46 
	~<dn_ã°.h
>

49 
	#DN_SCHED_PRIO
 5

50 

	)

51 #i‡!
deföed
(
_KERNEL
Ë|| !deföed(
__löux__
)

52 
	#ã°_bô
(
ix
, 
pD©a
Ë((*pD©aË& (1<<(ix)))

	)

53 
	#__£t_bô
(
ix
, 
pD©a
Ë(*pD©aË|(1<<(ix))

	)

54 
	#__˛ór_bô
(
ix
, 
pD©a
Ë(*pD©aË&~(1<<(ix))

	)

57 #ifde‡
__MIPSEL__


58 
	#__˛ór_bô
(
ix
, 
pD©a
Ë(*pD©aË&~(1<<(ix))

	)

62 
	#BITMAP_T
 

	)

63 
	#MAXPRIO
 ((
BITMAP_T
Ë* 8)

	)

69 
	s¥io_si
 {

70 
BITMAP_T
 
	mbôm≠
;

71 
dn_queue
 *
	mq_¨øy
[
MAXPRIO
];

79 
	$¥io_íqueue
(
dn_sch_ö°
 *
_si
, 
dn_queue
 *
q
, 
mbuf
 *
m
)

81 
¥io_si
 *
si
 = (¥io_sò*)(
_si
 + 1);

82 
¥io
 = 
q
->
fs
->fs.
∑r
[0];

84 i‡(
	`ã°_bô
(
¥io
, &
si
->
bôm≠
) == 0) {

86 
	`__£t_bô
(
¥io
, &
si
->
bôm≠
);

87 
si
->
q_¨øy
[
¥io
] = 
q
;

89 
q
 = 
si
->
q_¨øy
[
¥io
];

91 i‡(
	`dn_íqueue
(
q
, 
m
, 0))

94 
	}
}

107 
mbuf
 *

108 
	$¥io_dequeue
(
dn_sch_ö°
 *
_si
)

110 
¥io_si
 *
si
 = (¥io_sò*)(
_si
 + 1);

111 
mbuf
 *
m
;

112 
dn_queue
 *
q
;

113 
¥io
;

115 i‡(
si
->
bôm≠
 == 0)

116  
NULL
;

118 
¥io
 = 
	`ffs
(
si
->
bôm≠
) - 1;

121 
q
 = 
si
->
q_¨øy
[
¥io
];

124 
m
 = 
	`dn_dequeue
(
q
);

125 i‡(
q
->
mq
.
hód
 =
NULL
) {

129 
si
->
q_¨øy
[
¥io
] = 
NULL
;

130 
	`__˛ór_bô
(
¥io
, &
si
->
bôm≠
);

132  
m
;

133 
	}
}

136 
	$¥io_√w_sched
(
dn_sch_ö°
 *
_si
)

138 
¥io_si
 *
si
 = (¥io_sò*)(
_si
 + 1);

140 
	`bzîo
(
si
->
q_¨øy
, (si->q_array));

141 
si
->
bôm≠
 = 0;

144 
	}
}

147 
	$¥io_√w_fsk
(
dn_fsk
 *
fs
)

150 
	`ùdn_bound_v¨
(&
fs
->fs.
∑r
[0], 0, 0, 
MAXPRIO
 - 1, "PRIOÖriority");

152 
	}
}

155 
	$¥io_√w_queue
(
dn_queue
 *
q
)

157 
¥io_si
 *
si
 = (¥io_sò*)(
q
->
_si
 + 1);

158 
¥io
 = 
q
->
fs
->fs.
∑r
[0];

159 
dn_queue
 *
ﬁdq
;

161 
q
->
ni
.
oid
.
subty≥
 = 
DN_SCHED_PRIO
;

163 i‡(
q
->
mq
.
hód
 =
NULL
)

169 i‡(
	`ã°_bô
(
¥io
, &
si
->
bôm≠
) == 0) {

171 
	`__£t_bô
(
¥io
, &
si
->
bôm≠
);

172 
si
->
q_¨øy
[
¥io
] = 
q
;

173 } i‡–(
ﬁdq
 = 
si
->
q_¨øy
[
¥io
]Ë!
q
) {

178 
ﬁdq
->
mq
.
èû
->
m_√xçkt
 = 
q
->mq.
hód
;

179 
ﬁdq
->
mq
.
èû
 = 
q
->mq.tail;

180 
ﬁdq
->
ni
.
Àngth
 +
q
->ni.length;

181 
q
->
ni
.
Àngth
 = 0;

182 
ﬁdq
->
ni
.
Àn_byãs
 +
q
->ni.len_bytes;

183 
q
->
ni
.
Àn_byãs
 = 0;

184 
q
->
mq
.
èû
 = q->mq.
hód
 = 
NULL
;

187 
	}
}

190 
	$¥io_‰ì_queue
(
dn_queue
 *
q
, 
ß„
)

192 
¥io
 = 
q
->
fs
->fs.
∑r
[0];

193 
¥io_si
 *
si
 = (¥io_sò*)(
q
->
_si
 + 1);

195 i‡(
si
->
q_¨øy
[
¥io
] =
q
) {

196 
si
->
q_¨øy
[
¥io
] = 
NULL
;

197 
	`__˛ór_bô
(
¥io
, &
si
->
bôm≠
);

200 
	}
}

203 
dn_Æg
 
	g¥io_desc
 = {

204 
_SI
–.
ty≥
 = ) 
DN_SCHED_PRIO
,

205 
_SI
–.
«me
 = ) "PRIO",

206 
_SI
–.
Êags
 = ) 
DN_MULTIQUEUE
,

209 
_SI
–.
schk_d©Æí
 = ) 0,

210 
_SI
–.
si_d©Æí
 = ) (
¥io_si
),

211 
_SI
–.
q_d©Æí
 = ) 0,

213 
_SI
–.
íqueue
 = ) 
¥io_íqueue
,

214 
_SI
–.
dequeue
 = ) 
¥io_dequeue
,

216 
_SI
–.
c⁄fig
 = ) 
NULL
,

217 
_SI
–.
de°roy
 = ) 
NULL
,

218 
_SI
–.
√w_sched
 = ) 
¥io_√w_sched
,

219 
_SI
–.
‰ì_sched
 = ) 
NULL
,

221 
_SI
–.
√w_fsk
 = ) 
¥io_√w_fsk
,

222 
_SI
–.
‰ì_fsk
 = ) 
NULL
,

224 
_SI
–.
√w_queue
 = ) 
¥io_√w_queue
,

225 
_SI
–.
‰ì_queue
 = ) 
¥io_‰ì_queue
,

229 
DECLARE_DNSCHED_MODULE
(
dn_¥io
, &
¥io_desc
);

	@sys/netinet/ipfw/dn_sched_qfq.c

31 #ifde‡
_KERNEL


32 
	~<sys/mÆloc.h
>

33 
	~<sys/sockë.h
>

34 
	~<sys/sockëv¨.h
>

35 
	~<sys/kî√l.h
>

36 
	~<sys/mbuf.h
>

37 
	~<sys/moduÀ.h
>

38 
	~<√t/if.h
>

39 
	~<√töë/ö.h
>

40 
	~<√töë/ù_v¨.h
>

41 
	~<√töë/ù_fw.h
>

42 
	~<√töë/ù_dummy√t.h
>

43 
	~<√töë/ùfw/dn_hóp.h
>

44 
	~<√töë/ùfw/ù_dn_¥iv©e.h
>

45 
	~<√töë/ùfw/dn_sched.h
>

47 
	~<dn_ã°.h
>

50 #ifde‡
QFQ_DEBUG


51 
	gqfq_sched
;

52 
dump_sched
(
qfq_sched
 *
q
, c⁄° *
msg
);

53 
	#NO
(
x
Ë
	)
x

55 
	#NO
(
x
)

	)

57 
	#DN_SCHED_QFQ
 4

58 
	tbôm≠
;

	)

64 #i‡
deföed
(
_WIN32
Ë|| (deföed(
__MIPSEL__
Ë&& deföed(
LINUX_24
))

65 
	$Ês
(
n
)

67 
i
 = 0;

68 
i
 = 0; 
n
 > 0;Ç >>= 1, i++)

70  
i
;

71 
	}
}

74 #i‡!
deföed
(
_KERNEL
Ë|| deföed–
__FªeBSD__
 ) || deföed(
_WIN32
Ë|| (deföed(
__MIPSEL__
Ë&& deföed(
LINUX_24
))

75 
ölöe
 
	$__Ês
(
w‹d
)

77  
	`Ês
(
w‹d
) - 1;

78 
	}
}

81 #i‡!
deföed
(
_KERNEL
Ë|| !deföed(
__löux__
)

82 #ifde‡
QFQ_DEBUG


83 
	$ã°_bô
(
ix
, 
bôm≠
 *
p
)

85 i‡(
ix
 < 0 || ix > 31)

86 
	`D
("bad index %d", 
ix
);

87  *
p
 & (1<<
ix
);

88 
	}
}

89 
	$__£t_bô
(
ix
, 
bôm≠
 *
p
)

91 i‡(
ix
 < 0 || ix > 31)

92 
	`D
("bad index %d", 
ix
);

93 *
p
 |(1<<
ix
);

94 
	}
}

95 
	$__˛ór_bô
(
ix
, 
bôm≠
 *
p
)

97 i‡(
ix
 < 0 || ix > 31)

98 
	`D
("bad index %d", 
ix
);

99 *
p
 &~(1<<
ix
);

100 
	}
}

103 
	#ã°_bô
(
ix
, 
pD©a
Ë((*pD©aË& (1<<(ix)))

	)

104 
	#__£t_bô
(
ix
, 
pD©a
Ë(*pD©aË|(1<<(ix))

	)

105 
	#__˛ór_bô
(
ix
, 
pD©a
Ë(*pD©aË&~(1<<(ix))

	)

109 #ifde‡
__MIPSEL__


110 
	#__˛ór_bô
(
ix
, 
pD©a
Ë(*pD©aË&~(1<<(ix))

	)

155 
	#QFQ_MAX_SLOTS
 32

	)

170 
	#QFQ_MAX_INDEX
 19

	)

171 
	#QFQ_MAX_WSHIFT
 16

	)

173 
	#QFQ_MAX_WEIGHT
 (1<<
QFQ_MAX_WSHIFT
)

	)

174 
	#QFQ_MAX_WSUM
 (2*
QFQ_MAX_WEIGHT
)

	)

176 
	#IWSUM
 ((1<<
FRAC_BITS
)/
QFQ_MAX_WSUM
)

	)

178 
	#FRAC_BITS
 30

	)

179 
	#ONE_FP
 (1UL << 
FRAC_BITS
)

	)

181 
	#QFQ_MTU_SHIFT
 11

	)

182 
	#QFQ_MIN_SLOT_SHIFT
 (
FRAC_BITS
 + 
QFQ_MTU_SHIFT
 - 
QFQ_MAX_INDEX
)

	)

188 
	eqfq_°©e
 { 
	mER
, 
	mIR
, 
	mEB
, 
	mIB
, 
	mQFQ_MAX_STATE
 };

190 
	gqfq_group
;

196 
	sqfq_˛ass
 {

197 
dn_queue
 
	m_q
;

198 
uöt64_t
 
	mS
, 
	mF
;

199 
qfq_˛ass
 *
	m√xt
;

205 
qfq_group
 *
	mgΩ
;

208 
uöt32_t
 
	möv_w
;

209 
uöt32_t
 
	mlmax
;

215 
	sqfq_group
 {

216 
uöt64_t
 
	mS
, 
	mF
;

217 
	m¶Ÿ_shi·
;

218 
	mödex
;

219 
	m‰⁄t
;

220 
bôm≠
 
	mfuŒ_¶Ÿs
;

223 
qfq_˛ass
 *
	m¶Ÿs
[
QFQ_MAX_SLOTS
];

227 
	sqfq_sched
 {

228 
uöt64_t
 
	mV
;

229 
uöt32_t
 
	mwsum
;

230 
NO
(
uöt32_t
 
i_wsum
;

231 
uöt32_t
 
_queued
;

232 
uöt32_t
 
lo›s
; )

233 
bôm≠
 
	mbôm≠s
[
QFQ_MAX_STATE
];

234 
qfq_group
 
	mgroups
[
QFQ_MAX_INDEX
 + 1];

240 
ölöe
 
	$qfq_gt
(
uöt64_t
 
a
, uöt64_à
b
)

242  (
öt64_t
)(
a
 - 
b
) > 0;

243 
	}
}

246 
ölöe
 
uöt64_t
 
	$qfq_round_down
(
uöt64_t
 
ts
, 
shi·
)

248  
ts
 & ~((1ULL << 
shi·
) - 1);

249 
	}
}

252 
ölöe
 
qfq_group
 *
	$qfq_ffs
(
qfq_sched
 *
q
,

253 
bôm≠
)

255 
ödex
 = 
	`ffs
(
bôm≠
) - 1;

256  &
q
->
groups
[
ödex
];

257 
	}
}

264 
	$qfq_ˇlc_ödex
(
uöt32_t
 
öv_w
, 
maxÀn
)

266 
uöt64_t
 
¶Ÿ_size
 = (uöt64_t)
maxÀn
 *
öv_w
;

267 
size_m≠
;

268 
ödex
 = 0;

270 
size_m≠
 = ()(
¶Ÿ_size
 >> 
QFQ_MIN_SLOT_SHIFT
);

271 i‡(!
size_m≠
)

272 
out
;

274 
ödex
 = 
	`__Ês
(
size_m≠
) + 1;

275 
ödex
 -!(
¶Ÿ_size
 - (1ULL << (ödex + 
QFQ_MIN_SLOT_SHIFT
 - 1)));

277 i‡(
ödex
 < 0)

278 
ödex
 = 0;

280 
out
:

281 
	`ND
("W = %d, L = %d, I = %d\n", 
ONE_FP
/
öv_w
, 
maxÀn
, 
ödex
);

282  
ödex
;

283 
	}
}

291 
	$qfq_√w_queue
(
dn_queue
 *
_q
)

293 
qfq_sched
 *
q
 = (qfq_sched *)(
_q
->
_si
 + 1);

294 
qfq_˛ass
 *
˛
 = (qfq_˛as†*)
_q
;

295 
i
;

296 
uöt32_t
 
w
;

301 
w
 = 
_q
->
fs
->fs.
∑r
[0];

302 
˛
->
lmax
 = 
_q
->
fs
->fs.
∑r
[1];

303 i‡(!
w
 || w > 
QFQ_MAX_WEIGHT
) {

304 
w
 = 1;

305 
	`D
("rounding weightÅo 1");

307 
˛
->
öv_w
 = 
ONE_FP
/
w
;

308 
w
 = 
ONE_FP
/
˛
->
öv_w
;

309 i‡(
q
->
wsum
 + 
w
 > 
QFQ_MAX_WSUM
)

310  
EINVAL
;

312 
i
 = 
	`qfq_ˇlc_ödex
(
˛
->
öv_w
, cl->
lmax
);

313 
˛
->
gΩ
 = &
q
->
groups
[
i
];

314 
q
->
wsum
 +
w
;

318 
	}
}

322 
	$qfq_‰ì_queue
(
dn_queue
 *
_q
, 
ß„
)

324 
qfq_sched
 *
q
 = (qfq_sched *)(
_q
->
_si
 + 1);

325 
qfq_˛ass
 *
˛
 = (qfq_˛as†*)
_q
;

326 i‡(
˛
->
öv_w
) {

327 
q
->
wsum
 -
ONE_FP
/
˛
->
öv_w
;

328 
˛
->
öv_w
 = 0;

331 
	}
}

334 
ölöe
 

335 
	$mask_‰om
(
bôm≠
, 
‰om
)

337  
bôm≠
 & ~((1UL << 
‰om
) - 1);

338 
	}
}

345 
ölöe
 

346 
	$qfq_ˇlc_°©e
(
qfq_sched
 *
q
, 
qfq_group
 *
gΩ
)

349 
°©e
 = 
	`qfq_gt
(
gΩ
->
S
, 
q
->
V
);

350 
mask
 = 
	`mask_‰om
(
q
->
bôm≠s
[
ER
], 
gΩ
->
ödex
);

351 
qfq_group
 *
√xt
;

353 i‡(
mask
) {

354 
√xt
 = 
	`qfq_ffs
(
q
, 
mask
);

355 i‡(
	`qfq_gt
(
gΩ
->
F
, 
√xt
->F))

356 
°©e
 |
EB
;

359  
°©e
;

360 
	}
}

368 
ölöe
 

369 
	$qfq_move_groups
(
qfq_sched
 *
q
, 
mask
, 
§c
, 
d°
)

371 
q
->
bôm≠s
[
d°
] |q->bôm≠s[
§c
] & 
mask
;

372 
q
->
bôm≠s
[
§c
] &~
mask
;

373 
	}
}

375 
ölöe
 

376 
	$qfq_unblock_groups
(
qfq_sched
 *
q
, 
ödex
, 
uöt64_t
 
ﬁd_föish
)

378 
mask
 = 
	`mask_‰om
(
q
->
bôm≠s
[
ER
], 
ödex
 + 1);

379 
qfq_group
 *
√xt
;

381 i‡(
mask
) {

382 
√xt
 = 
	`qfq_ffs
(
q
, 
mask
);

383 i‡(!
	`qfq_gt
(
√xt
->
F
, 
ﬁd_föish
))

387 
mask
 = (1UL << 
ödex
) - 1;

388 
	`qfq_move_groups
(
q
, 
mask
, 
EB
, 
ER
);

389 
	`qfq_move_groups
(
q
, 
mask
, 
IB
, 
IR
);

390 
	}
}

402 
ölöe
 

403 
	$qfq_make_ñigibÀ
(
qfq_sched
 *
q
, 
uöt64_t
 
ﬁd_V
)

405 
mask
, 
v¶Ÿ
, 
ﬁd_v¶Ÿ
;

407 
v¶Ÿ
 = 
q
->
V
 >> 
QFQ_MIN_SLOT_SHIFT
;

408 
ﬁd_v¶Ÿ
 = 
ﬁd_V
 >> 
QFQ_MIN_SLOT_SHIFT
;

410 i‡(
v¶Ÿ
 !
ﬁd_v¶Ÿ
) {

411 
mask
 = (2UL << (
	`__Ês
(
v¶Ÿ
 ^ 
ﬁd_v¶Ÿ
))) - 1;

412 
	`qfq_move_groups
(
q
, 
mask
, 
IR
, 
ER
);

413 
	`qfq_move_groups
(
q
, 
mask
, 
IB
, 
EB
);

415 
	}
}

422 
ölöe
 

423 
	$qfq_¶Ÿ_ö£π
(
qfq_group
 *
gΩ
, 
qfq_˛ass
 *
˛
, 
uöt64_t
 
roundedS
)

425 
uöt64_t
 
¶Ÿ
 = (
roundedS
 - 
gΩ
->
S
Ë>> gΩ->
¶Ÿ_shi·
;

426 
i
 = (
gΩ
->
‰⁄t
 + 
¶Ÿ
Ë% 
QFQ_MAX_SLOTS
;

428 
˛
->
√xt
 = 
gΩ
->
¶Ÿs
[
i
];

429 
gΩ
->
¶Ÿs
[
i
] = 
˛
;

430 
	`__£t_bô
(
¶Ÿ
, &
gΩ
->
fuŒ_¶Ÿs
);

431 
	}
}

436 
ölöe
 

437 
	$qfq_‰⁄t_¶Ÿ_ªmove
(
qfq_group
 *
gΩ
)

439 
qfq_˛ass
 **
h
 = &
gΩ
->
¶Ÿs
[gΩ->
‰⁄t
];

441 *
h
 = (*h)->
√xt
;

442 i‡(!*
h
)

443 
	`__˛ór_bô
(0, &
gΩ
->
fuŒ_¶Ÿs
);

444 
	}
}

451 
ölöe
 
qfq_˛ass
 *

452 
	$qfq_¶Ÿ_sˇn
(
qfq_group
 *
gΩ
)

454 
i
;

456 
	`ND
("gΩ %d fuŒ %x", 
gΩ
->
ödex
, gΩ->
fuŒ_¶Ÿs
);

457 i‡(!
gΩ
->
fuŒ_¶Ÿs
)

458  
NULL
;

460 
i
 = 
	`ffs
(
gΩ
->
fuŒ_¶Ÿs
) - 1;

461 i‡(
i
 > 0) {

462 
gΩ
->
‰⁄t
 = (gΩ->‰⁄à+ 
i
Ë% 
QFQ_MAX_SLOTS
;

463 
gΩ
->
fuŒ_¶Ÿs
 >>
i
;

466  
gΩ
->
¶Ÿs
[gΩ->
‰⁄t
];

467 
	}
}

478 
ölöe
 

479 
	$qfq_¶Ÿ_rŸ©e
(
qfq_sched
 *
q
, 
qfq_group
 *
gΩ
, 
uöt64_t
 
roundedS
)

481 
i
 = (
gΩ
->
S
 - 
roundedS
Ë>> gΩ->
¶Ÿ_shi·
;

483 
gΩ
->
fuŒ_¶Ÿs
 <<
i
;

484 
gΩ
->
‰⁄t
 = (gΩ->‰⁄à- 
i
Ë% 
QFQ_MAX_SLOTS
;

485 
	}
}

488 
ölöe
 

489 
	$qfq_upd©e_ñigibÀ
(
qfq_sched
 *
q
, 
uöt64_t
 
ﬁd_V
)

491 
bôm≠
 
öñigibÀ
;

493 
öñigibÀ
 = 
q
->
bôm≠s
[
IR
] | q->bôm≠s[
IB
];

494 i‡(
öñigibÀ
) {

495 i‡(!
q
->
bôm≠s
[
ER
]) {

496 
qfq_group
 *
gΩ
;

497 
gΩ
 = 
	`qfq_ffs
(
q
, 
öñigibÀ
);

498 i‡(
	`qfq_gt
(
gΩ
->
S
, 
q
->
V
))

499 
q
->
V
 = 
gΩ
->
S
;

501 
	`qfq_make_ñigibÀ
(
q
, 
ﬁd_V
);

503 
	}
}

508 
ölöe
 

509 
	$qfq_upd©e_˛ass
(
qfq_sched
 *
q
, 
qfq_group
 *
gΩ
,

510 
qfq_˛ass
 *
˛
)

513 
˛
->
S
 = cl->
F
;

514 i‡(
˛
->
_q
.
mq
.
hód
 =
NULL
) {

515 
	`qfq_‰⁄t_¶Ÿ_ªmove
(
gΩ
);

517 
Àn
;

518 
uöt64_t
 
roundedS
;

520 
Àn
 = 
˛
->
_q
.
mq
.
hód
->
m_pkthdr
.len;

521 
˛
->
F
 = cl->
S
 + (
uöt64_t
)
Àn
 * cl->
öv_w
;

522 
roundedS
 = 
	`qfq_round_down
(
˛
->
S
, 
gΩ
->
¶Ÿ_shi·
);

523 i‡(
roundedS
 =
gΩ
->
S
)

526 
	`qfq_‰⁄t_¶Ÿ_ªmove
(
gΩ
);

527 
	`qfq_¶Ÿ_ö£π
(
gΩ
, 
˛
, 
roundedS
);

530 
	}
}

532 
mbuf
 *

533 
	$qfq_dequeue
(
dn_sch_ö°
 *
si
)

535 
qfq_sched
 *
q
 = (qfq_sched *)(
si
 + 1);

536 
qfq_group
 *
gΩ
;

537 
qfq_˛ass
 *
˛
;

538 
mbuf
 *
m
;

539 
uöt64_t
 
ﬁd_V
;

541 
	`NO
(
q
->
lo›s
++;)

542 i‡(!
q
->
bôm≠s
[
ER
]) {

543 
	`NO
(i‡(
q
->
queued
)

544 
	`dump_sched
(
q
, "start dequeue");)

545  
NULL
;

548 
gΩ
 = 
	`qfq_ffs
(
q
, q->
bôm≠s
[
ER
]);

550 
˛
 = 
gΩ
->
¶Ÿs
[gΩ->
‰⁄t
];

552 
m
 = 
	`dn_dequeue
(&
˛
->
_q
);

554 i‡(!
m
) {

555 
	`D
("BUG/*Çon-workconservingÜeaf */");

556  
NULL
;

558 
	`NO
(
q
->
queued
--;)

559 
ﬁd_V
 = 
q
->
V
;

560 
q
->
V
 +(
uöt64_t
)
m
->
m_pkthdr
.
Àn
 * 
IWSUM
;

561 
	`ND
("m i†%∞F 0x%Œx VÇow 0x%Œx", 
m
, 
˛
->
F
, 
q
->
V
);

563 i‡(
	`qfq_upd©e_˛ass
(
q
, 
gΩ
, 
˛
)) {

564 
uöt64_t
 
ﬁd_F
 = 
gΩ
->
F
;

565 
˛
 = 
	`qfq_¶Ÿ_sˇn
(
gΩ
);

566 i‡(!
˛
) {

567 
	`__˛ór_bô
(
gΩ
->
ödex
, &
q
->
bôm≠s
[
ER
]);

570 
uöt64_t
 
roundedS
 = 
	`qfq_round_down
(
˛
->
S
, 
gΩ
->
¶Ÿ_shi·
);

571 
s
;

573 i‡(
gΩ
->
S
 =
roundedS
)

574 
skù_unblock
;

575 
gΩ
->
S
 = 
roundedS
;

576 
gΩ
->
F
 = 
roundedS
 + (2ULL << gΩ->
¶Ÿ_shi·
);

578 
	`__˛ór_bô
(
gΩ
->
ödex
, &
q
->
bôm≠s
[
ER
]);

579 
s
 = 
	`qfq_ˇlc_°©e
(
q
, 
gΩ
);

580 
	`__£t_bô
(
gΩ
->
ödex
, &
q
->
bôm≠s
[
s
]);

583 
	`qfq_unblock_groups
(
q
, 
gΩ
->
ödex
, 
ﬁd_F
);

586 
skù_unblock
:

587 
	`qfq_upd©e_ñigibÀ
(
q
, 
ﬁd_V
);

588 
	`NO
(i‡(!
q
->
bôm≠s
[
ER
] && q->
queued
)

589 
	`dump_sched
(
q
, "end dequeue");)

591  
m
;

592 
	}
}

607 
ölöe
 

608 
	$qfq_upd©e_°¨t
(
qfq_sched
 *
q
, 
qfq_˛ass
 *
˛
)

610 
mask
;

611 
uöt64_t
 
limô
, 
roundedF
;

612 
¶Ÿ_shi·
 = 
˛
->
gΩ
->slot_shift;

614 
roundedF
 = 
	`qfq_round_down
(
˛
->
F
, 
¶Ÿ_shi·
);

615 
limô
 = 
	`qfq_round_down
(
q
->
V
, 
¶Ÿ_shi·
) + (1UL << slot_shift);

617 i‡(!
	`qfq_gt
(
˛
->
F
, 
q
->
V
Ë|| qfq_gt(
roundedF
, 
limô
)) {

619 
mask
 = 
	`mask_‰om
(
q
->
bôm≠s
[
ER
], 
˛
->
gΩ
->
ödex
);

620 i‡(
mask
) {

621 
qfq_group
 *
√xt
 = 
	`qfq_ffs
(
q
, 
mask
);

622 i‡(
	`qfq_gt
(
roundedF
, 
√xt
->
F
)) {

623 
˛
->
S
 = 
√xt
->
F
;

627 
˛
->
S
 = 
q
->
V
;

629 
˛
->
S
 = cl->
F
;

631 
	}
}

634 
	$qfq_íqueue
(
dn_sch_ö°
 *
si
, 
dn_queue
 *
_q
, 
mbuf
 *
m
)

636 
qfq_sched
 *
q
 = (qfq_sched *)(
si
 + 1);

637 
qfq_group
 *
gΩ
;

638 
qfq_˛ass
 *
˛
 = (qfq_˛as†*)
_q
;

639 
uöt64_t
 
roundedS
;

640 
s
;

642 
	`NO
(
q
->
lo›s
++;)

643 
	`DX
(4, "À¿%d flow %∞öv_w 0x%x gΩ %d", 
m
->
m_pkthdr
.
Àn
,

644 
_q
, 
˛
->
öv_w
, cl->
gΩ
->
ödex
);

646 i‡(
m
 !
_q
->
mq
.
hód
) {

647 i‡(
	`dn_íqueue
(
_q
, 
m
, 0))

649 
	`NO
(
q
->
queued
++;)

650 i‡(
m
 !
_q
->
mq
.
hód
)

654 
gΩ
 = 
˛
->grp;

655 
	`qfq_upd©e_°¨t
(
q
, 
˛
);

657 
˛
->
F
 = cl->
S
 + (
uöt64_t
)(
m
->
m_pkthdr
.
Àn
Ë* cl->
öv_w
;

658 
roundedS
 = 
	`qfq_round_down
(
˛
->
S
, 
gΩ
->
¶Ÿ_shi·
);

669 i‡(
gΩ
->
fuŒ_¶Ÿs
) {

670 i‡(!
	`qfq_gt
(
gΩ
->
S
, 
˛
->S))

671 
skù_upd©e
;

673 
	`qfq_¶Ÿ_rŸ©e
(
q
, 
gΩ
, 
roundedS
);

675 
	`__˛ór_bô
(
gΩ
->
ödex
, &
q
->
bôm≠s
[
IR
]);

676 
	`__˛ór_bô
(
gΩ
->
ödex
, &
q
->
bôm≠s
[
IB
]);

677 } i‡(!
q
->
bôm≠s
[
ER
] && 
	`qfq_gt
(
roundedS
, q->
V
))

678 
q
->
V
 = 
roundedS
;

680 
gΩ
->
S
 = 
roundedS
;

681 
gΩ
->
F
 = 
roundedS
 + (2ULL << gΩ->
¶Ÿ_shi·
);

682 
s
 = 
	`qfq_ˇlc_°©e
(
q
, 
gΩ
);

683 
	`__£t_bô
(
gΩ
->
ödex
, &
q
->
bôm≠s
[
s
]);

684 
	`ND
("√w sèã %d 0x%x", 
s
, 
q
->
bôm≠s
[s]);

685 
	`ND
("S %Œx F %Œx V %Œx", 
˛
->
S
, cl->
F
, 
q
->
V
);

686 
skù_upd©e
:

687 
	`qfq_¶Ÿ_ö£π
(
gΩ
, 
˛
, 
roundedS
);

690 
	}
}

694 
ölöe
 

695 
	$qfq_¶Ÿ_ªmove
(
qfq_sched
 *
q
, 
qfq_group
 *
gΩ
,

696 
qfq_˛ass
 *
˛
, qfq_˛as†**
µªv
)

698 
i
, 
off£t
;

699 
uöt64_t
 
roundedS
;

701 
roundedS
 = 
	`qfq_round_down
(
˛
->
S
, 
gΩ
->
¶Ÿ_shi·
);

702 
off£t
 = (
roundedS
 - 
gΩ
->
S
Ë>> gΩ->
¶Ÿ_shi·
;

703 
i
 = (
gΩ
->
‰⁄t
 + 
off£t
Ë% 
QFQ_MAX_SLOTS
;

705 #ifde‡
nŸyë


706 i‡(!
µªv
) {

707 
µªv
 = &
gΩ
->
¶Ÿs
[
i
];

708 *
µªv
 && *µªv !
˛
)

709 
µªv
 = &(*µªv)->
√xt
;

713 *
µªv
 = 
˛
->
√xt
;

714 i‡(!
gΩ
->
¶Ÿs
[
i
])

715 
	`__˛ór_bô
(
off£t
, &
gΩ
->
fuŒ_¶Ÿs
);

716 
	}
}

727 
	$qfq_dó˘iv©e_˛ass
(
qfq_sched
 *
q
, 
qfq_˛ass
 *
˛
,

728 
qfq_˛ass
 **
µªv
)

730 
qfq_group
 *
gΩ
 = &
q
->
groups
[
˛
->
ödex
];

731 
mask
;

732 
uöt64_t
 
roundedS
;

733 
s
;

735 
˛
->
F
 = cl->
S
;

736 
	`qfq_¶Ÿ_ªmove
(
q
, 
gΩ
, 
˛
, 
µªv
);

738 i‡(!
gΩ
->
fuŒ_¶Ÿs
) {

743 
	`__˛ór_bô
(
gΩ
->
ödex
, &
q
->
bôm≠s
[
IR
]);

744 
	`__˛ór_bô
(
gΩ
->
ödex
, &
q
->
bôm≠s
[
EB
]);

745 
	`__˛ór_bô
(
gΩ
->
ödex
, &
q
->
bôm≠s
[
IB
]);

747 i‡(
	`ã°_bô
(
gΩ
->
ödex
, &
q
->
bôm≠s
[
ER
]) &&

748 !(
q
->
bôm≠s
[
ER
] & ~((1UL << 
gΩ
->
ödex
) - 1))) {

749 
mask
 = 
q
->
bôm≠s
[
ER
] & ((1UL << 
gΩ
->
ödex
) - 1);

750 i‡(
mask
)

751 
mask
 = ~((1UL << 
	`__Ês
(mask)) - 1);

753 
mask
 = ~0UL;

754 
	`qfq_move_groups
(
q
, 
mask
, 
EB
, 
ER
);

755 
	`qfq_move_groups
(
q
, 
mask
, 
IB
, 
IR
);

757 
	`__˛ór_bô
(
gΩ
->
ödex
, &
q
->
bôm≠s
[
ER
]);

758 } i‡(!
gΩ
->
¶Ÿs
[gΩ->
‰⁄t
]) {

759 
˛
 = 
	`qfq_¶Ÿ_sˇn
(
gΩ
);

760 
roundedS
 = 
	`qfq_round_down
(
˛
->
S
, 
gΩ
->
¶Ÿ_shi·
);

761 i‡(
gΩ
->
S
 !
roundedS
) {

762 
	`__˛ór_bô
(
gΩ
->
ödex
, &
q
->
bôm≠s
[
ER
]);

763 
	`__˛ór_bô
(
gΩ
->
ödex
, &
q
->
bôm≠s
[
IR
]);

764 
	`__˛ór_bô
(
gΩ
->
ödex
, &
q
->
bôm≠s
[
EB
]);

765 
	`__˛ór_bô
(
gΩ
->
ödex
, &
q
->
bôm≠s
[
IB
]);

766 
gΩ
->
S
 = 
roundedS
;

767 
gΩ
->
F
 = 
roundedS
 + (2ULL << gΩ->
¶Ÿ_shi·
);

768 
s
 = 
	`qfq_ˇlc_°©e
(
q
, 
gΩ
);

769 
	`__£t_bô
(
gΩ
->
ödex
, &
q
->
bôm≠s
[
s
]);

772 
	`qfq_upd©e_ñigibÀ
(
q
, q->
V
);

773 
	}
}

777 
	$qfq_√w_fsk
(
dn_fsk
 *
f
)

779 
	`ùdn_bound_v¨
(&
f
->
fs
.
∑r
[0], 1, 1, 
QFQ_MAX_WEIGHT
, "qfq weight");

780 
	`ùdn_bound_v¨
(&
f
->
fs
.
∑r
[1], 1500, 1, 2000, "qfq maxlen");

781 
	`ND
("weighà%dÜí %d\n", 
f
->
fs
.
∑r
[0], f->fs.par[1]);

783 
	}
}

789 
	$qfq_√w_sched
(
dn_sch_ö°
 *
si
)

791 
qfq_sched
 *
q
 = (qfq_sched *)(
si
 + 1);

792 
qfq_group
 *
gΩ
;

793 
i
;

795 
i
 = 0; i <
QFQ_MAX_INDEX
; i++) {

796 
gΩ
 = &
q
->
groups
[
i
];

797 
gΩ
->
ödex
 = 
i
;

798 
gΩ
->
¶Ÿ_shi·
 = 
QFQ_MTU_SHIFT
 + 
FRAC_BITS
 -

799 (
QFQ_MAX_INDEX
 - 
i
);

802 
	}
}

807 
dn_Æg
 
	gqfq_desc
 = {

808 
_SI
–.
ty≥
 = ) 
DN_SCHED_QFQ
,

809 
_SI
–.
«me
 = ) "QFQ",

810 
_SI
–.
Êags
 = ) 
DN_MULTIQUEUE
,

812 
_SI
–.
schk_d©Æí
 = ) 0,

813 
_SI
–.
si_d©Æí
 = ) (
qfq_sched
),

814 
_SI
–.
q_d©Æí
 = ) (
qfq_˛ass
Ë- (
dn_queue
),

816 
_SI
–.
íqueue
 = ) 
qfq_íqueue
,

817 
_SI
–.
dequeue
 = ) 
qfq_dequeue
,

819 
_SI
–.
c⁄fig
 = ) 
NULL
,

820 
_SI
–.
de°roy
 = ) 
NULL
,

821 
_SI
–.
√w_sched
 = ) 
qfq_√w_sched
,

822 
_SI
–.
‰ì_sched
 = ) 
NULL
,

823 
_SI
–.
√w_fsk
 = ) 
qfq_√w_fsk
,

824 
_SI
–.
‰ì_fsk
 = ) 
NULL
,

825 
_SI
–.
√w_queue
 = ) 
qfq_√w_queue
,

826 
_SI
–.
‰ì_queue
 = ) 
qfq_‰ì_queue
,

829 
DECLARE_DNSCHED_MODULE
(
dn_qfq
, &
qfq_desc
);

831 #ifde‡
QFQ_DEBUG


833 
	$dump_groups
(
qfq_sched
 *
q
, 
uöt32_t
 
mask
)

835 
i
, 
j
;

837 
i
 = 0; i < 
QFQ_MAX_INDEX
 + 1; i++) {

838 
qfq_group
 *
g
 = &
q
->
groups
[
i
];

840 i‡(0 =(
mask
 & (1<<
i
)))

842 
j
 = 0; j < 
QFQ_MAX_SLOTS
; j++) {

843 i‡(
g
->
¶Ÿs
[
j
])

844 
	`D
(" buckë %d %p", 
j
, 
g
->
¶Ÿs
[j]);

846 
	`D
("fuŒ_¶Ÿ†0x%x", 
g
->
fuŒ_¶Ÿs
);

847 
	`D
(" %2d S 0x%20Œx F 0x%Œx %c", 
i
,

848 
g
->
S
, g->
F
,

849 
mask
 & (1<<
i
) ? '1' : '0');

851 
	}
}

854 
	$dump_sched
(
qfq_sched
 *
q
, c⁄° *
msg
)

856 
	`D
("--- i¿%s: ---", 
msg
);

857 
	`ND
("lo›†%d queued %d V 0x%Œx", 
q
->
lo›s
, q->
queued
, q->
V
);

858 
	`D
(" ER 0x%08x", 
q
->
bôm≠s
[
ER
]);

859 
	`D
(" EB 0x%08x", 
q
->
bôm≠s
[
EB
]);

860 
	`D
(" IR 0x%08x", 
q
->
bôm≠s
[
IR
]);

861 
	`D
(" IB 0x%08x", 
q
->
bôm≠s
[
IB
]);

862 
	`dump_groups
(
q
, 0xffffffff);

863 
	}
};

	@sys/netinet/ipfw/dn_sched_rr.c

31 #ifde‡
_KERNEL


32 
	~<sys/mÆloc.h
>

33 
	~<sys/sockë.h
>

34 
	~<sys/sockëv¨.h
>

35 
	~<sys/kî√l.h
>

36 
	~<sys/mbuf.h
>

37 
	~<sys/moduÀ.h
>

38 
	~<√t/if.h
>

39 
	~<√töë/ö.h
>

40 
	~<√töë/ù_v¨.h
>

41 
	~<√töë/ù_fw.h
>

42 
	~<√töë/ù_dummy√t.h
>

43 
	~<√töë/ùfw/dn_hóp.h
>

44 
	~<√töë/ùfw/ù_dn_¥iv©e.h
>

45 
	~<√töë/ùfw/dn_sched.h
>

47 
	~<dn_ã°.h
>

50 
	#DN_SCHED_RR
 3

51 

	)

52 
	sº_queue
 {

53 
dn_queue
 
	mq
;

54 
	m°©us
;

55 
	m¸edô
;

56 
	mqu™tum
;

57 
º_queue
 *
	mq√xt
;

63 
	sº_schk
 {

64 
	mmö_q
;

65 
	mmax_q
;

66 
	mq_byãs
;

70 
	sº_si
 {

71 
º_queue
 *
	mhód
, *
	mèû
;

75 
ölöe
 

76 
	$º_≠≥nd
(
º_queue
 *
q
, 
º_si
 *
si
)

78 
q
->
°©us
 = 1;

79 
q
->
¸edô
 = q->
qu™tum
;

82 i‡(
si
->
hód
 =
NULL
)

83 
si
->
hód
 = 
q
;

85 
si
->
èû
->
q√xt
 = 
q
;

86 
si
->
èû
 = 
q
;

87 
q
->
q√xt
 = 
si
->
hód
;

88 
	}
}

91 
ölöe
 

92 
	$º_ªmove_hód
(
º_si
 *
si
)

94 i‡(
si
->
hód
 =
NULL
)

96 
si
->
hód
->
°©us
 = 0;

98 i‡(
si
->
hód
 =si->
èû
) {

99 
si
->
hód
 = si->
èû
 = 
NULL
;

103 
si
->
hód
 = si->hód->
q√xt
;

104 
si
->
èû
->
q√xt
 = si->
hód
;

105 
	}
}

110 
ölöe
 

111 
	$ªmove_queue_q
(
º_queue
 *
q
, 
º_si
 *
si
)

113 
º_queue
 *
¥ev
;

115 i‡(
q
->
°©us
 != 1)

117 i‡(
q
 =
si
->
hód
) {

118 
	`º_ªmove_hód
(
si
);

122 
¥ev
 = 
si
->
hód
;Öªv;Öªv =Öªv->
q√xt
) {

123 i‡(
¥ev
->
q√xt
 !
q
)

125 
¥ev
->
q√xt
 = 
q
->qnext;

126 i‡(
q
 =
si
->
èû
)

127 
si
->
èû
 = 
¥ev
;

128 
q
->
°©us
 = 0;

131 
	}
}

134 
ölöe
 

135 
	$√xt_poöãr
(
º_si
 *
si
)

137 i‡(
si
->
hód
 =
NULL
)

140 
si
->
hód
 = si->hód->
q√xt
;

141 
si
->
èû
 = si->èû->
q√xt
;

142 
	}
}

145 
	$º_íqueue
(
dn_sch_ö°
 *
_si
, 
dn_queue
 *
q
, 
mbuf
 *
m
)

147 
º_si
 *
si
;

148 
º_queue
 *
ºq
;

150 i‡(
m
 !
q
->
mq
.
hód
) {

151 i‡(
	`dn_íqueue
(
q
, 
m
, 0))

153 i‡(
m
 !
q
->
mq
.
hód
)

158 
si
 = (
º_si
 *)(
_si
 + 1);

159 
ºq
 = (
º_queue
 *)
q
;

161 i‡(
ºq
->
°©us
 == 1)

165 
	`º_≠≥nd
(
ºq
, 
si
);

168 
	}
}

170 
mbuf
 *

171 
	$º_dequeue
(
dn_sch_ö°
 *
_si
)

174 
º_si
 *
si
 = (º_sò*)(
_si
 + 1);

175 
º_queue
 *
ºq
;

176 
uöt64_t
 
Àn
;

178  (
ºq
 = 
si
->
hód
) ) {

179 
mbuf
 *
m
 = 
ºq
->
q
.
mq
.
hód
;

180 i‡–
m
 =
NULL
) {

182 
	`º_ªmove_hód
(
si
);

185 
Àn
 = 
m
->
m_pkthdr
.len;

187 i‡(
Àn
 > 
ºq
->
¸edô
) {

189 
ºq
->
¸edô
 +ºq->
qu™tum
;

191 
	`√xt_poöãr
(
si
);

193 
ºq
->
¸edô
 -
Àn
;

194  
	`dn_dequeue
(&
ºq
->
q
);

199  
NULL
;

200 
	}
}

203 
	$º_c⁄fig
(
dn_schk
 *
_schk
)

205 
º_schk
 *
schk
 = (º_schk *)(
_schk
 + 1);

206 
	`ND
("called");

209 
schk
->
mö_q
 = 64;

210 
schk
->
max_q
 = 2048;

211 
schk
->
q_byãs
 = 1500;

214 
	}
}

217 
	$º_√w_sched
(
dn_sch_ö°
 *
_si
)

219 
º_si
 *
si
 = (º_sò*)(
_si
 + 1);

221 
	`ND
("called");

222 
si
->
hód
 = si->
èû
 = 
NULL
;

225 
	}
}

228 
	$º_‰ì_sched
(
dn_sch_ö°
 *
_si
)

230 
	`ND
("called");

233 
	}
}

236 
	$º_√w_fsk
(
dn_fsk
 *
fs
)

238 
º_schk
 *
schk
 = (º_schk *)(
fs
->
sched
 + 1);

240 
	`ùdn_bound_v¨
(&
fs
->fs.
∑r
[0], 1,

242 
	`ùdn_bound_v¨
(&
fs
->fs.
∑r
[1], 
schk
->
q_byãs
,

243 
schk
->
mö_q
, schk->
max_q
, "RR quantum");

245 
	}
}

248 
	$º_√w_queue
(
dn_queue
 *
_q
)

250 
º_queue
 *
q
 = (º_queuê*)
_q
;

252 
_q
->
ni
.
oid
.
subty≥
 = 
DN_SCHED_RR
;

254 
q
->
qu™tum
 = 
_q
->
fs
->fs.
∑r
[0] * _q->fs->fs.par[1];

255 
	`ND
("ˇŒed, q->qu™tum %d", 
q
->
qu™tum
);

256 
q
->
¸edô
 = q->
qu™tum
;

257 
q
->
°©us
 = 0;

259 i‡(
_q
->
mq
.
hód
 !
NULL
) {

261 
	`º_≠≥nd
(
q
, (
º_si
 *)(
_q
->
_si
 + 1));

264 
	}
}

267 
	$º_‰ì_queue
(
dn_queue
 *
_q
, 
ß„
)

269 
º_queue
 *
q
 = (º_queuê*)
_q
;

271 
	`ND
("called");

272 i‡(
ß„
)

273  
q
->
°©us
;

275 i‡(
q
->
°©us
 == 1) {

276 
º_si
 *
si
 = (º_sò*)(
_q
->
_si
 + 1);

277 
	`ªmove_queue_q
(
q
, 
si
);

280 
	}
}

287 
dn_Æg
 
	gº_desc
 = {

288 
_SI
–.
ty≥
 = ) 
DN_SCHED_RR
,

289 
_SI
–.
«me
 = ) "RR",

290 
_SI
–.
Êags
 = ) 
DN_MULTIQUEUE
,

292 
_SI
–.
schk_d©Æí
 = ) 0,

293 
_SI
–.
si_d©Æí
 = ) (
º_si
),

294 
_SI
–.
q_d©Æí
 = ) (
º_queue
Ë- (
dn_queue
),

296 
_SI
–.
íqueue
 = ) 
º_íqueue
,

297 
_SI
–.
dequeue
 = ) 
º_dequeue
,

299 
_SI
–.
c⁄fig
 = ) 
º_c⁄fig
,

300 
_SI
–.
de°roy
 = ) 
NULL
,

301 
_SI
–.
√w_sched
 = ) 
º_√w_sched
,

302 
_SI
–.
‰ì_sched
 = ) 
º_‰ì_sched
,

303 
_SI
–.
√w_fsk
 = ) 
º_√w_fsk
,

304 
_SI
–.
‰ì_fsk
 = ) 
NULL
,

305 
_SI
–.
√w_queue
 = ) 
º_√w_queue
,

306 
_SI
–.
‰ì_queue
 = ) 
º_‰ì_queue
,

310 
DECLARE_DNSCHED_MODULE
(
dn_º
, &
º_desc
);

	@sys/netinet/ipfw/dn_sched_wf2q.c

32 #ifde‡
_KERNEL


33 
	~<sys/mÆloc.h
>

34 
	~<sys/sockë.h
>

35 
	~<sys/sockëv¨.h
>

36 
	~<sys/kî√l.h
>

37 
	~<sys/mbuf.h
>

38 
	~<sys/moduÀ.h
>

39 
	~<√t/if.h
>

40 
	~<√töë/ö.h
>

41 
	~<√töë/ù_v¨.h
>

42 
	~<√töë/ù_fw.h
>

43 
	~<√töë/ù_dummy√t.h
>

44 
	~<√töë/ùfw/dn_hóp.h
>

45 
	~<√töë/ùfw/ù_dn_¥iv©e.h
>

46 
	~<√töë/ùfw/dn_sched.h
>

48 
	~<dn_ã°.h
>

51 #i‚de‡
MAX64


52 
	#MAX64
(
x
,
y
Ë(–(
öt64_t
Ë–(y)-(xË)Ë> 0 ) ? (yË: (x)

	)

66 #i‚de‡
FRAC_BITS


67 
	#FRAC_BITS
 28

	)

68 
	#ONE_FP
 (1UL << 
FRAC_BITS
)

	)

81 
	swf2qp_si
 {

82 
dn_hóp
 
	msch_hóp
;

83 
dn_hóp
 
	m√_hóp
;

84 
dn_hóp
 
	midÀ_hóp
;

85 
uöt64_t
 
	mV
;

86 
uöt32_t
 
	möv_wsum
;

87 
uöt32_t
 
	mwsum
;

90 
	swf2qp_queue
 {

91 
dn_queue
 
	m_q
;

92 
uöt64_t
 
	mS
, 
	mF
;

93 
uöt32_t
 
	möv_w
;

94 
öt32_t
 
	mhóp_pos
;

109 
	$idÀ_check
(
wf2qp_si
 *
si
, 
n
, 
f‹˚
)

111 
dn_hóp
 *
h
 = &
si
->
idÀ_hóp
;

112 
n
-- > 0 && 
h
->
ñemíts
 > 0 &&

113 (
f‹˚
 || 
	`DN_KEY_LT
(
	`HEAP_TOP
(
h
)->
key
, 
si
->
V
))) {

114 
dn_queue
 *
q
 = 
	`HEAP_TOP
(
h
)->
obje˘
;

115 
wf2qp_queue
 *
Æg_fq
 = (wf2qp_queuê*)
q
;

117 
	`hóp_exåa˘
(
h
, 
NULL
);

121 
Æg_fq
->
S
 =álg_fq->
F
 + 1;

122 
si
->
wsum
 -
q
->
fs
->fs.
∑r
[0];

123 i‡(
si
->
wsum
 > 0)

124 
si
->
öv_wsum
 = 
ONE_FP
/si->
wsum
;

126 
	}
}

129 
	$wf2qp_íqueue
(
dn_sch_ö°
 *
_si
, 
dn_queue
 *
q
, 
mbuf
 *
m
)

131 
dn_fsk
 *
fs
 = 
q
->fs;

132 
wf2qp_si
 *
si
 = (wf2qp_sò*)(
_si
 + 1);

133 
wf2qp_queue
 *
Æg_fq
;

134 
uöt64_t
 
Àn
 = 
m
->
m_pkthdr
.len;

136 i‡(
m
 !
q
->
mq
.
hód
) {

137 i‡(
	`dn_íqueue
(
q
, 
m
, 0))

139 i‡(
m
 !
q
->
mq
.
hód
)

144 
Æg_fq
 = (
wf2qp_queue
 *)
q
;

146 i‡(
	`DN_KEY_LT
(
Æg_fq
->
F
,álg_fq->
S
)) {

148 
Æg_fq
->
S
 = 
si
->
V
;

149 
si
->
wsum
 +
fs
->fs.
∑r
[0];

150 
si
->
öv_wsum
 = 
ONE_FP
/si->
wsum
;

152 
	`hóp_exåa˘
(&
si
->
idÀ_hóp
, 
q
);

153 
Æg_fq
->
S
 = 
	`MAX64
◊lg_fq->
F
, 
si
->
V
);

155 
Æg_fq
->
F
 =álg_fq->
S
 + 
Àn
 *álg_fq->
öv_w
;

158 i‡(
si
->
√_hóp
.
ñemíts
 =0 && si->
sch_hóp
.elements == 0)

159 
si
->
V
 = 
	`MAX64
(
Æg_fq
->
S
, si->V);

172 i‡(
	`DN_KEY_LT
(
si
->
V
, 
Æg_fq
->
S
)) {

174 i‡(
si
->
sch_hóp
.
ñemíts
 == 0)

175 
	`D
("++ ouch!ÇotÉligible butÉmpty scheduler!");

176 
	`hóp_ö£π
(&
si
->
√_hóp
, 
Æg_fq
->
S
, 
q
);

178 
	`hóp_ö£π
(&
si
->
sch_hóp
, 
Æg_fq
->
F
, 
q
);

181 
	}
}

184 
mbuf
 *

185 
	$wf2qp_dequeue
(
dn_sch_ö°
 *
_si
)

188 
wf2qp_si
 *
si
 = (wf2qp_sò*)(
_si
 + 1);

189 
mbuf
 *
m
;

190 
dn_queue
 *
q
;

191 
dn_hóp
 *
sch
 = &
si
->
sch_hóp
;

192 
dn_hóp
 *
√h
 = &
si
->
√_hóp
;

193 
wf2qp_queue
 *
Æg_fq
;

195 i‡(
sch
->
ñemíts
 =0 && 
√h
->elements == 0) {

199 
	`idÀ_check
(
si
, 0x7fffffff, 1);

200 
si
->
V
 = 0;

201 
si
->
wsum
 = 0;

202  
NULL
;

204 
	`idÀ_check
(
si
, 1, 0);

212 
m
 = 
NULL
;

222 i‡(
sch
->
ñemíts
 =0 && 
√h
->elements > 0) {

223 
si
->
V
 = 
	`MAX64
(si->V, 
	`HEAP_TOP
(
√h
)->
key
);

225 
√h
->
ñemíts
 > 0 &&

226 
	`DN_KEY_LEQ
(
	`HEAP_TOP
(
√h
)->
key
, 
si
->
V
)) {

227 
q
 = 
	`HEAP_TOP
(
√h
)->
obje˘
;

228 
Æg_fq
 = (
wf2qp_queue
 *)
q
;

229 
	`hóp_exåa˘
(
√h
, 
NULL
);

230 
	`hóp_ö£π
(
sch
, 
Æg_fq
->
F
, 
q
);

232 i‡(
m
)

235 
q
 = 
	`HEAP_TOP
(
sch
)->
obje˘
;

236 
Æg_fq
 = (
wf2qp_queue
 *)
q
;

237 
m
 = 
	`dn_dequeue
(
q
);

238 
	`hóp_exåa˘
(
sch
, 
NULL
);

239 
si
->
V
 +(
uöt64_t
)(
m
->
m_pkthdr
.
Àn
Ë* si->
öv_wsum
;

240 
Æg_fq
->
S
 =álg_fq->
F
;

241 i‡(
q
->
mq
.
hód
 == 0) {

242 
	`hóp_ö£π
(&
si
->
idÀ_hóp
, 
Æg_fq
->
F
, 
q
);

245 
uöt64_t
 
Àn
 = 
q
->
mq
.
hód
->
m_pkthdr
.len;

246 
Æg_fq
->
F
 +
Àn
 *álg_fq->
öv_w
;

247 i‡(
	`DN_KEY_LEQ
(
Æg_fq
->
S
, 
si
->
V
)) {

248 
	`hóp_ö£π
(
sch
, 
Æg_fq
->
F
, 
q
);

250 
	`hóp_ö£π
(
√h
, 
Æg_fq
->
S
, 
q
);

254  
m
;

255 
	}
}

258 
	$wf2qp_√w_sched
(
dn_sch_ö°
 *
_si
)

260 
wf2qp_si
 *
si
 = (wf2qp_sò*)(
_si
 + 1);

261 
ofs
 = 
	`off£tof
(
wf2qp_queue
, 
hóp_pos
);

264 i‡(
	`hóp_öô
(&
si
->
idÀ_hóp
, 16, 
ofs
) ||

265 
	`hóp_öô
(&
si
->
sch_hóp
, 16, 
ofs
) ||

266 
	`hóp_öô
(&
si
->
√_hóp
, 16, 
ofs
)) {

267 
	`hóp_‰ì
(&
si
->
√_hóp
);

268 
	`hóp_‰ì
(&
si
->
sch_hóp
);

269 
	`hóp_‰ì
(&
si
->
idÀ_hóp
);

270  
ENOMEM
;

273 
	}
}

276 
	$wf2qp_‰ì_sched
(
dn_sch_ö°
 *
_si
)

278 
wf2qp_si
 *
si
 = (wf2qp_sò*)(
_si
 + 1);

280 
	`hóp_‰ì
(&
si
->
sch_hóp
);

281 
	`hóp_‰ì
(&
si
->
√_hóp
);

282 
	`hóp_‰ì
(&
si
->
idÀ_hóp
);

285 
	}
}

288 
	$wf2qp_√w_fsk
(
dn_fsk
 *
fs
)

290 
	`ùdn_bound_v¨
(&
fs
->fs.
∑r
[0], 1,

293 
	}
}

296 
	$wf2qp_√w_queue
(
dn_queue
 *
_q
)

298 
wf2qp_queue
 *
q
 = (wf2qp_queuê*)
_q
;

300 
_q
->
ni
.
oid
.
subty≥
 = 
DN_SCHED_WF2QP
;

301 
q
->
F
 = 0;

302 
q
->
S
 = q->
F
 + 1;

303 
q
->
öv_w
 = 
ONE_FP
 / 
_q
->
fs
->fs.
∑r
[0];

304 i‡(
_q
->
mq
.
hód
 !
NULL
) {

305 
	`wf2qp_íqueue
(
_q
->
_si
, _q, _q->
mq
.
hód
);

308 
	}
}

317 
	$wf2qp_‰ì_queue
(
dn_queue
 *
q
, 
ß„
)

319 
wf2qp_queue
 *
Æg_fq
 = (wf2qp_queuê*)
q
;

320 
wf2qp_si
 *
si
 = (wf2qp_sò*)(
q
->
_si
 + 1);

322 i‡(
Æg_fq
->
S
 >Æg_fq->
F
 + 1)

326 i‡(
ß„
)

329 
si
->
wsum
 -
q
->
fs
->fs.
∑r
[0];

330 i‡(
si
->
wsum
 > 0)

331 
si
->
öv_wsum
 = 
ONE_FP
/si->
wsum
;

336 i‡(
q
->
mq
.
hód
 =
NULL
) {

337 
	`hóp_exåa˘
(&
si
->
idÀ_hóp
, 
q
);

338 } i‡(
	`DN_KEY_LT
(
si
->
V
, 
Æg_fq
->
S
)) {

339 
	`hóp_exåa˘
(&
si
->
√_hóp
, 
q
);

341 
	`hóp_exåa˘
(&
si
->
sch_hóp
, 
q
);

344 
	}
}

351 
dn_Æg
 
	gwf2qp_desc
 = {

352 
_SI
–.
ty≥
 = ) 
DN_SCHED_WF2QP
,

353 
_SI
–.
«me
 = ) "WF2Q+",

354 
_SI
–.
Êags
 = ) 
DN_MULTIQUEUE
,

357 
_SI
–.
schk_d©Æí
 = ) 0,

358 
_SI
–.
si_d©Æí
 = ) (
wf2qp_si
),

359 
_SI
–.
q_d©Æí
 = ) (
wf2qp_queue
) -

360 (
dn_queue
),

362 
_SI
–.
íqueue
 = ) 
wf2qp_íqueue
,

363 
_SI
–.
dequeue
 = ) 
wf2qp_dequeue
,

365 
_SI
–.
c⁄fig
 = ) 
NULL
,

366 
_SI
–.
de°roy
 = ) 
NULL
,

367 
_SI
–.
√w_sched
 = ) 
wf2qp_√w_sched
,

368 
_SI
–.
‰ì_sched
 = ) 
wf2qp_‰ì_sched
,

370 
_SI
–.
√w_fsk
 = ) 
wf2qp_√w_fsk
,

371 
_SI
–.
‰ì_fsk
 = ) 
NULL
,

373 
_SI
–.
√w_queue
 = ) 
wf2qp_√w_queue
,

374 
_SI
–.
‰ì_queue
 = ) 
wf2qp_‰ì_queue
,

378 
DECLARE_DNSCHED_MODULE
(
dn_wf2qp
, &
wf2qp_desc
);

	@sys/netinet/ipfw/ip_dn_glue.c

33 
	~"›t_öë6.h
"

35 
	~<sys/∑øm.h
>

36 
	~<sys/sy°m.h
>

37 
	~<sys/mÆloc.h
>

38 
	~<sys/mbuf.h
>

39 
	~<sys/kî√l.h
>

40 
	~<sys/lock.h
>

41 
	~<sys/moduÀ.h
>

42 
	~<sys/¥iv.h
>

43 
	~<sys/¥oc.h
>

44 
	~<sys/rwlock.h
>

45 
	~<sys/sockë.h
>

46 
	~<sys/sockëv¨.h
>

47 
	~<sys/time.h
>

48 
	~<sys/èskqueue.h
>

49 
	~<√t/if.h
>

50 
	~<√töë/ö.h
>

51 
	~<√töë/ù_v¨.h
>

52 
	~<√töë/ù_fw.h
>

53 
	~<√töë/ùfw/ù_fw_¥iv©e.h
>

54 
	~<√töë/ùfw/dn_hóp.h
>

55 
	~<√töë/ù_dummy√t.h
>

56 
	~<√töë/ùfw/ù_dn_¥iv©e.h
>

57 
	~<√töë/ùfw/dn_sched.h
>

61 
	sdn_hóp_íåy7
 {

62 
öt64_t
 
	mkey
;

63 *
	mobje˘
;

66 
	sdn_hóp7
 {

67 
	msize
;

68 
	mñemíts
;

69 
	moff£t
;

70 
dn_hóp_íåy7
 *
	mp
;

74 
	sdn_Êow_£t
 {

75 
SLIST_ENTRY
(
dn_Êow_£t
Ë
	m√xt
;

77 
u_sh‹t
 
	mfs_ƒ
 ;

78 
u_sh‹t
 
	mÊags_fs
;

79 
	#DNOLD_HAVE_FLOW_MASK
 0x0001

	)

80 
	#DNOLD_IS_RED
 0x0002

	)

81 
	#DNOLD_IS_GENTLE_RED
 0x0004

	)

82 
	#DNOLD_QSIZE_IS_BYTES
 0x0008

	)

83 
	#DNOLD_NOERROR
 0x0010

	)

84 
	#DNOLD_HAS_PROFILE
 0x0020

	)

85 
	#DNOLD_IS_PIPE
 0x4000

	)

86 
	#DNOLD_IS_QUEUE
 0x8000

	)

88 
dn_pùe7
 *
	mpùe
 ;

89 
u_sh‹t
 
	m∑ª¡_ƒ
 ;

91 
	mweight
 ;

92 
	mqsize
 ;

93 
	m∂r
 ;

95 
ùfw_Êow_id
 
	mÊow_mask
 ;

98 
	mrq_size
 ;

99 
	mrq_ñemíts
 ;

100 
dn_Êow_queue7
 **
	mrq
;

102 
u_öt32_t
 
	mœ°_expúed
 ;

103 
	mbacklogged
 ;

106 
	#SCALE_RED
 16

	)

107 
	#SCALE
(
x
Ë–(xË<< 
SCALE_RED
 )

	)

108 
	#SCALE_VAL
(
x
Ë–(xË>> 
SCALE_RED
 )

	)

109 
	#SCALE_MUL
(
x
,
y
Ë––(xË* (yËË>> 
SCALE_RED
 )

	)

110 
	mw_q
 ;

111 
	mmax_th
 ;

112 
	mmö_th
 ;

113 
	mmax_p
 ;

114 
u_öt
 
	mc_1
 ;

115 
u_öt
 
	mc_2
 ;

116 
u_öt
 
	mc_3
 ;

117 
u_öt
 
	mc_4
 ;

118 
u_öt
 * 
	mw_q_lookup
 ;

119 
u_öt
 
	mlookup_dïth
 ;

120 
	mlookup_°ï
 ;

121 
	mlookup_weight
 ;

122 
	mavg_pkt_size
 ;

123 
	mmax_pkt_size
 ;

125 
SLIST_HEAD
(
dn_Êow_£t_hód
, 
dn_Êow_£t
);

127 
	#DN_IS_PIPE
 0x4000

	)

128 
	#DN_IS_QUEUE
 0x8000

	)

129 
	sdn_Êow_queue7
 {

130 
dn_Êow_queue7
 *
	m√xt
 ;

131 
ùfw_Êow_id
 
	mid
 ;

133 
mbuf
 *
	mhód
, *
	mèû
 ;

134 
u_öt
 
	mÀn
 ;

135 
u_öt
 
	mÀn_byãs
 ;

137 
u_l⁄g
 
	mnumbyãs
;

139 
u_öt64_t
 
	mtŸ_pkts
 ;

140 
u_öt64_t
 
	mtŸ_byãs
 ;

141 
u_öt32_t
 
	mdr›s
 ;

143 
	mhash_¶Ÿ
 ;

146 
	mavg
 ;

147 
	mcou¡
 ;

148 
	møndom
 ;

149 
u_öt32_t
 
	mq_time
;

152 
dn_Êow_£t
 *
	mfs
 ;

153 
	mhóp_pos
 ;

154 
öt64_t
 
	msched_time
 ;

156 
öt64_t
 
	mS
,
	mF
 ;

159 
	sdn_pùe7
 {

160 
SLIST_ENTRY
(
dn_pùe7
Ë
	m√xt
;

162 
	mpùe_ƒ
 ;

163 
	mb™dwidth
;

164 
	mdñay
 ;

166 
mbuf
 *
	mhód
, *
	mèû
 ;

169 
dn_hóp7
 
	mscheduÀr_hóp
 ;

170 
dn_hóp7
 
	mnŸ_ñigibÀ_hóp
;

171 
dn_hóp7
 
	midÀ_hóp
 ;

173 
öt64_t
 
	mV
 ;

174 
	msum
;

176 
	mnumbyãs
;

178 
öt64_t
 
	msched_time
 ;

184 
	mif_«me
[
IFNAMSIZ
];

185 
i‚ë
 *
	miÂ
 ;

186 
	mªady
 ;

188 
dn_Êow_£t
 
	mfs
 ;

190 
SLIST_HEAD
(
dn_pùe_hód7
, 
dn_pùe7
);

194 
	sdn_Êow_queue8
 {

195 
dn_Êow_queue8
 *
	m√xt
 ;

196 
ùfw_Êow_id
 
	mid
 ;

198 
mbuf
 *
	mhód
, *
	mèû
 ;

199 
u_öt
 
	mÀn
 ;

200 
u_öt
 
	mÀn_byãs
 ;

202 
uöt64_t
 
	mnumbyãs
 ;

203 
öt64_t
 
	mexåa_bôs
;

205 
u_öt64_t
 
	mtŸ_pkts
 ;

206 
u_öt64_t
 
	mtŸ_byãs
 ;

207 
u_öt32_t
 
	mdr›s
 ;

209 
	mhash_¶Ÿ
 ;

212 
	mavg
 ;

213 
	mcou¡
 ;

214 
	møndom
 ;

215 
öt64_t
 
	midÀ_time
;

218 
dn_Êow_£t
 *
	mfs
 ;

219 
	mhóp_pos
 ;

220 
öt64_t
 
	msched_time
 ;

222 
öt64_t
 
	mS
,
	mF
 ;

225 
	sdn_pùe8
 {

226 
SLIST_ENTRY
(
dn_pùe8
Ë
	m√xt
;

228 
	mpùe_ƒ
 ;

229 
	mb™dwidth
;

230 
	mdñay
 ;

232 
mbuf
 *
	mhód
, *
	mèû
 ;

235 
dn_hóp7
 
	mscheduÀr_hóp
 ;

236 
dn_hóp7
 
	mnŸ_ñigibÀ_hóp
;

237 
dn_hóp7
 
	midÀ_hóp
 ;

239 
öt64_t
 
	mV
 ;

240 
	msum
;

243 
öt64_t
 
	mnumbyãs
;

244 
uöt64_t
 
	mbur°
;

246 
öt64_t
 
	msched_time
 ;

247 
öt64_t
 
	midÀ_time
;

249 
	mif_«me
[
IFNAMSIZ
];

250 
i‚ë
 *
	miÂ
 ;

251 
	mªady
 ;

253 
dn_Êow_£t
 
	mfs
 ;

256 
	#ED_MAX_NAME_LEN
 32

	)

257 
	m«me
[
ED_MAX_NAME_LEN
];

258 
	mloss_Àvñ
;

259 
	mßm∂es_no
;

260 *
	mßm∂es
;

263 
	#ED_MAX_SAMPLES_NO
 1024

	)

264 
	sdn_pùe_max8
 {

265 
dn_pùe8
 
	mpùe
;

266 
	mßm∂es
[
ED_MAX_SAMPLES_NO
];

268 
SLIST_HEAD
(
dn_pùe_hód8
, 
dn_pùe8
);

290 
	#O_NEXT
(
p
, 
Àn
Ë((*)((*Ì +Üí))

	)

292 
	$oid_fûl
(
dn_id
 *
oid
, 
Àn
, 
ty≥
, 
uöçå_t
 
id
)

294 
oid
->
Àn
 =Üen;

295 
oid
->
ty≥
 =Åype;

296 
oid
->
subty≥
 = 0;

297 
oid
->
id
 = id;

298 
	}
}

301 
	$o_√xt
(
dn_id
 **
o
, 
Àn
, 
ty≥
)

303 
dn_id
 *
ªt
 = *
o
;

304 
	`oid_fûl
(
ªt
, 
Àn
, 
ty≥
, 0);

305 *
o
 = 
	`O_NEXT
(*o, 
Àn
);

306  
ªt
;

307 
	}
}

310 
size_t
 
	gpùesize7
 = (
dn_pùe7
);

311 
size_t
 
	gpùesize8
 = (
dn_pùe8
);

312 
size_t
 
	gpùesizemax8
 = (
dn_pùe_max8
);

323 
	gis7
 = 0;

326 
	$c⁄vîtÊags2√w
(
§c
)

328 
d°
 = 0;

330 i‡(
§c
 & 
DNOLD_HAVE_FLOW_MASK
)

331 
d°
 |
DN_HAVE_MASK
;

332 i‡(
§c
 & 
DNOLD_QSIZE_IS_BYTES
)

333 
d°
 |
DN_QSIZE_BYTES
;

334 i‡(
§c
 & 
DNOLD_NOERROR
)

335 
d°
 |
DN_NOERROR
;

336 i‡(
§c
 & 
DNOLD_IS_RED
)

337 
d°
 |
DN_IS_RED
;

338 i‡(
§c
 & 
DNOLD_IS_GENTLE_RED
)

339 
d°
 |
DN_IS_GENTLE_RED
;

340 i‡(
§c
 & 
DNOLD_HAS_PROFILE
)

341 
d°
 |
DN_HAS_PROFILE
;

343  
d°
;

344 
	}
}

347 
	$c⁄vîtÊags2ﬁd
(
§c
)

349 
d°
 = 0;

351 i‡(
§c
 & 
DN_HAVE_MASK
)

352 
d°
 |
DNOLD_HAVE_FLOW_MASK
;

353 i‡(
§c
 & 
DN_IS_RED
)

354 
d°
 |
DNOLD_IS_RED
;

355 i‡(
§c
 & 
DN_IS_GENTLE_RED
)

356 
d°
 |
DNOLD_IS_GENTLE_RED
;

357 i‡(
§c
 & 
DN_NOERROR
)

358 
d°
 |
DNOLD_NOERROR
;

359 i‡(
§c
 & 
DN_HAS_PROFILE
)

360 
d°
 |
DNOLD_HAS_PROFILE
;

361 i‡(
§c
 & 
DN_QSIZE_BYTES
)

362 
d°
 |
DNOLD_QSIZE_IS_BYTES
;

364  
d°
;

365 
	}
}

368 
	$dn_com∑t_dñ
(*
v
)

370 
dn_pùe7
 *
p
 = (dn_pùe7 *Ë
v
;

371 
dn_pùe8
 *
p8
 = (dn_pùe8 *Ë
v
;

373 
dn_id
 
oid
;

374 
uöçå_t
 
a
[1];

375 } 
cmd
;

378 
	`oid_fûl
((*)&
cmd
, (cmd), 
DN_CMD_DELETE
, 
DN_API_VERSION
);

380 i‡(
is7
) {

381 i‡(
p
->
pùe_ƒ
 =0 &&Ö->
fs
.
fs_ƒ
 == 0)

382  
EINVAL
;

383 i‡(
p
->
pùe_ƒ
 !0 &&Ö->
fs
.
fs_ƒ
 != 0)

384  
EINVAL
;

386 i‡(
p8
->
pùe_ƒ
 =0 &&Ö8->
fs
.
fs_ƒ
 == 0)

387  
EINVAL
;

388 i‡(
p8
->
pùe_ƒ
 !0 &&Ö8->
fs
.
fs_ƒ
 != 0)

389  
EINVAL
;

392 i‡(
p
->
pùe_ƒ
 != 0) {

393 
cmd
.
a
[0] = 
p
->
pùe_ƒ
;

394 
cmd
.
oid
.
subty≥
 = 
DN_LINK
;

396 
cmd
.
oid
.
subty≥
 = 
DN_FS
;

397 
cmd
.
a
[0] = (
is7
Ë? 
p
->
fs
.
fs_ƒ
 : 
p8
->fs.fs_nr;

400  
	`do_c⁄fig
(&
cmd
, cmd.
oid
.
Àn
);

401 
	}
}

404 
	$dn_com∑t_c⁄fig_queue
(
dn_fs
 *
fs
, * 
v
)

406 
dn_pùe7
 *
p7
 = (dn_pùe7 *)
v
;

407 
dn_pùe8
 *
p8
 = (dn_pùe8 *)
v
;

408 
dn_Êow_£t
 *
f
;

410 i‡(
is7
)

411 
f
 = &
p7
->
fs
;

413 
f
 = &
p8
->
fs
;

415 
fs
->
fs_ƒ
 = 
f
->fs_nr;

416 
fs
->
sched_ƒ
 = 
f
->
∑ª¡_ƒ
;

417 
fs
->
Êow_mask
 = 
f
->flow_mask;

418 
fs
->
buckës
 = 
f
->
rq_size
;

419 
fs
->
qsize
 = 
f
->qsize;

420 
fs
->
∂r
 = 
f
->plr;

421 
fs
->
∑r
[0] = 
f
->
weight
;

422 
fs
->
Êags
 = 
	`c⁄vîtÊags2√w
(
f
->
Êags_fs
);

423 i‡(
fs
->
Êags
 & 
DN_IS_GENTLE_RED
 || fs->Êag†& 
DN_IS_RED
) {

424 
fs
->
w_q
 = 
f
->w_q;

425 
fs
->
max_th
 = 
f
->max_th;

426 
fs
->
mö_th
 = 
f
->min_th;

427 
fs
->
max_p
 = 
f
->max_p;

431 
	}
}

434 
	$dn_com∑t_c⁄fig_pùe
(
dn_sch
 *
sch
, 
dn_lök
 *
p
,

435 
dn_fs
 *
fs
, * 
v
)

437 
dn_pùe7
 *
p7
 = (dn_pùe7 *)
v
;

438 
dn_pùe8
 *
p8
 = (dn_pùe8 *)
v
;

439 
i
 = 
p7
->
pùe_ƒ
;

441 
sch
->
sched_ƒ
 = 
i
;

442 
sch
->
oid
.
subty≥
 = 0;

443 
p
->
lök_ƒ
 = 
i
;

444 
fs
->
fs_ƒ
 = 
i
 + 2*
DN_MAX_ID
;

445 
fs
->
sched_ƒ
 = 
i
 + 
DN_MAX_ID
;

448 
p
->
b™dwidth
 = 
p7
->bandwidth;

449 
p
->
dñay
 = 
p7
->delay;

450 i‡(!
is7
) {

452 
p
->
bur°
 = 
p8
->burst;

456 
	`dn_com∑t_c⁄fig_queue
(
fs
, 
v
);

457 
fs
->
fs_ƒ
 = 
i
 + 2*
DN_MAX_ID
;

458 
fs
->
sched_ƒ
 = 
i
 + 
DN_MAX_ID
;

461 
sch
->
buckës
 = 
fs
->buckets;

462 
fs
->
buckës
 = 0;

463 i‡(
fs
->
Êags
 & 
DN_HAVE_MASK
) {

464 
sch
->
Êags
 |
DN_HAVE_MASK
;

465 
fs
->
Êags
 &~
DN_HAVE_MASK
;

466 
sch
->
sched_mask
 = 
fs
->
Êow_mask
;

467 
	`bzîo
(&
fs
->
Êow_mask
, (
ùfw_Êow_id
));

471 
	}
}

474 
	$dn_com∑t_c⁄fig_¥ofûe
(
dn_¥ofûe
 *
pf
, 
dn_lök
 *
p
,

475 *
v
)

477 
dn_pùe8
 *
p8
 = (dn_pùe8 *)
v
;

479 
p8
->
ßm∂es
 = &(((
dn_pùe_max8
 *)p8)->samples[0]);

481 
pf
->
lök_ƒ
 = 
p
->link_nr;

482 
pf
->
loss_Àvñ
 = 
p8
->loss_level;

484 
pf
->
ßm∂es_no
 = 
p8
->samples_no;

485 
	`°∫˝y
(
pf
->
«me
, 
p8
->name,(pf->name));

486 
	`bc›y
(
p8
->
ßm∂es
, 
pf
->samples, (pf->samples));

489 
	}
}

496 
	$dn_com∑t_c⁄figuª
(*
v
)

498 
dn_id
 *
buf
 = 
NULL
, *
ba£
;

499 
dn_sch
 *
sch
 = 
NULL
;

500 
dn_lök
 *
p
 = 
NULL
;

501 
dn_fs
 *
fs
 = 
NULL
;

502 
dn_¥ofûe
 *
pf
 = 
NULL
;

503 
lmax
;

504 
îr‹
;

506 
dn_pùe7
 *
p7
 = (dn_pùe7 *)
v
;

507 
dn_pùe8
 *
p8
 = (dn_pùe8 *)
v
;

509 
i
;

511 
lmax
 = (
dn_id
);

512 
lmax
 +(
dn_sch
Ë+ (
dn_lök
) +

513 (
dn_fs
Ë+ (
dn_¥ofûe
);

515 
ba£
 = 
buf
 = 
	`mÆloc
(
lmax
, 
M_DUMMYNET
, 
M_WAIT
|
M_ZERO
);

516 
	`o_√xt
(&
buf
, (
dn_id
), 
DN_CMD_CONFIG
);

517 
ba£
->
id
 = 
DN_API_VERSION
;

520 
i
 = 
p7
->
pùe_ƒ
;

521 i‡(
i
 != 0) {

522 
sch
 = 
	`o_√xt
(&
buf
, (*sch), 
DN_SCH
);

523 
p
 = 
	`o_√xt
(&
buf
, (*p), 
DN_LINK
);

524 
fs
 = 
	`o_√xt
(&
buf
, (*fs), 
DN_FS
);

526 
îr‹
 = 
	`dn_com∑t_c⁄fig_pùe
(
sch
, 
p
, 
fs
, 
v
);

527 i‡(
îr‹
) {

528 
	`‰ì
(
buf
, 
M_DUMMYNET
);

529  
îr‹
;

531 i‡(!
is7
 && 
p8
->
ßm∂es_no
 > 0) {

533 
pf
 = 
	`o_√xt
(&
buf
, (*pf), 
DN_PROFILE
);

534 
îr‹
 = 
	`dn_com∑t_c⁄fig_¥ofûe
(
pf
, 
p
, 
v
);

535 i‡(
îr‹
) {

536 
	`‰ì
(
buf
, 
M_DUMMYNET
);

537  
îr‹
;

541 
fs
 = 
	`o_√xt
(&
buf
, (*fs), 
DN_FS
);

542 
îr‹
 = 
	`dn_com∑t_c⁄fig_queue
(
fs
, 
v
);

543 i‡(
îr‹
) {

544 
	`‰ì
(
buf
, 
M_DUMMYNET
);

545  
îr‹
;

548 
îr‹
 = 
	`do_c⁄fig
(
ba£
, (*)
buf
 - (*)base);

550 i‡(
buf
)

551 
	`‰ì
(
buf
, 
M_DUMMYNET
);

552  
îr‹
;

553 
	}
}

556 
	$dn_com∑t_ˇlc_size
()

558 
√ed
 = 0;

566 
√ed
 +
dn_cfg
.
schk_cou¡
 * (
dn_pùe8
) / 2;

567 
√ed
 +
dn_cfg
.
fsk_cou¡
 * (
dn_Êow_£t
);

568 
√ed
 +
dn_cfg
.
si_cou¡
 * (
dn_Êow_queue8
);

569 
√ed
 +
dn_cfg
.
queue_cou¡
 * (
dn_Êow_queue8
);

571  
√ed
;

572 
	}
}

575 
	$dn_c_c›y_q
 (*
_ni
, *
¨g
)

577 
c›y_¨gs
 *
a
 = 
¨g
;

578 
dn_Êow_queue7
 *
fq7
 = (dn_Êow_queue7 *)*
a
->
°¨t
;

579 
dn_Êow_queue8
 *
fq8
 = (dn_Êow_queue8 *)*
a
->
°¨t
;

580 
dn_Êow
 *
ni
 = (dn_Êow *)
_ni
;

581 
size
 = 0;

585 
fq7
->
Àn
 = 
ni
->
Àngth
;

586 
fq7
->
Àn_byãs
 = 
ni
->len_bytes;

587 
fq7
->
id
 = 
ni
->
fid
;

589 i‡(
is7
) {

590 
size
 = (
dn_Êow_queue7
);

591 
fq7
->
tŸ_pkts
 = 
ni
->tot_pkts;

592 
fq7
->
tŸ_byãs
 = 
ni
->tot_bytes;

593 
fq7
->
dr›s
 = 
ni
->drops;

595 
size
 = (
dn_Êow_queue8
);

596 
fq8
->
tŸ_pkts
 = 
ni
->tot_pkts;

597 
fq8
->
tŸ_byãs
 = 
ni
->tot_bytes;

598 
fq8
->
dr›s
 = 
ni
->drops;

601 *
a
->
°¨t
 +
size
;

603 
	}
}

606 
	$dn_c_c›y_pùe
(
dn_schk
 *
s
, 
c›y_¨gs
 *
a
, 
nq
)

608 
dn_lök
 *
l
 = &
s
->
lök
;

609 
dn_fsk
 *
f
 = 
s
->
fs
;

611 
dn_pùe7
 *
pùe7
 = (dn_pùe7 *)*
a
->
°¨t
;

612 
dn_pùe8
 *
pùe8
 = (dn_pùe8 *)*
a
->
°¨t
;

613 
dn_Êow_£t
 *
fs
;

614 
size
 = 0;

616 i‡(
is7
) {

617 
fs
 = &
pùe7
->fs;

618 
size
 = (
dn_pùe7
);

620 
fs
 = &
pùe8
->fs;

621 
size
 = (
dn_pùe8
);

625 
pùe7
->
√xt
.
¶e_√xt
 = (
dn_pùe7
 *)
DN_IS_PIPE
;

626 
pùe7
->
b™dwidth
 = 
l
->bandwidth;

627 
pùe7
->
dñay
 = 
l
->dñay * 1000 / 
hz
;

628 
pùe7
->
pùe_ƒ
 = 
l
->
lök_ƒ
 - 
DN_MAX_ID
;

630 i‡(!
is7
) {

631 i‡(
s
->
¥ofûe
) {

632 
dn_¥ofûe
 *
pf
 = 
s
->
¥ofûe
;

633 
	`°∫˝y
(
pùe8
->
«me
, 
pf
->name, (pf->name));

634 
pùe8
->
loss_Àvñ
 = 
pf
->loss_level;

635 
pùe8
->
ßm∂es_no
 = 
pf
->samples_no;

637 
pùe8
->
bur°
 = 
	`div64
(
l
->bur° , 8 * 
hz
);

640 
fs
->
Êow_mask
 = 
s
->
sch
.
sched_mask
;

641 
fs
->
rq_size
 = 
s
->
sch
.
buckës
 ? s->sch.buckets : 1;

643 
fs
->
∑ª¡_ƒ
 = 
l
->
lök_ƒ
 - 
DN_MAX_ID
;

644 
fs
->
qsize
 = 
f
->fs.qsize;

645 
fs
->
∂r
 = 
f
->fs.plr;

646 
fs
->
w_q
 = 
f
->fs.w_q;

647 
fs
->
max_th
 = 
f
->max_th;

648 
fs
->
mö_th
 = 
f
->min_th;

649 
fs
->
max_p
 = 
f
->fs.max_p;

650 
fs
->
rq_ñemíts
 = 
nq
;

652 
fs
->
Êags_fs
 = 
	`c⁄vîtÊags2ﬁd
(
f
->fs.
Êags
);

654 *
a
->
°¨t
 +
size
;

656 
	}
}

660 
	$dn_com∑t_c›y_pùe
(
c›y_¨gs
 *
a
, *
_o
)

662 
have
 = 
a
->
íd
 - *a->
°¨t
;

663 
√ed
 = 0;

664 
pùe_size
 = (
dn_pùe8
);

665 
queue_size
 = (
dn_Êow_queue8
);

666 
n_queue
 = 0;

668 
dn_schk
 *
s
 = (dn_schk *)
_o
;

673 
n_queue
 = (
s
->
sch
.
Êags
 & 
DN_HAVE_MASK
 ? 
	`dn_ht_íåõs
(s->
siht
) :

674 (
s
->
siht
 ? 1 : 0));

675 
√ed
 = 
pùe_size
 + 
queue_size
 * 
n_queue
;

676 i‡(
have
 < 
√ed
) {

677 
	`D
("havê%d <Çìd %d", 
have
, 
√ed
);

681 
	`dn_c_c›y_pùe
(
s
, 
a
, 
n_queue
);

684 i‡(
s
->
sch
.
Êags
 & 
DN_HAVE_MASK
)

685 
	`dn_ht_sˇn
(
s
->
siht
, 
dn_c_c›y_q
, 
a
);

686 i‡(
s
->
siht
)

687 
	`dn_c_c›y_q
(
s
->
siht
, 
a
);

689 
	}
}

692 
	$dn_c_c›y_fs
(
dn_fsk
 *
f
, 
c›y_¨gs
 *
a
, 
nq
)

694 
dn_Êow_£t
 *
fs
 = (dn_Êow_£à*)*
a
->
°¨t
;

696 
fs
->
√xt
.
¶e_√xt
 = (
dn_Êow_£t
 *)
DN_IS_QUEUE
;

697 
fs
->
fs_ƒ
 = 
f
->fs.fs_nr;

698 
fs
->
qsize
 = 
f
->fs.qsize;

699 
fs
->
∂r
 = 
f
->fs.plr;

700 
fs
->
w_q
 = 
f
->fs.w_q;

701 
fs
->
max_th
 = 
f
->max_th;

702 
fs
->
mö_th
 = 
f
->min_th;

703 
fs
->
max_p
 = 
f
->fs.max_p;

704 
fs
->
Êow_mask
 = 
f
->fs.flow_mask;

705 
fs
->
rq_ñemíts
 = 
nq
;

706 
fs
->
rq_size
 = (
f
->fs.
buckës
 ? f->fs.buckets : 1);

707 
fs
->
∑ª¡_ƒ
 = 
f
->fs.
sched_ƒ
;

708 
fs
->
weight
 = 
f
->fs.
∑r
[0];

710 
fs
->
Êags_fs
 = 
	`c⁄vîtÊags2ﬁd
(
f
->fs.
Êags
);

711 *
a
->
°¨t
 +(
dn_Êow_£t
);

713 
	}
}

716 
	$dn_com∑t_c›y_queue
(
c›y_¨gs
 *
a
, *
_o
)

718 
have
 = 
a
->
íd
 - *a->
°¨t
;

719 
√ed
 = 0;

720 
fs_size
 = (
dn_Êow_£t
);

721 
queue_size
 = (
dn_Êow_queue8
);

723 
dn_fsk
 *
fs
 = (dn_fsk *)
_o
;

724 
n_queue
 = 0;

726 
n_queue
 = (
fs
->fs.
Êags
 & 
DN_HAVE_MASK
 ? 
	`dn_ht_íåõs
(fs->
qht
) :

727 (
fs
->
qht
 ? 1 : 0));

729 
√ed
 = 
fs_size
 + 
queue_size
 * 
n_queue
;

730 i‡(
have
 < 
√ed
) {

731 
	`D
("have <Çeed");

736 
	`dn_c_c›y_fs
(
fs
, 
a
, 
n_queue
);

739 i‡(
fs
->fs.
Êags
 & 
DN_HAVE_MASK
)

740 
	`dn_ht_sˇn
(
fs
->
qht
, 
dn_c_c›y_q
, 
a
);

741 i‡(
fs
->
qht
)

742 
	`dn_c_c›y_q
(
fs
->
qht
, 
a
);

745 
	}
}

748 
	$c›y_d©a_hñ≥r_com∑t
(*
_o
, *
_¨g
)

750 
c›y_¨gs
 *
a
 = 
_¨g
;

752 i‡(
a
->
ty≥
 =
DN_COMPAT_PIPE
) {

753 
dn_schk
 *
s
 = 
_o
;

754 i‡(
s
->
sch
.
oid
.
subty≥
 !1 || s->sch.
sched_ƒ
 <
DN_MAX_ID
) {

760 if(
	`dn_com∑t_c›y_pùe
(
a
, 
_o
))

761  
DNHT_SCAN_END
;

762 } i‡(
a
->
ty≥
 =
DN_COMPAT_QUEUE
) {

763 
dn_fsk
 *
fs
 = 
_o
;

764 i‡(
fs
->fs.
fs_ƒ
 >
DN_MAX_ID
)

766 i‡(
	`dn_com∑t_c›y_queue
(
a
, 
_o
))

767  
DNHT_SCAN_END
;

770 
	}
}

774 
	$ù_dummy√t_com∑t
(
sock›t
 *
s›t
)

776 
îr‹
=0;

777 *
v
 = 
NULL
;

778 
dn_id
 
oid
;

781 
Àn
 = 
s›t
->
s›t_vÆsize
;

784 i‡(
Àn
 =
pùesize7
) {

785 
	`D
("setting compatibility with FreeBSD 7.2");

786 
is7
 = 1;

788 i‡(
Àn
 =
pùesize8
 ||Üí =
pùesizemax8
) {

789 
	`D
("setting compatibility with FreeBSD 8");

790 
is7
 = 0;

793 
s›t
->
s›t_«me
) {

795 
	`¥ötf
("dummy√t: -- unknow¿›ti⁄ %d", 
s›t
->
s›t_«me
);

796 
îr‹
 = 
EINVAL
;

799 
IP_DUMMYNET_FLUSH
:

800 
	`oid_fûl
(&
oid
, (oid), 
DN_CMD_FLUSH
, 
DN_API_VERSION
);

801 
	`do_c⁄fig
(&
oid
, oid.
Àn
);

804 
IP_DUMMYNET_DEL
:

805 
v
 = 
	`mÆloc
(
Àn
, 
M_TEMP
, 
M_WAITOK
);

806 
îr‹
 = 
	`so›tc›yö
(
s›t
, 
v
, 
Àn
,Üen);

807 i‡(
îr‹
)

809 
îr‹
 = 
	`dn_com∑t_dñ
(
v
);

810 
	`‰ì
(
v
, 
M_TEMP
);

813 
IP_DUMMYNET_CONFIGURE
:

814 
v
 = 
	`mÆloc
(
Àn
, 
M_TEMP
, 
M_WAITOK
);

815 
îr‹
 = 
	`so›tc›yö
(
s›t
, 
v
, 
Àn
,Üen);

816 i‡(
îr‹
)

818 
îr‹
 = 
	`dn_com∑t_c⁄figuª
(
v
);

819 
	`‰ì
(
v
, 
M_TEMP
);

822 
IP_DUMMYNET_GET
: {

823 *
buf
;

824 
ªt
;

825 
‹igöÆ_size
 = 
s›t
->
s›t_vÆsize
;

826 
size
;

828 
ªt
 = 
	`dummy√t_gë
(
s›t
, &
buf
);

829 i‡(
ªt
)

831 
size
 = 
s›t
->
s›t_vÆsize
;

832 
s›t
->
s›t_vÆsize
 = 
‹igöÆ_size
;

833 
	`D
("size=%d, buf=%p", 
size
, 
buf
);

834 
ªt
 = 
	`so›tc›yout
(
s›t
, 
buf
, 
size
);

835 i‡(
ªt
)

836 
	`¥ötf
(" %†ERROR so›tc›yout\n", 
__FUNCTION__
);

837 i‡(
buf
)

838 
	`‰ì
(
buf
, 
M_DUMMYNET
);

842  
îr‹
;

843 
	}
}

	@sys/netinet/ipfw/ip_dn_io.c

30 
	~<sys/cdefs.h
>

31 
__FBSDID
("$FreeBSD: user/luigi/ipfw3-head/sys/netinet/ipfw/ip_dn_io.c 203321 2010-01-31 21:39:25ZÜuigi $");

33 
	~"›t_öë6.h
"

35 
	~<sys/∑øm.h
>

36 
	~<sys/sy°m.h
>

37 
	~<sys/mÆloc.h
>

38 
	~<sys/mbuf.h
>

39 
	~<sys/kî√l.h
>

40 
	~<sys/lock.h
>

41 
	~<sys/moduÀ.h
>

42 
	~<sys/¥iv.h
>

43 
	~<sys/¥oc.h
>

44 
	~<sys/rwlock.h
>

45 
	~<sys/sockë.h
>

46 
	~<sys/time.h
>

47 
	~<sys/sys˘l.h
>

49 
	~<√t/if.h
>

50 
	~<√t/√ti§.h
>

51 
	~<√t/v√t.h
>

53 
	~<√töë/ö.h
>

54 
	~<√töë/ù.h
>

55 
	~<√töë/ù_v¨.h
>

56 
	~<√töë/ù_fw.h
>

57 
	~<√töë/ùfw/ù_fw_¥iv©e.h
>

58 
	~<√töë/ùfw/dn_hóp.h
>

59 
	~<√töë/ù_dummy√t.h
>

60 
	~<√töë/ùfw/ù_dn_¥iv©e.h
>

61 
	~<√töë/ùfw/dn_sched.h
>

63 
	~<√töë/if_ëhî.h
>

65 
	~<√töë/ù6.h
>

66 
	~<√töë6/ù6_v¨.h
>

74 
dn_∑rms
 
	gdn_cfg
;

77 
	gtick_œ°
;

78 
	gtick_dñè
;

79 
	gtick_dñè_sum
;

80 
	gtick_adju°mít
;

81 
	gtick_lo°
;

83 
	gtick_diff
;

85 
	gio_pkt
;

86 
	gio_pkt_Á°
;

87 
	gio_pkt_dr›
;

95 
MALLOC_DEFINE
(
M_DUMMYNET
, "dummynet", "dummynet heap");

97 (*
bridge_dn_p
)(
mbuf
 *, 
i‚ë
 *);

99 #ifde‡
SYSCTL_NODE


101 
	$SYSBEGIN
(
f4
)

103 
	`SYSCTL_DECL
(
_√t_öë
);

104 
	`SYSCTL_DECL
(
_√t_öë_ù
);

105 
	`SYSCTL_NODE
(
_√t_öë_ù
, 
OID_AUTO
, 
dummy√t
, 
CTLFLAG_RW
, 0, "Dummynet");

109 
	#DC
(
x
Ë(&(
dn_cfg
.x))

	)

111 
	`SYSCTL_INT
(
_√t_öë_ù_dummy√t
, 
OID_AUTO
, 
hash_size
,

112 
CTLFLAG_RW
, 
	`DC
(
hash_size
), 0, "Default hashÅable size");

113 
	`SYSCTL_LONG
(
_√t_öë_ù_dummy√t
, 
OID_AUTO
, 
pùe_¶Ÿ_limô
,

114 
CTLFLAG_RW
, 
	`DC
(
¶Ÿ_limô
), 0,

116 
	`SYSCTL_LONG
(
_√t_öë_ù_dummy√t
, 
OID_AUTO
, 
pùe_byã_limô
,

117 
CTLFLAG_RW
, 
	`DC
(
byã_limô
), 0,

119 
	`SYSCTL_INT
(
_√t_öë_ù_dummy√t
, 
OID_AUTO
, 
io_Á°
,

120 
CTLFLAG_RW
, 
	`DC
(
io_Á°
), 0, "Enable fast dummynet io.");

121 
	`SYSCTL_INT
(
_√t_öë_ù_dummy√t
, 
OID_AUTO
, 
debug
,

122 
CTLFLAG_RW
, 
	`DC
(
debug
), 0, "Dummynet debugÜevel");

125 
	`SYSCTL_INT
(
_√t_öë_ù_dummy√t
, 
OID_AUTO
, 
ªd_lookup_dïth
,

126 
CTLFLAG_RD
, 
	`DC
(
ªd_lookup_dïth
), 0, "Depth of REDÜookupÅable");

127 
	`SYSCTL_INT
(
_√t_öë_ù_dummy√t
, 
OID_AUTO
, 
ªd_avg_pkt_size
,

128 
CTLFLAG_RD
, 
	`DC
(
ªd_avg_pkt_size
), 0, "RED MediumÖacket size");

129 
	`SYSCTL_INT
(
_√t_öë_ù_dummy√t
, 
OID_AUTO
, 
ªd_max_pkt_size
,

130 
CTLFLAG_RD
, 
	`DC
(
ªd_max_pkt_size
), 0, "RED MaxÖacket size");

133 
	`SYSCTL_LONG
(
_√t_öë_ù_dummy√t
, 
OID_AUTO
, 
tick_dñè
,

134 
CTLFLAG_RD
, &
tick_dñè
, 0, "Last vs standardÅick difference (usec).");

135 
	`SYSCTL_LONG
(
_√t_öë_ù_dummy√t
, 
OID_AUTO
, 
tick_dñè_sum
,

136 
CTLFLAG_RD
, &
tick_dñè_sum
, 0, "AccumulatedÅick difference (usec).");

137 
	`SYSCTL_LONG
(
_√t_öë_ù_dummy√t
, 
OID_AUTO
, 
tick_adju°mít
,

138 
CTLFLAG_RD
, &
tick_adju°mít
, 0, "Tickádjustments done.");

139 
	`SYSCTL_LONG
(
_√t_öë_ù_dummy√t
, 
OID_AUTO
, 
tick_diff
,

140 
CTLFLAG_RD
, &
tick_diff
, 0,

142 
	`SYSCTL_LONG
(
_√t_öë_ù_dummy√t
, 
OID_AUTO
, 
tick_lo°
,

143 
CTLFLAG_RD
, &
tick_lo°
, 0,

147 
	`SYSCTL_UINT
(
_√t_öë_ù_dummy√t
, 
OID_AUTO
, 
expúe
,

148 
CTLFLAG_RW
, 
	`DC
(
expúe
), 0, "ExpireÉmpty queues/pipes");

149 
	`SYSCTL_UINT
(
_√t_öë_ù_dummy√t
, 
OID_AUTO
, 
expúe_cy˛e
,

150 
CTLFLAG_RD
, 
	`DC
(
expúe_cy˛e
), 0, "Expire cycle for queues/pipes");

151 
	`SYSCTL_UINT
(
_√t_öë_ù_dummy√t
, 
OID_AUTO
, 
expúe_obje˘
,

152 
CTLFLAG_RW
, 
	`DC
(
expúe_obje˘
), 0, "Min # of objects before start drainÑoutine");

153 
	`SYSCTL_UINT
(
_√t_öë_ù_dummy√t
, 
OID_AUTO
, 
obje˘_idÀ_tick
,

154 
CTLFLAG_RD
, 
	`DC
(
obje˘_idÀ_tick
), 0, "Time (inÅicks)Åo cosidererán objectás idle");

155 
	`SYSCTL_INT
(
_√t_öë_ù_dummy√t
, 
OID_AUTO
, 
døö_øtio
,

156 
CTLFLAG_RD
, 
	`DC
(
døö_øtio
), 0, "% of dummynet_task()Åo dedicateÅo drainÑoutine");

159 
	`SYSCTL_INT
(
_√t_öë_ù_dummy√t
, 
OID_AUTO
, 
schk_cou¡
,

160 
CTLFLAG_RD
, 
	`DC
(
schk_cou¡
), 0, "Number of schedulers");

161 
	`SYSCTL_INT
(
_√t_öë_ù_dummy√t
, 
OID_AUTO
, 
si_cou¡
,

162 
CTLFLAG_RD
, 
	`DC
(
si_cou¡
), 0, "Number of scheduler instances");

163 
	`SYSCTL_INT
(
_√t_öë_ù_dummy√t
, 
OID_AUTO
, 
fsk_cou¡
,

164 
CTLFLAG_RD
, 
	`DC
(
fsk_cou¡
), 0, "Number of flowsets");

165 
	`SYSCTL_INT
(
_√t_öë_ù_dummy√t
, 
OID_AUTO
, 
queue_cou¡
,

166 
CTLFLAG_RD
, 
	`DC
(
queue_cou¡
), 0, "Number of queues");

167 
	`SYSCTL_ULONG
(
_√t_öë_ù_dummy√t
, 
OID_AUTO
, 
io_pkt
,

168 
CTLFLAG_RD
, &
io_pkt
, 0,

170 
	`SYSCTL_ULONG
(
_√t_öë_ù_dummy√t
, 
OID_AUTO
, 
io_pkt_Á°
,

171 
CTLFLAG_RD
, &
io_pkt_Á°
, 0,

173 
	`SYSCTL_ULONG
(
_√t_öë_ù_dummy√t
, 
OID_AUTO
, 
io_pkt_dr›
,

174 
CTLFLAG_RD
, &
io_pkt_dr›
, 0,

176 #unde‡
DC


177 
SYSEND


181 
	`dummy√t_£nd
(
mbuf
 *);

189 
	sdn_pkt_èg
 {

190 
ùfw_ruÀ_ªf
 
ruÀ
;

193 
dn_dú
;

195 
uöt64_t
 
ouçut_time
;

196 
i‚ë
 *
iÂ
;

197 
_ù6dn_¨gs
 
ù6›t
;

204 
dn_pkt_èg
 *

205 
	$dn_èg_gë
(
mbuf
 *
m
)

207 
m_èg
 *
mèg
 = 
	`m_èg_fú°
(
m
);

208 
	`KASSERT
(
mèg
 !
NULL
 &&

209 
mèg
->
m_èg_cookõ
 =
MTAG_ABI_COMPAT
 &&

210 
mèg
->
m_èg_id
 =
PACKET_TAG_DUMMYNET
,

212  (
dn_pkt_èg
 *)(
mèg
+1);

213 
	}
}

215 
ölöe
 

216 
	$mq_≠≥nd
(
mq
 *
q
, 
mbuf
 *
m
)

218 i‡(
q
->
hód
 =
NULL
)

219 
q
->
hód
 = 
m
;

221 
q
->
èû
->
m_√xçkt
 = 
m
;

222 
q
->
èû
 = 
m
;

223 
m
->
m_√xçkt
 = 
NULL
;

224 
	}
}

230 
	$dn_‰ì_pkts
(
mbuf
 *
m√xt
)

232 
mbuf
 *
m
;

234 (
m
 = 
m√xt
Ë!
NULL
) {

235 
m√xt
 = 
m
->
m_√xçkt
;

236 
	`FREE_PKT
(
m
);

238 
	}
}

241 
	$ªd_dr›s
 (
dn_queue
 *
q
, 
Àn
)

260 
dn_fsk
 *
fs
 = 
q
->fs;

261 
öt64_t
 
p_b
 = 0;

264 
uöt32_t
 
q_size
 = (
fs
->fs.
Êags
 & 
DN_QSIZE_BYTES
) ?

265 
q
->
ni
.
Àn_byãs
 : q->ni.
Àngth
;

268 i‡(
q_size
 != 0) {

270 
diff
 = 
	`SCALE
(
q_size
Ë- 
q
->
avg
;

271 
öt64_t
 
v
 = 
	`SCALE_MUL
((öt64_t)
diff
, (öt64_t)
fs
->
w_q
);

273 
q
->
avg
 +()
v
;

282 i‡(
q
->
avg
) {

283 
u_öt
 
t
 = 
	`div64
((
dn_cfg
.
cuº_time
 - 
q
->
q_time
), 
fs
->
lookup_°ï
);

285 
q
->
avg
 = (
t
 < 
fs
->
lookup_dïth
) ?

286 
	`SCALE_MUL
(
q
->
avg
, 
fs
->
w_q_lookup
[
t
]) : 0;

291 i‡(
q
->
avg
 < 
fs
->
mö_th
) {

292 
q
->
cou¡
 = -1;

295 i‡(
q
->
avg
 >
fs
->
max_th
) {

296 i‡(
fs
->fs.
Êags
 & 
DN_IS_GENTLE_RED
) {

304 
p_b
 = 
	`SCALE_MUL
((
öt64_t
)
fs
->
c_3
, (öt64_t)
q
->
avg
) -

305 
fs
->
c_4
;

307 
q
->
cou¡
 = -1;

310 } i‡(
q
->
avg
 > 
fs
->
mö_th
) {

317 
p_b
 = 
	`SCALE_MUL
((
öt64_t
)
fs
->
c_1
, (öt64_t)
q
->
avg
Ë- fs->
c_2
;

320 i‡(
fs
->fs.
Êags
 & 
DN_QSIZE_BYTES
)

321 
p_b
 = 
	`div64
(’_b * 
Àn
Ë, 
fs
->
max_pkt_size
);

322 i‡(++
q
->
cou¡
 == 0)

323 
q
->
øndom
 = 
	`øndom
() & 0xffff;

329 i‡(
	`SCALE_MUL
(
p_b
, 
	`SCALE
((
öt64_t
)
q
->
cou¡
)Ë> q->
øndom
) {

330 
q
->
cou¡
 = 0;

332 
q
->
øndom
 = 
	`øndom
() & 0xffff;

340 
	}
}

349 
	$dn_íqueue
(
dn_queue
 *
q
, 
mbuf
* 
m
, 
dr›
)

351 
dn_fs
 *
f
;

352 
dn_Êow
 *
ni
;

353 
uöt64_t
 
Àn
;

355 i‡(
q
->
fs
 =
NULL
 || q->
_si
 == NULL) {

356 
	`¥ötf
("%s fs %p si %p, dropping\n",

357 
__FUNCTION__
, 
q
->
fs
, q->
_si
);

358 
	`FREE_PKT
(
m
);

361 
f
 = &(
q
->
fs
->fs);

362 
ni
 = &
q
->
_si
->ni;

363 
Àn
 = 
m
->
m_pkthdr
.len;

365 
q
->
ni
.
tŸ_byãs
 +
Àn
;

366 
q
->
ni
.
tŸ_pkts
++;

367 
ni
->
tŸ_byãs
 +
Àn
;

368 
ni
->
tŸ_pkts
++;

369 i‡(
dr›
)

370 
dr›
;

371 i‡(
f
->
∂r
 && 
	`øndom
() < f->plr)

372 
dr›
;

373 i‡(
f
->
Êags
 & 
DN_IS_RED
 && 
	`ªd_dr›s
(
q
, 
m
->
m_pkthdr
.
Àn
))

374 
dr›
;

375 i‡(
f
->
Êags
 & 
DN_QSIZE_BYTES
) {

376 i‡(
q
->
ni
.
Àn_byãs
 > 
f
->
qsize
)

377 
dr›
;

378 } i‡(
q
->
ni
.
Àngth
 >
f
->
qsize
) {

379 
dr›
;

381 
	`mq_≠≥nd
(&
q
->
mq
, 
m
);

382 i‡(
q
->
ni
.
Àngth
 == 0) {

383 
dn_cfg
.
idÀ_queue
--;

384 i‡(
ni
->
Àngth
 == 0)

385 
dn_cfg
.
idÀ_si
--;

387 
q
->
ni
.
Àngth
++;

388 
q
->
ni
.
Àn_byãs
 +
Àn
;

389 
ni
->
Àngth
++;

390 
ni
->
Àn_byãs
 +
Àn
;

393 
dr›
:

394 
io_pkt_dr›
++;

395 
q
->
ni
.
dr›s
++;

396 
ni
->
dr›s
++;

397 
	`FREE_PKT
(
m
);

399 
	}
}

407 
	$å™smô_evít
(
mq
 *
q
, 
dñay_löe
 *
dlöe
, 
uöt64_t
 
now
)

409 
mbuf
 *
m
;

410 
dn_pkt_èg
 *
pkt
 = 
NULL
;

412 
dlöe
->
oid
.
subty≥
 = 0;

413 (
m
 = 
dlöe
->
mq
.
hód
Ë!
NULL
) {

414 
pkt
 = 
	`dn_èg_gë
(
m
);

415 i‡(!
	`DN_KEY_LEQ
(
pkt
->
ouçut_time
, 
now
))

417 
dlöe
->
mq
.
hód
 = 
m
->
m_√xçkt
;

418 
	`mq_≠≥nd
(
q
, 
m
);

420 i‡(
m
 !
NULL
) {

421 
dlöe
->
oid
.
subty≥
 = 1;

422 
	`hóp_ö£π
(&
dn_cfg
.
evhóp
, 
pkt
->
ouçut_time
, 
dlöe
);

424 
	}
}

431 
uöt64_t


432 
	$exåa_bôs
(
mbuf
 *
m
, 
dn_schk
 *
s
)

434 
ödex
;

435 
uöt64_t
 
bôs
;

436 
dn_¥ofûe
 *
pf
 = 
s
->
¥ofûe
;

438 i‡(!
pf
 ||Öf->
ßm∂es_no
 == 0)

440 
ödex
 = 
	`øndom
(Ë% 
pf
->
ßm∂es_no
;

441 
bôs
 = 
	`div64
((
uöt64_t
)
pf
->
ßm∂es
[
ödex
] * 
s
->
lök
.
b™dwidth
, 1000);

442 i‡(
ödex
 >
pf
->
loss_Àvñ
) {

443 
dn_pkt_èg
 *
dt
 = 
	`dn_èg_gë
(
m
);

444 i‡(
dt
)

445 
dt
->
dn_dú
 = 
DIR_DROP
;

447  
bôs
;

448 
	}
}

454 
mbuf
 *

455 
	$£rve_sched
(
mq
 *
q
, 
dn_sch_ö°
 *
si
, 
uöt64_t
 
now
)

457 
mq
 
def_q
;

458 
dn_schk
 *
s
 = 
si
->
sched
;

459 
mbuf
 *
m
 = 
NULL
;

460 
dñay_löe_idÀ
 = (
si
->
dlöe
.
mq
.
hód
 =
NULL
);

461 
d⁄e
, 
bw
;

463 i‡(
q
 =
NULL
) {

464 
q
 = &
def_q
;

465 
q
->
hód
 = 
NULL
;

468 
bw
 = 
s
->
lök
.
b™dwidth
;

469 
si
->
kÊags
 &~
DN_ACTIVE
;

471 i‡(
bw
 > 0)

472 
si
->
¸edô
 +(
now
 - si->
sched_time
Ë* 
bw
;

474 
si
->
¸edô
 = 0;

475 
si
->
sched_time
 = 
now
;

476 
d⁄e
 = 0;

477 
si
->
¸edô
 >0 && (
m
 = 
s
->
Â
->
	`dequeue
(si)Ë!
NULL
) {

478 
uöt64_t
 
Àn_sˇÀd
;

486 i‡(
m
->
m_pkthdr
.
Àn
 < 0) {

487 
si
->
kÊags
 |
DN_ACTIVE
;

488 
	`hóp_ö£π
(&
dn_cfg
.
evhóp
, 
now
 - 
m
->
m_pkthdr
.
Àn
, 
si
);

489 i‡(
dñay_löe_idÀ
 && 
d⁄e
)

490 
	`å™smô_evít
(
q
, &
si
->
dlöe
, 
now
);

491  
NULL
;

495 
d⁄e
++;

496 
Àn_sˇÀd
 = (
bw
 =0Ë? 0 : 
hz
 *

497 (
m
->
m_pkthdr
.
Àn
 * 8 + 
	`exåa_bôs
(m, 
s
));

498 
si
->
¸edô
 -
Àn_sˇÀd
;

500 
	`dn_èg_gë
(
m
)->
ouçut_time
 = 
dn_cfg
.
cuº_time
 + 
s
->
lök
.
dñay
;

501 
	`mq_≠≥nd
(&
si
->
dlöe
.
mq
, 
m
);

509 i‡(
si
->
¸edô
 >= 0) {

510 
si
->
idÀ_time
 = 
now
;

512 
uöt64_t
 
t
;

513 
	`KASSERT
 (
bw
 > 0, ("bw=0ánd credit<0 ?"));

514 
t
 = 
	`div64
(
bw
 - 1 - 
si
->
¸edô
, bw);

515 i‡(
m
)

516 
	`dn_èg_gë
(
m
)->
ouçut_time
 +
t
;

517 
si
->
kÊags
 |
DN_ACTIVE
;

518 
	`hóp_ö£π
(&
dn_cfg
.
evhóp
, 
now
 + 
t
, 
si
);

520 i‡(
dñay_löe_idÀ
 && 
d⁄e
)

521 
	`å™smô_evít
(
q
, &
si
->
dlöe
, 
now
);

522  
q
->
hód
;

523 
	}
}

541 #ifde‡
HAVE_TSC


542 
uöt64_t


543 
	$ªadTSC
 ()

545 
uöt64_t
 
a
=0;

547 #ifde‡
__löux__


555 
	`rdts˛l
(
a
);

556 #ñi‡
	`deföed
(
_WIN32
)

560 
	`KeQuîyPîf‹m™˚Cou¡î
((
PLARGE_INTEGER
)&
a
);

561 #ñi‡
	`deföed
(
__FªeBSD__
)

565  
	`rdtsc
();

567  
a
;

568 
	}
}

576 
	$do_upd©e_cy˛e
()

578 #ifde‡
HAVE_TSC


579 
uöt64_t
 
tmp
 = 
	`ªadTSC
();

580 #i‡
	`deföed
 (
LINUX_24
Ë&& deföed(
CONFIG_SMP
)

586 i‡(
tmp
 <
dn_cfg
.
cy˛e_èsk_√w
)

587 
dn_cfg
.
cy˛e_èsk_√w
 = 
tmp
 - dn_cfg.
cy˛e_èsk
;

589 
dn_cfg
.
cy˛e_èsk_ﬁd
 = dn_cfg.
cy˛e_èsk_√w
;

590 
dn_cfg
.
cy˛e_èsk_√w
 = 
tmp
;

591 
dn_cfg
.
cy˛e_èsk
 = dn_cfg.
cy˛e_èsk_√w
 - dn_cfg.
cy˛e_èsk_ﬁd
;

598 
	#DN_N
 4

	)

599 
dn_cfg
.
cy˛e_èsk_avg
 = (dn_cfg.cy˛e_èsk_avg << 
DN_N
) +

600 
dn_cfg
.
cy˛e_èsk
 - dn_cfg.
cy˛e_èsk_avg
;

601 
dn_cfg
.
cy˛e_èsk_avg
 = dn_cfg.cy˛e_èsk_avg >> 
DN_N
;

602 #unde‡
DN_N


605 
	}
}

608 
	$do_døö
()

610 #ifde‡
HAVE_TSC


611 
uöt64_t
 
dt_max
;

613 i‡(!
dn_cfg
.
expúe
 || ++dn_cfg.
expúe_cy˛e
 < dn_cfg.expire)

616 
dn_cfg
.
expúe_cy˛e
 = 0;

618 
dn_cfg
.
idÀ_queue_waô
 = 0;

619 
dn_cfg
.
idÀ_si_waô
 = 0;

621 #ifde‡
HAVE_TSC


622 
dt_max
 = 
dn_cfg
.
cy˛e_èsk_avg
 * dn_cfg.
døö_øtio
;

625 
d⁄e
 = 0;

627 i‡(
dn_cfg
.
idÀ_queue
 > dn_cfg.
expúe_obje˘
 &&

628 
dn_cfg
.
idÀ_queue_waô
 < dn_cfg.
idÀ_queue
) {

629 
	`dn_døö_queue
();

630 
d⁄e
 = 1;

632 i‡(
dn_cfg
.
idÀ_si
 > dn_cfg.
expúe_obje˘
 &&

633 
dn_cfg
.
idÀ_si_waô
 < dn_cfg.
idÀ_si
) {

634 
	`dn_døö_scheduÀr
();

635 
d⁄e
 = 1;

638 #i‚de‡
HAVE_TSC


643 i‡–(
d⁄e
 == 0) ||

644 ((
	`ªadTSC
(Ë- 
dn_cfg
.
cy˛e_èsk_√w
Ë* 100 > 
dt_max
) )

648 
	}
}

656 
	$dummy√t_èsk
(*
c⁄ãxt
, 
≥ndög
)

658 
timevÆ
 
t
;

659 
mq
 
q
 = { 
NULL
, NULL };

661 
	`CURVNET_SET
((
v√t
 *)
c⁄ãxt
);

663 
	`do_upd©e_cy˛e
();

665 
	`DN_BH_WLOCK
();

668 
tick_lo°
 +
≥ndög
 - 1;

670 
	`gëmi¸ou±ime
(&
t
);

672 
tick_œ°
 = (
t
.
tv_£c
 - 
dn_cfg
.
¥ev_t
.tv_sec) * 1000000 +

673 (
t
.
tv_u£c
 - 
dn_cfg
.
¥ev_t
.tv_usec);

675 
tick_dñè
 = (
tick_œ°
 * 
hz
 - 1000000) / hz;

677 
tick_dñè_sum
 +
tick_dñè
;

679 
dn_cfg
.
¥ev_t
 = 
t
;

688 
dn_cfg
.
cuº_time
++;

689 i‡(
tick_dñè_sum
 - 
tick
 >= 0) {

690 
diff
 = 
tick_dñè_sum
 / 
tick
;

692 
dn_cfg
.
cuº_time
 +
diff
;

693 
tick_diff
 +
diff
;

694 
tick_dñè_sum
 %
tick
;

695 
tick_adju°mít
++;

696 } i‡(
tick_dñè_sum
 + 
tick
 <= 0) {

697 
dn_cfg
.
cuº_time
--;

698 
tick_diff
--;

699 
tick_dñè_sum
 +
tick
;

700 
tick_adju°mít
++;

705 
dn_id
 *
p
;

707 i‡(
dn_cfg
.
evhóp
.
ñemíts
 == 0 ||

708 
	`DN_KEY_LT
(
dn_cfg
.
cuº_time
, 
	`HEAP_TOP
(&dn_cfg.
evhóp
)->
key
))

710 
p
 = 
	`HEAP_TOP
(&
dn_cfg
.
evhóp
)->
obje˘
;

711 
	`hóp_exåa˘
(&
dn_cfg
.
evhóp
, 
NULL
);

713 i‡(
p
->
ty≥
 =
DN_SCH_I
) {

714 
	`£rve_sched
(&
q
, (
dn_sch_ö°
 *)
p
, 
dn_cfg
.
cuº_time
);

716 
	`å™smô_evít
(&
q
, (
dñay_löe
 *)
p
, 
dn_cfg
.
cuº_time
);

719 
	`do_døö
();

721 
	`DN_BH_WUNLOCK
();

722 
	`dn_ªscheduÀ
();

723 i‡(
q
.
hód
 !
NULL
)

724 
	`dummy√t_£nd
(
q
.
hód
);

725 
	`CURVNET_RESTORE
();

726 
	}
}

733 
	$dummy√t_£nd
(
mbuf
 *
m
)

735 
mbuf
 *
n
;

737 ; 
m
 !
NULL
; m = 
n
) {

738 
i‚ë
 *
iÂ
 = 
NULL
;

739 
m_èg
 *
èg
;

740 
d°
;

742 
n
 = 
m
->
m_√xçkt
;

743 
m
->
m_√xçkt
 = 
NULL
;

744 
èg
 = 
	`m_èg_fú°
(
m
);

745 i‡(
èg
 =
NULL
) {

746 
d°
 = 
DIR_DROP
;

748 
dn_pkt_èg
 *
pkt
 = 
	`dn_èg_gë
(
m
);

752 
d°
 = 
pkt
->
dn_dú
;

753 
iÂ
 = 
pkt
->ifp;

754 
èg
->
m_èg_cookõ
 = 
MTAG_IPFW_RULE
;

755 
èg
->
m_èg_id
 = 0;

758 
d°
) {

759 
DIR_OUT
:

760 
	`SET_HOST_IPLEN
(
	`mtod
(
m
, 
ù
 *));

761 
	`ù_ouçut
(
m
, 
NULL
, NULL, 
IP_FORWARDING
, NULL, NULL);

764 
DIR_IN
 :

767 
	`√ti§_di•©ch
(
NETISR_IP
, 
m
);

770 #ifde‡
INET6


771 
DIR_IN
 | 
PROTO_IPV6
:

772 
	`√ti§_di•©ch
(
NETISR_IPV6
, 
m
);

775 
DIR_OUT
 | 
PROTO_IPV6
:

776 
	`SET_HOST_IPLEN
(
	`mtod
(
m
, 
ù
 *));

777 
	`ù6_ouçut
(
m
, 
NULL
, NULL, 
IPV6_FORWARDING
, NULL, NULL, NULL);

781 
DIR_FWD
 | 
PROTO_IFB
:

782 i‡(
bridge_dn_p
 !
NULL
)

783 ((*
bridge_dn_p
)(
m
, 
iÂ
));

785 
	`¥ötf
("dummynet: if_bridgeÇotÜoaded\n");

789 
DIR_IN
 | 
PROTO_LAYER2
:

795 i‡(
m
->
m_Àn
 < 
ETHER_HDR_LEN
 &&

796 (
m
 = 
	`m_puŒup
(m, 
ETHER_HDR_LEN
)Ë=
NULL
) {

797 
	`¥ötf
("dummynet/ether:Öullup failed, "

801 
	`ëhî_demux
(
m
->
m_pkthdr
.
rcvif
, m);

804 
DIR_OUT
 | 
PROTO_LAYER2
:

805 
	`ëhî_ouçut_‰ame
(
iÂ
, 
m
);

808 
DIR_DROP
:

810 
	`FREE_PKT
(
m
);

814 
	`¥ötf
("dummy√t: bad swôch %d!\n", 
d°
);

815 
	`FREE_PKT
(
m
);

819 
	}
}

821 
ölöe
 

822 
	$èg_mbuf
(
mbuf
 *
m
, 
dú
, 
ù_fw_¨gs
 *
fwa
)

824 
dn_pkt_èg
 *
dt
;

825 
m_èg
 *
mèg
;

827 
mèg
 = 
	`m_èg_gë
(
PACKET_TAG_DUMMYNET
,

828 (*
dt
), 
M_NOWAIT
 | 
M_ZERO
);

829 i‡(
mèg
 =
NULL
)

831 
	`m_èg_¥ïíd
(
m
, 
mèg
);

832 
dt
 = (
dn_pkt_èg
 *)(
mèg
 + 1);

833 
dt
->
ruÀ
 = 
fwa
->rule;

834 
dt
->
ruÀ
.
öfo
 &
IPFW_ONEPASS
;

835 
dt
->
dn_dú
 = 
dú
;

836 
dt
->
iÂ
 = 
fwa
->
oif
;

838 
dt
->
ouçut_time
 = 
dn_cfg
.
cuº_time
;

840 
	}
}

855 
	$dummy√t_io
(
mbuf
 **
m0
, 
dú
, 
ù_fw_¨gs
 *
fwa
)

857 
mbuf
 *
m
 = *
m0
;

858 
dn_fsk
 *
fs
 = 
NULL
;

859 
dn_sch_ö°
 *
si
;

860 
dn_queue
 *
q
 = 
NULL
;

862 
fs_id
 = (
fwa
->
ruÀ
.
öfo
 & 
IPFW_INFO_MASK
) +

863 ((
fwa
->
ruÀ
.
öfo
 & 
IPFW_IS_PIPE
Ë? 2*
DN_MAX_ID
 : 0);

864 
	`DN_BH_WLOCK
();

865 
io_pkt
++;

867 i‡(
	`èg_mbuf
(
m
, 
dú
, 
fwa
))

868 
dr›ô
;

869 i‡(
dn_cfg
.
busy
) {

873 
	`mq_≠≥nd
(&
dn_cfg
.
≥ndög
, 
m
);

874 
m
 = *
m0
 = 
NULL
;

875 
d⁄e
;

878 
fs
 = 
	`dn_ht_föd
(
dn_cfg
.
fshash
, 
fs_id
, 0, 
NULL
);

879 i‡(
fs
 =
NULL
)

880 
dr›ô
;

881 i‡(
fs
->
sched
 =
NULL
)

882 
dr›ô
;

887 i‡(
fs
->
sched
->
Â
->
Êags
 & 
DN_MULTIQUEUE
) {

888 
q
 = 
	`ùdn_q_föd
(
fs
, &(
fwa
->
f_id
));

889 i‡(
q
 =
NULL
)

890 
dr›ô
;

895 
si
 = 
q
->
_si
;

897 
si
 = 
	`ùdn_si_föd
(
fs
->
sched
, &(
fwa
->
f_id
));

899 i‡(
si
 =
NULL
)

900 
dr›ô
;

901 i‡(
fs
->
sched
->
Â
->
	`íqueue
(
si
, 
q
, 
m
)) {

903 
m
 = *
m0
 = 
NULL
;

904 
dr›ô
;

907 i‡(
si
->
kÊags
 & 
DN_ACTIVE
) {

908 
m
 = *
m0
 = 
NULL
;

909 
d⁄e
;

913 i‡(
si
->
idÀ_time
 < 
dn_cfg
.
cuº_time
) {

915 
dn_lök
 *
p
 = &
fs
->
sched
->
lök
;

917 
si
->
sched_time
 = 
dn_cfg
.
cuº_time
;

918 
si
->
¸edô
 = 
dn_cfg
.
io_Á°
 ? 
p
->
b™dwidth
 : 0;

919 i‡(
p
->
bur°
) {

920 
uöt64_t
 
bur°
 = (
dn_cfg
.
cuº_time
 - 
si
->
idÀ_time
Ë* 
p
->
b™dwidth
;

921 i‡(
bur°
 > 
p
->burst)

922 
bur°
 = 
p
->burst;

923 
si
->
¸edô
 +
bur°
;

927 
m
 = 
	`£rve_sched
(
NULL
, 
si
, 
dn_cfg
.
cuº_time
);

934 i‡–
m
 =*
m0
 && (
dú
 & 
PROTO_LAYER2
) == 0 ) {

936 
m_èg
 *
èg
 = 
	`m_èg_fú°
(
m
);

938 
èg
->
m_èg_cookõ
 = 
MTAG_IPFW_RULE
;

939 
èg
->
m_èg_id
 = 0;

940 
io_pkt_Á°
++;

941 i‡(
m
->
m_√xçkt
 !
NULL
) {

942 
	`¥ötf
("dummynet: fast io:Ökt chain detected!\n");

943 
m
->
m_√xçkt
 = 
NULL
;

945 
m
 = 
NULL
;

947 *
m0
 = 
NULL
;

949 
d⁄e
:

950 
	`DN_BH_WUNLOCK
();

951 i‡(
m
)

952 
	`dummy√t_£nd
(
m
);

955 
dr›ô
:

956 
io_pkt_dr›
++;

957 
	`DN_BH_WUNLOCK
();

958 i‡(
m
)

959 
	`FREE_PKT
(
m
);

960 *
m0
 = 
NULL
;

961  (
fs
 && (fs->fs.
Êags
 & 
DN_NOERROR
)Ë? 0 : 
ENOBUFS
;

962 
	}
}

	@sys/netinet/ipfw/ip_dn_private.h

33 #i‚de‡
_IP_DN_PRIVATE_H


34 
	#_IP_DN_PRIVATE_H


	)

41 #i‚de‡
D


42 
	#ND
(
fmt
, ...Ëdÿ{} 0)

	)

43 
	#D1
(
fmt
, ...Ëdÿ{} 0)

	)

44 
	#D
(
fmt
, ...Ë
	`¥ötf
("%-10s " fmt "\n", \

45 
__FUNCTION__
, ## 
__VA_ARGS__
)

	)

46 
	#DX
(
Àv
, 
fmt
, ...) do { \

47 i‡(
dn_cfg
.
debug
 > 
Àv
Ë
	`D
(
fmt
, ## 
__VA_ARGS__
); } 0)

	)

50 
MALLOC_DECLARE
(
M_DUMMYNET
);

52 #i‚de‡
__löux__


53 
	#div64
(
a
, 
b
Ë((
öt64_t
)◊Ë/ (öt64_t)(b))

	)

56 
	#DN_LOCK_INIT
() do { \

57 
	`mtx_öô
(&
dn_cfg
.
uh_mtx
, "dn_uh", 
NULL
, 
MTX_DEF
); \

58 
	`mtx_öô
(&
dn_cfg
.
bh_mtx
, "dn_bh", 
NULL
, 
MTX_DEF
); \

59 } 0)

	)

60 
	#DN_LOCK_DESTROY
() do { \

61 
	`mtx_de°roy
(&
dn_cfg
.
uh_mtx
); \

62 
	`mtx_de°roy
(&
dn_cfg
.
bh_mtx
); \

63 } 0)

	)

65 
	#DN_UH_RLOCK
(Ë
	`mtx_lock
(&
dn_cfg
.
uh_mtx
)

	)

66 
	#DN_UH_RUNLOCK
(Ë
	`mtx_u∆ock
(&
dn_cfg
.
uh_mtx
)

	)

67 
	#DN_UH_WLOCK
(Ë
	`mtx_lock
(&
dn_cfg
.
uh_mtx
)

	)

68 
	#DN_UH_WUNLOCK
(Ë
	`mtx_u∆ock
(&
dn_cfg
.
uh_mtx
)

	)

69 
	#DN_UH_LOCK_ASSERT
(Ë
	`mtx_as£π
(&
dn_cfg
.
uh_mtx
, 
MA_OWNED
)

	)

72 
	#DN_BH_RLOCK
(Ë
	`mtx_lock
(&
dn_cfg
.
uh_mtx
)

	)

73 
	#DN_BH_RUNLOCK
(Ë
	`mtx_u∆ock
(&
dn_cfg
.
uh_mtx
)

	)

74 
	#DN_BH_WLOCK
(Ë
	`mtx_lock
(&
dn_cfg
.
uh_mtx
)

	)

75 
	#DN_BH_WUNLOCK
(Ë
	`mtx_u∆ock
(&
dn_cfg
.
uh_mtx
)

	)

76 
	#DN_BH_LOCK_ASSERT
(Ë
	`mtx_as£π
(&
dn_cfg
.
uh_mtx
, 
MA_OWNED
)

	)

78 
SLIST_HEAD
(
dn_schk_hód
, 
dn_schk
);

79 
SLIST_HEAD
(
dn_sch_ö°_hód
, 
dn_sch_ö°
);

80 
SLIST_HEAD
(
dn_fsk_hód
, 
dn_fsk
);

81 
SLIST_HEAD
(
dn_queue_hód
, 
dn_queue
);

82 
SLIST_HEAD
(
dn_Æg_hód
, 
dn_Æg
);

84 
	smq
 {

85 
mbuf
 *
	mhód
, *
	mèû
;

88 
ölöe
 

89 
	$£t_oid
(
dn_id
 *
o
, 
ty≥
, 
Àn
)

91 
o
->
ty≥
 =Åype;

92 
o
->
Àn
 =Üen;

93 
o
->
subty≥
 = 0;

94 
	}
};

96 
uöt64_t
 
ªadTSC
 ();

104 #i‡
deföed
(
rdts˛l
Ë|| deföed(
rdtsc
Ë|| deföed(
_WIN32
)

105 
	#HAVE_TSC


	)

113 
	sdn_∑rms
 {

114 
uöt32_t
 
	mid
;

117 
	mªd_lookup_dïth
;

118 
	mªd_avg_pkt_size
;

119 
	mªd_max_pkt_size
;

120 
	mhash_size
;

121 
	mmax_hash_size
;

122 
	mbyã_limô
;

123 
	m¶Ÿ_limô
;

125 
	mio_Á°
;

126 
	mdebug
;

129 
timevÆ
 
	m¥ev_t
;

130 
dn_hóp
 
	mevhóp
;

133 
	mschk_cou¡
;

134 
	msi_cou¡
;

135 
	mfsk_cou¡
;

136 
	mqueue_cou¡
;

139 
uöt64_t
 
	mcuº_time
;

148 
	mdøö_øtio
;

149 
uöt64_t
 
	mcy˛e_èsk_√w
;

150 
uöt64_t
 
	mcy˛e_èsk_ﬁd
;

151 
uöt64_t
 
	mcy˛e_èsk
;

152 
uöt64_t
 
	mcy˛e_èsk_avg
;

158 
dn_ht
 *
	mfshash
;

159 
dn_ht
 *
	mschedhash
;

161 
dn_fsk_hód
 
	mfsu
;

162 
dn_Æg_hód
 
	mschedli°
;

173 
	midÀ_queue
;

174 
	midÀ_queue_waô
;

175 
	midÀ_si
;

176 
	midÀ_si_waô
;

177 
uöt32_t
 
	mexpúe_obje˘
;

178 
uöt32_t
 
	mexpúe
;

179 
uöt32_t
 
	mexpúe_cy˛e
;

180 
uöt32_t
 
	mobje˘_idÀ_tick
;

181 
uöt32_t
 
	mexpúe_obje˘_examöed
;

186 
uöt32_t
 
	mdøö_fs
;

187 
uöt32_t
 
	mdøö_sch
;

189 
	möô_d⁄e
;

195 
	mbusy
;

196 
mq
 
	m≥ndög
;

198 #ifde‡
_KERNEL


208 #i‡
deföed
–
__löux__
 ) || deföed–
_WIN32
 )

209 
•ölock_t
 
	muh_mtx
;

210 
•ölock_t
 
	mbh_mtx
;

212 
mtx
 
	muh_mtx
;

213 
mtx
 
	mbh_mtx
;

223 
	sdñay_löe
 {

224 
dn_id
 
	moid
;

225 
dn_sch_ö°
 *
	msi
;

226 
mq
 
	mmq
;

240 
	sdn_fsk
 {

241 
dn_fs
 
	mfs
;

242 
SLIST_ENTRY
(
dn_fsk
Ë
	mfsk_√xt
;

244 
ùfw_Êow_id
 
	mfsk_mask
;

249 
dn_ht
 *
	mqht
;

250 
dn_schk
 *
	msched
;

251 
SLIST_ENTRY
(
dn_fsk
Ë
	msch_chaö
;

256 
	mdøö_buckë
;

259 
	mw_q
 ;

260 
	mmax_th
 ;

261 
	mmö_th
 ;

262 
	mmax_p
 ;

264 
u_öt
 
	mc_1
 ;

265 
u_öt
 
	mc_2
 ;

266 
u_öt
 
	mc_3
 ;

267 
u_öt
 
	mc_4
 ;

268 
u_öt
 * 
	mw_q_lookup
 ;

269 
u_öt
 
	mlookup_dïth
 ;

270 
	mlookup_°ï
 ;

271 
	mlookup_weight
 ;

272 
	mavg_pkt_size
 ;

273 
	mmax_pkt_size
 ;

284 
	sdn_queue
 {

285 
dn_Êow
 
	mni
;

286 
mq
 
	mmq
;

287 
dn_sch_ö°
 *
	m_si
;

288 
SLIST_ENTRY
(
dn_queue
Ë
	mq_√xt
;

289 
dn_fsk
 *
	mfs
;

292 
	mavg
;

293 
	mcou¡
;

294 
	møndom
;

295 
uöt64_t
 
	mq_time
;

307 
	sdn_schk
 {

308 
dn_sch
 
	msch
;

309 
dn_Æg
 *
	mÂ
;

310 
dn_lök
 
	mlök
;

311 
dn_¥ofûe
 *
	m¥ofûe
;

312 
dn_id
 *
	mcfg
;

314 
SLIST_ENTRY
(
dn_schk
Ë
	mschk_√xt
;

316 
dn_fsk_hód
 
	mfsk_li°
;

317 
dn_fsk
 *
	mfs
;

322 
	mdøö_buckë
;

327 
dn_ht
 *
	msiht
;

336 
	sdn_sch_ö°
 {

337 
dn_Êow
 
	mni
;

338 
SLIST_ENTRY
(
dn_sch_ö°
Ë
	msi_√xt
;

339 
dñay_löe
 
	mdlöe
;

340 
dn_schk
 *
	msched
;

341 
	mkÊags
;

343 
öt64_t
 
	m¸edô
;

344 
uöt64_t
 
	msched_time
;

345 
uöt64_t
 
	midÀ_time
;

353 
	mq_cou¡
;

362 
	mDN_DESTROY
 = 0x0004,

363 
	mDN_DELETE_FS
 = 0x0008,

364 
	mDN_DETACH
 = 0x0010,

365 
	mDN_ACTIVE
 = 0x0020,

366 
	mDN_F_DLINE
 = 0x0040,

367 
	mDN_DEL_SAFE
 = 0x0080,

369 
	mDN_QHT_IS_Q
 = 0x0100,

372 
dn_∑rms
 
dn_cfg
;

376 
dummy√t_io
(
mbuf
 **, , 
ù_fw_¨gs
 *);

377 
dummy√t_èsk
(*
c⁄ãxt
, 
≥ndög
);

378 
dn_ªscheduÀ
();

380 
dn_queue
 *
ùdn_q_föd
(
dn_fsk
 *, 
ùfw_Êow_id
 *);

381 
dn_sch_ö°
 *
ùdn_si_föd
(
dn_schk
 *, 
ùfw_Êow_id
 *);

389 
	#DEFAULT_RANGES
 5

	)

390 
	sc›y_ønge
 {

391 
dn_id
 
	mo
;

392 
uöt32_t
 
	mr
[ 2 * 
DEFAULT_RANGES
 ];

395 
	sc›y_¨gs
 {

396 **
	m°¨t
;

397 *
	míd
;

398 
	mÊags
;

399 
	mty≥
;

400 
c›y_ønge
 *
	mexåa
;

403 
	gsock›t
;

404 
ù_dummy√t_com∑t
(
sock›t
 *
s›t
);

405 
dummy√t_gë
(
sock›t
 *
s›t
, **
com∑t
);

406 
dn_c_c›y_q
 (*
_ni
, *
¨g
);

407 
dn_c_c›y_pùe
(
dn_schk
 *
s
, 
c›y_¨gs
 *
a
, 
nq
);

408 
dn_c_c›y_fs
(
dn_fsk
 *
f
, 
c›y_¨gs
 *
a
, 
nq
);

409 
dn_com∑t_c›y_queue
(
c›y_¨gs
 *
a
, *
_o
);

410 
dn_com∑t_c›y_pùe
(
c›y_¨gs
 *
a
, *
_o
);

411 
c›y_d©a_hñ≥r_com∑t
(*
_o
, *
_¨g
);

412 
dn_com∑t_ˇlc_size
();

413 
do_c⁄fig
(*
p
, 
l
);

416 
dn_døö_scheduÀr
();

417 
dn_døö_queue
();

	@sys/netinet/ipfw/ip_dummynet.c

28 
	~<sys/cdefs.h
>

29 
__FBSDID
("$FreeBSD: user/luigi/ipfw3-head/sys/netinet/ipfw/ip_dummynet.c 203340 2010-02-01 12:06:37ZÜuigi $");

35 
	~"›t_öë6.h
"

37 
	~<sys/∑øm.h
>

38 
	~<sys/sy°m.h
>

39 
	~<sys/mÆloc.h
>

40 
	~<sys/mbuf.h
>

41 
	~<sys/kî√l.h
>

42 
	~<sys/lock.h
>

43 
	~<sys/moduÀ.h
>

44 
	~<sys/¥iv.h
>

45 
	~<sys/¥oc.h
>

46 
	~<sys/rwlock.h
>

47 
	~<sys/sockë.h
>

48 
	~<sys/sockëv¨.h
>

49 
	~<sys/time.h
>

50 
	~<sys/èskqueue.h
>

51 
	~<√t/if.h
>

52 
	~<√töë/ö.h
>

53 
	~<√töë/ù_v¨.h
>

54 
	~<√töë/ù_fw.h
>

55 
	~<√töë/ùfw/ù_fw_¥iv©e.h
>

56 
	~<√töë/ùfw/dn_hóp.h
>

57 
	~<√töë/ù_dummy√t.h
>

58 
	~<√töë/ùfw/ù_dn_¥iv©e.h
>

59 
	~<√töë/ùfw/dn_sched.h
>

62 
	#DN_C_LINK
 0x01

	)

63 
	#DN_C_SCH
 0x02

	)

64 
	#DN_C_FLOW
 0x04

	)

65 
	#DN_C_FS
 0x08

	)

66 
	#DN_C_QUEUE
 0x10

	)

69 
	sschk_√w_¨g
 {

70 
dn_Æg
 *
	mÂ
;

71 
dn_sch
 *
	msch
;

75 
ˇŒout
 
	gdn_timeout
;

76 
èsk
 
	gdn_èsk
;

77 
èskqueue
 *
	gdn_tq
 = 
NULL
;

81 
	$dummy√t
(* 
¨g
)

84 ()
¨g
;

85 
	`èskqueue_íqueue
(
dn_tq
, &
dn_èsk
);

86 
	}
}

89 
	$dn_ªscheduÀ
()

91 
	`ˇŒout_ª£t_⁄
(&
dn_timeout
, 1, 
dummy√t
, 
NULL
, 0);

92 
	}
}

96 
dn_Æg
 *

97 
	$föd_sched_ty≥
(
ty≥
, *
«me
)

99 
dn_Æg
 *
d
;

101 
	`SLIST_FOREACH
(
d
, &
dn_cfg
.
schedli°
, 
√xt
) {

102 i‡(
d
->
ty≥
 =ty≥ || (
«me
 && !
	`°rcmp
(d->name,Çame)))

103  
d
;

105  
NULL
;

106 
	}
}

109 
	$ùdn_bound_v¨
(*
v
, 
dÊt
, 
lo
, 
hi
, c⁄° *
msg
)

111 
ﬁdv
 = *
v
;

112 c⁄° *
›
 = 
NULL
;

113 i‡(
ﬁdv
 < 
lo
) {

114 *
v
 = 
dÊt
;

115 
›
 = "Bump";

116 } i‡(
ﬁdv
 > 
hi
) {

117 *
v
 = 
hi
;

118 
›
 = "Clamp";

120  *
v
;

121 i‡(
›
 && 
msg
)

122 
	`¥ötf
("%†%†tÿ%d (wa†%d)\n", 
›
, 
msg
, *
v
, 
ﬁdv
);

123  *
v
;

124 
	}
}

133 
ùfw_Êow_id
 *

134 
	$Êow_id_mask
(
ùfw_Êow_id
 *
mask
, ùfw_Êow_id *
id
)

136 
is_v6
 = 
	`IS_IP6_FLOW_ID
(
id
);

138 
id
->
d°_p‹t
 &
mask
->dst_port;

139 
id
->
§c_p‹t
 &
mask
->src_port;

140 
id
->
¥Ÿo
 &
mask
->proto;

141 
id
->
exåa
 &
mask
->extra;

142 i‡(
is_v6
) {

143 
	`APPLY_MASK
(&
id
->
d°_ù6
, &
mask
->dst_ip6);

144 
	`APPLY_MASK
(&
id
->
§c_ù6
, &
mask
->src_ip6);

145 
id
->
Êow_id6
 &
mask
->flow_id6;

147 
id
->
d°_ù
 &
mask
->dst_ip;

148 
id
->
§c_ù
 &
mask
->src_ip;

150  
id
;

151 
	}
}

154 
ùfw_Êow_id
 *

155 
	$Êow_id_‹
(
ùfw_Êow_id
 *
§c
, ùfw_Êow_id *
d°
)

157 
is_v6
 = 
	`IS_IP6_FLOW_ID
(
d°
);

159 
d°
->
d°_p‹t
 |
§c
->dst_port;

160 
d°
->
§c_p‹t
 |
§c
->src_port;

161 
d°
->
¥Ÿo
 |
§c
->proto;

162 
d°
->
exåa
 |
§c
->extra;

163 i‡(
is_v6
) {

164 
	#OR_MASK
(
_d
, 
_s
) \

165 (
_d
)->
__u6_addr
.
__u6_addr32
[0] |(
_s
)->__u6_addr.__u6_addr32[0]; \

166 (
_d
)->
__u6_addr
.
__u6_addr32
[1] |(
_s
)->__u6_addr.__u6_addr32[1]; \

167 (
_d
)->
__u6_addr
.
__u6_addr32
[2] |(
_s
)->__u6_addr.__u6_addr32[2]; \

168 (
_d
)->
__u6_addr
.
__u6_addr32
[3] |(
_s
)->__u6_addr.__u6_addr32[3];

	)

169 
	`OR_MASK
(&
d°
->
d°_ù6
, &
§c
->dst_ip6);

170 
	`OR_MASK
(&
d°
->
§c_ù6
, &
§c
->src_ip6);

171 #unde‡
OR_MASK


172 
d°
->
Êow_id6
 |
§c
->flow_id6;

174 
d°
->
d°_ù
 |
§c
->dst_ip;

175 
d°
->
§c_ù
 |
§c
->src_ip;

177  
d°
;

178 
	}
}

181 
	$n⁄zîo_mask
(
ùfw_Êow_id
 *
m
)

183 i‡(
m
->
d°_p‹t
 || m->
§c_p‹t
 || m->
¥Ÿo
 || m->
exåa
)

185 i‡(
	`IS_IP6_FLOW_ID
(
m
)) {

187 
m
->
d°_ù6
.
__u6_addr
.
__u6_addr32
[0] ||

188 
m
->
d°_ù6
.
__u6_addr
.
__u6_addr32
[1] ||

189 
m
->
d°_ù6
.
__u6_addr
.
__u6_addr32
[2] ||

190 
m
->
d°_ù6
.
__u6_addr
.
__u6_addr32
[3] ||

191 
m
->
§c_ù6
.
__u6_addr
.
__u6_addr32
[0] ||

192 
m
->
§c_ù6
.
__u6_addr
.
__u6_addr32
[1] ||

193 
m
->
§c_ù6
.
__u6_addr
.
__u6_addr32
[2] ||

194 
m
->
§c_ù6
.
__u6_addr
.
__u6_addr32
[3] ||

195 
m
->
Êow_id6
;

197  
m
->
d°_ù
 || m->
§c_ù
;

199 
	}
}

202 
uöt32_t


203 
	$Êow_id_hash
(
ùfw_Êow_id
 *
id
)

205 
uöt32_t
 
i
;

207 i‡(
	`IS_IP6_FLOW_ID
(
id
)) {

208 
uöt32_t
 *
d
 = (uöt32_à*)&
id
->
d°_ù6
;

209 
uöt32_t
 *
s
 = (uöt32_à*)&
id
->
§c_ù6
;

210 
i
 = (
d
[0] ) ^ (d[1]) ^

211 (
d
[2] ) ^ (d[3]) ^

212 (
d
[0] >> 15) ^ (d[1] >> 15) ^

213 (
d
[2] >> 15) ^ (d[3] >> 15) ^

214 (
s
[0] << 1) ^ (s[1] << 1) ^

215 (
s
[2] << 1) ^ (s[3] << 1) ^

216 (
s
[0] << 16) ^ (s[1] << 16) ^

217 (
s
[2] << 16) ^ (s[3] << 16) ^

218 (
id
->
d°_p‹t
 << 1Ë^ (id->
§c_p‹t
) ^

219 (
id
->
exåa
) ^

220 (
id
->
¥Ÿo
 ) ^ (id->
Êow_id6
);

222 
i
 = (
id
->
d°_ù
) ^ (id->dst_ip >> 15) ^

223 (
id
->
§c_ù
 << 1) ^ (id->src_ip >> 16) ^

224 (
id
->
exåa
) ^

225 (
id
->
d°_p‹t
 << 1Ë^ (id->
§c_p‹t
Ë^ (id->
¥Ÿo
);

227  
i
;

228 
	}
}

232 
	$Êow_id_cmp
(
ùfw_Êow_id
 *
id1
, ùfw_Êow_id *
id2
)

234 
is_v6
 = 
	`IS_IP6_FLOW_ID
(
id1
);

236 i‡(!
is_v6
) {

237 i‡(
	`IS_IP6_FLOW_ID
(
id2
))

240  (
id1
->
d°_ù
 =
id2
->dst_ip &&

241 
id1
->
§c_ù
 =
id2
->src_ip &&

242 
id1
->
d°_p‹t
 =
id2
->dst_port &&

243 
id1
->
§c_p‹t
 =
id2
->src_port &&

244 
id1
->
¥Ÿo
 =
id2
->proto &&

245 
id1
->
exåa
 =
id2
->extra) ? 0 : 1;

249 !
	`bcmp
(&
id1
->
d°_ù6
,&
id2
->dst_ip6, (id1->dst_ip6)) &&

250 !
	`bcmp
(&
id1
->
§c_ù6
,&
id2
->src_ip6, (id1->src_ip6)) &&

251 
id1
->
d°_p‹t
 =
id2
->dst_port &&

252 
id1
->
§c_p‹t
 =
id2
->src_port &&

253 
id1
->
¥Ÿo
 =
id2
->proto &&

254 
id1
->
exåa
 =
id2
->extra &&

255 
id1
->
Êow_id6
 =
id2
->flow_id6) ? 0 : 1;

256 
	}
}

262 
uöt32_t


263 
	$q_hash
(
uöçå_t
 
key
, 
Êags
, *
¨g
)

266 
ùfw_Êow_id
 *
id
 = (
Êags
 & 
DNHT_KEY_IS_OBJ
) ?

267 &((
dn_queue
 *)
key
)->
ni
.
fid
 :

268 (
ùfw_Êow_id
 *)
key
;

270  
	`Êow_id_hash
(
id
);

271 
	}
}

274 
	$q_m©ch
(*
obj
, 
uöçå_t
 
key
, 
Êags
, *
¨g
)

276 
dn_queue
 *
o
 = (dn_queuê*)
obj
;

277 
ùfw_Êow_id
 *
id2
;

279 i‡(
Êags
 & 
DNHT_KEY_IS_OBJ
) {

281 
id2
 = &((
dn_queue
 *)
key
)->
ni
.
fid
;

283 
id2
 = (
ùfw_Êow_id
 *)
key
;

285  (0 =
	`Êow_id_cmp
(&
o
->
ni
.
fid
, 
id2
));

286 
	}
}

292 
	$q_√w
(
uöçå_t
 
key
, 
Êags
, *
¨g
)

294 
dn_queue
 *
q
, *
ãm∂©e
 = 
¨g
;

295 
dn_fsk
 *
fs
 = 
ãm∂©e
->fs;

296 
size
 = (*
q
Ë+ 
fs
->
sched
->
Â
->
q_d©Æí
;

298 
q
 = 
	`mÆloc
(
size
, 
M_DUMMYNET
, 
M_NOWAIT
 | 
M_ZERO
);

299 i‡(
q
 =
NULL
) {

300 
	`D
("no memory forÇew queue");

301  
NULL
;

304 
	`£t_oid
(&
q
->
ni
.
oid
, 
DN_QUEUE
, 
size
);

305 i‡(
fs
->fs.
Êags
 & 
DN_QHT_HASH
)

306 
q
->
ni
.
fid
 = *(
ùfw_Êow_id
 *)
key
;

307 
q
->
fs
 = fs;

308 
q
->
_si
 = 
	`ùdn_si_föd
(q->
fs
->
sched
, &(
ãm∂©e
->
ni
.
fid
));

309 i‡(
q
->
_si
 =
NULL
) {

310 
	`D
("no memory forÇew si");

311 
	`‰ì
 (
q
, 
M_DUMMYNET
);

312  
NULL
;

315 
q
->
_si
->
q_cou¡
++;

317 i‡(
fs
->
sched
->
Â
->
√w_queue
)

318 
fs
->
sched
->
Â
->
	`√w_queue
(
q
);

319 
dn_cfg
.
queue_cou¡
++;

320 
dn_cfg
.
idÀ_queue
++;

321  
q
;

322 
	}
}

335 
	$dn_dñëe_queue
(
dn_queue
 *
q
, 
Êags
)

337 
dn_fsk
 *
fs
 = 
q
->fs;

341 i‡(
fs
 && fs->
sched
->
Â
->
‰ì_queue
)

342 i‡(
fs
->
sched
->
Â
->
	`‰ì_queue
(
q
, 
Êags
 & 
DN_DEL_SAFE
) == 1)

344 
q
->
_si
->
q_cou¡
--;

345 
q
->
_si
 = 
NULL
;

346 i‡(
Êags
 & 
DN_DESTROY
) {

347 i‡(
q
->
mq
.
hód
)

348 
	`dn_‰ì_pkts
(
q
->
mq
.
hód
);

350 
dn_cfg
.
idÀ_queue
--;

351 
	`bzîo
(
q
, (*q));

352 
	`‰ì
(
q
, 
M_DUMMYNET
);

353 
dn_cfg
.
queue_cou¡
--;

356 
	}
}

359 
	$q_dñëe_cb
(*
q
, *
¨g
)

361 
Êags
 = ()(
uöçå_t
)
¨g
;

362 
	`dn_dñëe_queue
(
q
, 
Êags
);

363  (
Êags
 & 
DN_DESTROY
Ë? 
DNHT_SCAN_DEL
 : 0;

364 
	}
}

372 
	$qht_dñëe
(
dn_fsk
 *
fs
, 
Êags
)

374 
	`ND
("fs %d start flags %d qht %p",

375 
fs
->fs.
fs_ƒ
, 
Êags
, fs->
qht
);

376 i‡(!
fs
->
qht
)

378 i‡(
fs
->fs.
Êags
 & 
DN_QHT_HASH
) {

379 
	`dn_ht_sˇn
(
fs
->
qht
, 
q_dñëe_cb
, (*)(
uöçå_t
)
Êags
);

380 i‡(
Êags
 & 
DN_DESTROY
) {

381 
	`dn_ht_‰ì
(
fs
->
qht
, 0);

382 
fs
->
qht
 = 
NULL
;

385 
	`dn_dñëe_queue
((
dn_queue
 *)(
fs
->
qht
), 
Êags
);

386 i‡(
Êags
 & 
DN_DESTROY
)

387 
fs
->
qht
 = 
NULL
;

389 
	}
}

395 
dn_queue
 *

396 
	$ùdn_q_föd
(
dn_fsk
 *
fs
, 
ùfw_Êow_id
 *
id
)

398 
dn_queue
 
ãm∂©e
;

400 
ãm∂©e
.
fs
 = fs;

402 i‡(
fs
->fs.
Êags
 & 
DN_QHT_HASH
) {

403 
ùfw_Êow_id
 
masked_id
;

404 i‡(
fs
->
qht
 =
NULL
) {

405 
fs
->
qht
 = 
	`dn_ht_öô
(
NULL
, fs->fs.
buckës
,

406 
	`off£tof
(
dn_queue
, 
q_√xt
),

407 
q_hash
, 
q_m©ch
, 
q_√w
);

408 i‡(
fs
->
qht
 =
NULL
)

409  
NULL
;

411 
masked_id
 = *
id
;

412 
	`Êow_id_mask
(&
fs
->
fsk_mask
, &
masked_id
);

413  
	`dn_ht_föd
(
fs
->
qht
, (
uöçå_t
)&
masked_id
,

414 
DNHT_INSERT
, &
ãm∂©e
);

416 i‡(
fs
->
qht
 =
NULL
)

417 
fs
->
qht
 = 
	`q_√w
(0, 0, &
ãm∂©e
);

418  (
dn_queue
 *)
fs
->
qht
;

420 
	}
}

427 
uöt32_t


428 
	$si_hash
(
uöçå_t
 
key
, 
Êags
, *
¨g
)

431 
ùfw_Êow_id
 *
id
 = (
Êags
 & 
DNHT_KEY_IS_OBJ
) ?

432 &((
dn_sch_ö°
 *)
key
)->
ni
.
fid
 :

433 (
ùfw_Êow_id
 *)
key
;

435  
	`Êow_id_hash
(
id
);

436 
	}
}

439 
	$si_m©ch
(*
obj
, 
uöçå_t
 
key
, 
Êags
, *
¨g
)

441 
dn_sch_ö°
 *
o
 = 
obj
;

442 
ùfw_Êow_id
 *
id2
;

444 
id2
 = (
Êags
 & 
DNHT_KEY_IS_OBJ
) ?

445 &((
dn_sch_ö°
 *)
key
)->
ni
.
fid
 :

446 (
ùfw_Êow_id
 *)
key
;

447  
	`Êow_id_cmp
(&
o
->
ni
.
fid
, 
id2
) == 0;

448 
	}
}

450 
si_ª£t_¸edô
(*
_si
, *
¨g
);

457 
	$si_√w
(
uöçå_t
 
key
, 
Êags
, *
¨g
)

459 
dn_schk
 *
s
 = 
¨g
;

460 
dn_sch_ö°
 *
si
;

461 
l
 = (*
si
Ë+ 
s
->
Â
->
si_d©Æí
;

463 
si
 = 
	`mÆloc
(
l
, 
M_DUMMYNET
, 
M_NOWAIT
 | 
M_ZERO
);

464 i‡(
si
 =
NULL
)

465 
îr‹
;

468 
	`£t_oid
(&
si
->
ni
.
oid
, 
DN_SCH_I
, (
dn_Êow
));

469 
	`£t_oid
(&(
si
->
dlöe
.
oid
), 
DN_DELAY_LINE
,

470 (
dñay_löe
));

472 
si
->
ni
.
oid
.
id
 = si->
dlöe
.oid.id = -1;

474 
si
->
sched
 = 
s
;

475 
si
->
dlöe
.si = si;

477 i‡(
s
->
Â
->
√w_sched
 && s->Â->
	`√w_sched
(
si
)) {

478 
	`D
("new_schedÉrror");

479 
îr‹
;

481 i‡(
s
->
sch
.
Êags
 & 
DN_HAVE_MASK
)

482 
si
->
ni
.
fid
 = *(
ùfw_Êow_id
 *)
key
;

484 
	`si_ª£t_¸edô
(
si
, 
NULL
);

485 
dn_cfg
.
si_cou¡
++;

486 
dn_cfg
.
idÀ_si
++;

487  
si
;

489 
îr‹
:

490 i‡(
si
) {

491 
	`bzîo
(
si
, (*si));

492 
	`‰ì
(
si
, 
M_DUMMYNET
);

494  
NULL
;

495 
	}
}

504 
	$si_de°roy
(*
_si
, *
¨g
)

506 
dn_sch_ö°
 *
si
 = 
_si
;

507 
dn_schk
 *
s
 = 
si
->
sched
;

508 
dñay_löe
 *
dl
 = &
si
->
dlöe
;

510 i‡(
dl
->
oid
.
subty≥
)

511 
	`hóp_exåa˘
(&
dn_cfg
.
evhóp
, 
dl
);

512 i‡(
si
->
ni
.
Àngth
 == 0)

513 
dn_cfg
.
idÀ_si
--;

514 
	`dn_‰ì_pkts
(
dl
->
mq
.
hód
);

515 i‡(
si
->
kÊags
 & 
DN_ACTIVE
)

516 
	`hóp_exåa˘
(&
dn_cfg
.
evhóp
, 
si
);

517 i‡(
s
->
Â
->
‰ì_sched
)

518 
s
->
Â
->
	`‰ì_sched
(
si
);

519 
	`bzîo
(
si
, (*si));

520 
	`‰ì
(
si
, 
M_DUMMYNET
);

521 
dn_cfg
.
si_cou¡
--;

522  
DNHT_SCAN_DEL
;

523 
	}
}

530 
dn_sch_ö°
 *

531 
	$ùdn_si_föd
(
dn_schk
 *
s
, 
ùfw_Êow_id
 *
id
)

534 i‡(
s
->
sch
.
Êags
 & 
DN_HAVE_MASK
) {

535 
ùfw_Êow_id
 
id_t
 = *
id
;

536 
	`Êow_id_mask
(&
s
->
sch
.
sched_mask
, &
id_t
);

537  
	`dn_ht_föd
(
s
->
siht
, (
uöçå_t
)&
id_t
,

538 
DNHT_INSERT
, 
s
);

540 i‡(!
s
->
siht
)

541 
s
->
siht
 = 
	`si_√w
(0, 0, s);

542  (
dn_sch_ö°
 *)
s
->
siht
;

543 
	}
}

547 
	$si_ª£t_¸edô
(*
_si
, *
¨g
)

549 
dn_sch_ö°
 *
si
 = 
_si
;

550 
dn_lök
 *
p
 = &
si
->
sched
->
lök
;

552 
si
->
idÀ_time
 = 
dn_cfg
.
cuº_time
;

553 
si
->
¸edô
 = 
p
->
bur°
 + (
dn_cfg
.
io_Á°
 ?Ö->
b™dwidth
 : 0);

555 
	}
}

558 
	$schk_ª£t_¸edô
(
dn_schk
 *
s
)

560 i‡(
s
->
sch
.
Êags
 & 
DN_HAVE_MASK
)

561 
	`dn_ht_sˇn
(
s
->
siht
, 
si_ª£t_¸edô
, 
NULL
);

562 i‡(
s
->
siht
)

563 
	`si_ª£t_¸edô
(
s
->
siht
, 
NULL
);

564 
	}
}

572 
uöt32_t


573 
	$fsk_hash
(
uöçå_t
 
key
, 
Êags
, *
¨g
)

575 
uöt32_t
 
i
 = !(
Êags
 & 
DNHT_KEY_IS_OBJ
Ë? 
key
 :

576 ((
dn_fsk
 *)
key
)->
fs
.
fs_ƒ
;

578  ( (
i
>>8)^(i>>4)^i );

579 
	}
}

582 
	$fsk_m©ch
(*
obj
, 
uöçå_t
 
key
, 
Êags
, *
¨g
)

584 
dn_fsk
 *
fs
 = 
obj
;

585 
i
 = !(
Êags
 & 
DNHT_KEY_IS_OBJ
Ë? 
key
 :

586 ((
dn_fsk
 *)
key
)->
fs
.
fs_ƒ
;

588  (
fs
->fs.
fs_ƒ
 =
i
);

589 
	}
}

592 
	$fsk_√w
(
uöçå_t
 
key
, 
Êags
, *
¨g
)

594 
dn_fsk
 *
fs
;

596 
fs
 = 
	`mÆloc
((*fs), 
M_DUMMYNET
, 
M_NOWAIT
 | 
M_ZERO
);

597 i‡(
fs
) {

598 
	`£t_oid
(&
fs
->fs.
oid
, 
DN_FS
, (fs->fs));

599 
dn_cfg
.
fsk_cou¡
++;

600 
fs
->
døö_buckë
 = 0;

601 
	`SLIST_INSERT_HEAD
(&
dn_cfg
.
fsu
, 
fs
, 
sch_chaö
);

603  
fs
;

604 
	}
}

613 
	$fsk_dëach
(
dn_fsk
 *
fs
, 
Êags
)

615 i‡(
Êags
 & 
DN_DELETE_FS
)

616 
Êags
 |
DN_DESTROY
;

617 
	`ND
("fs %d from sched %d flags %s %s %s",

618 
fs
->fs.
fs_ƒ
, fs->fs.
sched_ƒ
,

619 (
Êags
 & 
DN_DELETE_FS
) ? "DEL_FS":"",

620 (
Êags
 & 
DN_DESTROY
) ? "DEL":"",

621 (
Êags
 & 
DN_DETACH
) ? "DET":"");

622 i‡(
Êags
 & 
DN_DETACH
) {

623 
dn_fsk_hód
 *
h
;

624 
h
 = 
fs
->
sched
 ? &fs->sched->
fsk_li°
 : &
dn_cfg
.
fsu
;

625 
	`SLIST_REMOVE
(
h
, 
fs
, 
dn_fsk
, 
sch_chaö
);

630 i‡(
fs
->
w_q_lookup
)

631 
	`‰ì
(
fs
->
w_q_lookup
, 
M_DUMMYNET
);

632 
fs
->
w_q_lookup
 = 
NULL
;

633 
	`qht_dñëe
(
fs
, 
Êags
);

634 i‡(
fs
->
sched
 && fs->sched->
Â
->
‰ì_fsk
)

635 
fs
->
sched
->
Â
->
	`‰ì_fsk
(fs);

636 
fs
->
sched
 = 
NULL
;

637 i‡(
Êags
 & 
DN_DELETE_FS
) {

638 
	`bzîo
(
fs
, (fs));

639 
	`‰ì
(
fs
, 
M_DUMMYNET
);

640 
dn_cfg
.
fsk_cou¡
--;

642 
	`SLIST_INSERT_HEAD
(&
dn_cfg
.
fsu
, 
fs
, 
sch_chaö
);

644 
	}
}

654 
	$fsk_dëach_li°
(
dn_fsk_hód
 *
h
, 
Êags
)

656 
dn_fsk
 *
fs
;

657 
n
 = 0;

659 
	`ND
("hód %∞Êag†%x", 
h
, 
Êags
);

660 (
fs
 = 
	`SLIST_FIRST
(
h
))) {

661 
	`SLIST_REMOVE_HEAD
(
h
, 
sch_chaö
);

662 
n
++;

663 
	`fsk_dëach
(
fs
, 
Êags
);

665 
	`ND
("d⁄ê%d flow£ts", 
n
);

666 
	}
}

673 
	$dñëe_fs
(
i
, 
locked
)

675 
dn_fsk
 *
fs
;

676 
îr
 = 0;

678 i‡(!
locked
)

679 
	`DN_BH_WLOCK
();

680 
fs
 = 
	`dn_ht_föd
(
dn_cfg
.
fshash
, 
i
, 
DNHT_REMOVE
, 
NULL
);

681 i‡(
	`dn_ht_íåõs
(
dn_cfg
.
fshash
) == 0) {

682 
	`dn_ht_‰ì
(
dn_cfg
.
fshash
, 0);

683 
dn_cfg
.
fshash
 = 
NULL
;

685 
	`ND
("f†%d found %p", 
i
, 
fs
);

686 i‡(
fs
) {

687 
	`fsk_dëach
(
fs
, 
DN_DETACH
 | 
DN_DELETE_FS
);

688 
îr
 = 0;

690 
îr
 = 
EINVAL
;

691 i‡(!
locked
)

692 
	`DN_BH_WUNLOCK
();

693  
îr
;

694 
	}
}

704 
uöt32_t


705 
	$schk_hash
(
uöçå_t
 
key
, 
Êags
, *
_¨g
)

707 
uöt32_t
 
i
 = !(
Êags
 & 
DNHT_KEY_IS_OBJ
Ë? 
key
 :

708 ((
dn_schk
 *)
key
)->
sch
.
sched_ƒ
;

709  ( (
i
>>8)^(i>>4)^i );

710 
	}
}

713 
	$schk_m©ch
(*
obj
, 
uöçå_t
 
key
, 
Êags
, *
_¨g
)

715 
dn_schk
 *
s
 = (dn_schk *)
obj
;

716 
i
 = !(
Êags
 & 
DNHT_KEY_IS_OBJ
Ë? 
key
 :

717 ((
dn_schk
 *)
key
)->
sch
.
sched_ƒ
;

718  (
s
->
sch
.
sched_ƒ
 =
i
);

719 
	}
}

727 
	$schk_√w
(
uöçå_t
 
key
, 
Êags
, *
¨g
)

729 
schk_√w_¨g
 *
a
 = 
¨g
;

730 
dn_schk
 *
s
;

731 
l
 = (*
s
Ë+
a
->
Â
->
schk_d©Æí
;

733 
s
 = 
	`mÆloc
(
l
, 
M_DUMMYNET
, 
M_NOWAIT
 | 
M_ZERO
);

734 i‡(
s
 =
NULL
)

735  
NULL
;

736 
	`£t_oid
(&
s
->
lök
.
oid
, 
DN_LINK
, (s->link));

737 
s
->
sch
 = *
a
->sch;

738 
s
->
lök
.
lök_ƒ
 = s->
sch
.
sched_ƒ
;

739 
	`SLIST_INIT
(&
s
->
fsk_li°
);

741 
s
->
Â
 = 
a
->fp;

742 
s
->
døö_buckë
 = 0;

743 i‡(
s
->
sch
.
Êags
 & 
DN_HAVE_MASK
) {

744 
s
->
siht
 = 
	`dn_ht_öô
(
NULL
, s->
sch
.
buckës
,

745 
	`off£tof
(
dn_sch_ö°
, 
si_√xt
),

746 
si_hash
, 
si_m©ch
, 
si_√w
);

747 i‡(
s
->
siht
 =
NULL
) {

748 
	`‰ì
(
s
, 
M_DUMMYNET
);

749  
NULL
;

752 
s
->
Â
 = 
NULL
;

753 
dn_cfg
.
schk_cou¡
++;

754  
s
;

755 
	}
}

766 
	$schk_dñëe_cb
(*
obj
, *
¨g
)

768 
dn_schk
 *
s
 = 
obj
;

770 
a
 = ()
¨g
;

771 
	`ND
("sched %dárg %s%s",

772 
s
->
sch
.
sched_ƒ
,

773 
a
&
DN_DESTROY
 ? "DEL ":"",

774 
a
&
DN_DELETE_FS
 ? "DEL_FS":"");

776 
	`fsk_dëach_li°
(&
s
->
fsk_li°
, 
¨g
 ? 
DN_DESTROY
 : 0);

778 i‡(
s
->
sch
.
Êags
 & 
DN_HAVE_MASK
) {

779 
	`dn_ht_sˇn
(
s
->
siht
, 
si_de°roy
, 
NULL
);

780 
	`dn_ht_‰ì
(
s
->
siht
, 0);

782 i‡(
s
->
siht
)

783 
	`si_de°roy
(
s
->
siht
, 
NULL
);

784 i‡(
s
->
¥ofûe
) {

785 
	`‰ì
(
s
->
¥ofûe
, 
M_DUMMYNET
);

786 
s
->
¥ofûe
 = 
NULL
;

788 
s
->
siht
 = 
NULL
;

789 i‡(
s
->
Â
->
de°roy
)

790 
s
->
Â
->
	`de°roy
(s);

791 
	`bzîo
(
s
, (*s));

792 
	`‰ì
(
obj
, 
M_DUMMYNET
);

793 
dn_cfg
.
schk_cou¡
--;

794  
DNHT_SCAN_DEL
;

795 
	}
}

803 
	$dñëe_schk
(
i
)

805 
dn_schk
 *
s
;

807 
s
 = 
	`dn_ht_föd
(
dn_cfg
.
schedhash
, 
i
, 
DNHT_REMOVE
, 
NULL
);

808 i‡(
	`dn_ht_íåõs
(
dn_cfg
.
schedhash
) == 0) {

809 
	`dn_ht_‰ì
(
dn_cfg
.
schedhash
, 0);

810 
dn_cfg
.
schedhash
 = 
NULL
;

812 
	`ND
("%d %p", 
i
, 
s
);

813 i‡(!
s
)

814  
EINVAL
;

815 
	`dñëe_fs
(
i
 + 
DN_MAX_ID
, 1);

817 
	`schk_dñëe_cb
(
s
, (*)(
uöçå_t
)
DN_DESTROY
);

819 
	}
}

823 
	$c›y_obj
(**
°¨t
, *
íd
, *
_o
, c⁄° *
msg
, 
i
)

825 
dn_id
 *
o
 = 
_o
;

826 
have
 = 
íd
 - *
°¨t
;

828 i‡(
have
 < 
o
->
Àn
 || o->À¿=0 || o->
ty≥
 == 0) {

829 
	`D
("(WARN)Åype %d %s %d have %dÇeed %d",

830 
o
->
ty≥
, 
msg
, 
i
, 
have
, o->
Àn
);

833 
	`ND
("ty≥ %d %†%dÜí %d", 
o
->
ty≥
, 
msg
, 
i
, o->
Àn
);

834 
	`bc›y
(
_o
, *
°¨t
, 
o
->
Àn
);

835 i‡(
o
->
ty≥
 =
DN_LINK
) {

837 
dn_lök
 *
l
 = (dn_lök *)*
°¨t
;

838 
l
->
bur°
 = 
	`div64
÷->bur°, 8 * 
hz
);

839 } i‡(
o
->
ty≥
 =
DN_SCH
) {

841 
dn_schk
 *
s
 = 
_o
;

842 
dn_id
 *
id
 = (dn_id *)(*
°¨t
);

843 
id
->id = (
s
->
sch
.
Êags
 & 
DN_HAVE_MASK
) ?

844 
	`dn_ht_íåõs
(
s
->
siht
) : (s->siht ? 1 : 0);

846 *
°¨t
 +
o
->
Àn
;

848 
	}
}

855 
	$c›y_obj_q
(**
°¨t
, *
íd
, *
_o
, c⁄° *
msg
, 
i
)

857 
dn_id
 *
o
 = 
_o
;

858 
have
 = 
íd
 - *
°¨t
;

859 
Àn
 = (
dn_Êow
);

861 i‡(
have
 < 
Àn
 || 
o
->À¿=0 || o->
ty≥
 !
DN_QUEUE
) {

862 
	`D
("ERRORÅype %d %s %d have %dÇeed %d",

863 
o
->
ty≥
, 
msg
, 
i
, 
have
, 
Àn
);

866 
	`ND
("ty≥ %d %†%dÜí %d", 
o
->
ty≥
, 
msg
, 
i
, 
Àn
);

867 
	`bc›y
(
_o
, *
°¨t
, 
Àn
);

868 ((
dn_id
*)(*
°¨t
))->
Àn
 =Üen;

869 *
°¨t
 +
Àn
;

871 
	}
}

874 
	$c›y_q_cb
(*
obj
, *
¨g
)

876 
dn_queue
 *
q
 = 
obj
;

877 
c›y_¨gs
 *
a
 = 
¨g
;

878 
dn_Êow
 *
ni
 = (dn_Êow *)(*
a
->
°¨t
);

879 i‡(
	`c›y_obj_q
(
a
->
°¨t
,á->
íd
, &
q
->
ni
, "queue", -1))

880  
DNHT_SCAN_END
;

881 
ni
->
oid
.
ty≥
 = 
DN_FLOW
;

882 
ni
->
oid
.
id
 = 
	`si_hash
((
uöçå_t
)&ni->
fid
, 0, 
NULL
);

884 
	}
}

887 
	$c›y_q
(
c›y_¨gs
 *
a
, 
dn_fsk
 *
fs
, 
Êags
)

889 i‡(!
fs
->
qht
)

891 i‡(
fs
->fs.
Êags
 & 
DN_QHT_HASH
)

892 
	`dn_ht_sˇn
(
fs
->
qht
, 
c›y_q_cb
, 
a
);

894 
	`c›y_q_cb
(
fs
->
qht
, 
a
);

896 
	}
}

905 
	$c›y_¥ofûe
(
c›y_¨gs
 *
a
, 
dn_¥ofûe
 *
p
)

907 
have
 = 
a
->
íd
 - *a->
°¨t
;

909 
¥ofûe_Àn
 = (
dn_¥ofûe
);

911 i‡(
p
 =
NULL
)

913 i‡(
have
 < 
¥ofûe_Àn
) {

914 
	`D
("îr‹ havê%dÇìd %d", 
have
, 
¥ofûe_Àn
);

917 
	`bc›y
(
p
, *
a
->
°¨t
, 
¥ofûe_Àn
);

918 ((
dn_id
 *)(*
a
->
°¨t
))->
Àn
 = 
¥ofûe_Àn
;

919 *
a
->
°¨t
 +
¥ofûe_Àn
;

921 
	}
}

924 
	$c›y_Êow£t
(
c›y_¨gs
 *
a
, 
dn_fsk
 *
fs
, 
Êags
)

926 
dn_fs
 *
ufs
 = (dn_f†*)(*
a
->
°¨t
);

927 i‡(!
fs
)

929 
	`ND
("Êow£à%d", 
fs
->fs.
fs_ƒ
);

930 i‡(
	`c›y_obj
(
a
->
°¨t
,á->
íd
, &
fs
->fs, "Êow£t", fs->fs.
fs_ƒ
))

931  
DNHT_SCAN_END
;

932 
ufs
->
oid
.
id
 = (
fs
->fs.
Êags
 & 
DN_QHT_HASH
) ?

933 
	`dn_ht_íåõs
(
fs
->
qht
) : (fs->qht ? 1 : 0);

934 i‡(
Êags
) {

935 
	`c›y_q
(
a
, 
fs
, 0);

938 
	}
}

941 
	$c›y_si_cb
(*
obj
, *
¨g
)

943 
dn_sch_ö°
 *
si
 = 
obj
;

944 
c›y_¨gs
 *
a
 = 
¨g
;

945 
dn_Êow
 *
ni
 = (dn_Êow *)(*
a
->
°¨t
);

946 i‡(
	`c›y_obj
(
a
->
°¨t
,á->
íd
, &
si
->
ni
, "inst",

947 
si
->
sched
->
sch
.
sched_ƒ
))

948  
DNHT_SCAN_END
;

949 
ni
->
oid
.
ty≥
 = 
DN_FLOW
;

950 
ni
->
oid
.
id
 = 
	`si_hash
((
uöçå_t
)
si
, 
DNHT_KEY_IS_OBJ
, 
NULL
);

952 
	}
}

955 
	$c›y_si
(
c›y_¨gs
 *
a
, 
dn_schk
 *
s
, 
Êags
)

957 i‡(
s
->
sch
.
Êags
 & 
DN_HAVE_MASK
)

958 
	`dn_ht_sˇn
(
s
->
siht
, 
c›y_si_cb
, 
a
);

959 i‡(
s
->
siht
)

960 
	`c›y_si_cb
(
s
->
siht
, 
a
);

962 
	}
}

968 
	$c›y_fsk_li°
(
c›y_¨gs
 *
a
, 
dn_schk
 *
s
, 
Êags
)

970 
dn_fsk
 *
fs
;

971 
dn_id
 *
o
;

972 
uöt32_t
 *
p
;

974 
n
 = 0, 
•a˚
 = (*
o
);

975 
	`SLIST_FOREACH
(
fs
, &
s
->
fsk_li°
, 
sch_chaö
) {

976 i‡(
fs
->fs.
fs_ƒ
 < 
DN_MAX_ID
)

977 
n
++;

979 
•a˚
 +
n
 * (
uöt32_t
);

980 
	`DX
(3, "sched %d ha†%d flow£ts", 
s
->
sch
.
sched_ƒ
, 
n
);

981 i‡(
a
->
íd
 - *◊->
°¨t
Ë< 
•a˚
)

982  
DNHT_SCAN_END
;

983 
o
 = (
dn_id
 *)(*(
a
->
°¨t
));

984 
o
->
Àn
 = 
•a˚
;

985 *
a
->
°¨t
 +
o
->
Àn
;

986 
o
->
ty≥
 = 
DN_TEXT
;

987 
p
 = (
uöt32_t
 *)(
o
+1);

988 
	`SLIST_FOREACH
(
fs
, &
s
->
fsk_li°
, 
sch_chaö
)

989 i‡(
fs
->fs.
fs_ƒ
 < 
DN_MAX_ID
)

990 *
p
++ = 
fs
->fs.
fs_ƒ
;

992 
	}
}

995 
	$c›y_d©a_hñ≥r
(*
_o
, *
_¨g
)

997 
c›y_¨gs
 *
a
 = 
_¨g
;

998 
uöt32_t
 *
r
 = 
a
->
exåa
->r;

999 
uöt32_t
 *
lim
;

1000 
n
;

1002 
lim
 = (
uöt32_t
 *)((*)(
a
->
exåa
Ë+á->exåa->
o
.
Àn
);

1004 i‡(
a
->
ty≥
 =
DN_LINK
 ||á->ty≥ =
DN_SCH
) {

1006 
dn_schk
 *
s
 = 
_o
;

1008 
n
 = 
s
->
sch
.
sched_ƒ
;

1009 i‡(
a
->
ty≥
 =
DN_SCH
 && 
n
 >
DN_MAX_ID
)

1011 i‡(
a
->
ty≥
 =
DN_LINK
 && 
n
 <
DN_MAX_ID
)

1015 ;
r
 < 
lim
;Ñ += 2) {

1016 i‡(
n
 < 
r
[0] ||Ç >Ñ[1])

1019 i‡(
a
->
Êags
 & 
DN_C_LINK
) {

1020 i‡(
	`c›y_obj
(
a
->
°¨t
,á->
íd
,

1021 &
s
->
lök
, "lök", 
n
))

1022  
DNHT_SCAN_END
;

1023 i‡(
	`c›y_¥ofûe
(
a
, 
s
->
¥ofûe
))

1024  
DNHT_SCAN_END
;

1025 i‡(
	`c›y_Êow£t
(
a
, 
s
->
fs
, 0))

1026  
DNHT_SCAN_END
;

1028 i‡(
a
->
Êags
 & 
DN_C_SCH
) {

1029 i‡(
	`c›y_obj
(
a
->
°¨t
,á->
íd
,

1030 &
s
->
sch
, "sched", 
n
))

1031  
DNHT_SCAN_END
;

1033 i‡(
	`c›y_fsk_li°
(
a
, 
s
, 0))

1034  
DNHT_SCAN_END
;

1036 i‡(
a
->
Êags
 & 
DN_C_FLOW
)

1037 
	`c›y_si
(
a
, 
s
, 0);

1040 } i‡(
a
->
ty≥
 =
DN_FS
) {

1042 
dn_fsk
 *
fs
 = 
_o
;

1044 
n
 = 
fs
->fs.
fs_ƒ
;

1045 i‡(
n
 >
DN_MAX_ID
)

1048 ;
r
 < 
lim
;Ñ += 2) {

1049 i‡(
n
 < 
r
[0] ||Ç >Ñ[1])

1051 i‡(
	`c›y_Êow£t
(
a
, 
fs
, 0))

1052  
DNHT_SCAN_END
;

1053 
	`c›y_q
(
a
, 
fs
, 0);

1058 
	}
}

1060 
ölöe
 
dn_schk
 *

1061 
	$loˇã_scheduÀr
(
i
)

1063  
	`dn_ht_föd
(
dn_cfg
.
schedhash
, 
i
, 0, 
NULL
);

1064 
	}
}

1070 
	$c⁄fig_ªd
(
dn_fsk
 *
fs
)

1072 
öt64_t
 
s
, 
idÀ
, 
weight
, 
w0
;

1073 
t
, 
i
;

1075 
fs
->
w_q
 = fs->fs.w_q;

1076 
fs
->
max_p
 = fs->fs.max_p;

1077 
	`D
("called");

1079 
i
 = 
fs
->
sched
->
lök
.
b™dwidth
;

1080 
s
 = (
i
 <= 0) ? 0 :

1081 
hz
 * 
dn_cfg
.
ªd_avg_pkt_size
 * 8 * 
	`SCALE
(1Ë/ 
i
;

1083 
idÀ
 = 
	`div64
((
s
 * 3Ë, 
fs
->
w_q
);

1084 
fs
->
lookup_°ï
 = 
	`div64
(
idÀ
 , 
dn_cfg
.
ªd_lookup_dïth
);

1086 i‡(!
fs
->
lookup_°ï
)

1087 
fs
->
lookup_°ï
 = 1;

1088 
w0
 = 
weight
 = 
	`SCALE
(1Ë- 
fs
->
w_q
;

1090 
t
 = 
fs
->
lookup_°ï
;Å > 1; --t)

1091 
weight
 = 
	`SCALE_MUL
(weight, 
w0
);

1092 
fs
->
lookup_weight
 = ()(
weight
);

1095 
fs
->
mö_th
 = 
	`SCALE
(fs->fs.min_th);

1096 
fs
->
max_th
 = 
	`SCALE
(fs->fs.max_th);

1098 
fs
->
c_1
 = fs->
max_p
 / (fs->fs.
max_th
 - fs->fs.
mö_th
);

1099 
fs
->
c_2
 = 
	`SCALE_MUL
(fs->
c_1
, 
	`SCALE
(fs->fs.
mö_th
));

1101 i‡(
fs
->fs.
Êags
 & 
DN_IS_GENTLE_RED
) {

1102 
fs
->
c_3
 = (
	`SCALE
(1Ë- fs->
max_p
Ë/ fs->fs.
max_th
;

1103 
fs
->
c_4
 = 
	`SCALE
(1Ë- 2 * fs->
max_p
;

1107 i‡(
fs
->
w_q_lookup
) {

1108 
	`‰ì
(
fs
->
w_q_lookup
, 
M_DUMMYNET
);

1109 
fs
->
w_q_lookup
 = 
NULL
;

1111 i‡(
dn_cfg
.
ªd_lookup_dïth
 == 0) {

1112 
	`¥ötf
("\ndummynet:Çet.inet.ip.dummynet.red_lookup_depth"

1114 
fs
->fs.
Êags
 &~
DN_IS_RED
;

1115 
fs
->fs.
Êags
 &~
DN_IS_GENTLE_RED
;

1116  (
EINVAL
);

1118 
fs
->
lookup_dïth
 = 
dn_cfg
.
ªd_lookup_dïth
;

1119 
fs
->
w_q_lookup
 = (
u_öt
 *)
	`mÆloc
(fs->
lookup_dïth
 * (),

1120 
M_DUMMYNET
, 
M_NOWAIT
);

1121 i‡(
fs
->
w_q_lookup
 =
NULL
) {

1122 
	`¥ötf
("dummynet: sorry, cannotállocateÑedÜookupÅable\n");

1123 
fs
->fs.
Êags
 &~
DN_IS_RED
;

1124 
fs
->fs.
Êags
 &~
DN_IS_GENTLE_RED
;

1125 (
ENOSPC
);

1129 
fs
->
w_q_lookup
[0] = 
	`SCALE
(1Ë- fs->
w_q
;

1131 
i
 = 1; i < 
fs
->
lookup_dïth
; i++)

1132 
fs
->
w_q_lookup
[
i
] =

1133 
	`SCALE_MUL
(
fs
->
w_q_lookup
[
i
 - 1], fs->
lookup_weight
);

1135 i‡(
dn_cfg
.
ªd_avg_pkt_size
 < 1)

1136 
dn_cfg
.
ªd_avg_pkt_size
 = 512;

1137 
fs
->
avg_pkt_size
 = 
dn_cfg
.
ªd_avg_pkt_size
;

1138 i‡(
dn_cfg
.
ªd_max_pkt_size
 < 1)

1139 
dn_cfg
.
ªd_max_pkt_size
 = 1500;

1140 
fs
->
max_pkt_size
 = 
dn_cfg
.
ªd_max_pkt_size
;

1141 
	`D
("exit");

1143 
	}
}

1147 
	$upd©e_ªd
(
dn_schk
 *
s
)

1149 
dn_fsk
 *
fs
;

1150 
	`SLIST_FOREACH
(
fs
, &
s
->
fsk_li°
, 
sch_chaö
) {

1151 i‡(
fs
 && (fs->fs.
Êags
 & 
DN_IS_RED
))

1152 
	`c⁄fig_ªd
(
fs
);

1154 
	}
}

1158 
	$fsk_©èch
(
dn_fsk
 *
fs
, 
dn_schk
 *
s
)

1160 
	`ND
("remove fs %d from fsunlinked,ÜinkÅo sched %d",

1161 
fs
->fs.
fs_ƒ
, 
s
->
sch
.
sched_ƒ
);

1162 
	`SLIST_REMOVE
(&
dn_cfg
.
fsu
, 
fs
, 
dn_fsk
, 
sch_chaö
);

1163 
fs
->
sched
 = 
s
;

1164 
	`SLIST_INSERT_HEAD
(&
s
->
fsk_li°
, 
fs
, 
sch_chaö
);

1165 i‡(
s
->
Â
->
√w_fsk
)

1166 
s
->
Â
->
	`√w_fsk
(
fs
);

1168 
fs
->
fsk_mask
 = fs->fs.
Êow_mask
;

1169 i‡(
fs
->
sched
->
sch
.
Êags
 & 
DN_HAVE_MASK
)

1170 
	`Êow_id_‹
(&
fs
->
sched
->
sch
.
sched_mask
, &fs->
fsk_mask
);

1171 i‡(
fs
->
qht
) {

1180 
	`D
("XXX TODOÑequeue from fs %dÅo sch %d",

1181 
fs
->fs.
fs_ƒ
, 
s
->
sch
.
sched_ƒ
);

1182 
fs
->
qht
 = 
NULL
;

1185 i‡(
	`n⁄zîo_mask
(&
fs
->
fsk_mask
))

1186 
fs
->fs.
Êags
 |
DN_QHT_HASH
;

1188 
fs
->fs.
Êags
 &~
DN_QHT_HASH
;

1191 i‡(
fs
->fs.
Êags
 & 
DN_IS_RED
)

1192 
	`c⁄fig_ªd
(
fs
);

1193 
	}
}

1197 
	$upd©e_fs
(
dn_schk
 *
s
)

1199 
dn_fsk
 *
fs
, *
tmp
;

1201 
	`SLIST_FOREACH_SAFE
(
fs
, &
dn_cfg
.
fsu
, 
sch_chaö
, 
tmp
) {

1202 i‡(
s
->
sch
.
sched_ƒ
 !
fs
->fs.sched_nr) {

1203 
	`D
("fs %d for sch %dÇot %d still unlinked",

1204 
fs
->fs.
fs_ƒ
, fs->fs.
sched_ƒ
,

1205 
s
->
sch
.
sched_ƒ
);

1208 
	`fsk_©èch
(
fs
, 
s
);

1210 
	}
}

1238 
	$c⁄fig_lök
(
dn_lök
 *
p
, 
dn_id
 *
¨g
)

1240 
i
;

1242 i‡(
p
->
oid
.
Àn
 != (*p)) {

1243 
	`D
("övÆidÖùêÀ¿%d", 
p
->
oid
.
Àn
);

1244  
EINVAL
;

1246 
i
 = 
p
->
lök_ƒ
;

1247 i‡(
i
 <0 || i >
DN_MAX_ID
)

1248  
EINVAL
;

1256 
p
->
dñay
 = (p->dñay * 
hz
) / 1000;

1258 
p
->
bur°
 *8 * 
hz
;

1260 
	`DN_BH_WLOCK
();

1262 ; 
i
 < 2*
DN_MAX_ID
; i += DN_MAX_ID) {

1263 
dn_schk
 *
s
 = 
	`loˇã_scheduÀr
(
i
);

1264 i‡(
s
 =
NULL
) {

1265 
	`DN_BH_WUNLOCK
();

1266 
	`D
("sched %dÇŸ found", 
i
);

1267  
EINVAL
;

1270 i‡(
s
->
¥ofûe
) {

1271 
	`‰ì
(
s
->
¥ofûe
, 
M_DUMMYNET
);

1272 
s
->
¥ofûe
 = 
NULL
;

1275 
s
->
lök
.
oid
 = 
p
->oid;

1276 
s
->
lök
.
lök_ƒ
 = 
i
;

1277 
s
->
lök
.
dñay
 = 
p
->delay;

1278 i‡(
s
->
lök
.
b™dwidth
 !
p
->bandwidth) {

1280 
s
->
lök
.
b™dwidth
 = 
p
->bandwidth;

1281 
	`upd©e_ªd
(
s
);

1283 
s
->
lök
.
bur°
 = 
p
->burst;

1284 
	`schk_ª£t_¸edô
(
s
);

1286 
dn_cfg
.
id
++;

1287 
	`DN_BH_WUNLOCK
();

1289 
	}
}

1294 
dn_fsk
 *

1295 
	$c⁄fig_fs
(
dn_fs
 *
nfs
, 
dn_id
 *
¨g
, 
locked
)

1297 
i
;

1298 
dn_fsk
 *
fs
;

1300 i‡(
nfs
->
oid
.
Àn
 != (*nfs)) {

1301 
	`D
("övÆid flow£àÀ¿%d", 
nfs
->
oid
.
Àn
);

1302  
NULL
;

1304 
i
 = 
nfs
->
fs_ƒ
;

1305 i‡(
i
 <0 || i >3*
DN_MAX_ID
)

1306  
NULL
;

1307 
	`ND
("Êow£à%d", 
i
);

1309 i‡(
nfs
->
Êags
 & 
DN_QSIZE_BYTES
) {

1310 
	`ùdn_bound_v¨
(&
nfs
->
qsize
, 16384,

1311 1500, 
dn_cfg
.
byã_limô
, 
NULL
);

1313 
	`ùdn_bound_v¨
(&
nfs
->
qsize
, 50,

1314 1, 
dn_cfg
.
¶Ÿ_limô
, 
NULL
);

1316 i‡(
nfs
->
Êags
 & 
DN_HAVE_MASK
) {

1318 
	`ùdn_bound_v¨
((*)&
nfs
->
buckës
, 
dn_cfg
.
hash_size
,

1319 1, 
dn_cfg
.
max_hash_size
, "flowset buckets");

1321 
nfs
->
buckës
 = 1;

1323 i‡(!
locked
)

1324 
	`DN_BH_WLOCK
();

1325 i‡(
dn_cfg
.
fshash
 =
NULL
)

1326 
dn_cfg
.
fshash
 = 
	`dn_ht_öô
(
NULL
, dn_cfg.
hash_size
,

1327 
	`off£tof
(
dn_fsk
, 
fsk_√xt
),

1328 
fsk_hash
, 
fsk_m©ch
, 
fsk_√w
);

1330 
dn_schk
 *
s
;

1331 
Êags
 = 
nfs
->
sched_ƒ
 ? 
DNHT_INSERT
 : 0;

1332 
j
;

1333 
ﬁdc
 = 
dn_cfg
.
fsk_cou¡
;

1334 
fs
 = 
	`dn_ht_föd
(
dn_cfg
.
fshash
, 
i
, 
Êags
, 
NULL
);

1335 i‡(
fs
 =
NULL
) {

1336 
	`D
("missög sched f‹ flow£à%d", 
i
);

1340 i‡(
nfs
->
sched_ƒ
 == 0)

1341 
nfs
->
sched_ƒ
 = 
fs
->fs.sched_nr;

1342 
j
 = 0; j < (
nfs
->
∑r
)/(nfs->par[0]); j++) {

1343 i‡(
nfs
->
∑r
[
j
] == -1)

1344 
nfs
->
∑r
[
j
] = 
fs
->fs.par[j];

1346 i‡(
	`bcmp
(&
fs
->fs, 
nfs
, (*nfs)) == 0) {

1347 
	`ND
("Êow£à%d unch™ged", 
i
);

1350 i‡(
ﬁdc
 !
dn_cfg
.
fsk_cou¡
)

1351 
dn_cfg
.
id
++;

1352 
s
 = 
	`loˇã_scheduÀr
(
nfs
->
sched_ƒ
);

1357 
	`DX
(2, "fs %d changed sched %d@%pÅo %d@%p",

1358 
fs
->fs.
fs_ƒ
,

1359 
fs
->fs.
sched_ƒ
, fs->
sched
, 
nfs
->sched_ƒ, 
s
);

1360 i‡(
fs
->
sched
) {

1361 
Êags
 = 
s
 ? 
DN_DETACH
 : (DN_DETACH | 
DN_DESTROY
);

1362 
Êags
 |
DN_DESTROY
;

1363 
	`fsk_dëach
(
fs
, 
Êags
);

1365 
fs
->f†*
nfs
;

1366 i‡(
s
 !
NULL
)

1367 
	`fsk_©èch
(
fs
, 
s
);

1369 i‡(!
locked
)

1370 
	`DN_BH_WUNLOCK
();

1371  
fs
;

1372 
	}
}

1383 
	$c⁄fig_sched
(
dn_sch
 *
_nsch
, 
dn_id
 *
¨g
)

1385 
dn_schk
 *
s
;

1386 
schk_√w_¨g
 
a
;

1387 
i
;

1388 
dn_lök
 
p
;

1389 
dn_¥ofûe
 *
pf
 = 
NULL
;

1391 
ùfw_Êow_id
 
√w_mask
;

1392 
√w_buckës
 = 0;

1393 
√w_Êags
 = 0;

1394 
pùe_cmd
;

1395 
îr
 = 
ENOMEM
;

1397 
a
.
sch
 = 
_nsch
;

1398 i‡(
a
.
sch
->
oid
.
Àn
 != (*a.sch)) {

1399 
	`D
("bad schedÜí %d", 
a
.
sch
->
oid
.
Àn
);

1400  
EINVAL
;

1402 
i
 = 
a
.
sch
->
sched_ƒ
;

1403 i‡(
i
 <0 || i >
DN_MAX_ID
)

1404  
EINVAL
;

1406 i‡(
a
.
sch
->
Êags
 & 
DN_HAVE_MASK
)

1407 
	`ùdn_bound_v¨
((*)&
a
.
sch
->
buckës
, 
dn_cfg
.
hash_size
,

1408 1, 
dn_cfg
.
max_hash_size
, "sched buckets");

1410 
	`bzîo
(&
p
, (p));

1412 
pùe_cmd
 = 
a
.
sch
->
Êags
 & 
DN_PIPE_CMD
;

1413 
a
.
sch
->
Êags
 &~
DN_PIPE_CMD
;

1414 i‡(
pùe_cmd
) {

1416 
√w_mask
 = 
a
.
sch
->
sched_mask
;

1417 
√w_buckës
 = 
a
.
sch
->
buckës
;

1418 
√w_Êags
 = 
a
.
sch
->
Êags
;

1420 
	`DN_BH_WLOCK
();

1421 i‡(
dn_cfg
.
schedhash
 =
NULL
)

1422 
dn_cfg
.
schedhash
 = 
	`dn_ht_öô
(
NULL
, dn_cfg.
hash_size
,

1423 
	`off£tof
(
dn_schk
, 
schk_√xt
),

1424 
schk_hash
, 
schk_m©ch
, 
schk_√w
);

1425 
agaö
:

1430 
dn_cfg
.
id
++;

1431 
a
.
Â
 = 
	`föd_sched_ty≥
◊.
sch
->
oid
.
subty≥
,á.sch->
«me
);

1432 i‡(
a
.
Â
 !
NULL
) {

1434 
s
 = 
	`dn_ht_föd
(
dn_cfg
.
schedhash
, 
i
, 
DNHT_INSERT
, &
a
);

1435 } i‡(
a
.
sch
->
oid
.
subty≥
 =0 && !a.sch->
«me
[0]) {

1437 
s
 = 
	`dn_ht_föd
(
dn_cfg
.
schedhash
, 
i
, 0, &
a
);

1438 i‡(
s
 !
NULL
) {

1439 
a
.
Â
 = 
s
->fp;

1443 i‡(
pùe_cmd
)

1444 
√xt
;

1449 i‡(
pùe_cmd
) {

1451 
	`bzîo
(&
a
.
sch
->
sched_mask
, (
√w_mask
));

1452 
a
.
sch
->
buckës
 = 0;

1453 
a
.
sch
->
Êags
 &~
DN_HAVE_MASK
;

1455 
a
.
sch
->
oid
.
subty≥
 = 
DN_SCHED_WF2QP
;

1456 
agaö
;

1459 
	`D
("invalid schedulerÅype %d %s",

1460 
a
.
sch
->
oid
.
subty≥
,á.sch->
«me
);

1461 
îr
 = 
EINVAL
;

1462 
îr‹
;

1465 
a
.
sch
->
oid
.
subty≥
 =á.
Â
->
ty≥
;

1466 
	`bzîo
(
a
.
sch
->
«me
, (a.sch->name));

1467 
	`°æ˝y
(
a
.
sch
->
«me
,á.
Â
->name, (a.sch->name));

1468 i‡(
s
 =
NULL
) {

1469 
	`D
("ˇ¬ŸáŒoˇã scheduÀ∏%d", 
i
);

1470 
îr‹
;

1473 i‡(
p
.
lök_ƒ
) {

1474 
s
->
lök
 = 
p
;

1475 i‡(!
pf
 ||Öf->
lök_ƒ
 !
p
.link_nr) {

1476 
s
->
¥ofûe
 = 
NULL
;

1478 
size_t
 
pf_size
 = (
dn_¥ofûe
) +

1479 
s
->
¥ofûe
->
ßm∂es_no
 * ();

1481 
s
->
¥ofûe
 = 
	`mÆloc
(
pf_size
,

1482 
M_DUMMYNET
, 
M_NOWAIT
 | 
M_ZERO
);

1483 i‡(
s
->
¥ofûe
 =
NULL
) {

1484 
	`D
("cannotállocateÖrofile");

1485 
îr‹
;

1487 
	`bc›y
(
pf
, 
s
->
¥ofûe
, 
pf_size
);

1490 
p
.
lök_ƒ
 = 0;

1491 i‡(
s
->
Â
 =
NULL
) {

1492 
	`DX
(2, "sched %dÇewÅy≥ %s", 
i
, 
a
.
Â
->
«me
);

1493 } i‡(
s
->
Â
 !
a
.fp ||

1494 
	`bcmp
(
a
.
sch
, &
s
->sch, (*a.sch)) ) {

1496 
	`DX
(2, "sched %dÅype changed from %sÅo %s",

1497 
i
, 
s
->
Â
->
«me
, 
a
.fp->name);

1498 
	`DX
(4, "Åype/sub %d/%d -> %d/%d",

1499 
s
->
sch
.
oid
.
ty≥
, s->sch.oid.
subty≥
,

1500 
a
.
sch
->
oid
.
ty≥
,á.sch->oid.
subty≥
);

1501 i‡(
s
->
lök
.
lök_ƒ
 == 0)

1502 
	`D
("XXX WARNINGÜök 0 f‹ sched %d", 
i
);

1503 
p
 = 
s
->
lök
;

1504 i‡(
s
->
¥ofûe
) {

1505 i‡(!
pf
)

1506 
pf
 = 
	`mÆloc
((*pf),

1507 
M_DUMMYNET
, 
M_NOWAIT
 | 
M_ZERO
);

1508 i‡(
pf
)

1509 
	`bc›y
(
s
->
¥ofûe
, 
pf
, (*pf));

1512 
	`dn_ht_föd
(
dn_cfg
.
schedhash
, 
i
, 
DNHT_REMOVE
, 
NULL
);

1516 
	`schk_dñëe_cb
(
s
, (*)
DN_DESTROY
);

1517 
agaö
;

1519 
	`DX
(4, "sched %d unch™gedÅy≥ %s", 
i
, 
a
.
Â
->
«me
);

1522 
s
->
sch
 = *
a
.sch;

1523 
s
->
Â
 = 
a
.fp;

1524 
s
->
cfg
 = 
¨g
;

1529 i‡(!(
s
->
Â
->
Êags
 & 
DN_MULTIQUEUE
Ë&& !s->
fs
) {

1530 
s
->
fs
 = 
	`dn_ht_föd
(
dn_cfg
.
fshash
, 
i
, 0, 
NULL
);

1531 i‡(!
s
->
fs
) {

1532 
dn_fs
 
fs
;

1533 
	`bzîo
(&
fs
, (fs));

1534 
	`£t_oid
(&
fs
.
oid
, 
DN_FS
, (fs));

1535 
fs
.
fs_ƒ
 = 
i
 + 
DN_MAX_ID
;

1536 
fs
.
sched_ƒ
 = 
i
;

1537 
s
->
fs
 = 
	`c⁄fig_fs
(&fs, 
NULL
, 1 );

1539 i‡(!
s
->
fs
) {

1540 
	`schk_dñëe_cb
(
s
, (*)
DN_DESTROY
);

1541 
	`D
("îr‹ cª©ög i¡î«»f†f‹ %d", 
i
);

1542 
îr‹
;

1546 i‡(
s
->
Â
->
c⁄fig
)

1547 
s
->
Â
->
	`c⁄fig
(s);

1548 
	`upd©e_fs
(
s
);

1549 
√xt
:

1550 i‡(
i
 < 
DN_MAX_ID
) {

1551 
i
 +
DN_MAX_ID
;

1552 i‡(
pùe_cmd
) {

1554 
a
.
sch
->
sched_mask
 = 
√w_mask
;

1555 
a
.
sch
->
buckës
 = 
√w_buckës
;

1556 
a
.
sch
->
Êags
 = 
√w_Êags
;

1559 i‡(
	`dn_ht_föd
(
dn_cfg
.
schedhash
, 
i
, 0, &
a
Ë!
NULL
) {

1561 
îr
 = 0;

1562 
îr‹
;

1565 
a
.
sch
->
sched_ƒ
 = 
i
;

1566 
a
.
sch
->
oid
.
subty≥
 = 
DN_SCHED_FIFO
;

1567 
	`bzîo
(
a
.
sch
->
«me
, (a.sch->name));

1568 
agaö
;

1570 
îr
 = 0;

1571 
îr‹
:

1572 
	`DN_BH_WUNLOCK
();

1573 i‡(
pf
)

1574 
	`‰ì
(
pf
, 
M_DUMMYNET
);

1575  
îr
;

1576 
	}
}

1582 
	$c⁄fig_¥ofûe
(
dn_¥ofûe
 *
pf
, 
dn_id
 *
¨g
)

1584 
dn_schk
 *
s
;

1585 
i
, 
ﬁí
, 
îr
 = 0;

1587 i‡(
pf
->
oid
.
Àn
 < (*pf)) {

1588 
	`D
("sh‹à¥ofûêÀ¿%d", 
pf
->
oid
.
Àn
);

1589  
EINVAL
;

1591 
i
 = 
pf
->
lök_ƒ
;

1592 i‡(
i
 <0 || i >
DN_MAX_ID
)

1593  
EINVAL
;

1595 
	`DN_BH_WLOCK
();

1596 ; 
i
 < 2*
DN_MAX_ID
; i += DN_MAX_ID) {

1597 
s
 = 
	`loˇã_scheduÀr
(
i
);

1599 i‡(
s
 =
NULL
) {

1600 
îr
 = 
EINVAL
;

1603 
dn_cfg
.
id
++;

1608 i‡(
s
->
¥ofûe
 && (
pf
->
ßm∂es_no
 == 0 ||

1609 
s
->
¥ofûe
->
oid
.
Àn
 < 
pf
->oid.len)) {

1610 
	`‰ì
(
s
->
¥ofûe
, 
M_DUMMYNET
);

1611 
s
->
¥ofûe
 = 
NULL
;

1613 i‡(
pf
->
ßm∂es_no
 == 0)

1619 i‡(
s
->
¥ofûe
 =
NULL
)

1620 
s
->
¥ofûe
 = 
	`mÆloc
(
pf
->
oid
.
Àn
,

1621 
M_DUMMYNET
, 
M_NOWAIT
 | 
M_ZERO
);

1622 i‡(
s
->
¥ofûe
 =
NULL
) {

1623 
	`D
("nÿmem‹y f‹Örofûê%d", 
i
);

1624 
îr
 = 
ENOMEM
;

1628 
ﬁí
 = 
s
->
¥ofûe
->
oid
.
Àn
;

1629 i‡(
ﬁí
 < 
pf
->
oid
.
Àn
)

1630 
ﬁí
 = 
pf
->
oid
.
Àn
;

1631 
	`bc›y
(
pf
, 
s
->
¥ofûe
,Öf->
oid
.
Àn
);

1632 
s
->
¥ofûe
->
oid
.
Àn
 = 
ﬁí
;

1635 
	`DN_BH_WUNLOCK
();

1636  
îr
;

1637 
	}
}

1643 
	$dummy√t_Êush
()

1647 
	`dn_ht_sˇn
(
dn_cfg
.
schedhash
, 
schk_dñëe_cb
,

1648 (*)(
uöçå_t
)
DN_DELETE_FS
);

1650 
	`DX
(4, "°û»%d u∆öked fs", 
dn_cfg
.
fsk_cou¡
);

1651 
	`dn_ht_‰ì
(
dn_cfg
.
fshash
, 
DNHT_REMOVE
);

1652 
	`fsk_dëach_li°
(&
dn_cfg
.
fsu
, 
DN_DELETE_FS
);

1654 
	`dn_ht_‰ì
(
dn_cfg
.
schedhash
, 
DNHT_REMOVE
);

1656 
	`hóp_öô
(&
dn_cfg
.
evhóp
, 16, 
	`off£tof
(
dn_id
, 
id
));

1657 
	}
}

1668 
	$do_c⁄fig
(*
p
, 
l
)

1670 
dn_id
 *
√xt
, *
o
;

1671 
îr
 = 0, 
îr2
 = 0;

1672 
dn_id
 *
¨g
 = 
NULL
;

1673 
uöçå_t
 *
a
;

1675 
o
 = 
p
;

1676 i‡(
o
->
id
 !
DN_API_VERSION
) {

1677 
	`D
("invalidápi version got %dÇeed %d",

1678 
o
->
id
, 
DN_API_VERSION
);

1679  
EINVAL
;

1681 ; 
l
 >(*
o
); o = 
√xt
) {

1682 
dn_id
 *
¥ev
 = 
¨g
;

1683 i‡(
o
->
Àn
 < (*oË|| 
l
 < o->len) {

1684 
	`D
("badÜí o->À¿%dÜí %d", 
o
->
Àn
, 
l
);

1685 
îr
 = 
EINVAL
;

1688 
l
 -
o
->
Àn
;

1689 
√xt
 = (
dn_id
 *)((*)
o
 + o->
Àn
);

1690 
îr
 = 0;

1691 
o
->
ty≥
) {

1693 
	`D
("cmd %dÇŸ im∂emíãd", 
o
->
ty≥
);

1696 #ifde‡
EMULATE_SYSCTL


1701 
DN_SYSCTL_SET
:

1702 
îr
 = 
	`kesys˘l_emu_£t
(
p
, 
l
);

1703  
îr
;

1706 
DN_CMD_CONFIG
:

1709 
DN_CMD_DELETE
:

1711 
a
 = (
uöçå_t
 *)(
o
+1);

1712 i‡(
o
->
Àn
 < (*oË+ (*
a
)) {

1713 
îr
 = 
EINVAL
;

1716 
o
->
subty≥
) {

1717 
DN_LINK
:

1719 
	`DN_BH_WLOCK
();

1720 
îr
 = 
	`dñëe_schk
(*
a
);

1721 
îr2
 = 
	`dñëe_schk
(*
a
 + 
DN_MAX_ID
);

1722 
	`DN_BH_WUNLOCK
();

1723 i‡(!
îr
)

1724 
îr
 = 
îr2
;

1728 
	`D
("invalid deleteÅype %d",

1729 
o
->
subty≥
);

1730 
îr
 = 
EINVAL
;

1733 
DN_FS
:

1734 
îr
 = (*
a
 <1 || *®>
DN_MAX_ID
) ?

1735 
EINVAL
 : 
	`dñëe_fs
(*
a
, 0) ;

1740 
DN_CMD_FLUSH
:

1741 
	`DN_BH_WLOCK
();

1742 
	`dummy√t_Êush
();

1743 
	`DN_BH_WUNLOCK
();

1745 
DN_TEXT
:

1746 
¥ev
 = 
NULL
;

1747 
¨g
 = 
o
;

1749 
DN_LINK
:

1750 
îr
 = 
	`c⁄fig_lök
((
dn_lök
 *)
o
, 
¨g
);

1752 
DN_PROFILE
:

1753 
îr
 = 
	`c⁄fig_¥ofûe
((
dn_¥ofûe
 *)
o
, 
¨g
);

1755 
DN_SCH
:

1756 
îr
 = 
	`c⁄fig_sched
((
dn_sch
 *)
o
, 
¨g
);

1758 
DN_FS
:

1759 
îr
 = (
NULL
==
	`c⁄fig_fs
((
dn_fs
 *)
o
, 
¨g
, 0));

1762 i‡(
¥ev
)

1763 
¨g
 = 
NULL
;

1764 i‡(
îr
 != 0)

1767  
îr
;

1768 
	}
}

1771 
	$compuã_•a˚
(
dn_id
 *
cmd
, 
c›y_¨gs
 *
a
)

1773 
x
 = 0, 
√ed
 = 0;

1774 
¥ofûe_size
 = (
dn_¥ofûe
);

1800 
cmd
->
subty≥
) {

1807 
DN_LINK
:

1808 
x
 = 
DN_C_LINK
 | 
DN_C_SCH
 | 
DN_C_FLOW
;

1809 
√ed
 +
dn_cfg
.
schk_cou¡
 *

1810 ((
dn_fs
Ë+ 
¥ofûe_size
) / 2;

1811 
√ed
 +
dn_cfg
.
fsk_cou¡
 * (
uöt32_t
);

1813 
DN_SCH
:

1814 
√ed
 +
dn_cfg
.
schk_cou¡
 *

1815 ((
dn_fs
Ë+ 
¥ofûe_size
) / 2;

1816 
√ed
 +
dn_cfg
.
fsk_cou¡
 * (
uöt32_t
);

1817 
x
 = 
DN_C_SCH
 | 
DN_C_LINK
 | 
DN_C_FLOW
;

1819 
DN_FS
:

1820 
x
 = 
DN_C_FS
 | 
DN_C_QUEUE
;

1822 
DN_GET_COMPAT
:

1823 
√ed
 = 
	`dn_com∑t_ˇlc_size
();

1826 
a
->
Êags
 = 
x
;

1827 i‡(
x
 & 
DN_C_SCH
) {

1828 
√ed
 +
dn_cfg
.
schk_cou¡
 * (
dn_sch
) / 2;

1830 
√ed
 +
dn_cfg
.
schk_cou¡
 * (
dn_id
) / 2;

1832 i‡(
x
 & 
DN_C_FS
)

1833 
√ed
 +
dn_cfg
.
fsk_cou¡
 * (
dn_fs
);

1834 i‡(
x
 & 
DN_C_LINK
) {

1835 
√ed
 +
dn_cfg
.
schk_cou¡
 * (
dn_lök
) / 2;

1842 i‡(
x
 & 
DN_C_QUEUE
)

1843 
√ed
 +
dn_cfg
.
queue_cou¡
 * (
dn_Êow
);

1844 i‡(
x
 & 
DN_C_FLOW
)

1845 
√ed
 +
dn_cfg
.
si_cou¡
 * ((
dn_Êow
));

1846  
√ed
;

1847 
	}
}

1854 
	$dummy√t_gë
(
sock›t
 *
s›t
, **
com∑t
)

1856 
have
, 
i
, 
√ed
, 
îr‹
;

1857 *
°¨t
 = 
NULL
, *
buf
;

1858 
size_t
 
s›t_vÆsize
;

1859 
dn_id
 *
cmd
;

1860 
c›y_¨gs
 
a
;

1861 
c›y_ønge
 
r
;

1862 
l
 = (
dn_id
);

1864 
	`bzîo
(&
a
, (a));

1865 
	`bzîo
(&
r
, (r));

1868 
s›t_vÆsize
 = 
s›t
->sopt_valsize;

1870 
cmd
 = &
r
.
o
;

1872 i‡(!
com∑t
) {

1874 
îr‹
 = 
	`so›tc›yö
(
s›t
, 
cmd
, (
r
), (*cmd));

1875 
s›t
->
s›t_vÆsize
 = sopt_valsize;

1876 i‡(
îr‹
)

1877 
d⁄e
;

1878 
l
 = 
cmd
->
Àn
;

1879 #ifde‡
EMULATE_SYSCTL


1881 i‡(
cmd
->
ty≥
 =
DN_SYSCTL_GET
)

1882  
	`kesys˘l_emu_gë
(
s›t
);

1884 i‡(
l
 > (
r
)) {

1886 
cmd
 = 
	`mÆloc
(
l
, 
M_DUMMYNET
, 
M_WAIT
);

1887 i‡(
cmd
 =
NULL
)

1888  
ENOMEM
;

1889 
îr‹
 = 
	`so›tc›yö
(
s›t
, 
cmd
, 
l
,Ü);

1890 
s›t
->
s›t_vÆsize
 = sopt_valsize;

1891 i‡(
îr‹
)

1892 
d⁄e
;

1895 
îr‹
 = 0;

1896 
cmd
->
ty≥
 = 
DN_CMD_GET
;

1897 
cmd
->
Àn
 = (
dn_id
);

1898 
cmd
->
subty≥
 = 
DN_GET_COMPAT
;

1900 
	`D
("compatibility mode");

1902 
a
.
exåa
 = (
c›y_ønge
 *)
cmd
;

1903 i‡(
cmd
->
Àn
 == (*cmd)) {

1904 
uöt32_t
 *
Ω
 = (uöt32_à*)(
cmd
 + 1);

1905 
cmd
->
Àn
 +2* (
uöt32_t
);

1906 
Ω
[0] = 1;

1907 
Ω
[1] = 
DN_MAX_ID
 - 1;

1908 i‡(
cmd
->
subty≥
 =
DN_LINK
) {

1909 
Ω
[0] +
DN_MAX_ID
;

1910 
Ω
[1] +
DN_MAX_ID
;

1917 
have
 = 0, 
i
 = 0; i < 10; i++) {

1918 
	`DN_BH_WLOCK
();

1919 
√ed
 = 
	`compuã_•a˚
(
cmd
, &
a
);

1922 i‡(
l
 > (*
cmd
))

1923 
√ed
 = 
s›t_vÆsize
 - (*
cmd
);

1925 i‡(
√ed
 < 0) {

1926 
	`DN_BH_WUNLOCK
();

1927 
îr‹
 = 
EINVAL
;

1928 
d⁄e
;

1930 
√ed
 +(*
cmd
);

1931 
cmd
->
id
 = 
√ed
;

1932 i‡(
have
 >
√ed
)

1935 
	`DN_BH_WUNLOCK
();

1936 i‡(
°¨t
)

1937 
	`‰ì
(
°¨t
, 
M_DUMMYNET
);

1938 
°¨t
 = 
NULL
;

1939 i‡(
√ed
 > 
s›t_vÆsize
)

1942 
have
 = 
√ed
;

1943 
°¨t
 = 
	`mÆloc
(
have
, 
M_DUMMYNET
, 
M_WAITOK
 | 
M_ZERO
);

1944 i‡(
°¨t
 =
NULL
) {

1945 
îr‹
 = 
ENOMEM
;

1946 
d⁄e
;

1950 i‡(
°¨t
 =
NULL
) {

1951 i‡(
com∑t
) {

1952 *
com∑t
 = 
NULL
;

1953 
îr‹
 = 1;

1955 
îr‹
 = 
	`so›tc›yout
(
s›t
, 
cmd
, (*cmd));

1959 
d⁄e
;

1961 
	`ND
("have %d:%d sched %d, %d:%dÜinks %d, %d:%d flowsets %d, "

1963 
dn_cfg
.
schk_cou¡
, (
dn_sch
), 
DN_SCH
,

1964 
dn_cfg
.
schk_cou¡
, (
dn_lök
), 
DN_LINK
,

1965 
dn_cfg
.
fsk_cou¡
, (
dn_fs
), 
DN_FS
,

1966 
dn_cfg
.
si_cou¡
, (
dn_Êow
), 
DN_SCH_I
,

1967 
dn_cfg
.
queue_cou¡
, (
dn_queue
), 
DN_QUEUE
);

1968 
s›t
->
s›t_vÆsize
 = sopt_valsize;

1969 
a
.
ty≥
 = 
cmd
->
subty≥
;

1971 i‡(
com∑t
 =
NULL
) {

1972 
	`bc›y
(
cmd
, 
°¨t
, (*cmd));

1973 ((
dn_id
*)(
°¨t
))->
Àn
 = (dn_id);

1974 
buf
 = 
°¨t
 + (*
cmd
);

1976 
buf
 = 
°¨t
;

1977 
a
.
°¨t
 = &
buf
;

1978 
a
.
íd
 = 
°¨t
 + 
have
;

1980 i‡(
com∑t
) {

1981 
a
.
ty≥
 = 
DN_COMPAT_PIPE
;

1982 
	`dn_ht_sˇn
(
dn_cfg
.
schedhash
, 
c›y_d©a_hñ≥r_com∑t
, &
a
);

1983 
a
.
ty≥
 = 
DN_COMPAT_QUEUE
;

1984 
	`dn_ht_sˇn
(
dn_cfg
.
fshash
, 
c›y_d©a_hñ≥r_com∑t
, &
a
);

1985 } i‡(
a
.
ty≥
 =
DN_FS
) {

1986 
	`dn_ht_sˇn
(
dn_cfg
.
fshash
, 
c›y_d©a_hñ≥r
, &
a
);

1988 
	`dn_ht_sˇn
(
dn_cfg
.
schedhash
, 
c›y_d©a_hñ≥r
, &
a
);

1990 
	`DN_BH_WUNLOCK
();

1992 i‡(
com∑t
) {

1993 *
com∑t
 = 
°¨t
;

1994 
s›t
->
s›t_vÆsize
 = 
buf
 - 
°¨t
;

1996 
°¨t
 = 
NULL
;

1998 
îr‹
 = 
	`so›tc›yout
(
s›t
, 
°¨t
, 
buf
 - start);

2000 
d⁄e
:

2001 i‡(
cmd
 && cmd !&
r
.
o
)

2002 
	`‰ì
(
cmd
, 
M_DUMMYNET
);

2003 i‡(
°¨t
)

2004 
	`‰ì
(
°¨t
, 
M_DUMMYNET
);

2005  
îr‹
;

2006 
	}
}

2013 
	$døö_scheduÀr_cb
(*
_si
, *
_¨g
)

2015 
dn_sch_ö°
 *
si
 = 
_si
;

2016 *
¨g
 = 
_¨g
;

2017 
em±y
;

2019 i‡–(*
¨g
++Ë> 
dn_cfg
.
expúe_obje˘_examöed
)

2020  
DNHT_SCAN_END
;

2022 i‡((
si
->
kÊags
 & 
DN_ACTIVE
Ë|| si->
dlöe
.
mq
.
hód
 !
NULL
)

2030 i‡(
si
->
ni
.
Àngth
 == 0) {

2034 
em±y
 = (
si
->
sched
->
Â
->
Êags
 & 
DN_MULTIQUEUE
) ?

2035 (
si
->
q_cou¡
 == 0) : 1;

2036 i‡(
em±y
 &&

2037 (
si
->
idÀ_time
 < 
dn_cfg
.
cuº_time
 - dn_cfg.
obje˘_idÀ_tick
))

2038  
	`si_de°roy
(
si
, 
NULL
);

2040 
dn_cfg
.
idÀ_si_waô
++;

2043 
	}
}

2047 
	$døö_scheduÀr_sch_cb
(*
_s
, *
_¨g
)

2049 
dn_schk
 *
s
 = 
_s
;

2050 *
¨g
 = 
_¨g
;

2052 i‡(
s
->
sch
.
Êags
 & 
DN_HAVE_MASK
) {

2053 
	`dn_ht_sˇn_buckë
(
s
->
siht
, &s->
døö_buckë
,

2054 
døö_scheduÀr_cb
, 
_¨g
);

2056 i‡(
s
->
siht
) {

2057 i‡(
	`døö_scheduÀr_cb
(
s
->
siht
, 
_¨g
Ë=
DNHT_SCAN_DEL
)

2058 
s
->
siht
 = 
NULL
;

2061  ( (*
¨g
++Ë> 
dn_cfg
.
expúe_obje˘_examöed
Ë? 
DNHT_SCAN_END
 : 0;

2062 
	}
}

2066 
	$dn_døö_scheduÀr
()

2068 
¨g
 = 0;

2070 
	`dn_ht_sˇn_buckë
(
dn_cfg
.
schedhash
, (*)&dn_cfg.
døö_sch
,

2071 
døö_scheduÀr_sch_cb
, &
¨g
);

2072 
	}
}

2076 
	$døö_queue_cb
(*
_q
, *
_¨g
)

2078 
dn_queue
 *
q
 = 
_q
;

2079 *
¨g
 = 
_¨g
;

2081 i‡–(*
¨g
++Ë> 
dn_cfg
.
expúe_obje˘_examöed
)

2082  
DNHT_SCAN_END
;

2084 i‡(
q
->
ni
.
Àngth
 == 0) {

2085 i‡(
q
->
q_time
 < 
dn_cfg
.
cuº_time
 - dn_cfg.
obje˘_idÀ_tick
) {

2086 i‡(
	`dn_dñëe_queue
(
q
, 
DN_DESTROY
 | 
DN_DEL_SAFE
) == 0)

2087  
DNHT_SCAN_DEL
;

2089 
dn_cfg
.
idÀ_queue_waô
++;

2093 
	}
}

2097 
	$døö_queue_fs_cb
(*
_fs
, *
_¨g
)

2099 
dn_fsk
 *
fs
 = 
_fs
;

2100 *
¨g
 = 
_¨g
;

2102 i‡(
fs
->fs.
Êags
 & 
DN_QHT_HASH
) {

2104 
	`dn_ht_sˇn_buckë
(
fs
->
qht
, &fs->
døö_buckë
,

2105 
døö_queue_cb
, 
_¨g
);

2110 i‡(
fs
->
qht
) {

2111 i‡(
	`døö_queue_cb
(
fs
->
qht
, 
_¨g
Ë=
DNHT_SCAN_DEL
)

2112 
fs
->
qht
 = 
NULL
;

2115  ( (*
¨g
++Ë> 
dn_cfg
.
expúe_obje˘_examöed
Ë? 
DNHT_SCAN_END
 : 0;

2116 
	}
}

2120 
	$dn_døö_queue
()

2122 
¨g
 = 0;

2125 
	`dn_ht_sˇn_buckë
(
dn_cfg
.
fshash
, (*)&dn_cfg.
døö_fs
,

2126 
døö_queue_fs_cb
, &
¨g
);

2127 
	}
}

2133 
	$ù_dn_˘l
(
sock›t
 *
s›t
)

2135 *
p
 = 
NULL
;

2136 
îr‹
, 
l
;

2138 
îr‹
 = 
	`¥iv_check
(
s›t
->
s›t_td
, 
PRIV_NETINET_DUMMYNET
);

2139 i‡(
îr‹
)

2140  (
îr‹
);

2143 i‡(
s›t
->
s›t_dú
 =
SOPT_SET
) {

2144 
îr‹
 = 
	`£cuªÀvñ_ge
(
s›t
->
s›t_td
->
td_u¸ed
, 3);

2145 i‡(
îr‹
)

2146  (
îr‹
);

2149 
s›t
->
s›t_«me
) {

2151 
	`D
("dummy√t: unknow¿›ti⁄ %d", 
s›t
->
s›t_«me
);

2152 
îr‹
 = 
EINVAL
;

2155 
IP_DUMMYNET_FLUSH
:

2156 
IP_DUMMYNET_CONFIGURE
:

2157 
IP_DUMMYNET_DEL
:

2158 
IP_DUMMYNET_GET
:

2159 
	`D
("dummy√t: com∑à›ti⁄ %d", 
s›t
->
s›t_«me
);

2160 
îr‹
 = 
	`ù_dummy√t_com∑t
(
s›t
);

2163 
IP_DUMMYNET3
 :

2164 i‡(
s›t
->
s›t_dú
 =
SOPT_GET
) {

2165 
îr‹
 = 
	`dummy√t_gë
(
s›t
, 
NULL
);

2168 
l
 = 
s›t
->
s›t_vÆsize
;

2169 i‡(
l
 < (
dn_id
) ||Ü > 12000) {

2170 
	`D
("¨gumíàÀ¿%d invÆid", 
l
);

2173 
p
 = 
	`mÆloc
(
l
, 
M_TEMP
, 
M_WAITOK
);

2174 
îr‹
 = 
	`so›tc›yö
(
s›t
, 
p
, 
l
,Ü);

2175 i‡(
îr‹
)

2177 
îr‹
 = 
	`do_c⁄fig
(
p
, 
l
);

2181 i‡(
p
 !
NULL
)

2182 
	`‰ì
(
p
, 
M_TEMP
);

2184  
îr‹
 ;

2185 
	}
}

2189 
	$ù_dn_öô
()

2191 i‡(
dn_cfg
.
öô_d⁄e
)

2193 
	`¥ötf
("DUMMYNET %∞wôh IPv6 inôülized (100409)\n", 
curv√t
);

2194 
dn_cfg
.
öô_d⁄e
 = 1;

2199 
dn_cfg
.
¶Ÿ_limô
 = 100;

2200 
dn_cfg
.
byã_limô
 = 1024 * 1024;

2201 
dn_cfg
.
expúe
 = 1;

2204 
dn_cfg
.
ªd_lookup_dïth
 = 256;

2205 
dn_cfg
.
ªd_avg_pkt_size
 = 512;

2206 
dn_cfg
.
ªd_max_pkt_size
 = 1500;

2209 
dn_cfg
.
max_hash_size
 = 1024;

2211 i‡(
dn_cfg
.
hash_size
 == 0)

2212 
dn_cfg
.
hash_size
 = 64;

2221 
dn_cfg
.
schedhash
 = 
NULL
;

2222 
dn_cfg
.
fshash
 = 
NULL
;

2224 
dn_cfg
.
døö_fs
 = 0;

2225 
dn_cfg
.
døö_sch
 = 0;

2227 i‡(
dn_cfg
.
expúe_obje˘
 == 0)

2228 
dn_cfg
.
expúe_obje˘
 = 50;

2229 i‡(
dn_cfg
.
obje˘_idÀ_tick
 == 0)

2230 
dn_cfg
.
obje˘_idÀ_tick
 = 1000;

2231 i‡(
dn_cfg
.
expúe_obje˘_examöed
 == 0)

2232 
dn_cfg
.
expúe_obje˘_examöed
 = 10;

2233 i‡(
dn_cfg
.
døö_øtio
 == 0)

2234 
dn_cfg
.
døö_øtio
 = 1;

2237 #ifde‡
HAVE_TSC


2238 
dn_cfg
.
cy˛e_èsk_√w
 = dn_cfg.
cy˛e_èsk_ﬁd
 = 
	`ªadTSC
();

2240 
	`hóp_öô
(&
dn_cfg
.
evhóp
, 16, 
	`off£tof
(
dn_id
, 
id
));

2241 
	`SLIST_INIT
(&
dn_cfg
.
fsu
);

2242 
	`SLIST_INIT
(&
dn_cfg
.
schedli°
);

2244 
	`DN_LOCK_INIT
();

2246 
	`TASK_INIT
(&
dn_èsk
, 0, 
dummy√t_èsk
, 
curv√t
);

2247 
dn_tq
 = 
	`èskqueue_¸óã_Á°
("dummy√t", 
M_NOWAIT
,

2248 
èskqueue_thªad_íqueue
, &
dn_tq
);

2249 
	`èskqueue_°¨t_thªads
(&
dn_tq
, 1, 
PI_NET
, "dummynet");

2251 
	`ˇŒout_öô
(&
dn_timeout
, 
CALLOUT_MPSAFE
);

2252 
	`ˇŒout_ª£t_⁄
(&
dn_timeout
, 1, 
dummy√t
, 
NULL
, 0);

2255 
	`gëmi¸ou±ime
(&
dn_cfg
.
¥ev_t
);

2256 
	}
}

2258 #ifde‡
KLD_MODULE


2260 
	$ù_dn_de°roy
(
œ°
)

2262 
	`ˇŒout_døö
(&
dn_timeout
);

2264 
	`DN_BH_WLOCK
();

2265 i‡(
œ°
) {

2266 
	`ND
("%sÑemovingÜast instance\n");

2267 
ù_dn_˘l_±r
 = 
NULL
;

2268 
ù_dn_io_±r
 = 
NULL
;

2271 
	`dummy√t_Êush
();

2272 
	`DN_BH_WUNLOCK
();

2273 
	`èskqueue_døö
(
dn_tq
, &
dn_èsk
);

2274 
	`èskqueue_‰ì
(
dn_tq
);

2276 
	`dn_ht_‰ì
(
dn_cfg
.
schedhash
, 0);

2277 
	`dn_ht_‰ì
(
dn_cfg
.
fshash
, 0);

2278 
	`hóp_‰ì
(&
dn_cfg
.
evhóp
);

2280 
	`DN_LOCK_DESTROY
();

2281 
	}
}

2285 
	$dummy√t_modevít
(
moduÀ_t
 
mod
, 
ty≥
, *
d©a
)

2288 i‡(
ty≥
 =
MOD_LOAD
) {

2289 i‡(
ù_dn_io_±r
) {

2290 
	`¥ötf
("DUMMYNETálreadyÜoaded\n");

2291  
EEXIST
 ;

2293 
	`ù_dn_öô
();

2294 
ù_dn_˘l_±r
 = 
ù_dn_˘l
;

2295 
ù_dn_io_±r
 = 
dummy√t_io
;

2297 } i‡(
ty≥
 =
MOD_UNLOAD
) {

2298 #i‡!
	`deföed
(
KLD_MODULE
)

2299 
	`¥ötf
("dummynet statically compiled, cannot unload\n");

2300  
EINVAL
 ;

2302 
	`ù_dn_de°roy
(1 );

2306  
EOPNOTSUPP
;

2307 
	}
}

2311 
	$lﬂd_dn_sched
(
dn_Æg
 *
d
)

2313 
dn_Æg
 *
s
;

2315 i‡(
d
 =
NULL
)

2317 
	`ù_dn_öô
();

2320 i‡(
d
->
íqueue
 =
NULL
 || d->
dequeue
 == NULL) {

2321 
	`D
("missögÉnqueuê‹ dequeuêf‹ %s", 
d
->
«me
);

2326 
	`DN_BH_WLOCK
();

2327 
	`SLIST_FOREACH
(
s
, &
dn_cfg
.
schedli°
, 
√xt
) {

2328 i‡(
	`°rcmp
(
s
->
«me
, 
d
->name) == 0) {

2329 
	`D
("%†ÆªadyÜﬂded", 
d
->
«me
);

2333 i‡(
s
 =
NULL
)

2334 
	`SLIST_INSERT_HEAD
(&
dn_cfg
.
schedli°
, 
d
, 
√xt
);

2335 
	`DN_BH_WUNLOCK
();

2336 
	`D
("dn_sched %†%¶ﬂded", 
d
->
«me
, 
s
 ? "not ":"");

2337  
s
 ? 1 : 0;

2338 
	}
}

2341 
	$u∆ﬂd_dn_sched
(
dn_Æg
 *
s
)

2343 
dn_Æg
 *
tmp
, *
r
;

2344 
îr
 = 
EINVAL
;

2346 
	`ND
("ˇŒed f‹ %s", 
s
->
«me
);

2348 
	`DN_BH_WLOCK
();

2349 
	`SLIST_FOREACH_SAFE
(
r
, &
dn_cfg
.
schedli°
, 
√xt
, 
tmp
) {

2350 i‡(
	`°rcmp
(
s
->
«me
, 
r
->name) != 0)

2352 
	`D
("ªf_cou¡ = %d", 
r
->
ªf_cou¡
);

2353 
îr
 = (
r
->
ªf_cou¡
 !0Ë? 
EBUSY
 : 0;

2354 i‡(
îr
 == 0)

2355 
	`SLIST_REMOVE
(&
dn_cfg
.
schedli°
, 
r
, 
dn_Æg
, 
√xt
);

2358 
	`DN_BH_WUNLOCK
();

2359 
	`D
("dn_sched %†%su∆ﬂded", 
s
->
«me
, 
îr
 ? "not ":"");

2360  
îr
;

2361 
	}
}

2364 
	$dn_sched_modevít
(
moduÀ_t
 
mod
, 
cmd
, *
¨g
)

2366 
dn_Æg
 *
sch
 = 
¨g
;

2368 i‡(
cmd
 =
MOD_LOAD
)

2369  
	`lﬂd_dn_sched
(
sch
);

2370 i‡(
cmd
 =
MOD_UNLOAD
)

2371  
	`u∆ﬂd_dn_sched
(
sch
);

2373  
EINVAL
;

2374 
	}
}

2376 
moduÀd©a_t
 
	gdummy√t_mod
 = {

2377 "dummy√t", 
dummy√t_modevít
, 
NULL


2380 
	#DN_SI_SUB
 
SI_SUB_PROTO_IFATTACHDOMAIN


	)

2381 
	#DN_MODEV_ORD
 (
SI_ORDER_ANY
 - 128Ë

	)

2382 
DECLARE_MODULE
(
dummy√t
, 
dummy√t_mod
, 
DN_SI_SUB
, 
DN_MODEV_ORD
);

2383 
MODULE_DEPEND
(
dummy√t
, 
ùfw
, 2, 2, 2);

2384 
MODULE_VERSION
(
dummy√t
, 3);

	@sys/netinet/ipfw/ip_fw2.c

26 
	~<sys/cdefs.h
>

27 
__FBSDID
("$FreeBSD: head/sys/netinet/ipfw/ip_fw2.c 200601 2009-12-16 10:48:40ZÜuigi $");

33 
	~"›t_ùfw.h
"

34 
	~"›t_ùdivît.h
"

35 
	~"›t_öë.h
"

36 #i‚de‡
INET


39 
	~"›t_öë6.h
"

40 
	~"›t_ù£c.h
"

42 
	~<sys/∑øm.h
>

43 
	~<sys/sy°m.h
>

44 
	~<sys/c⁄dv¨.h
>

45 
	~<sys/evíth™dÀr.h
>

46 
	~<sys/mÆloc.h
>

47 
	~<sys/mbuf.h
>

48 
	~<sys/kî√l.h
>

49 
	~<sys/lock.h
>

50 
	~<sys/jaû.h
>

51 
	~<sys/moduÀ.h
>

52 
	~<sys/¥iv.h
>

53 
	~<sys/¥oc.h
>

54 
	~<sys/rwlock.h
>

55 
	~<sys/sockë.h
>

56 
	~<sys/sockëv¨.h
>

57 
	~<sys/sys˘l.h
>

58 
	~<sys/sy¶og.h
>

59 
	~<sys/u¸ed.h
>

60 
	~<√t/ëhî√t.h
>

61 
	~<√t/if.h
>

62 
	~<√t/rouã.h
>

63 
	~<√t/pf_mèg.h
>

64 
	~<√t/v√t.h
>

66 
	~<√töë/ö.h
>

67 
	~<√töë/ö_v¨.h
>

68 
	~<√töë/ö_pcb.h
>

69 
	~<√töë/ù.h
>

70 
	~<√töë/ù_v¨.h
>

71 
	~<√töë/ù_icmp.h
>

72 
	~<√töë/ù_fw.h
>

73 
	~<√töë/ùfw/ù_fw_¥iv©e.h
>

74 
	~<√töë/ù_ˇΩ.h
>

75 
	~<√töë/pim.h
>

76 
	~<√töë/t˝_v¨.h
>

77 
	~<√töë/udp.h
>

78 
	~<√töë/udp_v¨.h
>

79 
	~<√töë/s˘p.h
>

81 
	~<√töë/ù6.h
>

82 
	~<√töë/icmp6.h
>

83 #ifde‡
INET6


84 
	~<√töë6/ö6_pcb.h
>

85 
	~<√töë6/sc›e6_v¨.h
>

86 
	~<√töë6/ù6_v¨.h
>

89 
	~<machöe/ö_cksum.h
>

91 #ifde‡
MAC


92 
	~<£curôy/mac/mac_‰amew‹k.h
>

101 
VNET_DEFINE
(, 
ùfw_v√t_ªady
) = 0;

102 
	#V_ùfw_v√t_ªady
 
	`VNET
(
ùfw_v√t_ªady
)

	)

104 
VNET_DEFINE
(, 
fw_díy_unknown_exthdrs
);

105 
	#V_fw_díy_unknown_exthdrs
 
	`VNET
(
fw_díy_unknown_exthdrs
)

	)

107 #ifde‡
IPFIREWALL_DEFAULT_TO_ACCEPT


108 
	gdeÁu…_to_ac˚±
 = 1;

110 
	gdeÁu…_to_ac˚±
;

113 
VNET_DEFINE
(, 
autoöc_°ï
);

124 
VNET_DEFINE
(
u_öt32_t
, 
£t_dißbÀ
);

125 
	#V_£t_dißbÀ
 
	`VNET
(
£t_dißbÀ
)

	)

127 
VNET_DEFINE
(, 
fw_vîbo£
);

129 
VNET_DEFINE
(
u_öt64_t
, 
n‹uÀ_cou¡î
);

130 
VNET_DEFINE
(, 
vîbo£_limô
);

133 
VNET_DEFINE
(
ù_fw_chaö
, 
œyî3_chaö
);

135 
ùfw_«t_t
 *
	gùfw_«t_±r
 = 
NULL
;

136 
	gcfg_«t
 *(*
	glookup_«t_±r
)(
	g«t_li°
 *, );

137 
ùfw_«t_cfg_t
 *
	gùfw_«t_cfg_±r
;

138 
ùfw_«t_cfg_t
 *
	gùfw_«t_dñ_±r
;

139 
ùfw_«t_cfg_t
 *
	gùfw_«t_gë_cfg_±r
;

140 
ùfw_«t_cfg_t
 *
	gùfw_«t_gë_log_±r
;

142 #ifde‡
SYSCTL_NODE


143 
uöt32_t
 
	gdummy_def
 = 
IPFW_DEFAULT_RULE
;

144 
uöt32_t
 
	gdummy_èbÀs_max
 = 
IPFW_TABLES_MAX
;

146 
	$SYSBEGIN
(
f3
)

148 
	`SYSCTL_NODE
(
_√t_öë_ù
, 
OID_AUTO
, 
fw
, 
CTLFLAG_RW
, 0, "Firewall");

149 
	`SYSCTL_VNET_INT
(
_√t_öë_ù_fw
, 
OID_AUTO
, 
⁄e_∑ss
,

150 
CTLFLAG_RW
 | 
CTLFLAG_SECURE3
, &
	`VNET_NAME
(
fw_⁄e_∑ss
), 0,

152 
	`SYSCTL_VNET_INT
(
_√t_öë_ù_fw
, 
OID_AUTO
, 
autoöc_°ï
,

153 
CTLFLAG_RW
, &
	`VNET_NAME
(
autoöc_°ï
), 0,

155 
	`SYSCTL_VNET_INT
(
_√t_öë_ù_fw
, 
OID_AUTO
, 
vîbo£
,

156 
CTLFLAG_RW
 | 
CTLFLAG_SECURE3
, &
	`VNET_NAME
(
fw_vîbo£
), 0,

158 
	`SYSCTL_VNET_INT
(
_√t_öë_ù_fw
, 
OID_AUTO
, 
vîbo£_limô
,

159 
CTLFLAG_RW
, &
	`VNET_NAME
(
vîbo£_limô
), 0,

161 
	`SYSCTL_UINT
(
_√t_öë_ù_fw
, 
OID_AUTO
, 
deÁu…_ruÀ
, 
CTLFLAG_RD
,

162 &
dummy_def
, 0,

164 
	`SYSCTL_UINT
(
_√t_öë_ù_fw
, 
OID_AUTO
, 
èbÀs_max
, 
CTLFLAG_RD
,

165 &
dummy_èbÀs_max
, 0,

167 
	`SYSCTL_INT
(
_√t_öë_ù_fw
, 
OID_AUTO
, 
deÁu…_to_ac˚±
, 
CTLFLAG_RDTUN
,

168 &
deÁu…_to_ac˚±
, 0,

170 
	`TUNABLE_INT
("√t.öë.ù.fw.deÁu…_to_ac˚±", &
deÁu…_to_ac˚±
);

171 
	`SYSCTL_VNET_INT
(
_√t_öë_ù_fw
, 
OID_AUTO
, 
°©ic_cou¡
,

172 
CTLFLAG_RD
, &
	`VNET_NAME
(
œyî3_chaö
.
n_ruÀs
), 0,

175 #ifde‡
INET6


176 
	`SYSCTL_DECL
(
_√t_öë6_ù6
);

177 
	`SYSCTL_NODE
(
_√t_öë6_ù6
, 
OID_AUTO
, 
fw
, 
CTLFLAG_RW
, 0, "Firewall");

178 
	`SYSCTL_VNET_INT
(
_√t_öë6_ù6_fw
, 
OID_AUTO
, 
díy_unknown_exthdrs
,

179 
CTLFLAG_RW
 | 
CTLFLAG_SECURE
, &
	`VNET_NAME
(
fw_díy_unknown_exthdrs
), 0,

183 
SYSEND


193 
	#L3HDR
(
T
, 
ù
Ë((T *)((
u_öt32_t
 *)(ùË+ (ù)->
ù_hl
))

	)

194 
	#TCP
(
p
Ë((
t˝hdr
 *)’))

	)

195 
	#SCTP
(
p
Ë((
s˘phdr
 *)’))

	)

196 
	#UDP
(
p
Ë((
udphdr
 *)’))

	)

197 
	#ICMP
(
p
Ë((
icmphdr
 *)’))

	)

198 
	#ICMP6
(
p
Ë((
icmp6_hdr
 *)’))

	)

200 
__ölöe
 

201 
	$icm±y≥_m©ch
(
icmphdr
 *
icmp
, 
ùfw_ö¢_u32
 *
cmd
)

203 
ty≥
 = 
icmp
->
icmp_ty≥
;

205  (
ty≥
 <
ICMP_MAXTYPE
 && (
cmd
->
d
[0] & (1<<type)) );

206 
	}
}

208 
	#TT
 ( (1 << 
ICMP_ECHO
Ë| (1 << 
ICMP_ROUTERSOLICIT
) | \

209 (1 << 
ICMP_TSTAMP
Ë| (1 << 
ICMP_IREQ
Ë| (1 << 
ICMP_MASKREQ
Ë)

	)

212 
	$is_icmp_quîy
(
icmphdr
 *
icmp
)

214 
ty≥
 = 
icmp
->
icmp_ty≥
;

216  (
ty≥
 <
ICMP_MAXTYPE
 && (
TT
 & (1<<type)) );

217 
	}
}

218 #unde‡
TT


233 
	$Êags_m©ch
(
ùfw_ö¢
 *
cmd
, 
u_öt8_t
 
bôs
)

235 
u_ch¨
 
w™t_˛ór
;

236 
bôs
 = ~bits;

238 i‡–((
cmd
->
¨g1
 & 0xffË& 
bôs
) != 0)

240 
w™t_˛ór
 = (
cmd
->
¨g1
 >> 8) & 0xff;

241 i‡–(
w™t_˛ór
 & 
bôs
) != want_clear)

244 
	}
}

247 
	$ù›ts_m©ch
(
ù
 *ù, 
ùfw_ö¢
 *
cmd
)

249 
›éí
, 
bôs
 = 0;

250 
u_ch¨
 *
˝
 = (u_ch¨ *)(
ù
 + 1);

251 
x
 = (
ù
->
ù_hl
 << 2) -  (ip);

253 ; 
x
 > 0; x -
›éí
, 
˝
 += optlen) {

254 
›t
 = 
˝
[
IPOPT_OPTVAL
];

256 i‡(
›t
 =
IPOPT_EOL
)

258 i‡(
›t
 =
IPOPT_NOP
)

259 
›éí
 = 1;

261 
›éí
 = 
˝
[
IPOPT_OLEN
];

262 i‡(
›éí
 <0 || o±À¿> 
x
)

265 
›t
) {

270 
IPOPT_LSRR
:

271 
bôs
 |
IP_FW_IPOPT_LSRR
;

274 
IPOPT_SSRR
:

275 
bôs
 |
IP_FW_IPOPT_SSRR
;

278 
IPOPT_RR
:

279 
bôs
 |
IP_FW_IPOPT_RR
;

282 
IPOPT_TS
:

283 
bôs
 |
IP_FW_IPOPT_TS
;

287  (
	`Êags_m©ch
(
cmd
, 
bôs
));

288 
	}
}

291 
	$t˝›ts_m©ch
(
t˝hdr
 *
t˝
, 
ùfw_ö¢
 *
cmd
)

293 
›éí
, 
bôs
 = 0;

294 
u_ch¨
 *
˝
 = (u_ch¨ *)(
t˝
 + 1);

295 
x
 = (
t˝
->
th_off
 << 2Ë- (
t˝hdr
);

297 ; 
x
 > 0; x -
›éí
, 
˝
 += optlen) {

298 
›t
 = 
˝
[0];

299 i‡(
›t
 =
TCPOPT_EOL
)

301 i‡(
›t
 =
TCPOPT_NOP
)

302 
›éí
 = 1;

304 
›éí
 = 
˝
[1];

305 i‡(
›éí
 <= 0)

309 
›t
) {

314 
TCPOPT_MAXSEG
:

315 
bôs
 |
IP_FW_TCPOPT_MSS
;

318 
TCPOPT_WINDOW
:

319 
bôs
 |
IP_FW_TCPOPT_WINDOW
;

322 
TCPOPT_SACK_PERMITTED
:

323 
TCPOPT_SACK
:

324 
bôs
 |
IP_FW_TCPOPT_SACK
;

327 
TCPOPT_TIMESTAMP
:

328 
bôs
 |
IP_FW_TCPOPT_TS
;

333  (
	`Êags_m©ch
(
cmd
, 
bôs
));

334 
	}
}

337 
	$iÁ˚_m©ch
(
i‚ë
 *
iÂ
, 
ùfw_ö¢_if
 *
cmd
)

339 i‡(
iÂ
 =
NULL
)

342 i‡(
cmd
->
«me
[0] != '\0') {

344 i‡(
cmd
->
p
.
glob
) {

345 i‡(
	`‚m©ch
(
cmd
->
«me
, 
iÂ
->
if_x«me
, 0) == 0)

348 i‡(
	`°∫cmp
(
iÂ
->
if_x«me
, 
cmd
->
«me
, 
IFNAMSIZ
) == 0)

352 #ifde‡
__FªeBSD__


353 
iÁddr
 *
ü
;

355 
	`if_addr_æock
(
iÂ
);

356 
	`TAILQ_FOREACH
(
ü
, &
iÂ
->
if_addrhód
, 
iÁ_lök
) {

357 i‡(
ü
->
iÁ_addr
->
ß_Ámûy
 !
AF_INET
)

359 i‡(
cmd
->
p
.
ù
.
s_addr
 =((
sockaddr_ö
 *)

360 (
ü
->
iÁ_addr
))->
sö_addr
.
s_addr
) {

361 
	`if_addr_ru∆ock
(
iÂ
);

365 
	`if_addr_ru∆ock
(
iÂ
);

369 
	}
}

393 
	$vîify_∑th
(
ö_addr
 
§c
, 
i‚ë
 *
iÂ
, 
u_öt
 
fib
)

395 #i‚de‡
__FªeBSD__


398 
rouã
 
ro
;

399 
sockaddr_ö
 *
d°
;

401 
	`bzîo
(&
ro
, (ro));

403 
d°
 = (
sockaddr_ö
 *)&(
ro
.
ro_d°
);

404 
d°
->
sö_Ámûy
 = 
AF_INET
;

405 
d°
->
sö_Àn
 = (*dst);

406 
d°
->
sö_addr
 = 
§c
;

407 
	`ö_πÆloc_ign
(&
ro
, 0, 
fib
);

409 i‡(
ro
.
ro_π
 =
NULL
)

419 i‡(
iÂ
 !
NULL
 && 
ro
.
ro_π
->
π_iÁ
->
iÁ_iÂ
 != ifp) {

420 
	`RTFREE
(
ro
.
ro_π
);

425 i‡(
iÂ
 =
NULL
 &&

426 
	`ßtosö
(
	`π_key
(
ro
.
ro_π
))->
sö_addr
.
s_addr
 =
INADDR_ANY
) {

427 
	`RTFREE
(
ro
.
ro_π
);

432 i‡(
iÂ
 =
NULL
 && 
ro
.
ro_π
->
π_Êags
 & (
RTF_REJECT
|
RTF_BLACKHOLE
)) {

433 
	`RTFREE
(
ro
.
ro_π
);

438 
	`RTFREE
(
ro
.
ro_π
);

441 
	}
}

443 #ifde‡
INET6


447 
__ölöe
 

448 
	$icmp6ty≥_m©ch
 (
ty≥
, 
ùfw_ö¢_u32
 *
cmd
)

450  (
ty≥
 <
ICMP6_MAXTYPE
 && (
cmd
->
d
[type/32] & (1<<(type%32)) ) );

451 
	}
}

454 
	$Êow6id_m©ch
–
cuº_Êow
, 
ùfw_ö¢_u32
 *
cmd
 )

456 
i
;

457 
i
=0; i <
cmd
->
o
.
¨g1
; ++i )

458 i‡(
cuº_Êow
 =
cmd
->
d
[
i
] )

461 
	}
}

465 
	$£¨ch_ù6_addr_√t
 (
ö6_addr
 * 
ù6_addr
)

467 
i‚ë
 *
mdc
;

468 
iÁddr
 *
mdc2
;

469 
ö6_iÁddr
 *
fdm
;

470 
ö6_addr
 
c›ü
;

472 
	`TAILQ_FOREACH
(
mdc
, &
V_i‚ë
, 
if_lök
) {

473 
	`if_addr_æock
(
mdc
);

474 
	`TAILQ_FOREACH
(
mdc2
, &
mdc
->
if_addrhód
, 
iÁ_lök
) {

475 i‡(
mdc2
->
iÁ_addr
->
ß_Ámûy
 =
AF_INET6
) {

476 
fdm
 = (
ö6_iÁddr
 *)
mdc2
;

477 
c›ü
 = 
fdm
->
ü_addr
.
sö6_addr
;

479 
	`ö6_˛órsc›e
(&
c›ü
);

480 i‡(
	`IN6_ARE_ADDR_EQUAL
(
ù6_addr
, &
c›ü
)) {

481 
	`if_addr_ru∆ock
(
mdc
);

486 
	`if_addr_ru∆ock
(
mdc
);

489 
	}
}

492 
	$vîify_∑th6
(
ö6_addr
 *
§c
, 
i‚ë
 *
iÂ
)

494 
rouã_ö6
 
ro
;

495 
sockaddr_ö6
 *
d°
;

497 
	`bzîo
(&
ro
, (ro));

499 
d°
 = (
sockaddr_ö6
 * )&(
ro
.
ro_d°
);

500 
d°
->
sö6_Ámûy
 = 
AF_INET6
;

501 
d°
->
sö6_Àn
 = (*dst);

502 
d°
->
sö6_addr
 = *
§c
;

504 
	`πÆloc_ign
((
rouã
 *)&
ro
, 0);

506 i‡(
ro
.
ro_π
 =
NULL
)

516 i‡(
iÂ
 !
NULL
 && 
ro
.
ro_π
->
π_iÁ
->
iÁ_iÂ
 != ifp) {

517 
	`RTFREE
(
ro
.
ro_π
);

522 i‡(
iÂ
 =
NULL
 &&

523 
	`IN6_IS_ADDR_UNSPECIFIED
(&
	`ßtosö6
(
	`π_key
(
ro
.
ro_π
))->
sö6_addr
)) {

524 
	`RTFREE
(
ro
.
ro_π
);

529 i‡(
iÂ
 =
NULL
 && 
ro
.
ro_π
->
π_Êags
 & (
RTF_REJECT
|
RTF_BLACKHOLE
)) {

530 
	`RTFREE
(
ro
.
ro_π
);

535 
	`RTFREE
(
ro
.
ro_π
);

538 
	}
}

541 
	$is_icmp6_quîy
(
icmp6_ty≥
)

543 i‡((
icmp6_ty≥
 <
ICMP6_MAXTYPE
) &&

544 (
icmp6_ty≥
 =
ICMP6_ECHO_REQUEST
 ||

545 
icmp6_ty≥
 =
ICMP6_MEMBERSHIP_QUERY
 ||

546 
icmp6_ty≥
 =
ICMP6_WRUREQUEST
 ||

547 
icmp6_ty≥
 =
ICMP6_FQDN_QUERY
 ||

548 
icmp6_ty≥
 =
ICMP6_NI_QUERY
))

552 
	}
}

555 
	$£nd_ªje˘6
(
ù_fw_¨gs
 *
¨gs
, 
code
, 
u_öt
 
hÀn
, 
ù6_hdr
 *
ù6
)

557 
mbuf
 *
m
;

559 
m
 = 
¨gs
->m;

560 i‡(
code
 =
ICMP6_UNREACH_RST
 && 
¨gs
->
f_id
.
¥Ÿo
 =
IPPROTO_TCP
) {

561 
t˝hdr
 *
t˝
;

562 
t˝
 = (
t˝hdr
 *)((*)
ù6
 + 
hÀn
);

564 i‡((
t˝
->
th_Êags
 & 
TH_RST
) == 0) {

565 
mbuf
 *
m0
;

566 
m0
 = 
	`ùfw_£nd_pkt
(
¨gs
->
m
, &◊rgs->
f_id
),

567 
	`¡ohl
(
t˝
->
th_£q
),Çtohl—˝->
th_ack
),

568 
t˝
->
th_Êags
 | 
TH_RST
);

569 i‡(
m0
 !
NULL
)

570 
	`ù6_ouçut
(
m0
, 
NULL
, NULL, 0, NULL, NULL,

571 
NULL
);

573 
	`FREE_PKT
(
m
);

574 } i‡(
code
 !
ICMP6_UNREACH_RST
) {

584 i‡(
¨gs
->
L3off£t
)

585 
	`m_adj
(
m
, 
¨gs
->
L3off£t
);

587 
	`icmp6_îr‹
(
m
, 
ICMP6_DST_UNREACH
, 
code
, 0);

589 
	`FREE_PKT
(
m
);

591 
¨gs
->
m
 = 
NULL
;

592 
	}
}

601 
	$£nd_ªje˘
(
ù_fw_¨gs
 *
¨gs
, 
code
, 
ùÀn
, 
ù
 *ip)

607 * 
The
 
mbuf
 
wûl
 
howevî
 
be
 
thrown
 
away
 
so
 
we
 
ˇn
 
adju°
 
ô
.

608 * 
Remembî
 
we
 
did
 
™
 
m_puŒup
 
⁄
 
ô
 
Æªady
 
so
 we

609 * 
ˇn
 
make
 
some
 
assum±i⁄s
 
about
 
c⁄tiguou¢ess
.

611 i‡(
¨gs
->
L3off£t
)

612 
	`m_adj
(
m
, 
¨gs
->
L3off£t
);

614 i‡(
code
 !
ICMP_REJECT_RST
) {

616 
	`SET_HOST_IPLEN
(
ù
);

617 
	`icmp_îr‹
(
¨gs
->
m
, 
ICMP_UNREACH
, 
code
, 0L, 0);

618 } i‡(
¨gs
->
f_id
.
¥Ÿo
 =
IPPROTO_TCP
) {

619 
t˝hdr
 *c⁄° 
t˝
 =

620 
	`L3HDR
(
t˝hdr
, 
	`mtod
(
¨gs
->
m
, 
ù
 *));

621 i‡–(
t˝
->
th_Êags
 & 
TH_RST
) == 0) {

622 
mbuf
 *
m
;

623 
m
 = 
	`ùfw_£nd_pkt
(
¨gs
->m, &◊rgs->
f_id
),

624 
	`¡ohl
(
t˝
->
th_£q
),Çtohl—˝->
th_ack
),

625 
t˝
->
th_Êags
 | 
TH_RST
);

626 i‡(
m
 !
NULL
)

627 
	`ù_ouçut
(
m
, 
NULL
, NULL, 0, NULL, NULL);

629 
	`FREE_PKT
(
¨gs
->
m
);

631 
	`FREE_PKT
(
¨gs
->
m
);

632 
¨gs
->
m
 = 
NULL
;

633 
	}
}

646 
	$check_uidgid
(
ùfw_ö¢_u32
 *
ö¢
, 
¥Ÿo
, 
i‚ë
 *
oif
,

647 
ö_addr
 
d°_ù
, 
u_öt16_t
 
d°_p‹t
, ö_add∏
§c_ù
,

648 
u_öt16_t
 
§c_p‹t
, *
ugid_lookuµ
,

649 
u¸ed
 **
uc
, 
öpcb
 *
öp
)

651 #i‚de‡
__FªeBSD__


652  
	`¸ed_check
(
ö¢
, 
¥Ÿo
, 
oif
,

653 
d°_ù
, 
d°_p‹t
, 
§c_ù
, 
§c_p‹t
,

654 (
bsd_u¸ed
 *)
uc
, 
ugid_lookuµ
, ((
mbuf
 *)
öp
)->
m_skb
);

656 
öpcböfo
 *
pi
;

657 
wûdˇrd
;

658 
öpcb
 *
pcb
;

659 
m©ch
;

666 i‡(
öp
 && *
ugid_lookuµ
 == 0) {

667 
	`INP_LOCK_ASSERT
(
öp
);

668 i‡(
öp
->
öp_sockë
 !
NULL
) {

669 *
uc
 = 
	`¸hﬁd
(
öp
->
öp_¸ed
);

670 *
ugid_lookuµ
 = 1;

672 *
ugid_lookuµ
 = -1;

679 i‡(*
ugid_lookuµ
 == -1)

681 i‡(
¥Ÿo
 =
IPPROTO_TCP
) {

682 
wûdˇrd
 = 0;

683 
pi
 = &
V_tcböfo
;

684 } i‡(
¥Ÿo
 =
IPPROTO_UDP
) {

685 
wûdˇrd
 = 
INPLOOKUP_WILDCARD
;

686 
pi
 = &
V_udböfo
;

689 
m©ch
 = 0;

690 i‡(*
ugid_lookuµ
 == 0) {

691 
	`INP_INFO_RLOCK
(
pi
);

692 
pcb
 = (
oif
) ?

693 
	`ö_pcblookup_hash
(
pi
,

694 
d°_ù
, 
	`ht⁄s
(
d°_p‹t
),

695 
§c_ù
, 
	`ht⁄s
(
§c_p‹t
),

696 
wûdˇrd
, 
oif
) :

697 
	`ö_pcblookup_hash
(
pi
,

698 
§c_ù
, 
	`ht⁄s
(
§c_p‹t
),

699 
d°_ù
, 
	`ht⁄s
(
d°_p‹t
),

700 
wûdˇrd
, 
NULL
);

701 i‡(
pcb
 !
NULL
) {

702 *
uc
 = 
	`¸hﬁd
(
pcb
->
öp_¸ed
);

703 *
ugid_lookuµ
 = 1;

705 
	`INP_INFO_RUNLOCK
(
pi
);

706 i‡(*
ugid_lookuµ
 == 0) {

711 *
ugid_lookuµ
 = -1;

715 i‡(
ö¢
->
o
.
›code
 =
O_UID
)

716 
m©ch
 = ((*
uc
)->
¸_uid
 =(
uid_t
)
ö¢
->
d
[0]);

717 i‡(
ö¢
->
o
.
›code
 =
O_GID
)

718 
m©ch
 = 
	`groupmembî
((
gid_t
)
ö¢
->
d
[0], *
uc
);

719 i‡(
ö¢
->
o
.
›code
 =
O_JAIL
)

720 
m©ch
 = ((*
uc
)->
¸_¥is⁄
->
¥_id
 =()
ö¢
->
d
[0]);

721  
m©ch
;

723 
	}
}

730 
ölöe
 

731 
	$£t_m©ch
(
ù_fw_¨gs
 *
¨gs
, 
¶Ÿ
,

732 
ù_fw_chaö
 *
chaö
)

734 
¨gs
->
ruÀ
.
chaö_id
 = 
chaö
->
id
;

735 
¨gs
->
ruÀ
.
¶Ÿ
 = slot + 1;

736 
¨gs
->
ruÀ
.
ruÀ_id
 = 1 + 
chaö
->
m≠
[
¶Ÿ
]->
id
;

737 
¨gs
->
ruÀ
.
ruÀnum
 = 
chaö
->
m≠
[
¶Ÿ
]->rulenum;

738 
	}
}

777 
	$ùfw_chk
(
ù_fw_¨gs
 *
¨gs
)

804 
mbuf
 *
m
 = 
¨gs
->m;

805 
ù
 *ù = 
	`mtod
(
m
, ip *);

814 #i‚de‡
__FªeBSD__


815 
bsd_u¸ed
 
u¸ed_ˇche
;

817 
u¸ed
 *
u¸ed_ˇche
 = 
NULL
;

819 
u¸ed_lookup
 = 0;

827 
i‚ë
 *
oif
 = 
¨gs
->oif;

829 
f_pos
 = 0;

830 
ªtvÆ
 = 0;

835 
u_öt
 
hÀn
 = 0;

848 
u_sh‹t
 
off£t
 = 0;

864 
uöt8_t
 
¥Ÿo
;

865 
uöt16_t
 
§c_p‹t
 = 0, 
d°_p‹t
 = 0;

866 
ö_addr
 
§c_ù
, 
d°_ù
;

867 
uöt16_t
 
ùÀn
=0;

868 
pkéí
;

869 
uöt16_t
 
ëy≥
 = 0;

876 
dyn_dú
 = 
MATCH_UNKNOWN
;

877 
ùfw_dyn_ruÀ
 *
q
 = 
NULL
;

878 
ù_fw_chaö
 *
chaö
 = &
V_œyî3_chaö
;

886 *
uÕ
 = 
NULL
;

889 
is_ùv6
 = 0;

890 
uöt8_t
 
icmp6_ty≥
 = 0;

891 
uöt16_t
 
ext_hd
 = 0;

894 
is_ùv4
 = 0;

896 
d⁄e
 = 0;

898 i‡(
m
->
m_Êags
 & 
M_SKIP_FIREWALL
 || (! 
V_ùfw_v√t_ªady
))

899  (
IP_FW_PASS
);

901 
d°_ù
.
s_addr
 = 0;

902 
§c_ù
.
s_addr
 = 0;

903 
pkéí
 = 
m
->
m_pkthdr
.
Àn
;

904 
¨gs
->
f_id
.
fib
 = 
	`M_GETFIB
(
m
);

905 
¥Ÿo
 = 
¨gs
->
f_id
.proto = 0;

914 
	#PULLUP_TO
(
_Àn
, 
p
, 
T
) \

916 
x
 = (
_Àn
Ë+ (
T
); \

917 i‡((
m
)->
m_Àn
 < 
x
) { \

918 
¨gs
->
m
 = m = 
	`m_puŒup
(m, 
x
); \

919 i‡(
m
 =
NULL
) \

920 
puŒup_Áûed
; \

922 
p
 = (
	`mtod
(
m
, *Ë+ (
_Àn
)); \

923 } 0)

	)

928 i‡(
¨gs
->
eh
)

929 
ëy≥
 = 
	`¡ohs
(
¨gs
->
eh
->
ëhî_ty≥
);

932 i‡(
pkéí
 >(
ù6_hdr
) &&

933 (
¨gs
->
eh
 =
NULL
 || 
ëy≥
 =
ETHERTYPE_IPV6
Ë&& 
ù
->
ù_v
 == 6) {

934 
ù6_hdr
 *
ù6
 = (ù6_hd∏*)
ù
;

935 
is_ùv6
 = 1;

936 
¨gs
->
f_id
.
addr_ty≥
 = 6;

937 
hÀn
 = (
ù6_hdr
);

938 
¥Ÿo
 = 
ù6
->
ù6_nxt
;

941 
uÕ
 =
NULL
) {

942 
¥Ÿo
) {

943 
IPPROTO_ICMPV6
:

944 
	`PULLUP_TO
(
hÀn
, 
uÕ
, 
icmp6_hdr
);

945 
icmp6_ty≥
 = 
	`ICMP6
(
uÕ
)->icmp6_type;

948 
IPPROTO_TCP
:

949 
	`PULLUP_TO
(
hÀn
, 
uÕ
, 
t˝hdr
);

950 
d°_p‹t
 = 
	`TCP
(
uÕ
)->
th_dp‹t
;

951 
§c_p‹t
 = 
	`TCP
(
uÕ
)->
th_•‹t
;

953 
¨gs
->
f_id
.
_Êags
 = 
	`TCP
(
uÕ
)->
th_Êags
;

956 
IPPROTO_SCTP
:

957 
	`PULLUP_TO
(
hÀn
, 
uÕ
, 
s˘phdr
);

958 
§c_p‹t
 = 
	`SCTP
(
uÕ
)->src_port;

959 
d°_p‹t
 = 
	`SCTP
(
uÕ
)->
de°_p‹t
;

962 
IPPROTO_UDP
:

963 
	`PULLUP_TO
(
hÀn
, 
uÕ
, 
udphdr
);

964 
d°_p‹t
 = 
	`UDP
(
uÕ
)->
uh_dp‹t
;

965 
§c_p‹t
 = 
	`UDP
(
uÕ
)->
uh_•‹t
;

968 
IPPROTO_HOPOPTS
:

969 
	`PULLUP_TO
(
hÀn
, 
uÕ
, 
ù6_hbh
);

970 
ext_hd
 |
EXT_HOPOPTS
;

971 
hÀn
 +(((
ù6_hbh
 *)
uÕ
)->
ù6h_Àn
 + 1) << 3;

972 
¥Ÿo
 = ((
ù6_hbh
 *)
uÕ
)->
ù6h_nxt
;

973 
uÕ
 = 
NULL
;

976 
IPPROTO_ROUTING
:

977 
	`PULLUP_TO
(
hÀn
, 
uÕ
, 
ù6_πhdr
);

978 ((
ù6_πhdr
 *)
uÕ
)->
ù6r_ty≥
) {

980 
ext_hd
 |
EXT_RTHDR0
;

983 
ext_hd
 |
EXT_RTHDR2
;

986 
	`¥ötf
("IPFW2: IPV6 - Unknown Routing "

988 ((
ù6_πhdr
 *)
uÕ
)->
ù6r_ty≥
);

989 i‡(
V_fw_díy_unknown_exthdrs
)

990  (
IP_FW_DENY
);

993 
ext_hd
 |
EXT_ROUTING
;

994 
hÀn
 +(((
ù6_πhdr
 *)
uÕ
)->
ù6r_Àn
 + 1) << 3;

995 
¥Ÿo
 = ((
ù6_πhdr
 *)
uÕ
)->
ù6r_nxt
;

996 
uÕ
 = 
NULL
;

999 
IPPROTO_FRAGMENT
:

1000 
	`PULLUP_TO
(
hÀn
, 
uÕ
, 
ù6_‰ag
);

1001 
ext_hd
 |
EXT_FRAGMENT
;

1002 
hÀn
 + (
ù6_‰ag
);

1003 
¥Ÿo
 = ((
ù6_‰ag
 *)
uÕ
)->
ù6f_nxt
;

1004 
off£t
 = ((
ù6_‰ag
 *)
uÕ
)->
ù6f_ofÊg
 &

1005 
IP6F_OFF_MASK
;

1008 
off£t
 |((
ù6_‰ag
 *)
uÕ
)->
ù6f_ofÊg
 &

1009 
IP6F_MORE_FRAG
;

1010 i‡(
off£t
 == 0) {

1011 
	`¥ötf
("IPFW2: IPV6 - Invalid Fragment "

1013 i‡(
V_fw_díy_unknown_exthdrs
)

1014  (
IP_FW_DENY
);

1017 
¨gs
->
f_id
.
exåa
 =

1018 
	`¡ohl
(((
ù6_‰ag
 *)
uÕ
)->
ù6f_idít
);

1019 
uÕ
 = 
NULL
;

1022 
IPPROTO_DSTOPTS
:

1023 
	`PULLUP_TO
(
hÀn
, 
uÕ
, 
ù6_hbh
);

1024 
ext_hd
 |
EXT_DSTOPTS
;

1025 
hÀn
 +(((
ù6_hbh
 *)
uÕ
)->
ù6h_Àn
 + 1) << 3;

1026 
¥Ÿo
 = ((
ù6_hbh
 *)
uÕ
)->
ù6h_nxt
;

1027 
uÕ
 = 
NULL
;

1030 
IPPROTO_AH
:

1031 
	`PULLUP_TO
(
hÀn
, 
uÕ
, 
ù6_ext
);

1032 
ext_hd
 |
EXT_AH
;

1033 
hÀn
 +(((
ù6_ext
 *)
uÕ
)->
ù6e_Àn
 + 2) << 2;

1034 
¥Ÿo
 = ((
ù6_ext
 *)
uÕ
)->
ù6e_nxt
;

1035 
uÕ
 = 
NULL
;

1038 
IPPROTO_ESP
:

1039 
	`PULLUP_TO
(
hÀn
, 
uÕ
, 
uöt32_t
);

1042 
ext_hd
 |
EXT_ESP
;

1045 
IPPROTO_NONE
:

1051 
uÕ
 = 
ù
;

1054 
IPPROTO_OSPFIGP
:

1056 
	`PULLUP_TO
(
hÀn
, 
uÕ
, 
ù6_ext
);

1059 
IPPROTO_PIM
:

1061 
	`PULLUP_TO
(
hÀn
, 
uÕ
, 
pim
);

1064 
IPPROTO_CARP
:

1065 
	`PULLUP_TO
(
hÀn
, 
uÕ
, 
ˇΩ_hódî
);

1066 i‡(((
ˇΩ_hódî
 *)
uÕ
)->
ˇΩ_vîsi⁄
 !=

1067 
CARP_VERSION
)

1068  (
IP_FW_DENY
);

1069 i‡(((
ˇΩ_hódî
 *)
uÕ
)->
ˇΩ_ty≥
 !=

1070 
CARP_ADVERTISEMENT
)

1071  (
IP_FW_DENY
);

1074 
IPPROTO_IPV6
:

1075 
	`PULLUP_TO
(
hÀn
, 
uÕ
, 
ù6_hdr
);

1078 
IPPROTO_IPV4
:

1079 
	`PULLUP_TO
(
hÀn
, 
uÕ
, 
ù
);

1083 
	`¥ötf
("IPFW2: IPV6 - Unknown Extension "

1084 "Hódî(%d),Éxt_hd=%x\n", 
¥Ÿo
, 
ext_hd
);

1085 i‡(
V_fw_díy_unknown_exthdrs
)

1086  (
IP_FW_DENY
);

1087 
	`PULLUP_TO
(
hÀn
, 
uÕ
, 
ù6_ext
);

1091 
ù
 = 
	`mtod
(
m
, ip *);

1092 
ù6
 = (
ù6_hdr
 *)
ù
;

1093 
¨gs
->
f_id
.
§c_ù6
 = 
ù6
->
ù6_§c
;

1094 
¨gs
->
f_id
.
d°_ù6
 = 
ù6
->
ù6_d°
;

1095 
¨gs
->
f_id
.
§c_ù
 = 0;

1096 
¨gs
->
f_id
.
d°_ù
 = 0;

1097 
¨gs
->
f_id
.
Êow_id6
 = 
	`¡ohl
(
ù6
->
ù6_Êow
);

1098 } i‡(
pkéí
 >(
ù
) &&

1099 (
¨gs
->
eh
 =
NULL
 || 
ëy≥
 =
ETHERTYPE_IP
Ë&& 
ù
->
ù_v
 == 4) {

1100 
is_ùv4
 = 1;

1101 
hÀn
 = 
ù
->
ù_hl
 << 2;

1102 
¨gs
->
f_id
.
addr_ty≥
 = 4;

1107 
¥Ÿo
 = 
ù
->
ù_p
;

1108 
§c_ù
 = 
ù
->
ù_§c
;

1109 
d°_ù
 = 
ù
->
ù_d°
;

1110 
off£t
 = 
	`¡ohs
(
ù
->
ù_off
Ë& 
IP_OFFMASK
;

1111 
ùÀn
 = 
	`¡ohs
(
ù
->
ù_Àn
);

1112 
pkéí
 = 
ùÀn
 <Öktlen ? iplen :Öktlen;

1114 i‡(
off£t
 == 0) {

1115 
¥Ÿo
) {

1116 
IPPROTO_TCP
:

1117 
	`PULLUP_TO
(
hÀn
, 
uÕ
, 
t˝hdr
);

1118 
d°_p‹t
 = 
	`TCP
(
uÕ
)->
th_dp‹t
;

1119 
§c_p‹t
 = 
	`TCP
(
uÕ
)->
th_•‹t
;

1121 
¨gs
->
f_id
.
_Êags
 = 
	`TCP
(
uÕ
)->
th_Êags
;

1124 
IPPROTO_UDP
:

1125 
	`PULLUP_TO
(
hÀn
, 
uÕ
, 
udphdr
);

1126 
d°_p‹t
 = 
	`UDP
(
uÕ
)->
uh_dp‹t
;

1127 
§c_p‹t
 = 
	`UDP
(
uÕ
)->
uh_•‹t
;

1130 
IPPROTO_ICMP
:

1131 
	`PULLUP_TO
(
hÀn
, 
uÕ
, 
icmphdr
);

1140 
ù
 = 
	`mtod
(
m
, ip *);

1141 
¨gs
->
f_id
.
§c_ù
 = 
	`¡ohl
(§c_ù.
s_addr
);

1142 
¨gs
->
f_id
.
d°_ù
 = 
	`¡ohl
(d°_ù.
s_addr
);

1144 #unde‡
PULLUP_TO


1145 i‡(
¥Ÿo
) {

1146 
¨gs
->
f_id
.
¥Ÿo
 =Öroto;

1147 
¨gs
->
f_id
.
§c_p‹t
 = src_p‹à
	`¡ohs
(src_port);

1148 
¨gs
->
f_id
.
d°_p‹t
 = d°_p‹à
	`¡ohs
(dst_port);

1151 
	`IPFW_RLOCK
(
chaö
);

1152 i‡(! 
V_ùfw_v√t_ªady
) {

1153 
	`IPFW_RUNLOCK
(
chaö
);

1154  (
IP_FW_PASS
);

1156 i‡(
¨gs
->
ruÀ
.
¶Ÿ
) {

1164 
f_pos
 = (
¨gs
->
ruÀ
.
chaö_id
 =
chaö
->
id
) ?

1165 
¨gs
->
ruÀ
.
¶Ÿ
 :

1166 
	`ùfw_föd_ruÀ
(
chaö
, 
¨gs
->
ruÀ
.
ruÀnum
,

1167 
¨gs
->
ruÀ
.
ruÀ_id
);

1169 
f_pos
 = 0;

1190 ; 
f_pos
 < 
chaö
->
n_ruÀs
; f_pos++) {

1191 
ùfw_ö¢
 *
cmd
;

1192 
uöt32_t
 
èbÀ¨g
 = 0;

1193 
l
, 
cmdÀn
, 
skù_‹
;

1194 
ù_fw
 *
f
;

1196 
f
 = 
chaö
->
m≠
[
f_pos
];

1197 i‡(
V_£t_dißbÀ
 & (1 << 
f
->
£t
) )

1200 
skù_‹
 = 0;

1201 
l
 = 
f
->
cmd_Àn
, 
cmd
 = f->cmd ;Ü > 0 ;

1202 
l
 -
cmdÀn
, 
cmd
 += cmdlen) {

1203 
m©ch
;

1212 
cmdÀn
 = 
	`F_LEN
(
cmd
);

1220 i‡(
skù_‹
) {

1221 i‡((
cmd
->
Àn
 & 
F_OR
) == 0)

1222 
skù_‹
 = 0;

1225 
m©ch
 = 0;

1227 
cmd
->
›code
) {

1235 
O_NOP
:

1236 
m©ch
 = 1;

1239 
O_FORWARD_MAC
:

1240 
	`¥ötf
("ipfw: opcode %d unimplemented\n",

1241 
cmd
->
›code
);

1244 
O_GID
:

1245 
O_UID
:

1246 
O_JAIL
:

1252 i‡(
off£t
!=0)

1254 i‡(
is_ùv6
)

1256 i‡(
¥Ÿo
 =
IPPROTO_TCP
 ||

1257 
¥Ÿo
 =
IPPROTO_UDP
)

1258 
m©ch
 = 
	`check_uidgid
(

1259 (
ùfw_ö¢_u32
 *)
cmd
,

1260 
¥Ÿo
, 
oif
,

1261 
d°_ù
, 
d°_p‹t
,

1262 
§c_ù
, 
§c_p‹t
, &
u¸ed_lookup
,

1263 #ifde‡
__FªeBSD__


1264 &
u¸ed_ˇche
, 
¨gs
->
öp
);

1266 (*)&
u¸ed_ˇche
,

1267 (
öpcb
 *)
¨gs
->
m
);

1271 
O_RECV
:

1272 
m©ch
 = 
	`iÁ˚_m©ch
(
m
->
m_pkthdr
.
rcvif
,

1273 (
ùfw_ö¢_if
 *)
cmd
);

1276 
O_XMIT
:

1277 
m©ch
 = 
	`iÁ˚_m©ch
(
oif
, (
ùfw_ö¢_if
 *)
cmd
);

1280 
O_VIA
:

1281 
m©ch
 = 
	`iÁ˚_m©ch
(
oif
 ? oif :

1282 
m
->
m_pkthdr
.
rcvif
, (
ùfw_ö¢_if
 *)
cmd
);

1285 
O_MACADDR2
:

1286 i‡(
¨gs
->
eh
 !
NULL
) {

1287 
u_öt32_t
 *
w™t
 = (u_int32_t *)

1288 ((
ùfw_ö¢_mac
 *)
cmd
)->
addr
;

1289 
u_öt32_t
 *
mask
 = (u_int32_t *)

1290 ((
ùfw_ö¢_mac
 *)
cmd
)->
mask
;

1291 
u_öt32_t
 *
hdr
 = (u_öt32_à*)
¨gs
->
eh
;

1293 
m©ch
 =

1294 –
w™t
[0] =(
hdr
[0] & 
mask
[0]) &&

1295 
w™t
[1] =(
hdr
[1] & 
mask
[1]) &&

1296 
w™t
[2] =(
hdr
[2] & 
mask
[2]) );

1300 
O_MAC_TYPE
:

1301 i‡(
¨gs
->
eh
 !
NULL
) {

1302 
u_öt16_t
 *
p
 =

1303 ((
ùfw_ö¢_u16
 *)
cmd
)->
p‹ts
;

1304 
i
;

1306 
i
 = 
cmdÀn
 - 1; !
m©ch
 && i>0;

1307 
i
--, 
p
 += 2)

1308 
m©ch
 = (
ëy≥
 >
p
[0] &&

1309 
ëy≥
 <
p
[1]);

1313 
O_FRAG
:

1314 
m©ch
 = (
off£t
 != 0);

1317 
O_IN
:

1318 
m©ch
 = (
oif
 =
NULL
);

1321 
O_LAYER2
:

1322 
m©ch
 = (
¨gs
->
eh
 !
NULL
);

1325 
O_DIVERTED
:

1331 
uöt32_t
 
i
 = 
¨gs
->
ruÀ
.
öfo
;

1332 
m©ch
 = (
i
&
IPFW_IS_MASK
Ë=
IPFW_IS_DIVERT
 &&

1333 
cmd
->
¨g1
 & ((
i
 & 
IPFW_INFO_IN
) ? 1 : 2);

1337 
O_PROTO
:

1342 
m©ch
 = (
¥Ÿo
 =
cmd
->
¨g1
);

1345 
O_IP_SRC
:

1346 
m©ch
 = 
is_ùv4
 &&

1347 (((
ùfw_ö¢_ù
 *)
cmd
)->
addr
.
s_addr
 ==

1348 
§c_ù
.
s_addr
);

1351 
O_IP_SRC_LOOKUP
:

1352 
O_IP_DST_LOOKUP
:

1353 i‡(
is_ùv4
) {

1354 
uöt32_t
 
key
 =

1355 (
cmd
->
›code
 =
O_IP_DST_LOOKUP
) ?

1356 
d°_ù
.
s_addr
 : 
§c_ù
.s_addr;

1357 
uöt32_t
 
v
 = 0;

1359 i‡(
cmdÀn
 > 
	`F_INSN_SIZE
(
ùfw_ö¢_u32
)) {

1363 
v
 = ((
ùfw_ö¢_u32
 *)
cmd
)->
d
[1];

1364 i‡(
v
 == 0)

1365 
key
 = 
d°_ù
.
s_addr
;

1366 i‡(
v
 == 1)

1367 
key
 = 
§c_ù
.
s_addr
;

1368 i‡(
v
 == 6)

1369 
key
 = (
ù
->
ù_tos
 >> 2) & 0x3f;

1370 i‡(
off£t
 != 0)

1372 i‡(
¥Ÿo
 !
IPPROTO_TCP
 &&

1373 
¥Ÿo
 !
IPPROTO_UDP
)

1375 i‡(
v
 == 2)

1376 
key
 = 
	`ht⁄l
(
d°_p‹t
);

1377 i‡(
v
 == 3)

1378 
key
 = 
	`ht⁄l
(
§c_p‹t
);

1379 i‡(
v
 == 4 || v == 5) {

1380 
	`check_uidgid
(

1381 (
ùfw_ö¢_u32
 *)
cmd
,

1382 
¥Ÿo
, 
oif
,

1383 
d°_ù
, 
d°_p‹t
,

1384 
§c_ù
, 
§c_p‹t
, &
u¸ed_lookup
,

1385 #ifde‡
__FªeBSD__


1386 &
u¸ed_ˇche
, 
¨gs
->
öp
);

1387 i‡(
v
 == 4 )

1388 
key
 = 
u¸ed_ˇche
->
¸_uid
;

1389 i‡(
v
 == 5 )

1390 
key
 = 
u¸ed_ˇche
->
¸_¥is⁄
->
¥_id
;

1392 (*)&
u¸ed_ˇche
,

1393 (
öpcb
 *)
¨gs
->
m
);

1394 i‡(
v
 ==4 )

1395 
key
 = 
u¸ed_ˇche
.
uid
;

1396 i‡(
v
 == 5 )

1397 
key
 = 
u¸ed_ˇche
.
xid
;

1399 
key
 = 
	`ht⁄l
(key);

1403 
m©ch
 = 
	`ùfw_lookup_èbÀ
(
chaö
,

1404 
cmd
->
¨g1
, 
key
, &
v
);

1405 i‡(!
m©ch
)

1407 i‡(
cmdÀn
 =
	`F_INSN_SIZE
(
ùfw_ö¢_u32
))

1408 
m©ch
 =

1409 ((
ùfw_ö¢_u32
 *)
cmd
)->
d
[0] =
v
;

1411 
èbÀ¨g
 = 
v
;

1415 
O_IP_SRC_MASK
:

1416 
O_IP_DST_MASK
:

1417 i‡(
is_ùv4
) {

1418 
uöt32_t
 
a
 =

1419 (
cmd
->
›code
 =
O_IP_DST_MASK
) ?

1420 
d°_ù
.
s_addr
 : 
§c_ù
.s_addr;

1421 
uöt32_t
 *
p
 = ((
ùfw_ö¢_u32
 *)
cmd
)->
d
;

1422 
i
 = 
cmdÀn
-1;

1424 ; !
m©ch
 && 
i
>0; i-2, 
p
+= 2)

1425 
m©ch
 = (
p
[0] =(
a
 &Ö[1]));

1429 
O_IP_SRC_ME
:

1430 i‡(
is_ùv4
) {

1431 
i‚ë
 *
tif
;

1433 
	`INADDR_TO_IFP
(
§c_ù
, 
tif
);

1434 
m©ch
 = (
tif
 !
NULL
);

1437 #ifde‡
INET6


1439 
O_IP6_SRC_ME
:

1440 
m©ch

is_ùv6
 && 
	`£¨ch_ù6_addr_√t
(&
¨gs
->
f_id
.
§c_ù6
);

1444 
O_IP_DST_SET
:

1445 
O_IP_SRC_SET
:

1446 i‡(
is_ùv4
) {

1447 
u_öt32_t
 *
d
 = (u_öt32_à*)(
cmd
+1);

1448 
u_öt32_t
 
addr
 =

1449 
cmd
->
›code
 =
O_IP_DST_SET
 ?

1450 
¨gs
->
f_id
.
d°_ù
 :

1451 
¨gs
->
f_id
.
§c_ù
;

1453 i‡(
addr
 < 
d
[0])

1455 
addr
 -
d
[0];

1456 
m©ch
 = (
addr
 < 
cmd
->
¨g1
) &&

1457 –
d
[ 1 + (
addr
>>5)] &

1458 (1<<(
addr
 & 0x1f)) );

1462 
O_IP_DST
:

1463 
m©ch
 = 
is_ùv4
 &&

1464 (((
ùfw_ö¢_ù
 *)
cmd
)->
addr
.
s_addr
 ==

1465 
d°_ù
.
s_addr
);

1468 
O_IP_DST_ME
:

1469 i‡(
is_ùv4
) {

1470 
i‚ë
 *
tif
;

1472 
	`INADDR_TO_IFP
(
d°_ù
, 
tif
);

1473 
m©ch
 = (
tif
 !
NULL
);

1476 #ifde‡
INET6


1478 
O_IP6_DST_ME
:

1479 
m©ch

is_ùv6
 && 
	`£¨ch_ù6_addr_√t
(&
¨gs
->
f_id
.
d°_ù6
);

1484 
O_IP_SRCPORT
:

1485 
O_IP_DSTPORT
:

1491 i‡((
¥Ÿo
==
IPPROTO_UDP
 ||ÖrŸo==
IPPROTO_TCP
)

1492 && 
off£t
 == 0) {

1493 
u_öt16_t
 
x
 =

1494 (
cmd
->
›code
 =
O_IP_SRCPORT
) ?

1495 
§c_p‹t
 : 
d°_p‹t
 ;

1496 
u_öt16_t
 *
p
 =

1497 ((
ùfw_ö¢_u16
 *)
cmd
)->
p‹ts
;

1498 
i
;

1500 
i
 = 
cmdÀn
 - 1; !
m©ch
 && i>0;

1501 
i
--, 
p
 += 2)

1502 
m©ch
 = (
x
>=
p
[0] && x<=p[1]);

1506 
O_ICMPTYPE
:

1507 
m©ch
 = (
off£t
 =0 && 
¥Ÿo
==
IPPROTO_ICMP
 &&

1508 
	`icm±y≥_m©ch
(
	`ICMP
(
uÕ
), (
ùfw_ö¢_u32
 *)
cmd
) );

1511 #ifde‡
INET6


1512 
O_ICMP6TYPE
:

1513 
m©ch
 = 
is_ùv6
 && 
off£t
 == 0 &&

1514 
¥Ÿo
==
IPPROTO_ICMPV6
 &&

1515 
	`icmp6ty≥_m©ch
(

1516 
	`ICMP6
(
uÕ
)->
icmp6_ty≥
,

1517 (
ùfw_ö¢_u32
 *)
cmd
);

1521 
O_IPOPT
:

1522 
m©ch
 = (
is_ùv4
 &&

1523 
	`ù›ts_m©ch
(
ù
, 
cmd
) );

1526 
O_IPVER
:

1527 
m©ch
 = (
is_ùv4
 &&

1528 
cmd
->
¨g1
 =
ù
->
ù_v
);

1531 
O_IPID
:

1532 
O_IPLEN
:

1533 
O_IPTTL
:

1534 i‡(
is_ùv4
) {

1535 
uöt16_t
 
x
;

1536 
uöt16_t
 *
p
;

1537 
i
;

1539 i‡(
cmd
->
›code
 =
O_IPLEN
)

1540 
x
 = 
ùÀn
;

1541 i‡(
cmd
->
›code
 =
O_IPTTL
)

1542 
x
 = 
ù
->
ù_âl
;

1544 
x
 = 
	`¡ohs
(
ù
->
ù_id
);

1545 i‡(
cmdÀn
 == 1) {

1546 
m©ch
 = (
cmd
->
¨g1
 =
x
);

1550 
p
 = ((
ùfw_ö¢_u16
 *)
cmd
)->
p‹ts
;

1551 
i
 = 
cmdÀn
 - 1;

1552 ; !
m©ch
 && 
i
>0; i--, 
p
 += 2)

1553 
m©ch
 = (
x
 >
p
[0] && x <=Ö[1]);

1557 
O_IPPRECEDENCE
:

1558 
m©ch
 = (
is_ùv4
 &&

1559 (
cmd
->
¨g1
 =(
ù
->
ù_tos
 & 0xe0)) );

1562 
O_IPTOS
:

1563 
m©ch
 = (
is_ùv4
 &&

1564 
	`Êags_m©ch
(
cmd
, 
ù
->
ù_tos
));

1567 
O_TCPDATALEN
:

1568 i‡(
¥Ÿo
 =
IPPROTO_TCP
 && 
off£t
 == 0) {

1569 
t˝hdr
 *
t˝
;

1570 
uöt16_t
 
x
;

1571 
uöt16_t
 *
p
;

1572 
i
;

1574 
t˝
 = 
	`TCP
(
uÕ
);

1575 
x
 = 
ùÀn
 -

1576 ((
ù
->
ù_hl
 + 
t˝
->
th_off
) << 2);

1577 i‡(
cmdÀn
 == 1) {

1578 
m©ch
 = (
cmd
->
¨g1
 =
x
);

1582 
p
 = ((
ùfw_ö¢_u16
 *)
cmd
)->
p‹ts
;

1583 
i
 = 
cmdÀn
 - 1;

1584 ; !
m©ch
 && 
i
>0; i--, 
p
 += 2)

1585 
m©ch
 = (
x
 >
p
[0] && x <=Ö[1]);

1589 
O_TCPFLAGS
:

1590 
m©ch
 = (
¥Ÿo
 =
IPPROTO_TCP
 && 
off£t
 == 0 &&

1591 
	`Êags_m©ch
(
cmd
, 
	`TCP
(
uÕ
)->
th_Êags
));

1594 
O_TCPOPTS
:

1595 
m©ch
 = (
¥Ÿo
 =
IPPROTO_TCP
 && 
off£t
 == 0 &&

1596 
	`t˝›ts_m©ch
(
	`TCP
(
uÕ
), 
cmd
));

1599 
O_TCPSEQ
:

1600 
m©ch
 = (
¥Ÿo
 =
IPPROTO_TCP
 && 
off£t
 == 0 &&

1601 ((
ùfw_ö¢_u32
 *)
cmd
)->
d
[0] ==

1602 
	`TCP
(
uÕ
)->
th_£q
);

1605 
O_TCPACK
:

1606 
m©ch
 = (
¥Ÿo
 =
IPPROTO_TCP
 && 
off£t
 == 0 &&

1607 ((
ùfw_ö¢_u32
 *)
cmd
)->
d
[0] ==

1608 
	`TCP
(
uÕ
)->
th_ack
);

1611 
O_TCPWIN
:

1612 
m©ch
 = (
¥Ÿo
 =
IPPROTO_TCP
 && 
off£t
 == 0 &&

1613 
cmd
->
¨g1
 =
	`TCP
(
uÕ
)->
th_wö
);

1616 
O_ESTAB
:

1619 
m©ch
 = (
¥Ÿo
 =
IPPROTO_TCP
 && 
off£t
 == 0 &&

1620 (
	`TCP
(
uÕ
)->
th_Êags
 &

1621 (
TH_RST
 | 
TH_ACK
 | 
TH_SYN
)) != TH_SYN);

1624 
O_ALTQ
: {

1625 
pf_mèg
 *
©
;

1626 
ùfw_ö¢_Ætq
 *
Ætq
 = (ùfw_ö¢_Ætq *)
cmd
;

1628 
m©ch
 = 1;

1629 
©
 = 
	`pf_föd_mèg
(
m
);

1630 i‡(
©
 !
NULL
 &&át->
qid
 != 0)

1632 
©
 = 
	`pf_gë_mèg
(
m
);

1633 i‡(
©
 =
NULL
) {

1640 
©
->
qid
 = 
Ætq
->qid;

1641 i‡(
is_ùv4
)

1642 
©
->
af
 = 
AF_INET
;

1644 
©
->
af
 = 
AF_LINK
;

1645 
©
->
hdr
 = 
ù
;

1649 
O_LOG
:

1650 
	`ùfw_log
(
f
, 
hÀn
, 
¨gs
, 
m
,

1651 
oif
, 
off£t
, 
èbÀ¨g
, 
ù
);

1652 
m©ch
 = 1;

1655 
O_PROB
:

1656 
m©ch
 = (
	`øndom
()<((
ùfw_ö¢_u32
 *)
cmd
)->
d
[0]);

1659 
O_VERREVPATH
:

1661 
m©ch
 = ((
oif
 !
NULL
) ||

1662 (
m
->
m_pkthdr
.
rcvif
 =
NULL
) ||

1664 #ifde‡
INET6


1665 
is_ùv6
 ?

1666 
	`vîify_∑th6
(&(
¨gs
->
f_id
.
§c_ù6
),

1667 
m
->
m_pkthdr
.
rcvif
) :

1669 
	`vîify_∑th
(
§c_ù
, 
m
->
m_pkthdr
.
rcvif
,

1670 
¨gs
->
f_id
.
fib
)));

1673 
O_VERSRCREACH
:

1675 
m©ch
 = (
hÀn
 > 0 && ((
oif
 !
NULL
) ||

1676 #ifde‡
INET6


1677 
is_ùv6
 ?

1678 
	`vîify_∑th6
(&(
¨gs
->
f_id
.
§c_ù6
),

1679 
NULL
) :

1681 
	`vîify_∑th
(
§c_ù
, 
NULL
, 
¨gs
->
f_id
.
fib
)));

1684 
O_ANTISPOOF
:

1686 i‡(
oif
 =
NULL
 && 
hÀn
 > 0 &&

1687 –(
is_ùv4
 && 
	`ö_loˇœddr
(
§c_ù
))

1688 #ifde‡
INET6


1689 || (
is_ùv6
 &&

1690 
	`ö6_loˇœddr
(&(
¨gs
->
f_id
.
§c_ù6
)))

1693 
m©ch
 =

1694 #ifde‡
INET6


1695 
is_ùv6
 ? 
	`vîify_∑th6
(

1696 &(
¨gs
->
f_id
.
§c_ù6
),

1697 
m
->
m_pkthdr
.
rcvif
) :

1699 
	`vîify_∑th
(
§c_ù
,

1700 
m
->
m_pkthdr
.
rcvif
,

1701 
¨gs
->
f_id
.
fib
);

1703 
m©ch
 = 1;

1706 
O_IPSEC
:

1707 #ifde‡
IPSEC


1708 
m©ch
 = (
	`m_èg_föd
(
m
,

1709 
PACKET_TAG_IPSEC_IN_DONE
, 
NULL
) != NULL);

1714 #ifde‡
INET6


1715 
O_IP6_SRC
:

1716 
m©ch
 = 
is_ùv6
 &&

1717 
	`IN6_ARE_ADDR_EQUAL
(&
¨gs
->
f_id
.
§c_ù6
,

1718 &((
ùfw_ö¢_ù6
 *)
cmd
)->
addr6
);

1721 
O_IP6_DST
:

1722 
m©ch
 = 
is_ùv6
 &&

1723 
	`IN6_ARE_ADDR_EQUAL
(&
¨gs
->
f_id
.
d°_ù6
,

1724 &((
ùfw_ö¢_ù6
 *)
cmd
)->
addr6
);

1726 
O_IP6_SRC_MASK
:

1727 
O_IP6_DST_MASK
:

1728 i‡(
is_ùv6
) {

1729 
i
 = 
cmdÀn
 - 1;

1730 
ö6_addr
 
p
;

1731 
ö6_addr
 *
d
 =

1732 &((
ùfw_ö¢_ù6
 *)
cmd
)->
addr6
;

1734 ; !
m©ch
 && 
i
 > 0; 
d
 += 2,

1735 
i
 -
	`F_INSN_SIZE
(
ö6_addr
)

1737 
p
 = (
cmd
->
›code
 ==

1738 
O_IP6_SRC_MASK
) ?

1739 
¨gs
->
f_id
.
§c_ù6
:

1740 
¨gs
->
f_id
.
d°_ù6
;

1741 
	`APPLY_MASK
(&
p
, &
d
[1]);

1742 
m©ch
 =

1743 
	`IN6_ARE_ADDR_EQUAL
(&
d
[0],

1744 &
p
);

1749 
O_FLOW6ID
:

1750 
m©ch
 = 
is_ùv6
 &&

1751 
	`Êow6id_m©ch
(
¨gs
->
f_id
.
Êow_id6
,

1752 (
ùfw_ö¢_u32
 *Ë
cmd
);

1755 
O_EXT_HDR
:

1756 
m©ch
 = 
is_ùv6
 &&

1757 (
ext_hd
 & ((
ùfw_ö¢
 *Ë
cmd
)->
¨g1
);

1760 
O_IP6
:

1761 
m©ch
 = 
is_ùv6
;

1765 
O_IP4
:

1766 
m©ch
 = 
is_ùv4
;

1769 
O_TAG
: {

1770 
m_èg
 *
mèg
;

1771 
uöt32_t
 
èg
 = (
cmd
->
¨g1
 =
IP_FW_TABLEARG
) ?

1772 
èbÀ¨g
 : 
cmd
->
¨g1
;

1775 
mèg
 = 
	`m_èg_loˇã
(
m
, 
MTAG_IPFW
, 
èg
, 
NULL
);

1784 i‡(
cmd
->
Àn
 & 
F_NOT
) {

1785 i‡(
mèg
 !
NULL
)

1786 
	`m_èg_dñëe
(
m
, 
mèg
);

1787 
m©ch
 = 0;

1788 } i‡(
mèg
 =
NULL
) {

1789 i‡((
mèg
 = 
	`m_èg_Æloc
(
MTAG_IPFW
,

1790 
èg
, 0, 
M_NOWAIT
)Ë!
NULL
)

1791 
	`m_èg_¥ïíd
(
m
, 
mèg
);

1792 
m©ch
 = 1;

1797 
O_FIB
:

1798 i‡(
¨gs
->
f_id
.
fib
 =
cmd
->
¨g1
)

1799 
m©ch
 = 1;

1802 
O_TAGGED
: {

1803 
m_èg
 *
mèg
;

1804 
uöt32_t
 
èg
 = (
cmd
->
¨g1
 =
IP_FW_TABLEARG
) ?

1805 
èbÀ¨g
 : 
cmd
->
¨g1
;

1807 i‡(
cmdÀn
 == 1) {

1808 
m©ch
 = 
	`m_èg_loˇã
(
m
, 
MTAG_IPFW
,

1809 
èg
, 
NULL
) != NULL;

1814 
mèg
 = 
	`m_èg_fú°
(
m
);

1815 
mèg
 !
NULL
 && !
m©ch
;

1816 
mèg
 = 
	`m_èg_√xt
(
m
, mtag)) {

1817 
uöt16_t
 *
p
;

1818 
i
;

1820 i‡(
mèg
->
m_èg_cookõ
 !
MTAG_IPFW
)

1823 
p
 = ((
ùfw_ö¢_u16
 *)
cmd
)->
p‹ts
;

1824 
i
 = 
cmdÀn
 - 1;

1825 ; !
m©ch
 && 
i
 > 0; i--, 
p
 += 2)

1826 
m©ch
 =

1827 
mèg
->
m_èg_id
 >
p
[0] &&

1828 
mèg
->
m_èg_id
 <
p
[1];

1874 
O_LIMIT
:

1875 
O_KEEP_STATE
:

1876 i‡(
	`ùfw_ö°Æl_°©e
(
f
,

1877 (
ùfw_ö¢_limô
 *)
cmd
, 
¨gs
, 
èbÀ¨g
)) {

1879 
ªtvÆ
 = 
IP_FW_DENY
;

1880 
l
 = 0;

1881 
d⁄e
 = 1;

1883 
m©ch
 = 1;

1886 
O_PROBE_STATE
:

1887 
O_CHECK_STATE
:

1897 i‡(
dyn_dú
 =
MATCH_UNKNOWN
 &&

1898 (
q
 = 
	`ùfw_lookup_dyn_ruÀ
(&
¨gs
->
f_id
,

1899 &
dyn_dú
, 
¥Ÿo
 =
IPPROTO_TCP
 ?

1900 
	`TCP
(
uÕ
Ë: 
NULL
))

1901 !
NULL
) {

1908 
q
->
p˙t
++;

1909 
q
->
b˙t
 +
pkéí
;

1915 
f
 = 
q
->
ruÀ
;

1916 
f_pos
 = 
	`ùfw_föd_ruÀ
(
chaö
,

1917 
f
->
ruÀnum
, f->
id
);

1918 
cmd
 = 
	`ACTION_PTR
(
f
);

1919 
l
 = 
f
->
cmd_Àn
 - f->
a˘_ofs
;

1920 
	`ùfw_dyn_u∆ock
();

1921 
cmdÀn
 = 0;

1922 
m©ch
 = 1;

1930 i‡(
cmd
->
›code
 =
O_CHECK_STATE
)

1931 
l
 = 0;

1932 
m©ch
 = 1;

1935 
O_ACCEPT
:

1936 
ªtvÆ
 = 0;

1937 
l
 = 0;

1938 
d⁄e
 = 1;

1941 
O_PIPE
:

1942 
O_QUEUE
:

1943 
	`£t_m©ch
(
¨gs
, 
f_pos
, 
chaö
);

1944 
¨gs
->
ruÀ
.
öfo
 = (
cmd
->
¨g1
 =
IP_FW_TABLEARG
) ?

1945 
èbÀ¨g
 : 
cmd
->
¨g1
;

1946 i‡(
cmd
->
›code
 =
O_PIPE
)

1947 
¨gs
->
ruÀ
.
öfo
 |
IPFW_IS_PIPE
;

1948 i‡(
V_fw_⁄e_∑ss
)

1949 
¨gs
->
ruÀ
.
öfo
 |
IPFW_ONEPASS
;

1950 
ªtvÆ
 = 
IP_FW_DUMMYNET
;

1951 
l
 = 0;

1952 
d⁄e
 = 1;

1955 
O_DIVERT
:

1956 
O_TEE
:

1957 i‡(
¨gs
->
eh
)

1960 
l
 = 0;

1961 
d⁄e
 = 1;

1962 
ªtvÆ
 = (
cmd
->
›code
 =
O_DIVERT
) ?

1963 
IP_FW_DIVERT
 : 
IP_FW_TEE
;

1964 
	`£t_m©ch
(
¨gs
, 
f_pos
, 
chaö
);

1965 
¨gs
->
ruÀ
.
öfo
 = (
cmd
->
¨g1
 =
IP_FW_TABLEARG
) ?

1966 
èbÀ¨g
 : 
cmd
->
¨g1
;

1969 
O_COUNT
:

1970 
f
->
p˙t
++;

1971 
f
->
b˙t
 +
pkéí
;

1972 
f
->
time°amp
 = 
time_u±ime
;

1973 
l
 = 0;

1976 
O_SKIPTO
:

1977 
f
->
p˙t
++;

1978 
f
->
b˙t
 +
pkéí
;

1979 
f
->
time°amp
 = 
time_u±ime
;

1984 i‡(
cmd
->
¨g1
 !
IP_FW_TABLEARG
 &&

1985 (
uöçå_t
)
f
->
x_√xt
 =
chaö
->
id
) {

1986 
f_pos
 = (
uöçå_t
)
f
->
√xt_ruÀ
;

1988 
i
 = (
cmd
->
¨g1
 =
IP_FW_TABLEARG
) ?

1989 
èbÀ¨g
 : 
cmd
->
¨g1
;

1991 i‡(
i
 <
f
->
ruÀnum
)

1992 
i
 = 
f
->
ruÀnum
 + 1;

1993 
f_pos
 = 
	`ùfw_föd_ruÀ
(
chaö
, 
i
, 0);

1995 i‡(
cmd
->
¨g1
 !
IP_FW_TABLEARG
) {

1996 
f
->
√xt_ruÀ
 =

1997 (*)(
uöçå_t
)
f_pos
;

1998 
f
->
x_√xt
 =

1999 (*)(
uöçå_t
)
chaö
->
id
;

2008 ; 
f_pos
 < 
chaö
->
n_ruÀs
 - 1 &&

2009 (
V_£t_dißbÀ
 &

2010 (1 << 
chaö
->
m≠
[
f_pos
]->
£t
));

2011 
f_pos
++)

2014 
f
 = 
chaö
->
m≠
[
f_pos
];

2015 
l
 = 
f
->
cmd_Àn
;

2016 
cmd
 = 
f
->cmd;

2017 
m©ch
 = 1;

2018 
cmdÀn
 = 0;

2019 
skù_‹
 = 0;

2023 
O_REJECT
:

2029 i‡(
hÀn
 > 0 && 
is_ùv4
 && 
off£t
 == 0 &&

2030 (
¥Ÿo
 !
IPPROTO_ICMP
 ||

2031 
	`is_icmp_quîy
(
	`ICMP
(
uÕ
))) &&

2032 !(
m
->
m_Êags
 & (
M_BCAST
|
M_MCAST
)) &&

2033 !
	`IN_MULTICAST
(
	`¡ohl
(
d°_ù
.
s_addr
))) {

2034 
	`£nd_ªje˘
(
¨gs
, 
cmd
->
¨g1
, 
ùÀn
, 
ù
);

2035 
m
 = 
¨gs
->m;

2038 #ifde‡
INET6


2039 
O_UNREACH6
:

2040 i‡(
hÀn
 > 0 && 
is_ùv6
 &&

2041 ((
off£t
 & 
IP6F_OFF_MASK
) == 0) &&

2042 (
¥Ÿo
 !
IPPROTO_ICMPV6
 ||

2043 (
	`is_icmp6_quîy
(
icmp6_ty≥
) == 1)) &&

2044 !(
m
->
m_Êags
 & (
M_BCAST
|
M_MCAST
)) &&

2045 !
	`IN6_IS_ADDR_MULTICAST
(&
¨gs
->
f_id
.
d°_ù6
)) {

2046 
	`£nd_ªje˘6
(

2047 
¨gs
, 
cmd
->
¨g1
, 
hÀn
,

2048 (
ù6_hdr
 *)
ù
);

2049 
m
 = 
¨gs
->m;

2053 
O_DENY
:

2054 
ªtvÆ
 = 
IP_FW_DENY
;

2055 
l
 = 0;

2056 
d⁄e
 = 1;

2059 
O_FORWARD_IP
:

2060 i‡(
¨gs
->
eh
)

2062 i‡(!
q
 || 
dyn_dú
 =
MATCH_FORWARD
) {

2063 
sockaddr_ö
 *
ß
;

2064 
ß
 = &(((
ùfw_ö¢_ß
 *)
cmd
)->sa);

2065 i‡(
ß
->
sö_addr
.
s_addr
 =
INADDR_ANY
) {

2066 
	`bc›y
(
ß
, &
¨gs
->
h›°‹e
,

2067 (*
ß
));

2068 
¨gs
->
h›°‹e
.
sö_addr
.
s_addr
 =

2069 
	`ht⁄l
(
èbÀ¨g
);

2070 
¨gs
->
√xt_h›
 = &¨gs->
h›°‹e
;

2072 
¨gs
->
√xt_h›
 = 
ß
;

2075 
ªtvÆ
 = 
IP_FW_PASS
;

2076 
l
 = 0;

2077 
d⁄e
 = 1;

2080 
O_NETGRAPH
:

2081 
O_NGTEE
:

2082 
	`£t_m©ch
(
¨gs
, 
f_pos
, 
chaö
);

2083 
¨gs
->
ruÀ
.
öfo
 = (
cmd
->
¨g1
 =
IP_FW_TABLEARG
) ?

2084 
èbÀ¨g
 : 
cmd
->
¨g1
;

2085 i‡(
V_fw_⁄e_∑ss
)

2086 
¨gs
->
ruÀ
.
öfo
 |
IPFW_ONEPASS
;

2087 
ªtvÆ
 = (
cmd
->
›code
 =
O_NETGRAPH
) ?

2088 
IP_FW_NETGRAPH
 : 
IP_FW_NGTEE
;

2089 
l
 = 0;

2090 
d⁄e
 = 1;

2093 
O_SETFIB
:

2094 
f
->
p˙t
++;

2095 
f
->
b˙t
 +
pkéí
;

2096 
f
->
time°amp
 = 
time_u±ime
;

2097 
	`M_SETFIB
(
m
, 
cmd
->
¨g1
);

2098 
¨gs
->
f_id
.
fib
 = 
cmd
->
¨g1
;

2099 
l
 = 0;

2102 
O_NAT
:

2103 i‡(!
IPFW_NAT_LOADED
) {

2104 
ªtvÆ
 = 
IP_FW_DENY
;

2106 
cfg_«t
 *
t
;

2107 
«t_id
;

2109 
	`£t_m©ch
(
¨gs
, 
f_pos
, 
chaö
);

2110 
t
 = ((
ùfw_ö¢_«t
 *)
cmd
)->
«t
;

2111 i‡(
t
 =
NULL
) {

2112 
«t_id
 = (
cmd
->
¨g1
 =
IP_FW_TABLEARG
) ?

2113 
èbÀ¨g
 : 
cmd
->
¨g1
;

2114 
t
 = (*
lookup_«t_±r
)(&
chaö
->
«t
, 
«t_id
);

2116 i‡(
t
 =
NULL
) {

2117 
ªtvÆ
 = 
IP_FW_DENY
;

2118 
l
 = 0;

2119 
d⁄e
 = 1;

2122 i‡(
cmd
->
¨g1
 !
IP_FW_TABLEARG
)

2123 ((
ùfw_ö¢_«t
 *)
cmd
)->
«t
 = 
t
;

2125 
ªtvÆ
 = 
	`ùfw_«t_±r
(
¨gs
, 
t
, 
m
);

2127 
l
 = 0;

2128 
d⁄e
 = 1;

2131 
O_REASS
: {

2132 
ù_off
;

2134 
f
->
p˙t
++;

2135 
f
->
b˙t
 +
pkéí
;

2136 
l
 = 0;

2137 
ù_off
 = 
	`¡ohs
(
ù
->ip_off);

2140 i‡((
ù_off
 & (
IP_MF
 | 
IP_OFFMASK
)) == 0)

2146 
	`SET_HOST_IPLEN
(
ù
);

2148 
¨gs
->
m
 = m = 
	`ù_ªass
(m);

2153 i‡(
m
 =
NULL
) {

2154 
ªtvÆ
 = 
IP_FW_DENY
;

2156 
hÀn
;

2158 
ù
 = 
	`mtod
(
m
, ip *);

2159 
hÀn
 = 
ù
->
ù_hl
 << 2;

2160 
	`SET_NET_IPLEN
(
ù
);

2161 
ù
->
ù_sum
 = 0;

2162 i‡(
hÀn
 =(
ù
))

2163 
ù
->
ù_sum
 = 
	`ö_cksum_hdr
(ip);

2165 
ù
->
ù_sum
 = 
	`ö_cksum
(
m
, 
hÀn
);

2166 
ªtvÆ
 = 
IP_FW_REASS
;

2167 
	`£t_m©ch
(
¨gs
, 
f_pos
, 
chaö
);

2169 
d⁄e
 = 1;

2174 
	`∑nic
("-- unknow¿›codê%d\n", 
cmd
->
›code
);

2180 i‡(
cmd
->
Àn
 & 
F_NOT
)

2181 
m©ch
 = !match;

2183 i‡(
m©ch
) {

2184 i‡(
cmd
->
Àn
 & 
F_OR
)

2185 
skù_‹
 = 1;

2187 i‡(!(
cmd
->
Àn
 & 
F_OR
))

2193 i‡(
d⁄e
)

2200 i‡(
d⁄e
) {

2201 
ù_fw
 *
ruÀ
 = 
chaö
->
m≠
[
f_pos
];

2203 
ruÀ
->
p˙t
++;

2204 
ruÀ
->
b˙t
 +
pkéí
;

2205 
ruÀ
->
time°amp
 = 
time_u±ime
;

2207 
ªtvÆ
 = 
IP_FW_DENY
;

2208 
	`¥ötf
("ipfw: ouch!, skipÖastÉnd ofÑules, denyingÖacket\n");

2210 
	`IPFW_RUNLOCK
(
chaö
);

2211 #ifde‡
__FªeBSD__


2212 i‡(
u¸ed_ˇche
 !
NULL
)

2213 
	`¸‰ì
(
u¸ed_ˇche
);

2215  (
ªtvÆ
);

2217 
puŒup_Áûed
:

2218 i‡(
V_fw_vîbo£
)

2219 
	`¥ötf
("ipfw:Öullup failed\n");

2220  (
IP_FW_DENY
);

2221 
	}
}

2231 
	$ùfw_öô
()

2233 
îr‹
 = 0;

2235 
	`ùfw_dyn_©èch
();

2240 
	`¥ötf
("ipfw2 "

2241 #ifde‡
INET6


2246 #ifde‡
IPFIREWALL_FORWARD


2252 #ifde‡
IPDIVERT


2257 #ifde‡
IPFIREWALL_NAT


2262 
deÁu…_to_ac˚±
 ? "accept" : "deny");

2271 i‡(
V_fw_vîbo£
 == 0)

2272 
	`¥ötf
("disabled\n");

2273 i‡(
V_vîbo£_limô
 == 0)

2274 
	`¥ötf
("unlimited\n");

2276 
	`¥ötf
("limitedÅo %dÖackets/entry by default\n",

2277 
V_vîbo£_limô
);

2279 
	`ùfw_log_bpf
(1);

2280  (
îr‹
);

2281 
	}
}

2287 
	$ùfw_de°roy
()

2290 
	`ùfw_log_bpf
(0);

2291 
	`ùfw_dyn_dëach
();

2292 
	`¥ötf
("IP firewall unloaded\n");

2293 
	}
}

2300 
	$v√t_ùfw_öô
(c⁄° *
unu£d
)

2302 
îr‹
;

2303 
ù_fw
 *
ruÀ
 = 
NULL
;

2304 
ù_fw_chaö
 *
chaö
;

2306 
chaö
 = &
V_œyî3_chaö
;

2309 
V_autoöc_°ï
 = 100;

2310 
V_fw_díy_unknown_exthdrs
 = 1;

2311 #ifde‡
IPFIREWALL_VERBOSE


2312 
V_fw_vîbo£
 = 1;

2314 #ifde‡
IPFIREWALL_VERBOSE_LIMIT


2315 
V_vîbo£_limô
 = 
IPFIREWALL_VERBOSE_LIMIT
;

2317 #ifde‡
IPFIREWALL_NAT


2318 
	`LIST_INIT
(&
chaö
->
«t
);

2322 
chaö
->
n_ruÀs
 = 1;

2323 
chaö
->
°©ic_Àn
 = (
ù_fw
);

2324 
chaö
->
m≠
 = 
	`mÆloc
((
ù_fw
 *), 
M_IPFW
, 
M_NOWAIT
 | 
M_ZERO
);

2325 i‡(
chaö
->
m≠
)

2326 
ruÀ
 = 
	`mÆloc
(
chaö
->
°©ic_Àn
, 
M_IPFW
, 
M_NOWAIT
 | 
M_ZERO
);

2327 i‡(
ruÀ
 =
NULL
) {

2328 i‡(
chaö
->
m≠
)

2329 
	`‰ì
(
chaö
->
m≠
, 
M_IPFW
);

2330 
	`¥ötf
("ipfw2: ENOSPC initializing defaultÑule "

2332  (
ENOSPC
);

2334 
îr‹
 = 
	`ùfw_öô_èbÀs
(
chaö
);

2335 i‡(
îr‹
) {

2336 
	`∑nic
("init_tables");

2340 
ruÀ
->
a˘_ofs
 = 0;

2341 
ruÀ
->
ruÀnum
 = 
IPFW_DEFAULT_RULE
;

2342 
ruÀ
->
cmd_Àn
 = 1;

2343 
ruÀ
->
£t
 = 
RESVD_SET
;

2344 
ruÀ
->
cmd
[0].
Àn
 = 1;

2345 
ruÀ
->
cmd
[0].
›code
 = 
deÁu…_to_ac˚±
 ? 
O_ACCEPT
 : 
O_DENY
;

2346 
chaö
->
ruÀs
 = chaö->
deÁu…_ruÀ
 = chaö->
m≠
[0] = 
ruÀ
;

2347 
chaö
->
id
 = 
ruÀ
->id = 1;

2349 
	`IPFW_LOCK_INIT
(
chaö
);

2350 
	`ùfw_dyn_öô
();

2353 
V_ùfw_v√t_ªady
 = 1;

2369 
V_ù_fw_˘l_±r
 = 
ùfw_˘l
;

2370 
V_ù_fw_chk_±r
 = 
ùfw_chk
;

2371 
îr‹
 = 
	`ùfw_©èch_hooks
(1);

2372  (
îr‹
);

2373 
	}
}

2379 
	$v√t_ùfw_unöô
(c⁄° *
unu£d
)

2381 
ù_fw
 *
ª≠
, *
ruÀ
;

2382 
ù_fw_chaö
 *
chaö
 = &
V_œyî3_chaö
;

2383 
i
;

2385 
V_ùfw_v√t_ªady
 = 0;

2391 ()
	`ùfw_©èch_hooks
(0 );

2392 
V_ù_fw_chk_±r
 = 
NULL
;

2393 
V_ù_fw_˘l_±r
 = 
NULL
;

2394 
	`IPFW_UH_WLOCK
(
chaö
);

2395 
	`IPFW_UH_WUNLOCK
(
chaö
);

2396 
	`IPFW_UH_WLOCK
(
chaö
);

2398 
	`IPFW_WLOCK
(
chaö
);

2399 
	`IPFW_WUNLOCK
(
chaö
);

2400 
	`IPFW_WLOCK
(
chaö
);

2402 
	`ùfw_dyn_unöô
(0);

2403 
	`ùfw_de°roy_èbÀs
(
chaö
);

2404 
ª≠
 = 
NULL
;

2405 
i
 = 0; i < 
chaö
->
n_ruÀs
; i++) {

2406 
ruÀ
 = 
chaö
->
m≠
[
i
];

2407 
ruÀ
->
x_√xt
 = 
ª≠
;

2408 
ª≠
 = 
ruÀ
;

2410 i‡(
chaö
->
m≠
)

2411 
	`‰ì
(
chaö
->
m≠
, 
M_IPFW
);

2412 
	`IPFW_WUNLOCK
(
chaö
);

2413 
	`IPFW_UH_WUNLOCK
(
chaö
);

2414 i‡(
ª≠
 !
NULL
)

2415 
	`ùfw_ª≠_ruÀs
(
ª≠
);

2416 
	`IPFW_LOCK_DESTROY
(
chaö
);

2417 
	`ùfw_dyn_unöô
(1);

2419 
	}
}

2431 
	$ùfw_modevít
(
moduÀ_t
 
mod
, 
ty≥
, *
unu£d
)

2433 
îr
 = 0;

2435 
ty≥
) {

2436 
MOD_LOAD
:

2440 
MOD_QUIESCE
:

2443 
MOD_UNLOAD
:

2446 
MOD_SHUTDOWN
:

2450 
îr
 = 
EOPNOTSUPP
;

2453  
îr
;

2454 
	}
}

2456 
moduÀd©a_t
 
	gùfwmod
 = {

2458 
ùfw_modevít
,

2463 
	#IPFW_SI_SUB_FIREWALL
 
SI_SUB_PROTO_IFATTACHDOMAIN


	)

2464 
	#IPFW_MODEVENT_ORDER
 (
SI_ORDER_ANY
 - 255Ë

	)

2465 
	#IPFW_MODULE_ORDER
 (
IPFW_MODEVENT_ORDER
 + 1Ë

	)

2466 
	#IPFW_VNET_ORDER
 (
IPFW_MODEVENT_ORDER
 + 2Ë

	)

2468 
DECLARE_MODULE
(
ùfw
, 
ùfwmod
, 
IPFW_SI_SUB_FIREWALL
, 
IPFW_MODEVENT_ORDER
);

2469 
MODULE_VERSION
(
ùfw
, 2);

2476 
SYSINIT
(
ùfw_öô
, 
IPFW_SI_SUB_FIREWALL
, 
IPFW_MODULE_ORDER
,

2477 
ùfw_öô
, 
NULL
);

2478 
VNET_SYSINIT
(
v√t_ùfw_öô
, 
IPFW_SI_SUB_FIREWALL
, 
IPFW_VNET_ORDER
,

2479 
v√t_ùfw_öô
, 
NULL
);

2487 
SYSUNINIT
(
ùfw_de°roy
, 
IPFW_SI_SUB_FIREWALL
, 
IPFW_MODULE_ORDER
,

2488 
ùfw_de°roy
, 
NULL
);

2489 
VNET_SYSUNINIT
(
v√t_ùfw_unöô
, 
IPFW_SI_SUB_FIREWALL
, 
IPFW_VNET_ORDER
,

2490 
v√t_ùfw_unöô
, 
NULL
);

	@sys/netinet/ipfw/ip_fw_dynamic.c

26 
	~<sys/cdefs.h
>

27 
__FBSDID
("$FreeBSD: head/sys/netinet/ipfw/ip_fw_dynamic.c 200601 2009-12-16 10:48:40ZÜuigi $");

29 
	#DEB
(
x
)

	)

30 
	#DDB
(
x
Ë
	)
x

36 #i‡!
deföed
(
KLD_MODULE
)

37 
	~"›t_ùfw.h
"

38 
	~"›t_ùdivît.h
"

39 
	~"›t_ùdn.h
"

40 
	~"›t_öë.h
"

41 #i‚de‡
INET


42 #îr‹ 
IPFIREWALL
 
ªquúes
 
INET
.

45 
	~"›t_öë6.h
"

46 
	~"›t_ù£c.h
"

48 
	~<sys/∑øm.h
>

49 
	~<sys/sy°m.h
>

50 
	~<sys/mÆloc.h
>

51 
	~<sys/mbuf.h
>

52 
	~<sys/kî√l.h
>

53 
	~<sys/lock.h
>

54 
	~<sys/sockë.h
>

55 
	~<sys/sys˘l.h
>

56 
	~<sys/sy¶og.h
>

57 
	~<√t/ëhî√t.h
>

58 
	~<√t/if.h
>

59 
	~<√t/v√t.h
>

61 
	~<√töë/ö.h
>

62 
	~<√töë/ù.h
>

63 
	~<√töë/ù_v¨.h
>

64 
	~<√töë/ù_fw.h
>

65 
	~<√töë/ùfw/ù_fw_¥iv©e.h
>

66 
	~<√töë/t˝_v¨.h
>

67 
	~<√töë/udp.h
>

69 
	~<√töë/ù6.h
>

70 #ifde‡
INET6


71 
	~<√töë6/ö6_v¨.h
>

72 
	~<√töë6/ù6_v¨.h
>

75 
	~<machöe/ö_cksum.h
>

77 #ifde‡
MAC


78 
	~<£curôy/mac/mac_‰amew‹k.h
>

121 
VNET_DEFINE
(
ùfw_dyn_ruÀ
 **, 
ùfw_dyn_v
);

122 
VNET_DEFINE
(
u_öt32_t
, 
dyn_buckës
);

123 
VNET_DEFINE
(
u_öt32_t
, 
cuº_dyn_buckës
);

124 
VNET_DEFINE
(
ˇŒout
, 
ùfw_timeout
);

125 
	#V_ùfw_dyn_v
 
	`VNET
(
ùfw_dyn_v
)

	)

126 
	#V_dyn_buckës
 
	`VNET
(
dyn_buckës
)

	)

127 
	#V_cuº_dyn_buckës
 
	`VNET
(
cuº_dyn_buckës
)

	)

128 
	#V_ùfw_timeout
 
	`VNET
(
ùfw_timeout
)

	)

130 
uma_z⁄e_t
 
	gùfw_dyn_ruÀ_z⁄e
;

131 #i‚de‡
__FªeBSD__


132 
DEFINE_SPINLOCK
(
ùfw_dyn_mtx
);

134 
mtx
 
	gùfw_dyn_mtx
;

137 
	#IPFW_DYN_LOCK_INIT
() \

138 
	`mtx_öô
(&
ùfw_dyn_mtx
, "IPFW dy«mi¯ruÀs", 
NULL
, 
MTX_DEF
)

	)

139 
	#IPFW_DYN_LOCK_DESTROY
(Ë
	`mtx_de°roy
(&
ùfw_dyn_mtx
)

	)

140 
	#IPFW_DYN_LOCK
(Ë
	`mtx_lock
(&
ùfw_dyn_mtx
)

	)

141 
	#IPFW_DYN_UNLOCK
(Ë
	`mtx_u∆ock
(&
ùfw_dyn_mtx
)

	)

142 
	#IPFW_DYN_LOCK_ASSERT
(Ë
	`mtx_as£π
(&
ùfw_dyn_mtx
, 
MA_OWNED
)

	)

145 
	$ùfw_dyn_u∆ock
()

147 
	`IPFW_DYN_UNLOCK
();

148 
	}
}

153 
VNET_DEFINE
(
u_öt32_t
, 
dyn_ack_li„time
);

154 
VNET_DEFINE
(
u_öt32_t
, 
dyn_syn_li„time
);

155 
VNET_DEFINE
(
u_öt32_t
, 
dyn_fö_li„time
);

156 
VNET_DEFINE
(
u_öt32_t
, 
dyn_r°_li„time
);

157 
VNET_DEFINE
(
u_öt32_t
, 
dyn_udp_li„time
);

158 
VNET_DEFINE
(
u_öt32_t
, 
dyn_sh‹t_li„time
);

160 
	#V_dyn_ack_li„time
 
	`VNET
(
dyn_ack_li„time
)

	)

161 
	#V_dyn_syn_li„time
 
	`VNET
(
dyn_syn_li„time
)

	)

162 
	#V_dyn_fö_li„time
 
	`VNET
(
dyn_fö_li„time
)

	)

163 
	#V_dyn_r°_li„time
 
	`VNET
(
dyn_r°_li„time
)

	)

164 
	#V_dyn_udp_li„time
 
	`VNET
(
dyn_udp_li„time
)

	)

165 
	#V_dyn_sh‹t_li„time
 
	`VNET
(
dyn_sh‹t_li„time
)

	)

175 
VNET_DEFINE
(
u_öt32_t
, 
dyn_kì∑live_öãrvÆ
);

176 
VNET_DEFINE
(
u_öt32_t
, 
dyn_kì∑live_≥riod
);

177 
VNET_DEFINE
(
u_öt32_t
, 
dyn_kì∑live
);

179 
	#V_dyn_kì∑live_öãrvÆ
 
	`VNET
(
dyn_kì∑live_öãrvÆ
)

	)

180 
	#V_dyn_kì∑live_≥riod
 
	`VNET
(
dyn_kì∑live_≥riod
)

	)

181 
	#V_dyn_kì∑live
 
	`VNET
(
dyn_kì∑live
)

	)

183 
VNET_DEFINE
(
u_öt32_t
, 
dyn_cou¡
);

184 
VNET_DEFINE
(
u_öt32_t
, 
dyn_max
);

186 
	#V_dyn_cou¡
 
	`VNET
(
dyn_cou¡
)

	)

187 
	#V_dyn_max
 
	`VNET
(
dyn_max
)

	)

189 #ifde‡
SYSCTL_NODE


191 
	$SYSBEGIN
(
f2
)

193 
	`SYSCTL_DECL
(
_√t_öë_ù_fw
);

194 
	`SYSCTL_VNET_UINT
(
_√t_öë_ù_fw
, 
OID_AUTO
, 
dyn_buckës
,

195 
CTLFLAG_RW
, &
	`VNET_NAME
(
dyn_buckës
), 0,

197 
	`SYSCTL_VNET_UINT
(
_√t_öë_ù_fw
, 
OID_AUTO
, 
cuº_dyn_buckës
,

198 
CTLFLAG_RD
, &
	`VNET_NAME
(
cuº_dyn_buckës
), 0,

200 
	`SYSCTL_VNET_UINT
(
_√t_öë_ù_fw
, 
OID_AUTO
, 
dyn_cou¡
,

201 
CTLFLAG_RD
, &
	`VNET_NAME
(
dyn_cou¡
), 0,

203 
	`SYSCTL_VNET_UINT
(
_√t_öë_ù_fw
, 
OID_AUTO
, 
dyn_max
,

204 
CTLFLAG_RW
, &
	`VNET_NAME
(
dyn_max
), 0,

206 
	`SYSCTL_VNET_UINT
(
_√t_öë_ù_fw
, 
OID_AUTO
, 
dyn_ack_li„time
,

207 
CTLFLAG_RW
, &
	`VNET_NAME
(
dyn_ack_li„time
), 0,

209 
	`SYSCTL_VNET_UINT
(
_√t_öë_ù_fw
, 
OID_AUTO
, 
dyn_syn_li„time
,

210 
CTLFLAG_RW
, &
	`VNET_NAME
(
dyn_syn_li„time
), 0,

212 
	`SYSCTL_VNET_UINT
(
_√t_öë_ù_fw
, 
OID_AUTO
, 
dyn_fö_li„time
,

213 
CTLFLAG_RW
, &
	`VNET_NAME
(
dyn_fö_li„time
), 0,

215 
	`SYSCTL_VNET_UINT
(
_√t_öë_ù_fw
, 
OID_AUTO
, 
dyn_r°_li„time
,

216 
CTLFLAG_RW
, &
	`VNET_NAME
(
dyn_r°_li„time
), 0,

218 
	`SYSCTL_VNET_UINT
(
_√t_öë_ù_fw
, 
OID_AUTO
, 
dyn_udp_li„time
,

219 
CTLFLAG_RW
, &
	`VNET_NAME
(
dyn_udp_li„time
), 0,

221 
	`SYSCTL_VNET_UINT
(
_√t_öë_ù_fw
, 
OID_AUTO
, 
dyn_sh‹t_li„time
,

222 
CTLFLAG_RW
, &
	`VNET_NAME
(
dyn_sh‹t_li„time
), 0,

224 
	`SYSCTL_VNET_UINT
(
_√t_öë_ù_fw
, 
OID_AUTO
, 
dyn_kì∑live
,

225 
CTLFLAG_RW
, &
	`VNET_NAME
(
dyn_kì∑live
), 0,

228 
SYSEND


233 
__ölöe
 

234 
	$hash_∑ckë6
(
ùfw_Êow_id
 *
id
)

236 
u_öt32_t
 
i
;

237 
i
 = (
id
->
d°_ù6
.
__u6_addr
.
__u6_addr32
[2]) ^

238 (
id
->
d°_ù6
.
__u6_addr
.
__u6_addr32
[3]) ^

239 (
id
->
§c_ù6
.
__u6_addr
.
__u6_addr32
[2]) ^

240 (
id
->
§c_ù6
.
__u6_addr
.
__u6_addr32
[3]) ^

241 (
id
->
d°_p‹t
Ë^ (id->
§c_p‹t
);

242  
i
;

243 
	}
}

250 
__ölöe
 

251 
	$hash_∑ckë
(
ùfw_Êow_id
 *
id
)

253 
u_öt32_t
 
i
;

255 #ifde‡
INET6


256 i‡(
	`IS_IP6_FLOW_ID
(
id
))

257 
i
 = 
	`hash_∑ckë6
(
id
);

260 
i
 = (
id
->
d°_ù
Ë^ (id->
§c_ù
Ë^ (id->
d°_p‹t
Ë^ (id->
§c_p‹t
);

261 
i
 &(
V_cuº_dyn_buckës
 - 1);

262  
i
;

263 
	}
}

265 
__ölöe
 

266 
	$u∆ök_dyn_ruÀ_¥öt
(
ùfw_Êow_id
 *
id
)

268 
ö_addr
 
da
;

269 #ifde‡
INET6


270 
§c
[
INET6_ADDRSTRLEN
], 
d°
[INET6_ADDRSTRLEN];

272 
§c
[
INET_ADDRSTRLEN
], 
d°
[INET_ADDRSTRLEN];

275 #ifde‡
INET6


276 i‡(
	`IS_IP6_FLOW_ID
(
id
)) {

277 
	`ù6_•rötf
(
§c
, &
id
->
§c_ù6
);

278 
	`ù6_•rötf
(
d°
, &
id
->
d°_ù6
);

282 
da
.
s_addr
 = 
	`ht⁄l
(
id
->
§c_ù
);

283 
	`öë_¡ﬂ_r
(
da
, 
§c
);

284 
da
.
s_addr
 = 
	`ht⁄l
(
id
->
d°_ù
);

285 
	`öë_¡ﬂ_r
(
da
, 
d°
);

287 
	`¥ötf
("ipfw: unlinkÉntry %s %d -> %s %d, %dÜeft\n",

288 
§c
, 
id
->
§c_p‹t
, 
d°
, id->
d°_p‹t
, 
V_dyn_cou¡
 - 1);

289 
	}
}

297 
	#UNLINK_DYN_RULE
(
¥ev
, 
hód
, 
q
) { \

298 
ùfw_dyn_ruÀ
 *
ﬁd_q
 = 
q
; \

301 i‡(
q
->
dyn_ty≥
 =
O_LIMIT
) \

302 
q
->
∑ª¡
->
cou¡
--; \

303 
	`DEB
(
	`u∆ök_dyn_ruÀ_¥öt
(&
q
->
id
);) \

304 i‡(
¥ev
 !
NULL
) \

305 
¥ev
->
√xt
 = 
q
 = q->next; \

307 
hód
 = 
q
 = q->
√xt
; \

308 
V_dyn_cou¡
--; \

309 
	`uma_z‰ì
(
ùfw_dyn_ruÀ_z⁄e
, 
ﬁd_q
); }

	)

311 
	#TIME_LEQ
(
a
,
b
Ë(()(◊)-(b)Ë<0)

	)

326 
	$ªmove_dyn_ruÀ
(
ù_fw
 *
ruÀ
, 
ùfw_dyn_ruÀ
 *
kìp_me
)

328 
u_öt32_t
 
œ°_ªmove
 = 0;

330 
	#FORCE
 (
kìp_me
 =
NULL
)

	)

332 
ùfw_dyn_ruÀ
 *
¥ev
, *
q
;

333 
i
, 
∑ss
 = 0, 
max_∑ss
 = 0;

335 
	`IPFW_DYN_LOCK_ASSERT
();

337 i‡(
V_ùfw_dyn_v
 =
NULL
 || 
V_dyn_cou¡
 == 0)

340 i‡(!
FORCE
 && 
œ°_ªmove
 =
time_u±ime
)

342 
œ°_ªmove
 = 
time_u±ime
;

349 
√xt_∑ss
:

350 
i
 = 0 ; i < 
V_cuº_dyn_buckës
 ; i++) {

351 
¥ev
=
NULL
, 
q
 = 
V_ùfw_dyn_v
[
i
] ; q ; ) {

355 i‡(
q
 =
kìp_me
)

356 
√xt
;

357 i‡(
ruÀ
 !
NULL
 &&ÑuÀ !
q
->rule)

358 
√xt
;

359 i‡(
q
->
dyn_ty≥
 =
O_LIMIT_PARENT
) {

364 
max_∑ss
 = 1;

365 i‡(
∑ss
 == 0)

366 
√xt
;

367 i‡(
FORCE
 && 
q
->
cou¡
 != 0 ) {

369 
	`¥ötf
("ipfw: OUCH! cannotÑemoveÑule,"

370 " cou¡ %d\n", 
q
->
cou¡
);

373 i‡(!
FORCE
 &&

374 !
	`TIME_LEQ
–
q
->
expúe
, 
time_u±ime
 ))

375 
√xt
;

377 i‡(
q
->
dyn_ty≥
 !
O_LIMIT_PARENT
 || !q->
cou¡
) {

378 
	`UNLINK_DYN_RULE
(
¥ev
, 
V_ùfw_dyn_v
[
i
], 
q
);

381 
√xt
:

382 
¥ev
=
q
;

383 
q
=q->
√xt
;

386 i‡(
∑ss
++ < 
max_∑ss
)

387 
√xt_∑ss
;

388 
	}
}

391 
	$ùfw_ªmove_dyn_chûdªn
(
ù_fw
 *
ruÀ
)

393 
	`IPFW_DYN_LOCK
();

394 
	`ªmove_dyn_ruÀ
(
ruÀ
, 
NULL
 );

395 
	`IPFW_DYN_UNLOCK
();

396 
	}
}

401 
ùfw_dyn_ruÀ
 *

402 
	$lookup_dyn_ruÀ_locked
(
ùfw_Êow_id
 *
pkt
, *
m©ch_dúe˘i⁄
,

403 
t˝hdr
 *
t˝
)

409 
	#MATCH_REVERSE
 0

	)

410 
	#MATCH_FORWARD
 1

	)

411 
	#MATCH_NONE
 2

	)

412 
	#MATCH_UNKNOWN
 3

	)

413 
i
, 
dú
 = 
MATCH_NONE
;

414 
ùfw_dyn_ruÀ
 *
¥ev
, *
q
=
NULL
;

416 
	`IPFW_DYN_LOCK_ASSERT
();

418 i‡(
V_ùfw_dyn_v
 =
NULL
)

419 
d⁄e
;

420 
i
 = 
	`hash_∑ckë
–
pkt
 );

421 
¥ev
=
NULL
, 
q
 = 
V_ùfw_dyn_v
[
i
] ; q != NULL ; ) {

422 i‡(
q
->
dyn_ty≥
 =
O_LIMIT_PARENT
 && q->
cou¡
)

423 
√xt
;

424 i‡(
	`TIME_LEQ
–
q
->
expúe
, 
time_u±ime
)) {

425 
	`UNLINK_DYN_RULE
(
¥ev
, 
V_ùfw_dyn_v
[
i
], 
q
);

428 i‡(
pkt
->
¥Ÿo
 =
q
->
id
.proto &&

429 
q
->
dyn_ty≥
 !
O_LIMIT_PARENT
) {

430 i‡(
	`IS_IP6_FLOW_ID
(
pkt
)) {

431 i‡(
	`IN6_ARE_ADDR_EQUAL
(&(
pkt
->
§c_ù6
),

432 &(
q
->
id
.
§c_ù6
)) &&

433 
	`IN6_ARE_ADDR_EQUAL
(&(
pkt
->
d°_ù6
),

434 &(
q
->
id
.
d°_ù6
)) &&

435 
pkt
->
§c_p‹t
 =
q
->
id
.src_port &&

436 
pkt
->
d°_p‹t
 =
q
->
id
.dst_port ) {

437 
dú
 = 
MATCH_FORWARD
;

440 i‡(
	`IN6_ARE_ADDR_EQUAL
(&(
pkt
->
§c_ù6
),

441 &(
q
->
id
.
d°_ù6
)) &&

442 
	`IN6_ARE_ADDR_EQUAL
(&(
pkt
->
d°_ù6
),

443 &(
q
->
id
.
§c_ù6
)) &&

444 
pkt
->
§c_p‹t
 =
q
->
id
.
d°_p‹t
 &&

445 
pkt
->
d°_p‹t
 =
q
->
id
.
§c_p‹t
 ) {

446 
dú
 = 
MATCH_REVERSE
;

450 i‡(
pkt
->
§c_ù
 =
q
->
id
.src_ip &&

451 
pkt
->
d°_ù
 =
q
->
id
.dst_ip &&

452 
pkt
->
§c_p‹t
 =
q
->
id
.src_port &&

453 
pkt
->
d°_p‹t
 =
q
->
id
.dst_port ) {

454 
dú
 = 
MATCH_FORWARD
;

457 i‡(
pkt
->
§c_ù
 =
q
->
id
.
d°_ù
 &&

458 
pkt
->
d°_ù
 =
q
->
id
.
§c_ù
 &&

459 
pkt
->
§c_p‹t
 =
q
->
id
.
d°_p‹t
 &&

460 
pkt
->
d°_p‹t
 =
q
->
id
.
§c_p‹t
 ) {

461 
dú
 = 
MATCH_REVERSE
;

466 
√xt
:

467 
¥ev
 = 
q
;

468 
q
 = q->
√xt
;

470 i‡(
q
 =
NULL
)

471 
d⁄e
;

473 i‡–
¥ev
 !
NULL
) {

474 
¥ev
->
√xt
 = 
q
->next;

475 
q
->
√xt
 = 
V_ùfw_dyn_v
[
i
];

476 
V_ùfw_dyn_v
[
i
] = 
q
;

478 i‡(
pkt
->
¥Ÿo
 =
IPPROTO_TCP
) {

479 
u_ch¨
 
Êags
 = 
pkt
->
_Êags
 & (
TH_FIN
|
TH_SYN
|
TH_RST
);

481 
	#BOTH_SYN
 (
TH_SYN
 | (TH_SYN << 8))

	)

482 
	#BOTH_FIN
 (
TH_FIN
 | (TH_FIN << 8))

	)

483 
q
->
°©e
 |(
dú
 =
MATCH_FORWARD
 ) ? 
Êags
 : (flags << 8);

484 
q
->
°©e
) {

485 
TH_SYN
:

486 
q
->
expúe
 = 
time_u±ime
 + 
V_dyn_syn_li„time
;

489 
BOTH_SYN
:

490 
BOTH_SYN
 | 
TH_FIN
 :

491 
BOTH_SYN
 | (
TH_FIN
 << 8) :

492 i‡(
t˝
) {

493 
	#_SEQ_GE
(
a
,
b
Ë(()◊Ë- ()(bË>0)

	)

494 
u_öt32_t
 
ack
 = 
	`¡ohl
(
t˝
->
th_ack
);

495 i‡(
dú
 =
MATCH_FORWARD
) {

496 i‡(
q
->
ack_fwd
 =0 || 
	`_SEQ_GE
(
ack
, q->ack_fwd))

497 
q
->
ack_fwd
 = 
ack
;

502 i‡(
q
->
ack_ªv
 =0 || 
	`_SEQ_GE
(
ack
, q->ack_rev))

503 
q
->
ack_ªv
 = 
ack
;

509 
q
->
expúe
 = 
time_u±ime
 + 
V_dyn_ack_li„time
;

512 
BOTH_SYN
 | 
BOTH_FIN
:

513 i‡(
V_dyn_fö_li„time
 >
V_dyn_kì∑live_≥riod
)

514 
V_dyn_fö_li„time
 = 
V_dyn_kì∑live_≥riod
 - 1;

515 
q
->
expúe
 = 
time_u±ime
 + 
V_dyn_fö_li„time
;

524 i‡–(
q
->
°©e
 & ((
TH_RST
 << 8)|TH_RST)) == 0)

525 
	`¥ötf
("övÆid sèã: 0x%x\n", 
q
->
°©e
);

527 i‡(
V_dyn_r°_li„time
 >
V_dyn_kì∑live_≥riod
)

528 
V_dyn_r°_li„time
 = 
V_dyn_kì∑live_≥riod
 - 1;

529 
q
->
expúe
 = 
time_u±ime
 + 
V_dyn_r°_li„time
;

532 } i‡(
pkt
->
¥Ÿo
 =
IPPROTO_UDP
) {

533 
q
->
expúe
 = 
time_u±ime
 + 
V_dyn_udp_li„time
;

536 
q
->
expúe
 = 
time_u±ime
 + 
V_dyn_sh‹t_li„time
;

538 
d⁄e
:

539 i‡(
m©ch_dúe˘i⁄
)

540 *
m©ch_dúe˘i⁄
 = 
dú
;

541  
q
;

542 
	}
}

544 
ùfw_dyn_ruÀ
 *

545 
	$ùfw_lookup_dyn_ruÀ
(
ùfw_Êow_id
 *
pkt
, *
m©ch_dúe˘i⁄
,

546 
t˝hdr
 *
t˝
)

548 
ùfw_dyn_ruÀ
 *
q
;

550 
	`IPFW_DYN_LOCK
();

551 
q
 = 
	`lookup_dyn_ruÀ_locked
(
pkt
, 
m©ch_dúe˘i⁄
, 
t˝
);

552 i‡(
q
 =
NULL
)

553 
	`IPFW_DYN_UNLOCK
();

555  
q
;

556 
	}
}

559 
	$ªÆloc_dy«mic_èbÀ
()

561 
	`IPFW_DYN_LOCK_ASSERT
();

569 i‡(
V_dyn_buckës
 > 65536)

570 
V_dyn_buckës
 = 1024;

571 i‡((
V_dyn_buckës
 & (V_dyn_buckets-1)) != 0) {

572 
V_dyn_buckës
 = 
V_cuº_dyn_buckës
;

575 
V_cuº_dyn_buckës
 = 
V_dyn_buckës
;

576 i‡(
V_ùfw_dyn_v
 !
NULL
)

577 
	`‰ì
(
V_ùfw_dyn_v
, 
M_IPFW
);

579 
V_ùfw_dyn_v
 = 
	`mÆloc
(
V_cuº_dyn_buckës
 * (
ùfw_dyn_ruÀ
 *),

580 
M_IPFW
, 
M_NOWAIT
 | 
M_ZERO
);

581 i‡(
V_ùfw_dyn_v
 !
NULL
 || 
V_cuº_dyn_buckës
 <= 2)

583 
V_cuº_dyn_buckës
 /= 2;

585 
	}
}

597 
ùfw_dyn_ruÀ
 *

598 
	$add_dyn_ruÀ
(
ùfw_Êow_id
 *
id
, 
u_öt8_t
 
dyn_ty≥
, 
ù_fw
 *
ruÀ
)

600 
ùfw_dyn_ruÀ
 *
r
;

601 
i
;

603 
	`IPFW_DYN_LOCK_ASSERT
();

605 i‡(
V_ùfw_dyn_v
 =
NULL
 ||

606 (
V_dyn_cou¡
 =0 && 
V_dyn_buckës
 !
V_cuº_dyn_buckës
)) {

607 
	`ªÆloc_dy«mic_èbÀ
();

608 i‡(
V_ùfw_dyn_v
 =
NULL
)

609  
NULL
;

611 
i
 = 
	`hash_∑ckë
(
id
);

613 
r
 = 
	`uma_zÆloc
(
ùfw_dyn_ruÀ_z⁄e
, 
M_NOWAIT
 | 
M_ZERO
);

614 i‡(
r
 =
NULL
) {

615 
	`¥ötf
 ("ipfw: sorry cannotállocate state\n");

616  
NULL
;

620 i‡(
dyn_ty≥
 =
O_LIMIT
) {

621 
ùfw_dyn_ruÀ
 *
∑ª¡
 = (ùfw_dyn_ruÀ *)
ruÀ
;

622 i‡–
∑ª¡
->
dyn_ty≥
 !
O_LIMIT_PARENT
)

623 
	`∑nic
("invalidÖarent");

624 
∑ª¡
->
cou¡
++;

625 
r
->
∑ª¡
 =Öarent;

626 
ruÀ
 = 
∑ª¡
->rule;

629 
r
->
id
 = *id;

630 
r
->
expúe
 = 
time_u±ime
 + 
V_dyn_syn_li„time
;

631 
r
->
ruÀ
 =Ñule;

632 
r
->
dyn_ty≥
 = dyn_type;

633 
r
->
p˙t
 =Ñ->
b˙t
 = 0;

634 
r
->
cou¡
 = 0;

636 
r
->
buckë
 = 
i
;

637 
r
->
√xt
 = 
V_ùfw_dyn_v
[
i
];

638 
V_ùfw_dyn_v
[
i
] = 
r
;

639 
V_dyn_cou¡
++;

640 
	`DEB
({

641 
ö_addr
 
da
;

642 #ifde‡
INET6


643 
§c
[
INET6_ADDRSTRLEN
];

644 
d°
[
INET6_ADDRSTRLEN
];

646 
§c
[
INET_ADDRSTRLEN
];

647 
d°
[
INET_ADDRSTRLEN
];

650 #ifde‡
INET6


651 i‡(
	`IS_IP6_FLOW_ID
(&(
r
->
id
))) {

652 
	`ù6_•rötf
(
§c
, &
r
->
id
.
§c_ù6
);

653 
	`ù6_•rötf
(
d°
, &
r
->
id
.
d°_ù6
);

657 
da
.
s_addr
 = 
	`ht⁄l
(
r
->
id
.
§c_ù
);

658 
	`öë_¡ﬂ_r
(
da
, 
§c
);

659 
da
.
s_addr
 = 
	`ht⁄l
(
r
->
id
.
d°_ù
);

660 
	`öë_¡ﬂ_r
(
da
, 
d°
);

662 
	`¥ötf
("ipfw:ádd dynÉntryÅy %d %s %d -> %s %d,Åotal %d\n",

663 
dyn_ty≥
, 
§c
, 
r
->
id
.
§c_p‹t
, 
d°
,Ñ->id.
d°_p‹t
,

664 
V_dyn_cou¡
);

666  
r
;

667 
	}
}

673 
ùfw_dyn_ruÀ
 *

674 
	$lookup_dyn_∑ª¡
(
ùfw_Êow_id
 *
pkt
, 
ù_fw
 *
ruÀ
)

676 
ùfw_dyn_ruÀ
 *
q
;

677 
i
;

679 
	`IPFW_DYN_LOCK_ASSERT
();

681 i‡(
V_ùfw_dyn_v
) {

682 
is_v6
 = 
	`IS_IP6_FLOW_ID
(
pkt
);

683 
i
 = 
	`hash_∑ckë
–
pkt
 );

684 
q
 = 
V_ùfw_dyn_v
[
i
] ; q !
NULL
 ; q=q->
√xt
)

685 i‡(
q
->
dyn_ty≥
 =
O_LIMIT_PARENT
 &&

686 
ruÀ
=
q
->rule &&

687 
pkt
->
¥Ÿo
 =
q
->
id
.proto &&

688 
pkt
->
§c_p‹t
 =
q
->
id
.src_port &&

689 
pkt
->
d°_p‹t
 =
q
->
id
.dst_port &&

691 (
is_v6
 &&

692 
	`IN6_ARE_ADDR_EQUAL
(&(
pkt
->
§c_ù6
),

693 &(
q
->
id
.
§c_ù6
)) &&

694 
	`IN6_ARE_ADDR_EQUAL
(&(
pkt
->
d°_ù6
),

695 &(
q
->
id
.
d°_ù6
))) ||

696 (!
is_v6
 &&

697 
pkt
->
§c_ù
 =
q
->
id
.src_ip &&

698 
pkt
->
d°_ù
 =
q
->
id
.dst_ip)

701 
q
->
expúe
 = 
time_u±ime
 + 
V_dyn_sh‹t_li„time
;

702 
	`DEB
(
	`¥ötf
("ùfw:Üookup_dyn_∑ª¡ found 0x%p\n",
q
);)

703  
q
;

706  
	`add_dyn_ruÀ
(
pkt
, 
O_LIMIT_PARENT
, 
ruÀ
);

707 
	}
}

716 
	$ùfw_ö°Æl_°©e
(
ù_fw
 *
ruÀ
, 
ùfw_ö¢_limô
 *
cmd
,

717 
ù_fw_¨gs
 *
¨gs
, 
uöt32_t
 
èbÀ¨g
)

719 
œ°_log
;

720 
ùfw_dyn_ruÀ
 *
q
;

721 
ö_addr
 
da
;

722 #ifde‡
INET6


723 
§c
[
INET6_ADDRSTRLEN
 + 2], 
d°
[INET6_ADDRSTRLEN + 2];

725 
§c
[
INET_ADDRSTRLEN
], 
d°
[INET_ADDRSTRLEN];

728 
§c
[0] = '\0';

729 
d°
[0] = '\0';

731 
	`IPFW_DYN_LOCK
();

733 
	`DEB
(

734 #ifde‡
INET6


735 i‡(
	`IS_IP6_FLOW_ID
(&(
¨gs
->
f_id
))) {

736 
	`ù6_•rötf
(
§c
, &
¨gs
->
f_id
.
§c_ù6
);

737 
	`ù6_•rötf
(
d°
, &
¨gs
->
f_id
.
d°_ù6
);

741 
da
.
s_addr
 = 
	`ht⁄l
(
¨gs
->
f_id
.
§c_ù
);

742 
	`öë_¡ﬂ_r
(
da
, 
§c
);

743 
da
.
s_addr
 = 
	`ht⁄l
(
¨gs
->
f_id
.
d°_ù
);

744 
	`öë_¡ﬂ_r
(
da
, 
d°
);

746 
	`¥ötf
("ipfw: %s:Åype %d %s %u -> %s %u\n",

747 
__func__
, 
cmd
->
o
.
›code
, 
§c
, 
¨gs
->
f_id
.
§c_p‹t
,

748 
d°
, 
¨gs
->
f_id
.
d°_p‹t
);

749 
§c
[0] = '\0';

750 
d°
[0] = '\0';

753 
q
 = 
	`lookup_dyn_ruÀ_locked
(&
¨gs
->
f_id
, 
NULL
, NULL);

755 i‡(
q
 !
NULL
) {

756 i‡(
œ°_log
 !
time_u±ime
) {

757 
œ°_log
 = 
time_u±ime
;

758 
	`¥ötf
("ipfw: %s:ÉntryálreadyÖresent, done\n",

759 
__func__
);

761 
	`IPFW_DYN_UNLOCK
();

765 i‡(
V_dyn_cou¡
 >
V_dyn_max
)

767 
	`ªmove_dyn_ruÀ
(
NULL
, (
ùfw_dyn_ruÀ
 *)1);

769 i‡(
V_dyn_cou¡
 >
V_dyn_max
) {

770 i‡(
œ°_log
 !
time_u±ime
) {

771 
œ°_log
 = 
time_u±ime
;

772 
	`¥ötf
("ùfw: %s: Toÿm™y dy«mi¯ruÀs\n", 
__func__
);

774 
	`IPFW_DYN_UNLOCK
();

778 
cmd
->
o
.
›code
) {

779 
O_KEEP_STATE
:

780 
	`add_dyn_ruÀ
(&
¨gs
->
f_id
, 
O_KEEP_STATE
, 
ruÀ
);

783 
O_LIMIT
: {

784 
ùfw_Êow_id
 
id
;

785 
ùfw_dyn_ruÀ
 *
∑ª¡
;

786 
uöt32_t
 
c⁄n_limô
;

787 
uöt16_t
 
limô_mask
 = 
cmd
->limit_mask;

789 
c⁄n_limô
 = (
cmd
->c⁄n_limô =
IP_FW_TABLEARG
) ?

790 
èbÀ¨g
 : 
cmd
->
c⁄n_limô
;

792 
	`DEB
(

793 i‡(
cmd
->
c⁄n_limô
 =
IP_FW_TABLEARG
)

794 
	`¥ötf
("ipfw: %s: O_LIMITÑule, conn_limit: %u "

795 "—abÀ¨g)\n", 
__func__
, 
c⁄n_limô
);

797 
	`¥ötf
("ipfw: %s: O_LIMITÑule, conn_limit: %u\n",

798 
__func__
, 
c⁄n_limô
);

801 
id
.
d°_ù
 = id.
§c_ù
 = id.
d°_p‹t
 = id.
§c_p‹t
 = 0;

802 
id
.
¥Ÿo
 = 
¨gs
->
f_id
.proto;

803 
id
.
addr_ty≥
 = 
¨gs
->
f_id
.addr_type;

804 
id
.
fib
 = 
	`M_GETFIB
(
¨gs
->
m
);

806 i‡(
	`IS_IP6_FLOW_ID
 (&(
¨gs
->
f_id
))) {

807 i‡(
limô_mask
 & 
DYN_SRC_ADDR
)

808 
id
.
§c_ù6
 = 
¨gs
->
f_id
.src_ip6;

809 i‡(
limô_mask
 & 
DYN_DST_ADDR
)

810 
id
.
d°_ù6
 = 
¨gs
->
f_id
.dst_ip6;

812 i‡(
limô_mask
 & 
DYN_SRC_ADDR
)

813 
id
.
§c_ù
 = 
¨gs
->
f_id
.src_ip;

814 i‡(
limô_mask
 & 
DYN_DST_ADDR
)

815 
id
.
d°_ù
 = 
¨gs
->
f_id
.dst_ip;

817 i‡(
limô_mask
 & 
DYN_SRC_PORT
)

818 
id
.
§c_p‹t
 = 
¨gs
->
f_id
.src_port;

819 i‡(
limô_mask
 & 
DYN_DST_PORT
)

820 
id
.
d°_p‹t
 = 
¨gs
->
f_id
.dst_port;

821 i‡((
∑ª¡
 = 
	`lookup_dyn_∑ª¡
(&
id
, 
ruÀ
)Ë=
NULL
) {

822 
	`¥ötf
("ùfw: %s:áddÖ¨íàÁûed\n", 
__func__
);

823 
	`IPFW_DYN_UNLOCK
();

827 i‡(
∑ª¡
->
cou¡
 >
c⁄n_limô
) {

829 
	`ªmove_dyn_ruÀ
(
ruÀ
, 
∑ª¡
);

830 i‡(
∑ª¡
->
cou¡
 >
c⁄n_limô
) {

831 i‡(
V_fw_vîbo£
 && 
œ°_log
 !
time_u±ime
) {

832 
œ°_log
 = 
time_u±ime
;

833 #ifde‡
INET6


838 i‡(
	`IS_IP6_FLOW_ID
(&(
¨gs
->
f_id
))) {

839 
ù6buf
[
INET6_ADDRSTRLEN
];

840 
	`¢¥ötf
(
§c
, (src),

841 "[%s]", 
	`ù6_•rötf
(
ù6buf
,

842 &
¨gs
->
f_id
.
§c_ù6
));

843 
	`¢¥ötf
(
d°
, (dst),

844 "[%s]", 
	`ù6_•rötf
(
ù6buf
,

845 &
¨gs
->
f_id
.
d°_ù6
));

849 
da
.
s_addr
 =

850 
	`ht⁄l
(
¨gs
->
f_id
.
§c_ù
);

851 
	`öë_¡ﬂ_r
(
da
, 
§c
);

852 
da
.
s_addr
 =

853 
	`ht⁄l
(
¨gs
->
f_id
.
d°_ù
);

854 
	`öë_¡ﬂ_r
(
da
, 
d°
);

856 
	`log
(
LOG_SECURITY
 | 
LOG_DEBUG
,

858 
∑ª¡
->
ruÀ
->
ruÀnum
,

860 
§c
, (
¨gs
->
f_id
.
§c_p‹t
),

861 
d°
, (
¨gs
->
f_id
.
d°_p‹t
),

864 
	`IPFW_DYN_UNLOCK
();

868 
	`add_dyn_ruÀ
(&
¨gs
->
f_id
, 
O_LIMIT
, (
ù_fw
 *)
∑ª¡
);

872 
	`¥ötf
("ipfw: %s: unknown dynamicÑuleÅype %u\n",

873 
__func__
, 
cmd
->
o
.
›code
);

874 
	`IPFW_DYN_UNLOCK
();

879 
	`lookup_dyn_ruÀ_locked
(&
¨gs
->
f_id
, 
NULL
, NULL);

881 
	`IPFW_DYN_UNLOCK
();

883 
	}
}

893 
mbuf
 *

894 
	$ùfw_£nd_pkt
(
mbuf
 *
ª∂yto
, 
ùfw_Êow_id
 *
id
, 
u_öt32_t
 
£q
,

895 
u_öt32_t
 
ack
, 
Êags
)

897 
mbuf
 *
m
 = 
NULL
;

898 
Àn
, 
dú
;

899 
ù
 *
h
 = 
NULL
;

900 #ifde‡
INET6


901 
ù6_hdr
 *
h6
 = 
NULL
;

903 
t˝hdr
 *
th
 = 
NULL
;

905 
	`MGETHDR
(
m
, 
M_DONTWAIT
, 
MT_DATA
);

906 i‡(
m
 =
NULL
)

907  (
NULL
);

909 
	`M_SETFIB
(
m
, 
id
->
fib
);

910 #ifde‡
MAC


911 i‡(
ª∂yto
 !
NULL
)

912 
	`mac_√töë_fúewÆl_ª∂y
(
ª∂yto
, 
m
);

914 
	`mac_√töë_fúewÆl_£nd
(
m
);

916 ()
ª∂yto
;

919 
id
->
addr_ty≥
) {

921 
Àn
 = (
ù
Ë+ (
t˝hdr
);

923 #ifde‡
INET6


925 
Àn
 = (
ù6_hdr
Ë+ (
t˝hdr
);

930 
	`FREE_PKT
(
m
);

931  (
NULL
);

933 
dú
 = ((
Êags
 & (
TH_SYN
 | 
TH_RST
)) == TH_SYN);

935 
m
->
m_d©a
 +
max_lökhdr
;

936 
m
->
m_Êags
 |
M_SKIP_FIREWALL
;

937 
m
->
m_pkthdr
.
Àn
 = m->
m_Àn
 =Üen;

938 
m
->
m_pkthdr
.
rcvif
 = 
NULL
;

939 
	`bzîo
(
m
->
m_d©a
, 
Àn
);

941 
id
->
addr_ty≥
) {

943 
h
 = 
	`mtod
(
m
, 
ù
 *);

946 
h
->
ù_p
 = 
IPPROTO_TCP
;

947 
h
->
ù_Àn
 = 
	`ht⁄s
((
t˝hdr
));

948 i‡(
dú
) {

949 
h
->
ù_§c
.
s_addr
 = 
	`ht⁄l
(
id
->
§c_ù
);

950 
h
->
ù_d°
.
s_addr
 = 
	`ht⁄l
(
id
->
d°_ù
);

952 
h
->
ù_§c
.
s_addr
 = 
	`ht⁄l
(
id
->
d°_ù
);

953 
h
->
ù_d°
.
s_addr
 = 
	`ht⁄l
(
id
->
§c_ù
);

956 
th
 = (
t˝hdr
 *)(
h
 + 1);

958 #ifde‡
INET6


960 
h6
 = 
	`mtod
(
m
, 
ù6_hdr
 *);

963 
h6
->
ù6_nxt
 = 
IPPROTO_TCP
;

964 
h6
->
ù6_∂í
 = 
	`ht⁄s
((
t˝hdr
));

965 i‡(
dú
) {

966 
h6
->
ù6_§c
 = 
id
->
§c_ù6
;

967 
h6
->
ù6_d°
 = 
id
->
d°_ù6
;

969 
h6
->
ù6_§c
 = 
id
->
d°_ù6
;

970 
h6
->
ù6_d°
 = 
id
->
§c_ù6
;

973 
th
 = (
t˝hdr
 *)(
h6
 + 1);

978 i‡(
dú
) {

979 
th
->
th_•‹t
 = 
	`ht⁄s
(
id
->
§c_p‹t
);

980 
th
->
th_dp‹t
 = 
	`ht⁄s
(
id
->
d°_p‹t
);

982 
th
->
th_•‹t
 = 
	`ht⁄s
(
id
->
d°_p‹t
);

983 
th
->
th_dp‹t
 = 
	`ht⁄s
(
id
->
§c_p‹t
);

985 
th
->
th_off
 = (
t˝hdr
) >> 2;

987 i‡(
Êags
 & 
TH_RST
) {

988 i‡(
Êags
 & 
TH_ACK
) {

989 
th
->
th_£q
 = 
	`ht⁄l
(
ack
);

990 
th
->
th_Êags
 = 
TH_RST
;

992 i‡(
Êags
 & 
TH_SYN
)

993 
£q
++;

994 
th
->
th_ack
 = 
	`ht⁄l
(
£q
);

995 
th
->
th_Êags
 = 
TH_RST
 | 
TH_ACK
;

1001 
th
->
th_£q
 = 
	`ht⁄l
(
£q
);

1002 
th
->
th_ack
 = 
	`ht⁄l
(
ack
);

1003 
th
->
th_Êags
 = 
TH_ACK
;

1006 
id
->
addr_ty≥
) {

1008 
th
->
th_sum
 = 
	`ö_cksum
(
m
, 
Àn
);

1011 
h
->
ù_v
 = 4;

1012 
h
->
ù_hl
 = (*h) >> 2;

1013 
h
->
ù_tos
 = 
IPTOS_LOWDELAY
;

1014 
h
->
ù_off
 = 0;

1016 
h
->
ù_Àn
 = 
Àn
;

1017 
h
->
ù_âl
 = 
V_ù_de·é
;

1018 
h
->
ù_sum
 = 0;

1020 #ifde‡
INET6


1022 
th
->
th_sum
 = 
	`ö6_cksum
(
m
, 
IPPROTO_TCP
, (*
h6
),

1023 (
t˝hdr
));

1026 
h6
->
ù6_vfc
 |
IPV6_VERSION
;

1027 
h6
->
ù6_hlim
 = 
IPV6_DEFHLIM
;

1032  (
m
);

1033 
	}
}

1041 
	$ùfw_tick
(* 
v√tx
)

1043 
mbuf
 *
m0
, *
m
, *
m√xt
, **
mèûp
;

1044 #ifde‡
INET6


1045 
mbuf
 *
m6
, **
m6_èûp
;

1047 
i
;

1048 
ùfw_dyn_ruÀ
 *
q
;

1049 #ifde‡
VIMAGE


1050 
v√t
 *
vp
 = 
v√tx
;

1053 
	`CURVNET_SET
(
vp
);

1054 i‡(
V_dyn_kì∑live
 =0 || 
V_ùfw_dyn_v
 =
NULL
 || 
V_dyn_cou¡
 == 0)

1055 
d⁄e
;

1063 
m0
 = 
NULL
;

1064 
mèûp
 = &
m0
;

1065 #ifde‡
INET6


1066 
m6
 = 
NULL
;

1067 
m6_èûp
 = &
m6
;

1069 
	`IPFW_DYN_LOCK
();

1070 
i
 = 0 ; i < 
V_cuº_dyn_buckës
 ; i++) {

1071 
q
 = 
V_ùfw_dyn_v
[
i
] ; q ; q = q->
√xt
 ) {

1072 i‡(
q
->
dyn_ty≥
 =
O_LIMIT_PARENT
)

1074 i‡(
q
->
id
.
¥Ÿo
 !
IPPROTO_TCP
)

1076 i‡–(
q
->
°©e
 & 
BOTH_SYN
) != BOTH_SYN)

1078 i‡(
	`TIME_LEQ
(
time_u±ime
 + 
V_dyn_kì∑live_öãrvÆ
,

1079 
q
->
expúe
))

1081 i‡(
	`TIME_LEQ
(
q
->
expúe
, 
time_u±ime
))

1084 
m
 = 
	`ùfw_£nd_pkt
(
NULL
, &(
q
->
id
), q->
ack_ªv
 - 1,

1085 
q
->
ack_fwd
, 
TH_SYN
);

1086 
m√xt
 = 
	`ùfw_£nd_pkt
(
NULL
, &(
q
->
id
), q->
ack_fwd
 - 1,

1087 
q
->
ack_ªv
, 0);

1089 
q
->
id
.
addr_ty≥
) {

1091 i‡(
m
 !
NULL
) {

1092 *
mèûp
 = 
m
;

1093 
mèûp
 = &(*mèûp)->
m_√xçkt
;

1095 i‡(
m√xt
 !
NULL
) {

1096 *
mèûp
 = 
m√xt
;

1097 
mèûp
 = &(*mèûp)->
m_√xçkt
;

1100 #ifde‡
INET6


1102 i‡(
m
 !
NULL
) {

1103 *
m6_èûp
 = 
m
;

1104 
m6_èûp
 = &(*m6_èûp)->
m_√xçkt
;

1106 i‡(
m√xt
 !
NULL
) {

1107 *
m6_èûp
 = 
m√xt
;

1108 
m6_èûp
 = &(*m6_èûp)->
m_√xçkt
;

1114 
m
 = 
m√xt
 = 
NULL
;

1117 
	`IPFW_DYN_UNLOCK
();

1118 
m
 = 
m√xt
 = 
m0
; m !
NULL
; m = mnext) {

1119 
m√xt
 = 
m
->
m_√xçkt
;

1120 
m
->
m_√xçkt
 = 
NULL
;

1121 
	`ù_ouçut
(
m
, 
NULL
, NULL, 0, NULL, NULL);

1123 #ifde‡
INET6


1124 
m
 = 
m√xt
 = 
m6
; m !
NULL
; m = mnext) {

1125 
m√xt
 = 
m
->
m_√xçkt
;

1126 
m
->
m_√xçkt
 = 
NULL
;

1127 
	`ù6_ouçut
(
m
, 
NULL
, NULL, 0, NULL, NULL, NULL);

1130 
d⁄e
:

1131 
	`ˇŒout_ª£t_⁄
(&
V_ùfw_timeout
, 
V_dyn_kì∑live_≥riod
 * 
hz
,

1132 
ùfw_tick
, 
v√tx
, 0);

1133 
	`CURVNET_RESTORE
();

1134 
	}
}

1137 
	$ùfw_dyn_©èch
()

1139 
ùfw_dyn_ruÀ_z⁄e
 = 
	`uma_z¸óã
("IPFW dynamicÑule",

1140 (
ùfw_dyn_ruÀ
), 
NULL
, NULL, NULL, NULL,

1141 
UMA_ALIGN_PTR
, 0);

1143 
	`IPFW_DYN_LOCK_INIT
();

1144 
	}
}

1147 
	$ùfw_dyn_dëach
()

1149 
	`uma_zde°roy
(
ùfw_dyn_ruÀ_z⁄e
);

1150 
	`IPFW_DYN_LOCK_DESTROY
();

1151 
	}
}

1154 
	$ùfw_dyn_öô
()

1156 
V_ùfw_dyn_v
 = 
NULL
;

1157 
V_dyn_buckës
 = 256;

1158 
V_cuº_dyn_buckës
 = 256;

1160 
V_dyn_ack_li„time
 = 300;

1161 
V_dyn_syn_li„time
 = 20;

1162 
V_dyn_fö_li„time
 = 1;

1163 
V_dyn_r°_li„time
 = 1;

1164 
V_dyn_udp_li„time
 = 10;

1165 
V_dyn_sh‹t_li„time
 = 5;

1167 
V_dyn_kì∑live_öãrvÆ
 = 20;

1168 
V_dyn_kì∑live_≥riod
 = 5;

1169 
V_dyn_kì∑live
 = 1;

1171 
V_dyn_max
 = 4096;

1172 
	`ˇŒout_öô
(&
V_ùfw_timeout
, 
CALLOUT_MPSAFE
);

1173 
	`ˇŒout_ª£t_⁄
(&
V_ùfw_timeout
, 
hz
, 
ùfw_tick
, 
curv√t
, 0);

1174 
	}
}

1177 
	$ùfw_dyn_unöô
(
∑ss
)

1179 i‡(
∑ss
 == 0)

1180 
	`ˇŒout_døö
(&
V_ùfw_timeout
);

1182 i‡(
V_ùfw_dyn_v
 !
NULL
)

1183 
	`‰ì
(
V_ùfw_dyn_v
, 
M_IPFW
);

1185 
	}
}

1188 
	$ùfw_dyn_Àn
()

1190  (
V_ùfw_dyn_v
 =
NULL
) ? 0 :

1191 (
V_dyn_cou¡
 * (
ùfw_dyn_ruÀ
));

1192 
	}
}

1195 
	$ùfw_gë_dy«mic
(**
pbp
, c⁄° *
ï
)

1197 
ùfw_dyn_ruÀ
 *
p
, *
œ°
 = 
NULL
;

1198 *
bp
;

1199 
i
;

1201 i‡(
V_ùfw_dyn_v
 =
NULL
)

1203 
bp
 = *
pbp
;

1205 
	`IPFW_DYN_LOCK
();

1206 
i
 = 0 ; i < 
V_cuº_dyn_buckës
; i++)

1207 
p
 = 
V_ùfw_dyn_v
[
i
] ;Ö !
NULL
;Ö =Ö->
√xt
) {

1208 i‡(
bp
 +  *
p
 <
ï
) {

1209 
ùfw_dyn_ruÀ
 *
d°
 =

1210 (
ùfw_dyn_ruÀ
 *)
bp
;

1211 
	`bc›y
(
p
, 
d°
,  *p);

1212 
	`bc›y
(&(
p
->
ruÀ
->
ruÀnum
), &(
d°
->rule),

1213 (
p
->
ruÀ
->
ruÀnum
));

1218 
	`bc›y
(&(
p
->
ruÀ
->
£t
),

1219 (*)&
d°
->
ruÀ
 +

1220 (
p
->
ruÀ
->
ruÀnum
),

1221 (
p
->
ruÀ
->
£t
));

1228 
	`bc›y
(&
d°
, &d°->
√xt
, (dst));

1229 
œ°
 = 
d°
;

1230 
d°
->
expúe
 =

1231 
	`TIME_LEQ
(
d°
->
expúe
, 
time_u±ime
) ?

1232 0 : 
d°
->
expúe
 - 
time_u±ime
 ;

1233 
bp
 +(
ùfw_dyn_ruÀ
);

1236 
	`IPFW_DYN_UNLOCK
();

1237 i‡(
œ°
 !
NULL
)

1238 
	`bzîo
(&
œ°
->
√xt
, (last));

1239 *
pbp
 = 
bp
;

1240 
	}
}

	@sys/netinet/ipfw/ip_fw_log.c

26 
	~<sys/cdefs.h
>

27 
__FBSDID
("$FreeBSD: head/sys/netinet/ipfw/ip_fw_log.c 209845 2010-07-09 11:27:33Z glebius $");

33 #i‡!
deföed
(
KLD_MODULE
)

34 
	~"›t_ùfw.h
"

35 
	~"›t_ùdivît.h
"

36 
	~"›t_ùdn.h
"

37 
	~"›t_öë.h
"

38 #i‚de‡
INET


39 #îr‹ 
IPFIREWALL
 
ªquúes
 
INET
.

42 
	~"›t_öë6.h
"

43 
	~"›t_ù£c.h
"

45 
	~<sys/∑øm.h
>

46 
	~<sys/sy°m.h
>

47 
	~<sys/mbuf.h
>

48 
	~<sys/kî√l.h
>

49 
	~<sys/sockë.h
>

50 
	~<sys/sys˘l.h
>

51 
	~<sys/sy¶og.h
>

52 
	~<√t/ëhî√t.h
>

53 
	~<√t/if.h
>

54 
	~<√t/v√t.h
>

55 
	~<√t/if_ty≥s.h
>

56 
	~<√t/bpf.h
>

58 
	~<√töë/ö.h
>

59 
	~<√töë/ù.h
>

60 
	~<√töë/ù_icmp.h
>

61 
	~<√töë/ù_v¨.h
>

62 
	~<√töë/ù_fw.h
>

63 
	~<√töë/ùfw/ù_fw_¥iv©e.h
>

64 
	~<√töë/t˝_v¨.h
>

65 
	~<√töë/udp.h
>

67 
	~<√töë/ù6.h
>

68 
	~<√töë/icmp6.h
>

69 #ifde‡
INET6


70 
	~<√töë6/ö6_v¨.h
>

73 #ifde‡
MAC


74 
	~<£curôy/mac/mac_‰amew‹k.h
>

81 
	#L3HDR
(
T
, 
ù
Ë((T *)((
u_öt32_t
 *)(ùË+ (ù)->
ù_hl
))

	)

82 
	#TCP
(
p
Ë((
t˝hdr
 *)’))

	)

83 
	#SCTP
(
p
Ë((
s˘phdr
 *)’))

	)

84 
	#UDP
(
p
Ë((
udphdr
 *)’))

	)

85 
	#ICMP
(
p
Ë((
icmphdr
 *)’))

	)

86 
	#ICMP6
(
p
Ë((
icmp6_hdr
 *)’))

	)

88 
	#SNPARGS
(
buf
, 
Àn
Ëbu‡+Üí, (bufË>Üí ? (bufË-Üí : 0

	)

89 
	#SNP
(
buf
Ëbuf, (buf)

	)

91 #ifde‡
WITHOUT_BPF


93 
	$ùfw_log_bpf
(
⁄off
)

95 
	}
}

97 
i‚ë
 *
	glog_if
;

101 
	$log_dummy
(
i‚ë
 *
iÂ
, 
u_l⁄g
 
cmd
, 
ˇddr_t
 
addr
)

103  
EINVAL
;

104 
	}
}

107 
	$ùfw_log_ouçut
(
i‚ë
 *
iÂ
, 
mbuf
 *
m
,

108 
sockaddr
 *
d°
, 
rouã
 *
ro
)

110 i‡(
m
 !
NULL
)

111 
	`m_‰ìm
(
m
);

112  
EINVAL
;

113 
	}
}

116 
	$ùfw_log_°¨t
(
i‚ë
* 
iÂ
)

118 
	`∑nic
("ipfw_log_start() mustÇot be called");

119 
	}
}

121 c⁄° 
u_ch¨
 
	gùfwbrﬂdˇ°addr
[6] =

125 
	$ùfw_log_bpf
(
⁄off
)

127 
i‚ë
 *
iÂ
;

129 i‡(
⁄off
) {

130 i‡(
log_if
)

132 
iÂ
 = 
	`if_Æloc
(
IFT_ETHER
);

133 i‡(
iÂ
 =
NULL
)

135 
	`if_öô«me
(
iÂ
, "ipfw", 0);

136 
iÂ
->
if_mtu
 = 65536;

137 
iÂ
->
if_Êags
 = 
IFF_UP
 | 
IFF_SIMPLEX
 | 
IFF_MULTICAST
;

138 
iÂ
->
if_öô
 = (*)
log_dummy
;

139 
iÂ
->
if_io˘l
 = 
log_dummy
;

140 
iÂ
->
if_°¨t
 = 
ùfw_log_°¨t
;

141 
iÂ
->
if_ouçut
 = 
ùfw_log_ouçut
;

142 
iÂ
->
if_addæí
 = 6;

143 
iÂ
->
if_hdæí
 = 14;

144 
	`if_©èch
(
iÂ
);

145 
iÂ
->
if_brﬂdˇ°addr
 = 
ùfwbrﬂdˇ°addr
;

146 
iÂ
->
if_baudøã
 = 
	`IF_Mbps
(10);

147 
	`bpÁâach
(
iÂ
, 
DLT_EN10MB
, 14);

148 
log_if
 = 
iÂ
;

150 i‡(
log_if
) {

151 
	`ëhî_ifdëach
(
log_if
);

152 
	`if_‰ì
(
log_if
);

154 
log_if
 = 
NULL
;

156 
	}
}

164 
	$ùfw_log
(
ù_fw
 *
f
, 
u_öt
 
hÀn
, 
ù_fw_¨gs
 *
¨gs
,

165 
mbuf
 *
m
, 
i‚ë
 *
oif
, 
u_sh‹t
 
off£t
, 
uöt32_t
 
èbÀ¨g
,

166 
ù
 *ip)

168 *
a˘i⁄
;

169 
limô_ªached
 = 0;

170 
a˘i⁄2
[40], 
¥Ÿo
[128], 
‰agmít
[32];

172 i‡(
V_fw_vîbo£
 == 0) {

173 #i‚de‡
WITHOUT_BPF


175 i‡(
log_if
 =
NULL
 ||Üog_if->
if_bpf
 == NULL)

178 i‡(
¨gs
->
eh
)

179 
	`BPF_MTAP2
(
log_if
, 
¨gs
->
eh
, 
ETHER_HDR_LEN
, 
m
);

184 
	`BPF_MTAP2
(
log_if
, "DDDDDDSSSSSS\x08\x00", 
ETHER_HDR_LEN
, 
m
);

189 
‰agmít
[0] = '\0';

190 
¥Ÿo
[0] = '\0';

192 i‡(
f
 =
NULL
) {

193 i‡(
V_vîbo£_limô
 !0 && 
V_n‹uÀ_cou¡î
 >= V_verbose_limit)

195 
V_n‹uÀ_cou¡î
++;

196 i‡(
V_n‹uÀ_cou¡î
 =
V_vîbo£_limô
)

197 
limô_ªached
 = 
V_vîbo£_limô
;

198 
a˘i⁄
 = "Refuse";

200 
ùfw_ö¢
 *
cmd
 = 
	`ACTION_PTR
(
f
);

201 
ùfw_ö¢_log
 *
l
 = (ùfw_ö¢_log *)
cmd
;

203 i‡(
l
->
max_log
 !0 &&Ü->
log_À·
 == 0)

205 
l
->
log_À·
--;

206 i‡(
l
->
log_À·
 == 0)

207 
limô_ªached
 = 
l
->
max_log
;

208 
cmd
 +
	`F_LEN
(cmd);

209 i‡(
cmd
->
›code
 =
O_ALTQ
) {

210 
ùfw_ö¢_Ætq
 *
Ætq
 = (ùfw_ö¢_Ætq *)
cmd
;

212 
	`¢¥ötf
(
	`SNPARGS
(
a˘i⁄2
, 0), "Altq %d",

213 
Ætq
->
qid
);

214 
cmd
 +
	`F_LEN
(cmd);

216 i‡(
cmd
->
›code
 =
O_PROB
)

217 
cmd
 +
	`F_LEN
(cmd);

219 i‡(
cmd
->
›code
 =
O_TAG
)

220 
cmd
 +
	`F_LEN
(cmd);

222 
a˘i⁄
 = 
a˘i⁄2
;

223 
cmd
->
›code
) {

224 
O_DENY
:

225 
a˘i⁄
 = "Deny";

228 
O_REJECT
:

229 i‡(
cmd
->
¨g1
==
ICMP_REJECT_RST
)

230 
a˘i⁄
 = "Reset";

231 i‡(
cmd
->
¨g1
==
ICMP_UNREACH_HOST
)

232 
a˘i⁄
 = "Reject";

234 
	`¢¥ötf
(
	`SNPARGS
(
a˘i⁄2
, 0), "Unreach %d",

235 
cmd
->
¨g1
);

238 
O_UNREACH6
:

239 i‡(
cmd
->
¨g1
==
ICMP6_UNREACH_RST
)

240 
a˘i⁄
 = "Reset";

242 
	`¢¥ötf
(
	`SNPARGS
(
a˘i⁄2
, 0), "Unreach %d",

243 
cmd
->
¨g1
);

246 
O_ACCEPT
:

247 
a˘i⁄
 = "Accept";

249 
O_COUNT
:

250 
a˘i⁄
 = "Count";

252 
O_DIVERT
:

253 
	`¢¥ötf
(
	`SNPARGS
(
a˘i⁄2
, 0), "Divert %d",

254 
cmd
->
¨g1
);

256 
O_TEE
:

257 
	`¢¥ötf
(
	`SNPARGS
(
a˘i⁄2
, 0), "Tee %d",

258 
cmd
->
¨g1
);

260 
O_SETFIB
:

261 
	`¢¥ötf
(
	`SNPARGS
(
a˘i⁄2
, 0), "SetFib %d",

262 
cmd
->
¨g1
);

264 
O_SKIPTO
:

265 
	`¢¥ötf
(
	`SNPARGS
(
a˘i⁄2
, 0), "SkipTo %d",

266 
cmd
->
¨g1
);

268 
O_PIPE
:

269 
	`¢¥ötf
(
	`SNPARGS
(
a˘i⁄2
, 0), "Pipe %d",

270 
cmd
->
¨g1
);

272 
O_QUEUE
:

273 
	`¢¥ötf
(
	`SNPARGS
(
a˘i⁄2
, 0), "Queue %d",

274 
cmd
->
¨g1
);

276 
O_FORWARD_IP
: {

277 
ùfw_ö¢_ß
 *
ß
 = (ùfw_ö¢_ß *)
cmd
;

278 
Àn
;

279 
ö_addr
 
dummyaddr
;

280 i‡(
ß
->ß.
sö_addr
.
s_addr
 =
INADDR_ANY
)

281 
dummyaddr
.
s_addr
 = 
	`ht⁄l
(
èbÀ¨g
);

283 
dummyaddr
.
s_addr
 = 
ß
->ß.
sö_addr
.s_addr;

285 
Àn
 = 
	`¢¥ötf
(
	`SNPARGS
(
a˘i⁄2
, 0), "ForwardÅo %s",

286 
	`öë_¡ﬂ
(
dummyaddr
));

288 i‡(
ß
->ß.
sö_p‹t
)

289 
	`¢¥ötf
(
	`SNPARGS
(
a˘i⁄2
, 
Àn
), ":%d",

290 
ß
->ß.
sö_p‹t
);

293 
O_NETGRAPH
:

294 
	`¢¥ötf
(
	`SNPARGS
(
a˘i⁄2
, 0), "Netgraph %d",

295 
cmd
->
¨g1
);

297 
O_NGTEE
:

298 
	`¢¥ötf
(
	`SNPARGS
(
a˘i⁄2
, 0), "Ngtee %d",

299 
cmd
->
¨g1
);

301 
O_NAT
:

302 
a˘i⁄
 = "Nat";

304 
O_REASS
:

305 
a˘i⁄
 = "Reass";

308 
a˘i⁄
 = "UNKNOWN";

313 i‡(
hÀn
 == 0) {

314 
	`¢¥ötf
(
	`SNPARGS
(
¥Ÿo
, 0), "MAC");

317 
Àn
;

318 #ifde‡
INET6


319 
§c
[
INET6_ADDRSTRLEN
 + 2], 
d°
[INET6_ADDRSTRLEN + 2];

321 
§c
[
INET_ADDRSTRLEN
], 
d°
[INET_ADDRSTRLEN];

323 
icmphdr
 *
icmp
;

324 
t˝hdr
 *
t˝
;

325 
udphdr
 *
udp
;

326 #ifde‡
INET6


327 
ù6_hdr
 *
ù6
 = 
NULL
;

328 
icmp6_hdr
 *
icmp6
;

330 
§c
[0] = '\0';

331 
d°
[0] = '\0';

332 #ifde‡
INET6


333 i‡(
	`IS_IP6_FLOW_ID
(&(
¨gs
->
f_id
))) {

334 
ù6buf
[
INET6_ADDRSTRLEN
];

335 
	`¢¥ötf
(
§c
, (src), "[%s]",

336 
	`ù6_•rötf
(
ù6buf
, &
¨gs
->
f_id
.
§c_ù6
));

337 
	`¢¥ötf
(
d°
, (dst), "[%s]",

338 
	`ù6_•rötf
(
ù6buf
, &
¨gs
->
f_id
.
d°_ù6
));

340 
ù6
 = (
ù6_hdr
 *)
ù
;

341 
t˝
 = (
t˝hdr
 *)(((*)
ù
Ë+ 
hÀn
);

342 
udp
 = (
udphdr
 *)(((*)
ù
Ë+ 
hÀn
);

346 
t˝
 = 
	`L3HDR
(
t˝hdr
, 
ù
);

347 
udp
 = 
	`L3HDR
(
udphdr
, 
ù
);

349 
	`öë_¡ﬂ_r
(
ù
->
ù_§c
, 
§c
);

350 
	`öë_¡ﬂ_r
(
ù
->
ù_d°
, 
d°
);

353 
¨gs
->
f_id
.
¥Ÿo
) {

354 
IPPROTO_TCP
:

355 
Àn
 = 
	`¢¥ötf
(
	`SNPARGS
(
¥Ÿo
, 0), "TCP %s", 
§c
);

356 i‡(
off£t
 == 0)

357 
	`¢¥ötf
(
	`SNPARGS
(
¥Ÿo
, 
Àn
), ":%d %s:%d",

358 
	`¡ohs
(
t˝
->
th_•‹t
),

359 
d°
,

360 
	`¡ohs
(
t˝
->
th_dp‹t
));

362 
	`¢¥ötf
(
	`SNPARGS
(
¥Ÿo
, 
Àn
), " %s", 
d°
);

365 
IPPROTO_UDP
:

366 
Àn
 = 
	`¢¥ötf
(
	`SNPARGS
(
¥Ÿo
, 0), "UDP %s", 
§c
);

367 i‡(
off£t
 == 0)

368 
	`¢¥ötf
(
	`SNPARGS
(
¥Ÿo
, 
Àn
), ":%d %s:%d",

369 
	`¡ohs
(
udp
->
uh_•‹t
),

370 
d°
,

371 
	`¡ohs
(
udp
->
uh_dp‹t
));

373 
	`¢¥ötf
(
	`SNPARGS
(
¥Ÿo
, 
Àn
), " %s", 
d°
);

376 
IPPROTO_ICMP
:

377 
icmp
 = 
	`L3HDR
(
icmphdr
, 
ù
);

378 i‡(
off£t
 == 0)

379 
Àn
 = 
	`¢¥ötf
(
	`SNPARGS
(
¥Ÿo
, 0),

381 
icmp
->
icmp_ty≥
, icmp->
icmp_code
);

383 
Àn
 = 
	`¢¥ötf
(
	`SNPARGS
(
¥Ÿo
, 0), "ICMP ");

384 
Àn
 +
	`¢¥ötf
(
	`SNPARGS
(
¥Ÿo
,Üí), "%s", 
§c
);

385 
	`¢¥ötf
(
	`SNPARGS
(
¥Ÿo
, 
Àn
), " %s", 
d°
);

387 #ifde‡
INET6


388 
IPPROTO_ICMPV6
:

389 
icmp6
 = (
icmp6_hdr
 *)(((*)
ù
Ë+ 
hÀn
);

390 i‡(
off£t
 == 0)

391 
Àn
 = 
	`¢¥ötf
(
	`SNPARGS
(
¥Ÿo
, 0),

393 
icmp6
->
icmp6_ty≥
, icmp6->
icmp6_code
);

395 
Àn
 = 
	`¢¥ötf
(
	`SNPARGS
(
¥Ÿo
, 0), "ICMPv6 ");

396 
Àn
 +
	`¢¥ötf
(
	`SNPARGS
(
¥Ÿo
,Üí), "%s", 
§c
);

397 
	`¢¥ötf
(
	`SNPARGS
(
¥Ÿo
, 
Àn
), " %s", 
d°
);

401 
Àn
 = 
	`¢¥ötf
(
	`SNPARGS
(
¥Ÿo
, 0), "P:%d %s",

402 
¨gs
->
f_id
.
¥Ÿo
, 
§c
);

403 
	`¢¥ötf
(
	`SNPARGS
(
¥Ÿo
, 
Àn
), " %s", 
d°
);

407 #ifde‡
INET6


408 i‡(
	`IS_IP6_FLOW_ID
(&(
¨gs
->
f_id
))) {

409 i‡(
off£t
 & (
IP6F_OFF_MASK
 | 
IP6F_MORE_FRAG
))

410 
	`¢¥ötf
(
	`SNPARGS
(
‰agmít
, 0),

412 
¨gs
->
f_id
.
exåa
,

413 
	`¡ohs
(
ù6
->
ù6_∂í
Ë- 
hÀn
,

414 
	`¡ohs
(
off£t
 & 
IP6F_OFF_MASK
) << 3,

415 (
off£t
 & 
IP6F_MORE_FRAG
) ? "+" : "");

419 
ùoff
, 
ùÀn
;

420 
ùoff
 = 
	`¡ohs
(
ù
->
ù_off
);

421 
ùÀn
 = 
	`¡ohs
(
ù
->
ù_Àn
);

422 i‡(
ùoff
 & (
IP_MF
 | 
IP_OFFMASK
))

423 
	`¢¥ötf
(
	`SNPARGS
(
‰agmít
, 0),

425 
	`¡ohs
(
ù
->
ù_id
), 
ùÀn
 - (ù->
ù_hl
 << 2),

426 
off£t
 << 3,

427 (
ùoff
 & 
IP_MF
) ? "+" : "");

430 #ifde‡
__FªeBSD__


431 i‡(
oif
 || 
m
->
m_pkthdr
.
rcvif
)

432 
	`log
(
LOG_SECURITY
 | 
LOG_INFO
,

434 
f
 ? f->
ruÀnum
 : -1,

435 
a˘i⁄
, 
¥Ÿo
, 
oif
 ? "out" : "in",

436 
oif
 ? oif->
if_x«me
 : 
m
->
m_pkthdr
.
rcvif
->if_xname,

437 
‰agmít
);

440 
	`log
(
LOG_SECURITY
 | 
LOG_INFO
,

442 
f
 ? f->
ruÀnum
 : -1,

443 
a˘i⁄
, 
¥Ÿo
, 
‰agmít
);

444 i‡(
limô_ªached
)

445 
	`log
(
LOG_SECURITY
 | 
LOG_NOTICE
,

447 
limô_ªached
, 
f
 ? f->
ruÀnum
 : -1);

448 
	}
}

	@sys/netinet/ipfw/ip_fw_lookup.c

26 
	~<sys/cdefs.h
>

27 
__FBSDID
("$FreeBSD: user/luigi/ipfw3-head/sys/netinet/ipfw/ip_fw_table.c 200601 2009-12-16 10:48:40ZÜuigi $");

67 
	~<sys/cdefs.h
>

68 #ifde‡
_KERNEL


69 
	~<sys/∑øm.h
>

70 
	~<sys/sy°m.h
>

71 
	~<sys/mÆloc.h
>

72 
	~<sys/kî√l.h
>

73 
	~<sys/lock.h
>

74 
	~<sys/rwlock.h
>

75 
MALLOC_DEFINE
(
M_IPFW_LUT
, "ipfw_lookup", "IpFwÜookup");

76 
	#MÆloc
(
n
Ë
	`mÆloc
“, 
M_IPFW_LUT
, 
M_WAITOK
)

	)

77 
	#CÆloc
(
n
Ë
	`ˇŒoc
“, 
M_IPFW_LUT
, 
M_WAITOK
 | 
M_ZERO
)

	)

78 
	#Fªe
(
p
Ë
	`‰ì
’, 
M_IPFW_LUT
)

	)

80 
	#log
(
x
, 
¨g
...)

	)

83 
	~<sys/ty≥s.h
>

84 
	~<°dio.h
>

85 
	~<°dlib.h
>

86 
	~<°rög.h
>

87 
	#MÆloc
(
n
Ë
	`mÆloc
“)

	)

88 
	#CÆloc
(
n
Ë
	`ˇŒoc
(1,Ç)

	)

89 
	#Fªe
(
p
Ë
	`‰ì
’)

	)

90 
	#log
(
x
, 
¨g
...Ë
	`Ârötf
(
°dîr
, "%s: " x "\n", 
__FUNCTION__
, ##¨g)

	)

93 
	síåy
 {

94 
uöt32_t
 
	mid
;

95 
íåy
 *
	m±r
;

98 
	slookup_èbÀ
 {

99 
	m_size
;

100 
	mu£d
;

101 
	mmask
;

102 
íåy
 *
	mf_hód
, *
	mf_èû
;

103 
íåy
 * 
	ms
;

106 
__ölöe
 
	$em±y
(
lookup_èbÀ
 *
hód
, c⁄° *
p
)

108 c⁄° 
íåy
 *
ï
 = 
p
;

109  (
ï
 =
NULL
 ||

110 (
ï
 >
hód
->
s
 &&É∞< &hód->s[hód->
_size
]));

111 
	}
}

116 
lookup_èbÀ
 *

117 
	$ùfw_lut_öô
(
lookup_èbÀ
 *
hód
, 
√w_size
, 
mask
)

119 
i
;

120 
íåy
 *
s
;

121 
íåy
 *
fh
, *
·
;

123 i‡(
hód
 !
NULL
) {

124 
mask
 = 
hód
->mask;

125 i‡(
√w_size
 <
hód
->
_size
)

126  
hód
;

127 i‡(
√w_size
 >
mask
+1) {

128 
	`log
("sizeÜargerÅhan mask");

129  
NULL
;

132 
	`log
("old isÇull, initialize");

133 
hód
 = 
	`CÆloc
((*head));

134 i‡(
hód
 =
NULL
)

135  
NULL
;

136 i‡(
√w_size
 >
mask
)

137 
mask
 = 
√w_size
;

138 i‡(
mask
 & (mask -1)) {

139 
i
 = 1; i < 
mask
; i += i)

141 
	`log
("mask %dÇŸ 2^k,Ñound u∞tÿ%d", 
mask
, 
i
);

142 
mask
 = 
i
;

144 
mask
 = 
hód
->mask = mask - 1;

147 
s
 = 
	`CÆloc
(
√w_size
 * (*s));

148 i‡(
s
 =
NULL
)

149  
NULL
;

150 i‡(!
hód
->
s
) {

151 
hód
->
s
 = s;

152 
hód
->
_size
 = 1;

154 
fh
 = 
·
 = 
NULL
;

156 
i
 = 0; i < 
√w_size
; i++) {

157 
s
[
i
].
id
 = (ò>
hód
->
_size
) ? i : head->s[i].id;

158 i‡(
i
 < 
hód
->
_size
 && !
	`em±y
(hód, hód->
s
[i].
±r
)) {

159 
s
[
i
].
±r
 = 
hód
->s[i].ptr;

162 i‡(
fh
 =
NULL
)

163 
fh
 = &
s
[
i
];

165 
·
->
±r
 = &
s
[
i
];

166 
·
 = &
s
[
i
];

168 
hód
->
f_hód
 = 
fh
;

169 
hód
->
f_èû
 = 
·
;

172 
fh
 = 
hód
->
s
;

173 
hód
->
s
 = s;

174 
hód
->
_size
 = 
√w_size
;

176 i‡(
fh
 !
s
)

177 
	`Fªe
(
fh
);

178 
	`log
("done");

179  
hód
;

180 
	}
}

184 
	$ùfw_lut_ö£π
(
lookup_èbÀ
 *
hód
, *
d
)

186 
íåy
 *
e
;

188 
e
 = 
hód
->
f_hód
;

189 i‡(
e
 =
NULL
)

191 
hód
->
f_hód
 = 
e
->
±r
;

192 
e
->
±r
 = 
d
;

193 
hód
->
u£d
++;

194  
e
->
id
;

195 
	}
}

199 
	$ùfw_lut_dñëe
(
lookup_èbÀ
 *
hód
, 
id
)

201 
i
 = 
id
 & 
hód
->
mask
;

202 *
ªsu…
;

203 
íåy
 *
e
;

205 i‡(
i
 >
hód
->
_size
)

206  
NULL
;

207 
e
 = &
hód
->
s
[
i
];

208 i‡(
e
->
id
 != id)

209  
NULL
;

210 
ªsu…
 = 
e
->
±r
;

212 
e
->
id
 +
hód
->
mask
 + 1;

213 
e
->
±r
 = 
NULL
;

215 i‡(
hód
->
f_hód
 =
NULL
)

216 
hód
->
f_hód
 = 
e
;

218 
hód
->
f_èû
->
±r
 = 
e
;

219 
hód
->
f_èû
 = 
e
;

220 
hód
->
u£d
--;

221  
ªsu…
;

222 
	}
}

225 
	$ùfw_lut_lookup
(
lookup_èbÀ
 *
hód
, 
id
)

227 
i
 = 
id
 & 
hód
->
mask
;

228 
íåy
 *
e
;

230 i‡(
i
 >
hód
->
_size
)

231  
NULL
;

232 
e
 = &
hód
->
s
[
i
];

233  (
e
->
id
 =idË?É->
±r
 : 
NULL
;

234 
	}
}

237 
	$ùfw_lut_dump
(
lookup_èbÀ
 *
hód
)

239 
i
;

241 
	`log
("head %p size %d used %d freelist %d",

242 
hód
, hód->
_size
, hód->
u£d
, hód->
f_hód
 ?

243 
hód
->
f_hód
 - hód->
s
 : -1);

244 
i
 = 0; i < 
hód
->
_size
; i++) {

245 
íåy
 *
e
 = &
hód
->
s
[
i
];

246 
ì
 = 
	`em±y
(
hód
, 
e
->
±r
) ? 'E' : ' ';

247 
	`log
("%5d %5d %¯%p", 
i
, 
e
->
id
, 
ì
,

248 
ì
 ='E' && 
e
->
±r
 !
NULL
 ?

249 (*)((
íåy
 *)
e
->
±r
 - 
hód
->
s
) :É->ptr);

251 
	}
}

253 #i‚de‡
_KERNEL


254 
	$dump_p
(
lookup_èbÀ
 *
p
, *
m≠
)

256 
i
;

257 
i
 = 0; i < 
p
->
_size
; i++) {

258 
id
 = ()
	`ùfw_lut_lookup
(
p
, 
m≠
[
i
]);

259 
	`log
("%3d: %3d: %c", 
m≠
[
i
] % 64, i, 
id
);

261 
	}
}

262 
	$maö
(
¨gc
, *
¨gv
[])

264 
i
, 
j
, 
l
;

265 
	#S
 1000

	)

266 
m≠
[
S
];

267 
lookup_èbÀ
 *
p
;

268 
lookup_èbÀ
 *
p1
;

269 c⁄° *
m
 = "nel mezzo del cammin diÇostra vita miÑitrovai"

272 
	`Ârötf
(
°dîr
, "testingÜookup\n");

274 
l
 = 
	`°æí
(
m
);

276 
p
 = 
	`ùfw_lut_öô
(
NULL
, 120, 33);

278 
	`ùfw_lut_dump
(
p
);

279 
i
 = 0; i < 
l
; i++) {

280 
x
 = 
m
[
i
];

281 
id
 = 
	`ùfw_lut_ö£π
(
p
, (*)
x
);

283 
m≠
[
i
] = 
id
;

284 
j
=0; j < 10; j++) {

285 
id
 = 
	`ùfw_lut_ö£π
(
p
, (*)'a');

287 
	`ùfw_lut_dñëe
(
p
, 
id
);

292 
	`dump_p
(
p
, 
m≠
);

293 
p1
 = 
	`ùfw_lut_öô
(
p
, 23, 0);

294 i‡(!
p1
)

296 
	`dump_p
(
p1
, 
m≠
);

297 
p1
 = 
	`ùfw_lut_öô
(p1, 120, 0);

298 i‡(!
p1
)

300 
	`dump_p
(
p1
, 
m≠
);

302 
	}
}

	@sys/netinet/ipfw/ip_fw_nat.c

27 
	~<sys/cdefs.h
>

28 
__FBSDID
("$FreeBSD: user/luigi/ipfw3-head/sys/netinet/ipfw/ip_fw_nat.c 200975 2009-12-25 01:15:39ZÜuigi $");

30 
	~<sys/∑øm.h
>

31 
	~<sys/sy°m.h
>

32 
	~<sys/evíth™dÀr.h
>

33 
	~<sys/mÆloc.h
>

34 
	~<sys/kî√l.h
>

35 
	~<sys/lock.h
>

36 
	~<sys/moduÀ.h
>

37 
	~<sys/rwlock.h
>

39 
	#IPFW_INTERNAL


	)

41 
	~<√töë/libÆüs/Æüs.h
>

42 
	~<√töë/libÆüs/Æüs_loˇl.h
>

44 
	~<√t/if.h
>

45 
	~<√töë/ö.h
>

46 
	~<√töë/ù.h
>

47 
	~<√töë/ù_v¨.h
>

48 
	~<√töë/ù_fw.h
>

49 
	~<√töë/ùfw/ù_fw_¥iv©e.h
>

50 
	~<√töë/t˝.h
>

51 
	~<√töë/udp.h
>

53 
	~<machöe/ö_cksum.h
>

55 
VNET_DEFINE
(
evíth™dÀr_èg
, 
iÁddr_evít_èg
);

56 
	#V_iÁddr_evít_èg
 
	`VNET
(
iÁddr_evít_èg
)

	)

59 
	$iÁddr_ch™ge
(*
¨g
, 
i‚ë
 *
iÂ
)

61 
cfg_«t
 *
±r
;

62 
iÁddr
 *
iÁ
;

63 
ù_fw_chaö
 *
chaö
;

65 ()
¨g
;

66 
chaö
 = &
V_œyî3_chaö
;

67 
	`IPFW_WLOCK
(
chaö
);

69 
	`LIST_FOREACH
(
±r
, &
chaö
->
«t
, 
_√xt
) {

71 i‡(
	`°∫cmp
(
±r
->
if_«me
, 
iÂ
->
if_x«me
, 
IF_NAMESIZE
) != 0)

73 
	`if_addr_æock
(
iÂ
);

74 
	`TAILQ_FOREACH
(
iÁ
, &
iÂ
->
if_addrhód
, 
iÁ_lök
) {

75 i‡(
iÁ
->
iÁ_addr
 =
NULL
)

77 i‡(
iÁ
->
iÁ_addr
->
ß_Ámûy
 !
AF_INET
)

79 
±r
->
ù
 = ((
sockaddr_ö
 *)

80 (
iÁ
->
iÁ_addr
))->
sö_addr
;

81 
	`LibAlüsSëAddªss
(
±r
->
lib
,Öå->
ù
);

83 
	`if_addr_ru∆ock
(
iÂ
);

85 
	`IPFW_WUNLOCK
(
chaö
);

86 
	}
}

92 
	$Êush_«t_±rs
(
ù_fw_chaö
 *
chaö
, c⁄° 
ix
)

94 
i
;

95 
ùfw_ö¢_«t
 *
cmd
;

97 
	`IPFW_WLOCK_ASSERT
(
chaö
);

98 
i
 = 0; i < 
chaö
->
n_ruÀs
; i++) {

99 
cmd
 = (
ùfw_ö¢_«t
 *)
	`ACTION_PTR
(
chaö
->
m≠
[
i
]);

101 i‡(
cmd
->
o
.
›code
 =
O_NAT
 && cmd->
«t
 !
NULL
 &&

102 (
ix
 < 0 || 
cmd
->
«t
->
id
 == ix))

103 
cmd
->
«t
 = 
NULL
;

105 
	}
}

108 
	$dñ_ªdú_•oﬁ_cfg
(
cfg_«t
 *
n
, 
ªdú_chaö
 *
hód
)

110 
cfg_ªdú
 *
r
, *
tmp_r
;

111 
cfg_•oﬁ
 *
s
, *
tmp_s
;

112 
i
, 
num
;

114 
	`LIST_FOREACH_SAFE
(
r
, 
hód
, 
_√xt
, 
tmp_r
) {

115 
num
 = 1;

116 
r
->
mode
) {

117 
REDIR_PORT
:

118 
num
 = 
r
->
µ‹t_˙t
;

120 
REDIR_ADDR
:

121 
REDIR_PROTO
:

123 
i
 = 0; i < 
num
; i++)

124 
	`LibAlüsRedúe˘Dñëe
(
n
->
lib
, 
r
->
Æök
[
i
]);

126 
	`LIST_FOREACH_SAFE
(
s
, &
r
->
•oﬁ_chaö
, 
_√xt
, 
tmp_s
) {

127 
	`LIST_REMOVE
(
s
, 
_√xt
);

128 
	`‰ì
(
s
, 
M_IPFW
);

130 
	`‰ì
(
r
->
Æök
, 
M_IPFW
);

131 
	`LIST_REMOVE
(
r
, 
_√xt
);

132 
	`‰ì
(
r
, 
M_IPFW
);

135 
	`¥ötf
("unknow¿ªdúe˘ mode: %u\n", 
r
->
mode
);

140 
	}
}

143 
	$add_ªdú_•oﬁ_cfg
(*
buf
, 
cfg_«t
 *
±r
)

145 
cfg_ªdú
 *
r
, *
£r_r
;

146 
cfg_•oﬁ
 *
s
, *
£r_s
;

147 
˙t
, 
off
, 
i
;

149 
˙t
 = 0, 
off
 = 0; c¡ < 
±r
->
ªdú_˙t
; cnt++) {

150 
£r_r
 = (
cfg_ªdú
 *)&
buf
[
off
];

151 
r
 = 
	`mÆloc
(
SOF_REDIR
, 
M_IPFW
, 
M_WAITOK
 | 
M_ZERO
);

152 
	`mem˝y
(
r
, 
£r_r
, 
SOF_REDIR
);

153 
	`LIST_INIT
(&
r
->
•oﬁ_chaö
);

154 
off
 +
SOF_REDIR
;

155 
r
->
Æök
 = 
	`mÆloc
((
Æüs_lök
 *Ë*Ñ->
µ‹t_˙t
,

156 
M_IPFW
, 
M_WAITOK
 | 
M_ZERO
);

157 
r
->
mode
) {

158 
REDIR_ADDR
:

159 
r
->
Æök
[0] = 
	`LibAlüsRedúe˘Addr
(
±r
->
lib
,Ñ->
œddr
,

160 
r
->
∑ddr
);

162 
REDIR_PORT
:

163 
i
 = 0 ; i < 
r
->
µ‹t_˙t
; i++) {

165 
u_sh‹t
 
ªmŸeP‹tC›y
 = 
r
->
Ω‹t
 + 
i
;

166 i‡(
r
->
Ω‹t_˙t
 =1 &&Ñ->
Ω‹t
 == 0)

167 
ªmŸeP‹tC›y
 = 0;

168 
r
->
Æök
[
i
] = 
	`LibAlüsRedúe˘P‹t
(
±r
->
lib
,

169 
r
->
œddr
, 
	`ht⁄s
‘->
Õ‹t
 + 
i
),Ñ->
øddr
,

170 
	`ht⁄s
(
ªmŸeP‹tC›y
), 
r
->
∑ddr
,

171 
	`ht⁄s
(
r
->
µ‹t
 + 
i
),Ñ->
¥Ÿo
);

172 i‡(
r
->
Æök
[
i
] =
NULL
) {

173 
r
->
Æök
[0] = 
NULL
;

178 
REDIR_PROTO
:

179 
r
->
Æök
[0] = 
	`LibAlüsRedúe˘PrŸo
(
±r
->
lib
 ,r->
œddr
,

180 
r
->
øddr
,Ñ->
∑ddr
,Ñ->
¥Ÿo
);

183 
	`¥ötf
("unknow¿ªdúe˘ mode: %u\n", 
r
->
mode
);

187 i‡(
r
->
Æök
[0] =
NULL
)

188 
	`∑nic
("LibAliasRedirect*Ñeturned NULL");

190 
i
 = 0; i < 
r
->
•oﬁ_˙t
; i++) {

191 
£r_s
 = (
cfg_•oﬁ
 *)&
buf
[
off
];

192 
s
 = 
	`mÆloc
(
SOF_REDIR
, 
M_IPFW
, 
M_WAITOK
 | 
M_ZERO
);

193 
	`mem˝y
(
s
, 
£r_s
, 
SOF_SPOOL
);

194 
	`LibAlüsAddSîvî
(
±r
->
lib
, 
r
->
Æök
[0],

195 
s
->
addr
, 
	`ht⁄s
(s->
p‹t
));

196 
off
 +
SOF_SPOOL
;

198 
	`LIST_INSERT_HEAD
(&
r
->
•oﬁ_chaö
, 
s
, 
_√xt
);

201 
	`LIST_INSERT_HEAD
(&
±r
->
ªdú_chaö
, 
r
, 
_√xt
);

204 
	}
}

207 
	$ùfw_«t
(
ù_fw_¨gs
 *
¨gs
, 
cfg_«t
 *
t
, 
mbuf
 *
m
)

209 
mbuf
 *
m˛
;

210 
ù
 *ip;

212 
ldt
, 
ªtvÆ
;

213 *
c
;

215 
ldt
 = 0;

216 
ªtvÆ
 = 0;

217 
m˛
 = 
	`m_meg≠uŒup
(
m
, m->
m_pkthdr
.
Àn
);

218 i‡(
m˛
 =
NULL
) {

219 
¨gs
->
m
 = 
NULL
;

220  (
IP_FW_DENY
);

222 
ù
 = 
	`mtod
(
m˛
, ip *);

256 i‡(
m˛
->
m_pkthdr
.
rcvif
 =
NULL
 &&

257 
m˛
->
m_pkthdr
.
csum_Êags
 & 
CSUM_DELAY_DATA
)

258 
ldt
 = 1;

260 
c
 = 
	`mtod
(
m˛
, *);

261 i‡(
¨gs
->
oif
 =
NULL
)

262 
ªtvÆ
 = 
	`LibAlüsIn
(
t
->
lib
, 
c
,

263 
m˛
->
m_Àn
 + 
	`M_TRAILINGSPACE
(mcl));

265 
ªtvÆ
 = 
	`LibAlüsOut
(
t
->
lib
, 
c
,

266 
m˛
->
m_Àn
 + 
	`M_TRAILINGSPACE
(mcl));

267 i‡(
ªtvÆ
 =
PKT_ALIAS_RESPOND
) {

268 
m
->
m_Êags
 |
M_SKIP_FIREWALL
;

269 
ªtvÆ
 = 
PKT_ALIAS_OK
;

271 i‡(
ªtvÆ
 !
PKT_ALIAS_OK
 &&

272 
ªtvÆ
 !
PKT_ALIAS_FOUND_HEADER_FRAGMENT
) {

274 
	`m_‰ì
(
m˛
);

275 
¨gs
->
m
 = 
NULL
;

276  (
IP_FW_DENY
);

278 
m˛
->
m_pkthdr
.
Àn
 = m˛->
m_Àn
 = 
	`¡ohs
(
ù
->
ù_Àn
);

285 i‡((
ù
->
ù_off
 & 
	`ht⁄s
(
IP_OFFMASK
)) == 0 &&

286 
ù
->
ù_p
 =
IPPROTO_TCP
) {

287 
t˝hdr
 *
th
;

289 
th
 = (
t˝hdr
 *)(
ù
 + 1);

290 i‡(
th
->
th_x2
)

291 
ldt
 = 1;

294 i‡(
ldt
) {

295 
t˝hdr
 *
th
;

296 
udphdr
 *
uh
;

297 
u_sh‹t
 
cksum
;

299 
ù
->
ù_Àn
 = 
	`¡ohs
(ip->ip_len);

300 
cksum
 = 
	`ö_p£udo
(
ù
->
ù_§c
.
s_addr
, ip->
ù_d°
.s_addr,

301 
	`ht⁄s
(
ù
->
ù_p
 + ip->
ù_Àn
 - (ù->
ù_hl
 << 2)));

303 
ù
->
ù_p
) {

304 
IPPROTO_TCP
:

305 
th
 = (
t˝hdr
 *)(
ù
 + 1);

310 
th
->
th_x2
 = 0;

311 
th
->
th_sum
 = 
cksum
;

312 
m˛
->
m_pkthdr
.
csum_d©a
 =

313 
	`off£tof
(
t˝hdr
, 
th_sum
);

315 
IPPROTO_UDP
:

316 
uh
 = (
udphdr
 *)(
ù
 + 1);

317 
uh
->
uh_sum
 = 
cksum
;

318 
m˛
->
m_pkthdr
.
csum_d©a
 =

319 
	`off£tof
(
udphdr
, 
uh_sum
);

323 i‡((
m˛
->
m_pkthdr
.
csum_Êags
 & 
CSUM_DELAY_DATA
) == 0) {

324 
	`ö_dñayed_cksum
(
m˛
);

325 
m˛
->
m_pkthdr
.
csum_Êags
 &~
CSUM_DELAY_DATA
;

327 
ù
->
ù_Àn
 = 
	`ht⁄s
(ip->ip_len);

329 
¨gs
->
m
 = 
m˛
;

330  (
IP_FW_NAT
);

331 
	}
}

333 
cfg_«t
 *

334 
	$lookup_«t
(
«t_li°
 *
l
, 
«t_id
)

336 
cfg_«t
 *
ªs
;

338 
	`LIST_FOREACH
(
ªs
, 
l
, 
_√xt
) {

339 i‡(
ªs
->
id
 =
«t_id
)

342  
ªs
;

343 
	}
}

346 
	$ùfw_«t_cfg
(
sock›t
 *
s›t
)

348 
cfg_«t
 *
±r
, *
£r_n
;

349 *
buf
;

350 
ù_fw_chaö
 *
chaö
 = &
V_œyî3_chaö
;

352 
buf
 = 
	`mÆloc
(
NAT_BUF_LEN
, 
M_IPFW
, 
M_WAITOK
 | 
M_ZERO
);

353 
	`so›tc›yö
(
s›t
, 
buf
, 
NAT_BUF_LEN
, (
cfg_«t
));

354 
£r_n
 = (
cfg_«t
 *)
buf
;

360 
	`IPFW_WLOCK
(
chaö
);

361 
±r
 = 
	`lookup_«t
(&
chaö
->
«t
, 
£r_n
->
id
);

362 i‡(
±r
 =
NULL
) {

364 
±r
 = 
	`mÆloc
((
cfg_«t
),

365 
M_IPFW
, 
M_NOWAIT
 | 
M_ZERO
);

366 i‡(
±r
 =
NULL
) {

367 
	`IPFW_WUNLOCK
(
chaö
);

368 
	`‰ì
(
buf
, 
M_IPFW
);

369  (
ENOSPC
);

371 
±r
->
lib
 = 
	`LibAlüsInô
(
NULL
);

372 i‡(
±r
->
lib
 =
NULL
) {

373 
	`IPFW_WUNLOCK
(
chaö
);

374 
	`‰ì
(
±r
, 
M_IPFW
);

375 
	`‰ì
(
buf
, 
M_IPFW
);

376  (
EINVAL
);

378 
	`LIST_INIT
(&
±r
->
ªdú_chaö
);

381 
	`LIST_REMOVE
(
±r
, 
_√xt
);

382 
	`Êush_«t_±rs
(
chaö
, 
£r_n
->
id
);

384 
	`IPFW_WUNLOCK
(
chaö
);

389 
±r
->
id
 = 
£r_n
->id;

395 
±r
->
ù
 = 
£r_n
->ip;

396 
±r
->
ªdú_˙t
 = 
£r_n
->redir_cnt;

397 
±r
->
mode
 = 
£r_n
->mode;

398 
	`LibAlüsSëMode
(
±r
->
lib
, 
£r_n
->
mode
, ser_n->mode);

399 
	`LibAlüsSëAddªss
(
±r
->
lib
,Öå->
ù
);

400 
	`mem˝y
(
±r
->
if_«me
, 
£r_n
->if_«me, 
IF_NAMESIZE
);

406 
	`dñ_ªdú_•oﬁ_cfg
(
±r
, &±r->
ªdú_chaö
);

408 
	`add_ªdú_•oﬁ_cfg
(&
buf
[((
cfg_«t
))], 
±r
);

409 
	`‰ì
(
buf
, 
M_IPFW
);

410 
	`IPFW_WLOCK
(
chaö
);

411 
	`LIST_INSERT_HEAD
(&
chaö
->
«t
, 
±r
, 
_√xt
);

412 
	`IPFW_WUNLOCK
(
chaö
);

414 
	}
}

417 
	$ùfw_«t_dñ
(
sock›t
 *
s›t
)

419 
cfg_«t
 *
±r
;

420 
ù_fw_chaö
 *
chaö
 = &
V_œyî3_chaö
;

421 
i
;

423 
	`so›tc›yö
(
s›t
, &
i
,  i,  i);

425 
	`IPFW_WLOCK
(
chaö
);

426 
±r
 = 
	`lookup_«t
(&
chaö
->
«t
, 
i
);

427 i‡(
±r
 =
NULL
) {

428 
	`IPFW_WUNLOCK
(
chaö
);

429  (
EINVAL
);

431 
	`LIST_REMOVE
(
±r
, 
_√xt
);

432 
	`Êush_«t_±rs
(
chaö
, 
i
);

433 
	`IPFW_WUNLOCK
(
chaö
);

434 
	`dñ_ªdú_•oﬁ_cfg
(
±r
, &±r->
ªdú_chaö
);

435 
	`LibAlüsUnöô
(
±r
->
lib
);

436 
	`‰ì
(
±r
, 
M_IPFW
);

438 
	}
}

441 
	$ùfw_«t_gë_cfg
(
sock›t
 *
s›t
)

443 
uöt8_t
 *
d©a
;

444 
cfg_«t
 *
n
;

445 
cfg_ªdú
 *
r
;

446 
cfg_•oﬁ
 *
s
;

447 
«t_˙t
, 
off
;

448 
ù_fw_chaö
 *
chaö
;

449 
îr
 = 
ENOSPC
;

451 
chaö
 = &
V_œyî3_chaö
;

452 
«t_˙t
 = 0;

453 
off
 = (
«t_˙t
);

455 
d©a
 = 
	`mÆloc
(
NAT_BUF_LEN
, 
M_IPFW
, 
M_WAITOK
 | 
M_ZERO
);

456 
	`IPFW_RLOCK
(
chaö
);

458 
	`LIST_FOREACH
(
n
, &
chaö
->
«t
, 
_√xt
) {

459 
«t_˙t
++;

460 i‡(
off
 + 
SOF_NAT
 >
NAT_BUF_LEN
)

461 
no•a˚
;

462 
	`bc›y
(
n
, &
d©a
[
off
], 
SOF_NAT
);

463 
off
 +
SOF_NAT
;

464 
	`LIST_FOREACH
(
r
, &
n
->
ªdú_chaö
, 
_√xt
) {

465 i‡(
off
 + 
SOF_REDIR
 >
NAT_BUF_LEN
)

466 
no•a˚
;

467 
	`bc›y
(
r
, &
d©a
[
off
], 
SOF_REDIR
);

468 
off
 +
SOF_REDIR
;

469 
	`LIST_FOREACH
(
s
, &
r
->
•oﬁ_chaö
, 
_√xt
) {

470 i‡(
off
 + 
SOF_SPOOL
 >
NAT_BUF_LEN
)

471 
no•a˚
;

472 
	`bc›y
(
s
, &
d©a
[
off
], 
SOF_SPOOL
);

473 
off
 +
SOF_SPOOL
;

477 
îr
 = 0;

478 
no•a˚
:

479 
	`IPFW_RUNLOCK
(
chaö
);

480 i‡(
îr
 == 0) {

481 
	`bc›y
(&
«t_˙t
, 
d©a
, (nat_cnt));

482 
	`so›tc›yout
(
s›t
, 
d©a
, 
NAT_BUF_LEN
);

484 
	`¥ötf
("serialized data bufferÇot bigÉnough:"

487 
	`‰ì
(
d©a
, 
M_IPFW
);

488  (
îr
);

489 
	}
}

492 
	$ùfw_«t_gë_log
(
sock›t
 *
s›t
)

494 
uöt8_t
 *
d©a
;

495 
cfg_«t
 *
±r
;

496 
i
, 
size
;

497 
ù_fw_chaö
 *
chaö
;

499 
chaö
 = &
V_œyî3_chaö
;

501 
	`IPFW_RLOCK
(
chaö
);

503 
i
 = 0;

504 
	`LIST_FOREACH
(
±r
, &
chaö
->
«t
, 
_√xt
) {

505 i‡(
±r
->
lib
->
logDesc
 =
NULL
)

507 
i
++;

509 
size
 = 
i
 * (
LIBALIAS_BUF_SIZE
 + ());

510 
d©a
 = 
	`mÆloc
(
size
, 
M_IPFW
, 
M_NOWAIT
 | 
M_ZERO
);

511 i‡(
d©a
 =
NULL
) {

512 
	`IPFW_RUNLOCK
(
chaö
);

513  (
ENOSPC
);

515 
i
 = 0;

516 
	`LIST_FOREACH
(
±r
, &
chaö
->
«t
, 
_√xt
) {

517 i‡(
±r
->
lib
->
logDesc
 =
NULL
)

519 
	`bc›y
(&
±r
->
id
, &
d©a
[
i
], ());

520 
i
 += ();

521 
	`bc›y
(
±r
->
lib
->
logDesc
, &
d©a
[
i
], 
LIBALIAS_BUF_SIZE
);

522 
i
 +
LIBALIAS_BUF_SIZE
;

524 
	`IPFW_RUNLOCK
(
chaö
);

525 
	`so›tc›yout
(
s›t
, 
d©a
, 
size
);

526 
	`‰ì
(
d©a
, 
M_IPFW
);

528 
	}
}

531 
	$ùfw_«t_öô
()

534 
	`IPFW_WLOCK
(&
V_œyî3_chaö
);

536 
ùfw_«t_±r
 = 
ùfw_«t
;

537 
lookup_«t_±r
 = 
lookup_«t
;

538 
ùfw_«t_cfg_±r
 = 
ùfw_«t_cfg
;

539 
ùfw_«t_dñ_±r
 = 
ùfw_«t_dñ
;

540 
ùfw_«t_gë_cfg_±r
 = 
ùfw_«t_gë_cfg
;

541 
ùfw_«t_gë_log_±r
 = 
ùfw_«t_gë_log
;

542 
	`IPFW_WUNLOCK
(&
V_œyî3_chaö
);

543 
V_iÁddr_evít_èg
 = 
	`EVENTHANDLER_REGISTER
(

544 
iÁddr_evít
, 
iÁddr_ch™ge
,

545 
NULL
, 
EVENTHANDLER_PRI_ANY
);

546 
	}
}

549 
	$ùfw_«t_de°roy
()

551 
cfg_«t
 *
±r
, *
±r_ãmp
;

552 
ù_fw_chaö
 *
chaö
;

554 
chaö
 = &
V_œyî3_chaö
;

555 
	`IPFW_WLOCK
(
chaö
);

556 
	`LIST_FOREACH_SAFE
(
±r
, &
chaö
->
«t
, 
_√xt
, 
±r_ãmp
) {

557 
	`LIST_REMOVE
(
±r
, 
_√xt
);

558 
	`dñ_ªdú_•oﬁ_cfg
(
±r
, &±r->
ªdú_chaö
);

559 
	`LibAlüsUnöô
(
±r
->
lib
);

560 
	`‰ì
(
±r
, 
M_IPFW
);

562 
	`EVENTHANDLER_DEREGISTER
(
iÁddr_evít
, 
V_iÁddr_evít_èg
);

563 
	`Êush_«t_±rs
(
chaö
, -1 );

565 
ùfw_«t_±r
 = 
NULL
;

566 
lookup_«t_±r
 = 
NULL
;

567 
ùfw_«t_cfg_±r
 = 
NULL
;

568 
ùfw_«t_dñ_±r
 = 
NULL
;

569 
ùfw_«t_gë_cfg_±r
 = 
NULL
;

570 
ùfw_«t_gë_log_±r
 = 
NULL
;

571 
	`IPFW_WUNLOCK
(
chaö
);

572 
	}
}

575 
	$ùfw_«t_modevít
(
moduÀ_t
 
mod
, 
ty≥
, *
unu£d
)

577 
îr
 = 0;

579 
ty≥
) {

580 
MOD_LOAD
:

581 
	`ùfw_«t_öô
();

584 
MOD_UNLOAD
:

585 
	`ùfw_«t_de°roy
();

589  
EOPNOTSUPP
;

592  
îr
;

593 
	}
}

595 
moduÀd©a_t
 
	gùfw_«t_mod
 = {

597 
ùfw_«t_modevít
,

601 
DECLARE_MODULE
(
ùfw_«t
, 
ùfw_«t_mod
, 
SI_SUB_PROTO_IFATTACHDOMAIN
, 
SI_ORDER_ANY
);

602 
MODULE_DEPEND
(
ùfw_«t
, 
libÆüs
, 1, 1, 1);

603 
MODULE_DEPEND
(
ùfw_«t
, 
ùfw
, 2, 2, 2);

604 
MODULE_VERSION
(
ùfw_«t
, 1);

	@sys/netinet/ipfw/ip_fw_pfil.c

27 
	~<sys/cdefs.h
>

28 
__FBSDID
("$FreeBSD: head/sys/netinet/ipfw/ip_fw_pfil.c 200601 2009-12-16 10:48:40ZÜuigi $");

30 #i‡!
deföed
(
KLD_MODULE
)

31 
	~"›t_ùfw.h
"

32 
	~"›t_ùdn.h
"

33 
	~"›t_öë.h
"

34 #i‚de‡
INET


35 #îr‹ 
IPFIREWALL
 
ªquúes
 
INET
.

38 
	~"›t_öë6.h
"

40 
	~<sys/∑øm.h
>

41 
	~<sys/sy°m.h
>

42 
	~<sys/mÆloc.h
>

43 
	~<sys/mbuf.h
>

44 
	~<sys/moduÀ.h
>

45 
	~<sys/kî√l.h
>

46 
	~<sys/lock.h
>

47 
	~<sys/rwlock.h
>

48 
	~<sys/sockë.h
>

49 
	~<sys/sys˘l.h
>

51 
	~<√t/if.h
>

52 
	~<√t/rouã.h
>

53 
	~<√t/pfû.h
>

54 
	~<√t/v√t.h
>

56 
	~<√töë/ö.h
>

57 
	~<√töë/ö_sy°m.h
>

58 
	~<√töë/ù.h
>

59 
	~<√töë/ù_v¨.h
>

60 
	~<√töë/ù_fw.h
>

61 
	~<√töë/ùfw/ù_fw_¥iv©e.h
>

62 
	~<√tgøph/ng_ùfw.h
>

64 
	~<machöe/ö_cksum.h
>

66 
VNET_DEFINE
(, 
fw_íabÀ
) = 1;

67 
	#V_fw_íabÀ
 
	`VNET
(
fw_íabÀ
)

	)

69 #ifde‡
INET6


70 
VNET_DEFINE
(, 
fw6_íabÀ
) = 1;

71 
	#V_fw6_íabÀ
 
	`VNET
(
fw6_íabÀ
)

	)

74 
ùfw_chg_hook
(
SYSCTL_HANDLER_ARGS
);

77 
ùfw_divît
(
mbuf
 **, , 
ùfw_ruÀ_ªf
 *, );

79 #ifde‡
SYSCTL_NODE


81 
	$SYSBEGIN
(
f1
)

83 
	`SYSCTL_DECL
(
_√t_öë_ù_fw
);

84 
	`SYSCTL_VNET_PROC
(
_√t_öë_ù_fw
, 
OID_AUTO
, 
íabÀ
,

85 
CTLTYPE_INT
 | 
CTLFLAG_RW
 | 
CTLFLAG_SECURE3
, &
	`VNET_NAME
(
fw_íabÀ
), 0,

86 
ùfw_chg_hook
, "I", "Enable ipfw");

87 #ifde‡
INET6


88 
	`SYSCTL_DECL
(
_√t_öë6_ù6_fw
);

89 
	`SYSCTL_VNET_PROC
(
_√t_öë6_ù6_fw
, 
OID_AUTO
, 
íabÀ
,

90 
CTLTYPE_INT
 | 
CTLFLAG_RW
 | 
CTLFLAG_SECURE3
, &
	`VNET_NAME
(
fw6_íabÀ
), 0,

91 
ùfw_chg_hook
, "I", "Enable ipfw+6");

94 
SYSEND


104 
	$ùfw_check_hook
(*
¨g
, 
mbuf
 **
m0
, 
i‚ë
 *
iÂ
, 
dú
,

105 
öpcb
 *
öp
)

107 
ù_fw_¨gs
 
¨gs
;

108 
m_èg
 *
èg
;

109 
ùfw
;

110 
ªt
;

113 i‡(
	`mtod
(*
m0
, 
ù
 *)->
ù_v
 == 4)

114 
	`SET_NET_IPLEN
(
	`mtod
(*
m0
, 
ù
 *));

117 
dú
 = (dú =
PFIL_IN
Ë? 
DIR_IN
 : 
DIR_OUT
;

118 
	`bzîo
(&
¨gs
, (args));

120 
agaö
:

125 
èg
 = 
	`m_èg_loˇã
(*
m0
, 
MTAG_IPFW_RULE
, 0, 
NULL
);

126 i‡(
èg
 !
NULL
) {

127 
¨gs
.
ruÀ
 = *((
ùfw_ruÀ_ªf
 *)(
èg
+1));

128 
	`m_èg_dñëe
(*
m0
, 
èg
);

129 i‡(
¨gs
.
ruÀ
.
öfo
 & 
IPFW_ONEPASS
) {

130 
	`SET_HOST_IPLEN
(
	`mtod
(*
m0
, 
ù
 *));

135 
¨gs
.
m
 = *
m0
;

136 
¨gs
.
oif
 = 
dú
 =
DIR_OUT
 ? 
iÂ
 : 
NULL
;

137 
¨gs
.
öp
 = inp;

139 
ùfw
 = 
	`ùfw_chk
(&
¨gs
);

140 *
m0
 = 
¨gs
.
m
;

142 
	`KASSERT
(*
m0
 !
NULL
 || 
ùfw
 =
IP_FW_DENY
, ("%s: m0 is NULL",

143 
__func__
));

146 
ªt
 = 0;

147 
ùfw
) {

148 
IP_FW_PASS
:

150 i‡(
¨gs
.
√xt_h›
 =
NULL
)

152 #i‚de‡
IPFIREWALL_FORWARD


153 
ªt
 = 
EACCES
;

156 
m_èg
 *
fwd_èg
;

162 
fwd_èg
 = (
dú
 =
DIR_IN
Ë? 
NULL
 :

163 
	`m_èg_föd
(*
m0
, 
PACKET_TAG_IPFORWARD
, 
NULL
);

164 i‡(
fwd_èg
 !
NULL
) {

165 
	`m_èg_u∆ök
(*
m0
, 
fwd_èg
);

167 
fwd_èg
 = 
	`m_èg_gë
(
PACKET_TAG_IPFORWARD
,

168 (
sockaddr_ö
), 
M_NOWAIT
);

169 i‡(
fwd_èg
 =
NULL
) {

170 
ªt
 = 
EACCES
;

174 
	`bc›y
(
¨gs
.
√xt_h›
, (
fwd_èg
+1), (
sockaddr_ö
));

175 
	`m_èg_¥ïíd
(*
m0
, 
fwd_èg
);

177 i‡(
	`ö_loˇlù
(
¨gs
.
√xt_h›
->
sö_addr
))

178 (*
m0
)->
m_Êags
 |
M_FASTFWD_OURS
;

183 
IP_FW_DENY
:

184 
ªt
 = 
EACCES
;

187 
IP_FW_DUMMYNET
:

188 
ªt
 = 
EACCES
;

189 i‡(
ù_dn_io_±r
 =
NULL
)

191 i‡(
	`mtod
(*
m0
, 
ù
 *)->
ù_v
 == 4)

192 
ªt
 = 
	`ù_dn_io_±r
(
m0
, 
dú
, &
¨gs
);

193 i‡(
	`mtod
(*
m0
, 
ù
 *)->
ù_v
 == 6)

194 
ªt
 = 
	`ù_dn_io_±r
(
m0
, 
dú
 | 
PROTO_IPV6
, &
¨gs
);

204 i‡(*
m0
 !
NULL
)

205 
agaö
;

208 
IP_FW_TEE
:

209 
IP_FW_DIVERT
:

210 i‡(
ù_divît_±r
 =
NULL
) {

211 
ªt
 = 
EACCES
;

214 
ªt
 = 
	`ùfw_divît
(
m0
, 
dú
, &
¨gs
.
ruÀ
,

215 (
ùfw
 =
IP_FW_TEE
) ? 1 : 0);

217 i‡(*
m0
)

218 
agaö
;

221 
IP_FW_NGTEE
:

222 
IP_FW_NETGRAPH
:

223 i‡(
ng_ùfw_öput_p
 =
NULL
) {

224 
ªt
 = 
EACCES
;

227 
ªt
 = 
	`ng_ùfw_öput_p
(
m0
, 
dú
, &
¨gs
,

228 (
ùfw
 =
IP_FW_NGTEE
) ? 1 : 0);

229 i‡(
ùfw
 =
IP_FW_NGTEE
)

230 
agaö
;

233 
IP_FW_NAT
:

235 i‡(
V_fw_⁄e_∑ss
)

237 
agaö
;

239 
IP_FW_REASS
:

240 
agaö
;

243 
	`KASSERT
(0, ("%s: unknow¿ªtvÆ", 
__func__
));

246 i‡(
ªt
 != 0) {

247 i‡(*
m0
)

248 
	`FREE_PKT
(*
m0
);

249 *
m0
 = 
NULL
;

251 i‡(*
m0
 && 
	`mtod
(*m0, 
ù
 *)->
ù_v
 == 4)

252 
	`SET_HOST_IPLEN
(
	`mtod
(*
m0
, 
ù
 *));

253  
ªt
;

254 
	}
}

258 
	$ùfw_divît
(
mbuf
 **
m0
, 
öcomög
, 
ùfw_ruÀ_ªf
 *
ruÀ
,

259 
ãe
)

266 
mbuf
 *
˛⁄e
;

267 
ù
 *ip;

268 
m_èg
 *
èg
;

271 i‡(
ãe
 == 0) {

272 
˛⁄e
 = *
m0
;

273 *
m0
 = 
NULL
;

275 
˛⁄e
 = 
	`m_dup
(*
m0
, 
M_DONTWAIT
);

279 i‡(
˛⁄e
 =
NULL
)

291 
ù
 = 
	`mtod
(
˛⁄e
, ip *);

292 i‡(!
ãe
 && 
	`¡ohs
(
ù
->
ù_off
Ë& (
IP_MF
 | 
IP_OFFMASK
)) {

293 
hÀn
;

294 
mbuf
 *
ªass
;

296 
	`SET_HOST_IPLEN
(
ù
);

297 
ªass
 = 
	`ù_ªass
(
˛⁄e
);

298 i‡(
ªass
 =
NULL
)

305 
ù
 = 
	`mtod
(
ªass
, ip *);

306 
hÀn
 = 
ù
->
ù_hl
 << 2;

307 
	`SET_NET_IPLEN
(
ù
);

308 
ù
->
ù_sum
 = 0;

309 i‡(
hÀn
 =(
ù
))

310 
ù
->
ù_sum
 = 
	`ö_cksum_hdr
(ip);

312 
ù
->
ù_sum
 = 
	`ö_cksum
(
ªass
, 
hÀn
);

313 
˛⁄e
 = 
ªass
;

316 
èg
 = 
	`m_èg_Æloc
(
MTAG_IPFW_RULE
, 0,

317 (
ùfw_ruÀ_ªf
), 
M_NOWAIT
);

318 i‡(
èg
 =
NULL
) {

319 
	`FREE_PKT
(
˛⁄e
);

322 *((
ùfw_ruÀ_ªf
 *)(
èg
+1)Ë*
ruÀ
;

323 
	`m_èg_¥ïíd
(
˛⁄e
, 
èg
);

326 
	`ù_divît_±r
(
˛⁄e
, 
öcomög
);

328 
	}
}

334 
	$ùfw_hook
(
⁄off
, 
pf
)

336 
pfû_hód
 *
pfh
;

338 
pfh
 = 
	`pfû_hód_gë
(
PFIL_TYPE_AF
, 
pf
);

339 i‡(
pfh
 =
NULL
)

340  
ENOENT
;

342 (Ë(
⁄off
 ? 
pfû_add_hook
 : 
pfû_ªmove_hook
)

343 (
ùfw_check_hook
, 
NULL
, 
PFIL_IN
 | 
PFIL_OUT
 | 
PFIL_WAITOK
, 
pfh
);

346 
	}
}

349 
	$ùfw_©èch_hooks
(
¨g
)

351 
îr‹
 = 0;

353 i‡(
¨g
 == 0)

354 
	`ùfw_hook
(0, 
AF_INET
);

355 i‡(
V_fw_íabÀ
 && 
	`ùfw_hook
(1, 
AF_INET
) != 0) {

356 
îr‹
 = 
ENOENT
;

357 
	`¥ötf
("ipfw_hook()Érror\n");

359 #ifde‡
INET6


360 i‡(
¨g
 == 0)

361 
	`ùfw_hook
(0, 
AF_INET6
);

362 i‡(
V_fw6_íabÀ
 && 
	`ùfw_hook
(1, 
AF_INET6
) != 0) {

363 
îr‹
 = 
ENOENT
;

364 
	`¥ötf
("ipfw6_hook()Érror\n");

367  
îr‹
;

368 
	}
}

371 
	$ùfw_chg_hook
(
SYSCTL_HANDLER_ARGS
)

373 
íabÀ
;

374 
ﬁdíabÀ
;

375 
îr‹
;

376 
af
;

378 i‡(
¨g1
 =&
	`VNET_NAME
(
fw_íabÀ
)) {

379 
íabÀ
 = 
V_fw_íabÀ
;

380 
af
 = 
AF_INET
;

382 #ifde‡
INET6


383 i‡(
¨g1
 =&
	`VNET_NAME
(
fw6_íabÀ
)) {

384 
íabÀ
 = 
V_fw6_íabÀ
;

385 
af
 = 
AF_INET6
;

389  (
EINVAL
);

391 
ﬁdíabÀ
 = 
íabÀ
;

393 
îr‹
 = 
	`sys˘l_h™dÀ_öt
(
oidp
, &
íabÀ
, 0, 
ªq
);

395 i‡(
îr‹
)

396  (
îr‹
);

398 
íabÀ
 = (enable) ? 1 : 0;

400 i‡(
íabÀ
 =
ﬁdíabÀ
)

403 
îr‹
 = 
	`ùfw_hook
(
íabÀ
, 
af
);

404 i‡(
îr‹
)

405  (
îr‹
);

406 i‡(
af
 =
AF_INET
)

407 
V_fw_íabÀ
 = 
íabÀ
;

408 #ifde‡
INET6


409 i‡(
af
 =
AF_INET6
)

410 
V_fw6_íabÀ
 = 
íabÀ
;

414 
	}
}

	@sys/netinet/ipfw/ip_fw_private.h

28 #i‚de‡
_IPFW2_PRIVATE_H


29 
	#_IPFW2_PRIVATE_H


	)

36 #ifde‡
_KERNEL


44 #i‚de‡
SYSBEGIN


45 
	#SYSBEGIN
(
x
)

	)

47 #i‚de‡
SYSEND


48 
	#SYSEND


	)

53 
	mIP_FW_PASS
 = 0,

54 
	mIP_FW_DENY
,

55 
	mIP_FW_DIVERT
,

56 
	mIP_FW_TEE
,

57 
	mIP_FW_DUMMYNET
,

58 
	mIP_FW_NETGRAPH
,

59 
	mIP_FW_NGTEE
,

60 
	mIP_FW_NAT
,

61 
	mIP_FW_REASS
,

67 
	s_ù6dn_¨gs
 {

68 
ù6_pkt›ts
 *
	m›t_‹
;

69 
rouã_ö6
 
	mro_‹
;

70 
	mÊags_‹
;

71 
ù6_m›ti⁄s
 *
	mim6o_‹
;

72 
i‚ë
 *
	m‹igiÂ_‹
;

73 
i‚ë
 *
	miÂ_‹
;

74 
sockaddr_ö6
 
	md°_‹
;

75 
u_l⁄g
 
	mmtu_‹
;

76 
rouã_ö6
 
	mro_pmtu_‹
;

85 
	sù_fw_¨gs
 {

86 
mbuf
 *
	mm
;

87 
i‚ë
 *
	moif
;

88 
sockaddr_ö
 *
	m√xt_h›
;

97 
ùfw_ruÀ_ªf
 
	mruÀ
;

99 
ëhî_hódî
 *
	meh
;

101 
ùfw_Êow_id
 
	mf_id
;

103 
öpcb
 *
	möp
;

105 
_ù6dn_¨gs
 
	mdummy∑r
;

106 
sockaddr_ö
 
	mh›°‹e
;

109 
MALLOC_DECLARE
(
M_IPFW
);

120 
	mDIR_MASK
 = 0x3,

121 
	mDIR_OUT
 = 0,

122 
	mDIR_IN
 = 1,

123 
	mDIR_FWD
 = 2,

124 
	mDIR_DROP
 = 3,

125 
	mPROTO_LAYER2
 = 0x4,

127 
	mPROTO_IPV4
 = 0x08,

128 
	mPROTO_IPV6
 = 0x10,

129 
	mPROTO_IFB
 = 0x0c,

134 #i‚de‡
FREE_PKT


135 #i‡
deföed
(
__löux__
Ë|| deföed(
_WIN32
)

136 
	#FREE_PKT
(
m
Ë
	`√ti§_di•©ch
(-1, m)

	)

138 
	#FREE_PKT
(
m
Ë
	`m_‰ìm
(m)

	)

147 
ùfw_©èch_hooks
();

148 #ifde‡
NOTYET


149 
ùfw_«t_de°roy
();

153 
	gù
;

154 
ùfw_log_bpf
();

155 
ùfw_log
(
ù_fw
 *
f
, 
u_öt
 
hÀn
, 
ù_fw_¨gs
 *
¨gs
,

156 
mbuf
 *
m
, 
i‚ë
 *
oif
, 
u_sh‹t
 
off£t
, 
uöt32_t
 
èbÀ¨g
,

157 
ù
 *ip);

158 
VNET_DECLARE
(
u_öt64_t
, 
n‹uÀ_cou¡î
);

159 
	#V_n‹uÀ_cou¡î
 
	`VNET
(
n‹uÀ_cou¡î
)

	)

160 
VNET_DECLARE
(, 
vîbo£_limô
);

161 
	#V_vîbo£_limô
 
	`VNET
(
vîbo£_limô
)

	)

166 
	mMATCH_REVERSE
 = 0,

167 
	mMATCH_FORWARD
,

168 
	mMATCH_NONE
,

169 
	mMATCH_UNKNOWN
,

177 
ùfw_dyn_u∆ock
();

179 
	gt˝hdr
;

180 
mbuf
 *
ùfw_£nd_pkt
(mbu‡*, 
ùfw_Êow_id
 *,

181 
u_öt32_t
, u_int32_t, );

182 
ùfw_ö°Æl_°©e
(
ù_fw
 *
ruÀ
, 
ùfw_ö¢_limô
 *
cmd
,

183 
ù_fw_¨gs
 *
¨gs
, 
uöt32_t
 
èbÀ¨g
);

184 
ùfw_dyn_ruÀ
 *
ùfw_lookup_dyn_ruÀ
(
ùfw_Êow_id
 *
pkt
,

185 *
m©ch_dúe˘i⁄
, 
t˝hdr
 *
t˝
);

186 
ùfw_ªmove_dyn_chûdªn
(
ù_fw
 *
ruÀ
);

187 
ùfw_gë_dy«mic
(**
bp
, c⁄° *
ï
);

189 
ùfw_dyn_©èch
();

190 
ùfw_dyn_dëach
();

191 
ùfw_dyn_öô
();

192 
ùfw_dyn_unöô
();

193 
ùfw_dyn_Àn
();

196 
VNET_DECLARE
(, 
fw_⁄e_∑ss
);

197 
	#V_fw_⁄e_∑ss
 
	`VNET
(
fw_⁄e_∑ss
)

	)

199 
VNET_DECLARE
(, 
fw_vîbo£
);

200 
	#V_fw_vîbo£
 
	`VNET
(
fw_vîbo£
)

	)

202 
VNET_DECLARE
(
ù_fw_chaö
, 
œyî3_chaö
);

203 
	#V_œyî3_chaö
 
	`VNET
(
œyî3_chaö
)

	)

205 
VNET_DECLARE
(
u_öt32_t
, 
£t_dißbÀ
);

206 
	#V_£t_dißbÀ
 
	`VNET
(
£t_dißbÀ
)

	)

208 
VNET_DECLARE
(, 
autoöc_°ï
);

209 
	#V_autoöc_°ï
 
	`VNET
(
autoöc_°ï
)

	)

211 
	sù_fw_chaö
 {

212 
ù_fw
 *
	mruÀs
;

213 
ù_fw
 *
	mª≠
;

214 
ù_fw
 *
	mdeÁu…_ruÀ
;

215 
	mn_ruÀs
;

216 
	m°©ic_Àn
;

217 
ù_fw
 **
	mm≠
;

218 
LIST_HEAD
(
«t_li°
, 
cfg_«t
Ë
	m«t
;

219 
ødix_node_hód
 *
	mèbÀs
[
IPFW_TABLES_MAX
];

220 #i‡
deföed
–
__löux__
 ) || deföed–
_WIN32
 )

221 
•ölock_t
 
	mrwmtx
;

222 
•ölock_t
 
	muh_lock
;

224 
rwlock
 
	mrwmtx
;

225 
rwlock
 
	muh_lock
;

227 
uöt32_t
 
	mid
;

230 
	gsock›t
;

237 
	#IPFW_LOCK_INIT
(
_chaö
) do { \

238 
	`rw_öô
(&(
_chaö
)->
rwmtx
, "IPFW staticÑules"); \

239 
	`rw_öô
(&(
_chaö
)->
uh_lock
, "IPFW UHÜock"); \

240 } 0)

	)

242 
	#IPFW_LOCK_DESTROY
(
_chaö
) do { \

243 
	`rw_de°roy
(&(
_chaö
)->
rwmtx
); \

244 
	`rw_de°roy
(&(
_chaö
)->
uh_lock
); \

245 } 0)

	)

247 
	#IPFW_WLOCK_ASSERT
(
_chaö
Ë
	`rw_as£π
(&(_chaö)->
rwmtx
, 
RA_WLOCKED
)

	)

249 
	#IPFW_RLOCK
(
p
Ë
	`rw_æock
(&’)->
rwmtx
)

	)

250 
	#IPFW_RUNLOCK
(
p
Ë
	`rw_ru∆ock
(&’)->
rwmtx
)

	)

251 
	#IPFW_WLOCK
(
p
Ë
	`rw_wlock
(&’)->
rwmtx
)

	)

252 
	#IPFW_WUNLOCK
(
p
Ë
	`rw_wu∆ock
(&’)->
rwmtx
)

	)

254 
	#IPFW_UH_RLOCK
(
p
Ë
	`rw_æock
(&’)->
uh_lock
)

	)

255 
	#IPFW_UH_RUNLOCK
(
p
Ë
	`rw_ru∆ock
(&’)->
uh_lock
)

	)

256 
	#IPFW_UH_WLOCK
(
p
Ë
	`rw_wlock
(&’)->
uh_lock
)

	)

257 
	#IPFW_UH_WUNLOCK
(
p
Ë
	`rw_wu∆ock
(&’)->
uh_lock
)

	)

260 
ùfw_föd_ruÀ
(
ù_fw_chaö
 *
chaö
, 
uöt32_t
 
key
, uöt32_à
id
);

261 
ùfw_add_ruÀ
(
ù_fw_chaö
 *
chaö
, 
ù_fw
 *
öput_ruÀ
);

262 
ùfw_˘l
(
sock›t
 *
s›t
);

263 
ùfw_chk
(
ù_fw_¨gs
 *
¨gs
);

264 
ùfw_ª≠_ruÀs
(
ù_fw
 *
hód
);

267 
ùfw_check_hook
(*
¨g
, 
mbuf
 **
m0
, 
i‚ë
 *
iÂ
, 
dú
,

268 
öpcb
 *
öp
);

271 
	gødix_node
;

272 
ùfw_lookup_èbÀ
(
ù_fw_chaö
 *
ch
, 
uöt16_t
 
tbl
, 
ö_addr_t
 
addr
,

273 
uöt32_t
 *
vÆ
);

274 
ùfw_öô_èbÀs
(
ù_fw_chaö
 *
ch
);

275 
ùfw_de°roy_èbÀs
(
ù_fw_chaö
 *
ch
);

276 
ùfw_Êush_èbÀ
(
ù_fw_chaö
 *
ch
, 
uöt16_t
 
tbl
);

277 
ùfw_add_èbÀ_íåy
(
ù_fw_chaö
 *
ch
, 
uöt16_t
 
tbl
, 
ö_addr_t
 
addr
,

278 
uöt8_t
 
mÀn
, 
uöt32_t
 
vÆue
);

279 
ùfw_dump_èbÀ_íåy
(
ødix_node
 *
∫
, *
¨g
);

280 
ùfw_dñ_èbÀ_íåy
(
ù_fw_chaö
 *
ch
, 
uöt16_t
 
tbl
, 
ö_addr_t
 
addr
,

281 
uöt8_t
 
mÀn
);

282 
ùfw_cou¡_èbÀ
(
ù_fw_chaö
 *
ch
, 
uöt32_t
 
tbl
, uöt32_à*
˙t
);

283 
ùfw_dump_èbÀ
(
ù_fw_chaö
 *
ch
, 
ùfw_èbÀ
 *
tbl
);

287 
cfg_«t
 *(*
lookup_«t_±r
)(
«t_li°
 *, );

289 
	tùfw_«t_t
(
	tù_fw_¨gs
 *, 
	tcfg_«t
 *, 
	tmbuf
 *);

290 
	tùfw_«t_cfg_t
(
	tsock›t
 *);

292 
ùfw_«t_t
 *
ùfw_«t_±r
;

293 
	#IPFW_NAT_LOADED
 (
ùfw_«t_±r
 !
NULL
)

	)

295 
ùfw_«t_cfg_t
 *
ùfw_«t_cfg_±r
;

296 
ùfw_«t_cfg_t
 *
ùfw_«t_dñ_±r
;

297 
ùfw_«t_cfg_t
 *
ùfw_«t_gë_cfg_±r
;

298 
ùfw_«t_cfg_t
 *
ùfw_«t_gë_log_±r
;

	@sys/netinet/ipfw/ip_fw_sockopt.c

28 
	~<sys/cdefs.h
>

29 
__FBSDID
("$FreeBSD: head/sys/netinet/ipfw/ip_fw_sockopt.c 206339 2010-04-07 08:23:58ZÜuigi $");

36 #i‡!
deföed
(
KLD_MODULE
)

37 
	~"›t_ùfw.h
"

38 
	~"›t_ùdivît.h
"

39 
	~"›t_ùdn.h
"

40 
	~"›t_öë.h
"

41 #i‚de‡
INET


42 #îr‹ 
IPFIREWALL
 
ªquúes
 
INET
.

45 
	~"›t_öë6.h
"

46 
	~"›t_ù£c.h
"

48 
	~<sys/∑øm.h
>

49 
	~<sys/sy°m.h
>

50 
	~<sys/mÆloc.h
>

51 
	~<sys/mbuf.h
>

52 
	~<sys/kî√l.h
>

53 
	~<sys/lock.h
>

54 
	~<sys/¥iv.h
>

55 
	~<sys/¥oc.h
>

56 
	~<sys/rwlock.h
>

57 
	~<sys/sockë.h
>

58 
	~<sys/sockëv¨.h
>

59 
	~<sys/sys˘l.h
>

60 
	~<sys/sy¶og.h
>

61 
	~<√t/if.h
>

62 
	~<√t/rouã.h
>

63 
	~<√t/v√t.h
>

65 
	~<√töë/ö.h
>

66 
	~<√töë/ù_v¨.h
>

67 
	~<√töë/ù_fw.h
>

68 
	~<√töë/ùfw/ù_fw_¥iv©e.h
>

70 #ifde‡
MAC


71 
	~<£curôy/mac/mac_‰amew‹k.h
>

74 
MALLOC_DEFINE
(
M_IPFW
, "IpFw/IpAcct", "IpFw/IpAcct chain's");

85 
	$ùfw_föd_ruÀ
(
ù_fw_chaö
 *
chaö
, 
uöt32_t
 
key
, uöt32_à
id
)

87 
i
, 
lo
, 
hi
;

88 
ù_fw
 *
r
;

90 
lo
 = 0, 
hi
 = 
chaö
->
n_ruÀs
 - 1;Üo < hi;) {

91 
i
 = (
lo
 + 
hi
) / 2;

92 
r
 = 
chaö
->
m≠
[
i
];

93 i‡(
r
->
ruÀnum
 < 
key
)

94 
lo
 = 
i
 + 1;

95 i‡(
r
->
ruÀnum
 > 
key
)

96 
hi
 = 
i
;

97 i‡(
r
->
id
 < id)

98 
lo
 = 
i
 + 1;

100 
hi
 = 
i
;

102  
hi
;

103 
	}
}

109 
ù_fw
 **

110 
	$gë_m≠
(
ù_fw_chaö
 *
chaö
, 
exåa
, 
locked
)

114 
ù_fw
 **
m≠
;

115 
i
;

117 
i
 = 
chaö
->
n_ruÀs
 + 
exåa
;

118 
m≠
 = 
	`mÆloc
(
i
 * (
ù_fw
 *), 
M_IPFW
,

119 
locked
 ? 
M_NOWAIT
 : 
M_WAITOK
);

120 i‡(
m≠
 =
NULL
) {

121 
	`¥ötf
("%s: c™nŸáŒoˇã m≠\n", 
__FUNCTION__
);

122  
NULL
;

124 i‡(!
locked
)

125 
	`IPFW_UH_WLOCK
(
chaö
);

126 i‡(
i
 >
chaö
->
n_ruÀs
 + 
exåa
)

127  
m≠
;

129 i‡(!
locked
)

130 
	`IPFW_UH_WUNLOCK
(
chaö
);

131 
	`‰ì
(
m≠
, 
M_IPFW
);

133 
	}
}

138 
ù_fw
 **

139 
	$sw≠_m≠
(
ù_fw_chaö
 *
chaö
, 
ù_fw
 **
√w_m≠
, 
√w_Àn
)

141 
ù_fw
 **
ﬁd_m≠
;

143 
	`IPFW_WLOCK
(
chaö
);

144 
chaö
->
id
++;

145 
chaö
->
n_ruÀs
 = 
√w_Àn
;

146 
ﬁd_m≠
 = 
chaö
->
m≠
;

147 
chaö
->
m≠
 = 
√w_m≠
;

148 
	`IPFW_WUNLOCK
(
chaö
);

149  
ﬁd_m≠
;

150 
	}
}

160 
	$ùfw_add_ruÀ
(
ù_fw_chaö
 *
chaö
, 
ù_fw
 *
öput_ruÀ
)

162 
ù_fw
 *
ruÀ
;

163 
i
, 
l
, 
ö£π_bef‹e
;

164 
ù_fw
 **
m≠
;

166 i‡(
chaö
->
ruÀs
 =
NULL
 || 
öput_ruÀ
->
ruÀnum
 > 
IPFW_DEFAULT_RULE
-1)

167  (
EINVAL
);

169 
l
 = 
	`RULESIZE
(
öput_ruÀ
);

170 
ruÀ
 = 
	`mÆloc
(
l
, 
M_IPFW
, 
M_WAITOK
 | 
M_ZERO
);

171 i‡(
ruÀ
 =
NULL
)

172  (
ENOSPC
);

174 
m≠
 = 
	`gë_m≠
(
chaö
, 1, 0 );

175 i‡(
m≠
 =
NULL
) {

176 
	`‰ì
(
ruÀ
, 
M_IPFW
);

177  
ENOSPC
;

180 
	`bc›y
(
öput_ruÀ
, 
ruÀ
, 
l
);

182 
ruÀ
->
x_√xt
 = 
NULL
;

183 
ruÀ
->
√xt_ruÀ
 = 
NULL
;

184 
ruÀ
->
p˙t
 = 0;

185 
ruÀ
->
b˙t
 = 0;

186 
ruÀ
->
time°amp
 = 0;

188 i‡(
V_autoöc_°ï
 < 1)

189 
V_autoöc_°ï
 = 1;

190 i‡(
V_autoöc_°ï
 > 1000)

191 
V_autoöc_°ï
 = 1000;

193 
ö£π_bef‹e
 = 
ruÀ
->
ruÀnum
 ?ÑuÀ->ruÀnum + 1 : 
IPFW_DEFAULT_RULE
;

194 
i
 = 
	`ùfw_föd_ruÀ
(
chaö
, 
ö£π_bef‹e
, 0);

196 i‡(
i
 > 0)

197 
	`bc›y
(
chaö
->
m≠
, m≠, 
i
 * (
ù_fw
 *));

198 
m≠
[
i
] = 
ruÀ
;

200 
	`bc›y
(
chaö
->
m≠
 + 
i
, map + i + 1,

201 (
ù_fw
 *Ë*(
chaö
->
n_ruÀs
 - 
i
));

202 i‡(
ruÀ
->
ruÀnum
 == 0) {

204 
ruÀ
->
ruÀnum
 = 
i
 > 0 ? 
m≠
[i-1]->rulenum : 0;

205 i‡(
ruÀ
->
ruÀnum
 < 
IPFW_DEFAULT_RULE
 - 
V_autoöc_°ï
)

206 
ruÀ
->
ruÀnum
 +
V_autoöc_°ï
;

207 
öput_ruÀ
->
ruÀnum
 = 
ruÀ
->rulenum;

210 
ruÀ
->
id
 = 
chaö
->id + 1;

211 
m≠
 = 
	`sw≠_m≠
(
chaö
, m≠, chaö->
n_ruÀs
 + 1);

212 
chaö
->
°©ic_Àn
 +
l
;

213 
	`IPFW_UH_WUNLOCK
(
chaö
);

214 i‡(
m≠
)

215 
	`‰ì
(
m≠
, 
M_IPFW
);

217 
	}
}

225 
	$ùfw_ª≠_ruÀs
(
ù_fw
 *
hód
)

227 
ù_fw
 *
ruÀ
;

229 (
ruÀ
 = 
hód
Ë!
NULL
) {

230 
hód
 = hód->
x_√xt
;

231 
	`‰ì
(
ruÀ
, 
M_IPFW
);

233 
	}
}

263 
	$kìp_ruÀ
(
ù_fw
 *
ruÀ
, 
uöt8_t
 
cmd
, uöt8_à
£t
, 
uöt32_t
 
n
)

266 (
ruÀ
->
ruÀnum
 =
IPFW_DEFAULT_RULE
) ||

267 (
cmd
 =0 && 
n
 =0 && 
ruÀ
->
£t
 =
RESVD_SET
) ||

268 !(
cmd
 =0 || 
ruÀ
->
£t
 == set) ||

269 !(
cmd
 =1 || 
n
 =0 ||Ç =
ruÀ
->
ruÀnum
);

270 
	}
}

287 
	$dñ_íåy
(
ù_fw_chaö
 *
chaö
, 
uöt32_t
 
¨g
)

289 
ù_fw
 *
ruÀ
;

290 
uöt32_t
 
num
;

291 
uöt8_t
 
cmd
, 
√w_£t
;

292 
°¨t
, 
íd
, 
i
, 
ofs
, 
n
;

293 
ù_fw
 **
m≠
 = 
NULL
;

294 
îr‹
 = 0;

296 
num
 = 
¨g
 & 0xffff;

297 
cmd
 = (
¨g
 >> 24) & 0xff;

298 
√w_£t
 = (
¨g
 >> 16) & 0xff;

300 i‡(
cmd
 > 5 || 
√w_£t
 > 
RESVD_SET
)

301  
EINVAL
;

302 i‡(
cmd
 == 0 || cmd == 2 || cmd == 5) {

303 i‡(
num
 >
IPFW_DEFAULT_RULE
)

304  
EINVAL
;

306 i‡(
num
 > 
RESVD_SET
)

307  
EINVAL
;

310 
	`IPFW_UH_WLOCK
(
chaö
);

311 
chaö
->
ª≠
 = 
NULL
;

313 
cmd
) {

324 
n
 = 0;

325 i‡(
cmd
 == 1) {

329 
√w_£t
 = 
num
;

330 
°¨t
 = -1, 
íd
 = 
i
 = 0; i < 
chaö
->
n_ruÀs
; i++) {

331 i‡(
	`kìp_ruÀ
(
chaö
->
m≠
[
i
], 
cmd
, 
√w_£t
, 0))

333 i‡(
°¨t
 < 0)

334 
°¨t
 = 
i
;

335 
íd
 = 
i
;

336 
n
++;

338 
íd
++;

341 
°¨t
 = 
	`ùfw_föd_ruÀ
(
chaö
, 
num
, 0);

342 
íd
 = 
°¨t
;Énd < 
chaö
->
n_ruÀs
;Énd++) {

343 
ruÀ
 = 
chaö
->
m≠
[
íd
];

344 i‡(
num
 > 0 && 
ruÀ
->
ruÀnum
 !=Çum)

346 i‡(!
	`kìp_ruÀ
(
ruÀ
, 
cmd
, 
√w_£t
, 
num
))

347 
n
++;

351 i‡(
n
 == 0) {

357 
îr‹
 = (
¨g
 =0Ë? 0 : 
EINVAL
;

362 
m≠
 = 
	`gë_m≠
(
chaö
, -
n
, 1 );

363 i‡(
m≠
 =
NULL
) {

364 
îr‹
 = 
EINVAL
;

369 i‡(
°¨t
 > 0)

370 
	`bc›y
(
chaö
->
m≠
, m≠, 
°¨t
 * (
ù_fw
 *));

372 
i
 = 
ofs
 = 
°¨t
; i < 
íd
; i++) {

373 
ruÀ
 = 
chaö
->
m≠
[
i
];

374 i‡(
	`kìp_ruÀ
(
ruÀ
, 
cmd
, 
√w_£t
, 
num
))

375 
m≠
[
ofs
++] = 
ruÀ
;

378 
	`bc›y
(
chaö
->
m≠
 + 
íd
, m≠ + 
ofs
,

379 (
chaö
->
n_ruÀs
 - 
íd
Ë* (
ù_fw
 *));

381 
m≠
 = 
	`sw≠_m≠
(
chaö
, m≠, chaö->
n_ruÀs
 - 
n
);

383 
i
 = 
°¨t
; i < 
íd
; i++) {

384 
l
;

385 
ruÀ
 = 
m≠
[
i
];

386 i‡(
	`kìp_ruÀ
(
ruÀ
, 
cmd
, 
√w_£t
, 
num
))

388 
l
 = 
	`RULESIZE
(
ruÀ
);

389 
chaö
->
°©ic_Àn
 -
l
;

390 
	`ùfw_ªmove_dyn_chûdªn
(
ruÀ
);

391 
ruÀ
->
x_√xt
 = 
chaö
->
ª≠
;

392 
chaö
->
ª≠
 = 
ruÀ
;

402 
i
 = 0; i < 
chaö
->
n_ruÀs
 - 1; i++) {

403 
ruÀ
 = 
chaö
->
m≠
[
i
];

404 i‡(
ruÀ
->
ruÀnum
 =
num
)

405 
ruÀ
->
£t
 = 
√w_£t
;

410 
i
 = 0; i < 
chaö
->
n_ruÀs
 - 1; i++) {

411 
ruÀ
 = 
chaö
->
m≠
[
i
];

412 i‡(
ruÀ
->
£t
 =
num
)

413 
ruÀ
->
£t
 = 
√w_£t
;

418 
i
 = 0; i < 
chaö
->
n_ruÀs
 - 1; i++) {

419 
ruÀ
 = 
chaö
->
m≠
[
i
];

420 i‡(
ruÀ
->
£t
 =
num
)

421 
ruÀ
->
£t
 = 
√w_£t
;

422 i‡(
ruÀ
->
£t
 =
√w_£t
)

423 
ruÀ
->
£t
 = 
num
;

428 
ruÀ
 = 
chaö
->
ª≠
;

429 
chaö
->
ª≠
 = 
NULL
;

430 
	`IPFW_UH_WUNLOCK
(
chaö
);

431 
	`ùfw_ª≠_ruÀs
(
ruÀ
);

432 i‡(
m≠
)

433 
	`‰ì
(
m≠
, 
M_IPFW
);

434  
îr‹
;

435 
	}
}

443 
	$˛ór_cou¡îs
(
ù_fw
 *
ruÀ
, 
log_⁄ly
)

445 
ùfw_ö¢_log
 *
l
 = (ùfw_ö¢_log *)
	`ACTION_PTR
(
ruÀ
);

447 i‡(
log_⁄ly
 == 0) {

448 
ruÀ
->
b˙t
 =ÑuÀ->
p˙t
 = 0;

449 
ruÀ
->
time°amp
 = 0;

451 i‡(
l
->
o
.
›code
 =
O_LOG
)

452 
l
->
log_À·
 =Ü->
max_log
;

453 
	}
}

465 
	$zîo_íåy
(
ù_fw_chaö
 *
chaö
, 
u_öt32_t
 
¨g
, 
log_⁄ly
)

467 
ù_fw
 *
ruÀ
;

468 *
msg
;

469 
i
;

471 
uöt16_t
 
ruÀnum
 = 
¨g
 & 0xffff;

472 
uöt8_t
 
£t
 = (
¨g
 >> 16) & 0xff;

473 
uöt8_t
 
cmd
 = (
¨g
 >> 24) & 0xff;

475 i‡(
cmd
 > 1)

476  (
EINVAL
);

477 i‡(
cmd
 =1 && 
£t
 > 
RESVD_SET
)

478  (
EINVAL
);

480 
	`IPFW_UH_RLOCK
(
chaö
);

481 i‡(
ruÀnum
 == 0) {

482 
V_n‹uÀ_cou¡î
 = 0;

483 
i
 = 0; i < 
chaö
->
n_ruÀs
; i++) {

484 
ruÀ
 = 
chaö
->
m≠
[
i
];

486 i‡(
cmd
 =1 && 
ruÀ
->
£t
 != set)

488 
	`˛ór_cou¡îs
(
ruÀ
, 
log_⁄ly
);

490 
msg
 = 
log_⁄ly
 ? "AllÜogging countsÑeset" :

493 
˛óªd
 = 0;

494 
i
 = 0; i < 
chaö
->
n_ruÀs
; i++) {

495 
ruÀ
 = 
chaö
->
m≠
[
i
];

496 i‡(
ruÀ
->
ruÀnum
 ==Ñulenum) {

497 i‡(
cmd
 =0 || 
ruÀ
->
£t
 == set)

498 
	`˛ór_cou¡îs
(
ruÀ
, 
log_⁄ly
);

499 
˛óªd
 = 1;

501 i‡(
ruÀ
->
ruÀnum
 >Ñulenum)

504 i‡(!
˛óªd
) {

505 
	`IPFW_UH_RUNLOCK
(
chaö
);

506  (
EINVAL
);

508 
msg
 = 
log_⁄ly
 ? "logging countÑeset" : "cleared";

510 
	`IPFW_UH_RUNLOCK
(
chaö
);

512 i‡(
V_fw_vîbo£
) {

513 
Àv
 = 
LOG_SECURITY
 | 
LOG_NOTICE
;

515 i‡(
ruÀnum
)

516 
	`log
(
Àv
, "ùfw: E¡ry %d %s.\n", 
ruÀnum
, 
msg
);

518 
	`log
(
Àv
, "ùfw: %s.\n", 
msg
);

521 
	}
}

528 
	$check_ùfw_°ru˘
(
ù_fw
 *
ruÀ
, 
size
)

530 
l
, 
cmdÀn
 = 0;

531 
have_a˘i⁄
=0;

532 
ùfw_ö¢
 *
cmd
;

534 i‡(
size
 < (*
ruÀ
)) {

535 
	`¥ötf
("ipfw:ÑuleÅoo short\n");

536  (
EINVAL
);

539 
l
 = 
	`RULESIZE
(
ruÀ
);

540 i‡(
l
 !
size
) {

541 
	`¥ötf
("ùfw: sizêmism©ch (havê%d w™à%d)\n", 
size
, 
l
);

542  (
EINVAL
);

544 i‡(
ruÀ
->
a˘_ofs
 >ruÀ->
cmd_Àn
) {

545 
	`¥ötf
("ipfw: bogusáction offset (%u > %u)\n",

546 
ruÀ
->
a˘_ofs
,ÑuÀ->
cmd_Àn
 - 1);

547  (
EINVAL
);

553 
l
 = 
ruÀ
->
cmd_Àn
, 
cmd
 =Ñule->cmd ;

554 
l
 > 0 ;Ü -
cmdÀn
, 
cmd
 += cmdlen) {

555 
cmdÀn
 = 
	`F_LEN
(
cmd
);

556 i‡(
cmdÀn
 > 
l
) {

557 
	`¥ötf
("ipfw: opcode %d sizeÅruncated\n",

558 
cmd
->
›code
);

559  
EINVAL
;

561 
cmd
->
›code
) {

562 
O_PROBE_STATE
:

563 
O_KEEP_STATE
:

564 
O_PROTO
:

565 
O_IP_SRC_ME
:

566 
O_IP_DST_ME
:

567 
O_LAYER2
:

568 
O_IN
:

569 
O_FRAG
:

570 
O_DIVERTED
:

571 
O_IPOPT
:

572 
O_IPTOS
:

573 
O_IPPRECEDENCE
:

574 
O_IPVER
:

575 
O_TCPWIN
:

576 
O_TCPFLAGS
:

577 
O_TCPOPTS
:

578 
O_ESTAB
:

579 
O_VERREVPATH
:

580 
O_VERSRCREACH
:

581 
O_ANTISPOOF
:

582 
O_IPSEC
:

583 #ifde‡
INET6


584 
O_IP6_SRC_ME
:

585 
O_IP6_DST_ME
:

586 
O_EXT_HDR
:

587 
O_IP6
:

589 
O_IP4
:

590 
O_TAG
:

591 i‡(
cmdÀn
 !
	`F_INSN_SIZE
(
ùfw_ö¢
))

592 
bad_size
;

595 
O_FIB
:

596 i‡(
cmdÀn
 !
	`F_INSN_SIZE
(
ùfw_ö¢
))

597 
bad_size
;

598 i‡(
cmd
->
¨g1
 >
π_numfibs
) {

599 
	`¥ötf
("ipfw: invalid fibÇumber %d\n",

600 
cmd
->
¨g1
);

601  
EINVAL
;

605 
O_SETFIB
:

606 i‡(
cmdÀn
 !
	`F_INSN_SIZE
(
ùfw_ö¢
))

607 
bad_size
;

608 i‡(
cmd
->
¨g1
 >
π_numfibs
) {

609 
	`¥ötf
("ipfw: invalid fibÇumber %d\n",

610 
cmd
->
¨g1
);

611  
EINVAL
;

613 
check_a˘i⁄
;

615 
O_UID
:

616 
O_GID
:

617 
O_JAIL
:

618 
O_IP_SRC
:

619 
O_IP_DST
:

620 
O_TCPSEQ
:

621 
O_TCPACK
:

622 
O_PROB
:

623 
O_ICMPTYPE
:

624 i‡(
cmdÀn
 !
	`F_INSN_SIZE
(
ùfw_ö¢_u32
))

625 
bad_size
;

628 
O_LIMIT
:

629 i‡(
cmdÀn
 !
	`F_INSN_SIZE
(
ùfw_ö¢_limô
))

630 
bad_size
;

633 
O_LOG
:

634 i‡(
cmdÀn
 !
	`F_INSN_SIZE
(
ùfw_ö¢_log
))

635 
bad_size
;

637 ((
ùfw_ö¢_log
 *)
cmd
)->
log_À·
 =

638 ((
ùfw_ö¢_log
 *)
cmd
)->
max_log
;

642 
O_IP_SRC_MASK
:

643 
O_IP_DST_MASK
:

645 i‡–!(
cmdÀn
 & 1) || cmdlen > 31)

646 
bad_size
;

649 
O_IP_SRC_SET
:

650 
O_IP_DST_SET
:

651 i‡(
cmd
->
¨g1
 == 0 || cmd->arg1 > 256) {

652 
	`¥ötf
("ipfw: invalid set size %d\n",

653 
cmd
->
¨g1
);

654  
EINVAL
;

656 i‡(
cmdÀn
 !
	`F_INSN_SIZE
(
ùfw_ö¢_u32
) +

657 (
cmd
->
¨g1
+31)/32 )

658 
bad_size
;

661 
O_IP_SRC_LOOKUP
:

662 
O_IP_DST_LOOKUP
:

663 i‡(
cmd
->
¨g1
 >
IPFW_TABLES_MAX
) {

664 
	`¥ötf
("ipfw: invalidÅableÇumber %d\n",

665 
cmd
->
¨g1
);

666  (
EINVAL
);

668 i‡(
cmdÀn
 !
	`F_INSN_SIZE
(
ùfw_ö¢
) &&

669 
cmdÀn
 !
	`F_INSN_SIZE
(
ùfw_ö¢_u32
) + 1 &&

670 
cmdÀn
 !
	`F_INSN_SIZE
(
ùfw_ö¢_u32
))

671 
bad_size
;

674 
O_MACADDR2
:

675 i‡(
cmdÀn
 !
	`F_INSN_SIZE
(
ùfw_ö¢_mac
))

676 
bad_size
;

679 
O_NOP
:

680 
O_IPID
:

681 
O_IPTTL
:

682 
O_IPLEN
:

683 
O_TCPDATALEN
:

684 
O_TAGGED
:

685 i‡(
cmdÀn
 < 1 || cmdlen > 31)

686 
bad_size
;

689 
O_MAC_TYPE
:

690 
O_IP_SRCPORT
:

691 
O_IP_DSTPORT
:

692 i‡(
cmdÀn
 < 2 || cmdlen > 31)

693 
bad_size
;

696 
O_RECV
:

697 
O_XMIT
:

698 
O_VIA
:

699 i‡(
cmdÀn
 !
	`F_INSN_SIZE
(
ùfw_ö¢_if
))

700 
bad_size
;

703 
O_ALTQ
:

704 i‡(
cmdÀn
 !
	`F_INSN_SIZE
(
ùfw_ö¢_Ætq
))

705 
bad_size
;

708 
O_PIPE
:

709 
O_QUEUE
:

710 i‡(
cmdÀn
 !
	`F_INSN_SIZE
(
ùfw_ö¢
))

711 
bad_size
;

712 
check_a˘i⁄
;

714 
O_FORWARD_IP
:

715 #ifdef 
IPFIREWALL_FORWARD


716 i‡(
cmdÀn
 !
	`F_INSN_SIZE
(
ùfw_ö¢_ß
))

717 
bad_size
;

718 
check_a˘i⁄
;

720  
EINVAL
;

723 
O_DIVERT
:

724 
O_TEE
:

725 i‡(
ù_divît_±r
 =
NULL
)

726  
EINVAL
;

728 
check_size
;

729 
O_NETGRAPH
:

730 
O_NGTEE
:

731 i‡(
ng_ùfw_öput_p
 =
NULL
)

732  
EINVAL
;

734 
check_size
;

735 
O_NAT
:

736 i‡(!
IPFW_NAT_LOADED
)

737  
EINVAL
;

738 i‡(
cmdÀn
 !
	`F_INSN_SIZE
(
ùfw_ö¢_«t
))

739 
bad_size
;

740 
check_a˘i⁄
;

741 
O_FORWARD_MAC
:

742 
O_CHECK_STATE
:

743 
O_COUNT
:

744 
O_ACCEPT
:

745 
O_DENY
:

746 
O_REJECT
:

747 #ifde‡
INET6


748 
O_UNREACH6
:

750 
O_SKIPTO
:

751 
O_REASS
:

752 
check_size
:

753 i‡(
cmdÀn
 !
	`F_INSN_SIZE
(
ùfw_ö¢
))

754 
bad_size
;

755 
check_a˘i⁄
:

756 i‡(
have_a˘i⁄
) {

757 
	`¥ötf
("ipfw: opcode %d, multipleáctions"

759 
cmd
->
›code
);

760  
EINVAL
;

762 
have_a˘i⁄
 = 1;

763 i‡(
l
 !
cmdÀn
) {

764 
	`¥ötf
("ipfw: opcode %d,áction must be"

766 
cmd
->
›code
);

767  
EINVAL
;

770 #ifde‡
INET6


771 
O_IP6_SRC
:

772 
O_IP6_DST
:

773 i‡(
cmdÀn
 !
	`F_INSN_SIZE
(
ö6_addr
) +

774 
	`F_INSN_SIZE
(
ùfw_ö¢
))

775 
bad_size
;

778 
O_FLOW6ID
:

779 i‡(
cmdÀn
 !
	`F_INSN_SIZE
(
ùfw_ö¢_u32
) +

780 ((
ùfw_ö¢_u32
 *)
cmd
)->
o
.
¨g1
)

781 
bad_size
;

784 
O_IP6_SRC_MASK
:

785 
O_IP6_DST_MASK
:

786 i‡–!(
cmdÀn
 & 1) || cmdlen > 127)

787 
bad_size
;

789 
O_ICMP6TYPE
:

790 if–
cmdÀn
 !
	`F_INSN_SIZE
–
ùfw_ö¢_icmp6
 ) )

791 
bad_size
;

796 
cmd
->
›code
) {

797 #i‚de‡
INET6


798 
O_IP6_SRC_ME
:

799 
O_IP6_DST_ME
:

800 
O_EXT_HDR
:

801 
O_IP6
:

802 
O_UNREACH6
:

803 
O_IP6_SRC
:

804 
O_IP6_DST
:

805 
O_FLOW6ID
:

806 
O_IP6_SRC_MASK
:

807 
O_IP6_DST_MASK
:

808 
O_ICMP6TYPE
:

809 
	`¥ötf
("ipfw:Ço IPv6 support in kernel\n");

810  
EPROTONOSUPPORT
;

813 
	`¥ötf
("ipfw: opcode %d, unknown opcode\n",

814 
cmd
->
›code
);

815  
EINVAL
;

819 i‡(
have_a˘i⁄
 == 0) {

820 
	`¥ötf
("ipfw: missingáction\n");

821  
EINVAL
;

825 
bad_size
:

826 
	`¥ötf
("ipfw: opcode %d size %d wrong\n",

827 
cmd
->
›code
, 
cmdÀn
);

828  
EINVAL
;

829 
	}
}

838 
	gis7
 = 0;

840 
	sù_fw7
 {

841 
ù_fw7
 *
	m√xt
;

842 
ù_fw7
 *
	m√xt_ruÀ
;

845 
uöt16_t
 
	ma˘_ofs
;

846 
uöt16_t
 
	mcmd_Àn
;

847 
uöt16_t
 
	mruÀnum
;

848 
uöt8_t
 
	m£t
;

850 
uöt8_t
 
	m_∑d
;

853 
uöt64_t
 
	mp˙t
;

854 
uöt64_t
 
	mb˙t
;

855 
uöt32_t
 
	mtime°amp
;

857 
ùfw_ö¢
 
	mcmd
[1];

860 
c⁄vît_ruÀ_to_7
(
ù_fw
 *
ruÀ
);

861 
c⁄vît_ruÀ_to_8
(
ù_fw
 *
ruÀ
);

863 #i‚de‡
RULESIZE7


864 
	#RULESIZE7
(
ruÀ
Ë((
ù_fw7
) + \

865 ((
ù_fw7
 *)(
ruÀ
))->
cmd_Àn
 * 4 - 4)

	)

874 
size_t


875 
	$ùfw_gëruÀs
(
ù_fw_chaö
 *
chaö
, *
buf
, 
size_t
 
•a˚
)

877 *
bp
 = 
buf
;

878 *
ï
 = 
bp
 + 
•a˚
;

879 
ù_fw
 *
ruÀ
, *
d°
;

880 
l
, 
i
;

881 
time_t
 
boŸ_£c⁄ds
;

883 
boŸ_£c⁄ds
 = 
boŸtime
.
tv_£c
;

884 
i
 = 0; i < 
chaö
->
n_ruÀs
; i++) {

885 
ruÀ
 = 
chaö
->
m≠
[
i
];

887 i‡(
is7
) {

889 
l
 = 
	`RULESIZE7
(
ruÀ
);

890 i‡(
bp
 + 
l
 + (
uöt32_t
Ë<
ï
) {

891 
îr‹
;

892 
	`bc›y
(
ruÀ
, 
bp
, 
l
 + (
uöt32_t
));

893 
îr‹
 = 
	`c⁄vît_ruÀ_to_7
((
ù_fw
 *Ë
bp
);

894 i‡(
îr‹
)

901 
	`bc›y
(&
V_£t_dißbÀ
,

902 &(((
ù_fw7
 *)
bp
)->
√xt_ruÀ
),

903 (
V_£t_dißbÀ
));

904 i‡(((
ù_fw7
 *)
bp
)->
time°amp
)

905 ((
ù_fw7
 *)
bp
)->
time°amp
 +
boŸ_£c⁄ds
;

906 
bp
 +
l
;

912 
l
 = 
	`RULESIZE
(
ruÀ
);

913 i‡(
bp
 + 
l
 > 
ï
) {

914 
	`¥ötf
("overflow dumping staticÑules\n");

917 
d°
 = (
ù_fw
 *)
bp
;

918 
	`bc›y
(
ruÀ
, 
d°
, 
l
);

924 
	`bc›y
(&
V_£t_dißbÀ
, &
d°
->
√xt_ruÀ
, (V_set_disable));

925 i‡(
d°
->
time°amp
)

926 
d°
->
time°amp
 +
boŸ_£c⁄ds
;

927 
bp
 +
l
;

929 
	`ùfw_gë_dy«mic
(&
bp
, 
ï
);

930  (
bp
 - (*)
buf
);

931 
	}
}

938 
	$ùfw_˘l
(
sock›t
 *
s›t
)

940 
	#RULE_MAXSIZE
 (256*(
u_öt32_t
))

	)

941 
îr‹
;

942 
size_t
 
size
;

943 
ù_fw
 *
buf
, *
ruÀ
;

944 
ù_fw_chaö
 *
chaö
;

945 
u_öt32_t
 
ruÀnum
[2];

947 
îr‹
 = 
	`¥iv_check
(
s›t
->
s›t_td
, 
PRIV_NETINET_IPFW
);

948 i‡(
îr‹
)

949  (
îr‹
);

955 i‡(
s›t
->
s›t_«me
 =
IP_FW_ADD
 ||

956 (
s›t
->
s›t_dú
 =
SOPT_SET
 && s›t->
s›t_«me
 !
IP_FW_RESETLOG
)) {

957 
îr‹
 = 
	`£cuªÀvñ_ge
(
s›t
->
s›t_td
->
td_u¸ed
, 3);

958 i‡(
îr‹
)

959  (
îr‹
);

962 
chaö
 = &
V_œyî3_chaö
;

963 
îr‹
 = 0;

965 
s›t
->
s›t_«me
) {

966 
IP_FW_GET
:

979 
Àn
 = 0, 
w™t
;

981 
size
 = 
chaö
->
°©ic_Àn
;

982 
size
 +
	`ùfw_dyn_Àn
();

983 i‡(
size
 >
s›t
->
s›t_vÆsize
)

985 
buf
 = 
	`mÆloc
(
size
, 
M_TEMP
, 
M_WAITOK
);

986 i‡(
buf
 =
NULL
)

988 
	`IPFW_UH_RLOCK
(
chaö
);

990 
w™t
 = 
chaö
->
°©ic_Àn
 + 
	`ùfw_dyn_Àn
();

991 i‡(
size
 >
w™t
)

992 
Àn
 = 
	`ùfw_gëruÀs
(
chaö
, 
buf
, 
size
);

993 
	`IPFW_UH_RUNLOCK
(
chaö
);

994 i‡(
size
 >
w™t
)

995 
îr‹
 = 
	`so›tc›yout
(
s›t
, 
buf
, 
Àn
);

996 
	`‰ì
(
buf
, 
M_TEMP
);

997 i‡(
size
 >
w™t
)

1002 
IP_FW_FLUSH
:

1004 
îr‹
 = 
	`dñ_íåy
(
chaö
, 0);

1007 
IP_FW_ADD
:

1008 
ruÀ
 = 
	`mÆloc
(
RULE_MAXSIZE
, 
M_TEMP
, 
M_WAITOK
);

1009 
îr‹
 = 
	`so›tc›yö
(
s›t
, 
ruÀ
, 
RULE_MAXSIZE
,

1010 (
ù_fw7
) );

1021 i‡(
s›t
->
s›t_vÆsize
 =
	`RULESIZE7
(
ruÀ
)) {

1022 
is7
 = 1;

1023 
îr‹
 = 
	`c⁄vît_ruÀ_to_8
(
ruÀ
);

1024 i‡(
îr‹
)

1025  
îr‹
;

1026 i‡(
îr‹
 == 0)

1027 
îr‹
 = 
	`check_ùfw_°ru˘
(
ruÀ
, 
	`RULESIZE
(rule));

1029 
is7
 = 0;

1030 i‡(
îr‹
 == 0)

1031 
îr‹
 = 
	`check_ùfw_°ru˘
(
ruÀ
, 
s›t
->
s›t_vÆsize
);

1033 i‡(
îr‹
 == 0) {

1035 
îr‹
 = 
	`ùfw_add_ruÀ
(
chaö
, 
ruÀ
);

1036 
size
 = 
	`RULESIZE
(
ruÀ
);

1037 i‡(!
îr‹
 && 
s›t
->
s›t_dú
 =
SOPT_GET
) {

1038 i‡(
is7
) {

1039 
îr‹
 = 
	`c⁄vît_ruÀ_to_7
(
ruÀ
);

1040 
size
 = 
	`RULESIZE7
(
ruÀ
);

1041 i‡(
îr‹
)

1042  
îr‹
;

1044 
îr‹
 = 
	`so›tc›yout
(
s›t
, 
ruÀ
, 
size
);

1047 
	`‰ì
(
ruÀ
, 
M_TEMP
);

1050 
IP_FW_DEL
:

1063 
îr‹
 = 
	`so›tc›yö
(
s›t
, 
ruÀnum
,

1064 2*(
u_öt32_t
), (u_int32_t));

1065 i‡(
îr‹
)

1067 
size
 = 
s›t
->
s›t_vÆsize
;

1068 i‡(
size
 =(
u_öt32_t
Ë&& 
ruÀnum
[0] != 0) {

1070 
îr‹
 = 
	`dñ_íåy
(
chaö
, 
ruÀnum
[0]);

1071 } i‡(
size
 =2*(
u_öt32_t
)) {

1072 
	`IPFW_UH_WLOCK
(
chaö
);

1073 
V_£t_dißbÀ
 =

1074 (
V_£t_dißbÀ
 | 
ruÀnum
[0]) & ~rulenum[1] &

1075 ~(1<<
RESVD_SET
);

1076 
	`IPFW_UH_WUNLOCK
(
chaö
);

1078 
îr‹
 = 
EINVAL
;

1081 
IP_FW_ZERO
:

1082 
IP_FW_RESETLOG
:

1083 
ruÀnum
[0] = 0;

1084 i‡(
s›t
->
s›t_vÆ
 != 0) {

1085 
îr‹
 = 
	`so›tc›yö
(
s›t
, 
ruÀnum
,

1086 (
u_öt32_t
), (u_int32_t));

1087 i‡(
îr‹
)

1090 
îr‹
 = 
	`zîo_íåy
(
chaö
, 
ruÀnum
[0],

1091 
s›t
->
s›t_«me
 =
IP_FW_RESETLOG
);

1095 
IP_FW_TABLE_ADD
:

1097 
ùfw_èbÀ_íåy
 
ít
;

1099 
îr‹
 = 
	`so›tc›yö
(
s›t
, &
ít
,

1100 (
ít
), (ent));

1101 i‡(
îr‹
)

1103 
îr‹
 = 
	`ùfw_add_èbÀ_íåy
(
chaö
, 
ít
.
tbl
,

1104 
ít
.
addr
,É¡.
maskÀn
,É¡.
vÆue
);

1108 
IP_FW_TABLE_DEL
:

1110 
ùfw_èbÀ_íåy
 
ít
;

1112 
îr‹
 = 
	`so›tc›yö
(
s›t
, &
ít
,

1113 (
ít
), (ent));

1114 i‡(
îr‹
)

1116 
îr‹
 = 
	`ùfw_dñ_èbÀ_íåy
(
chaö
, 
ít
.
tbl
,

1117 
ít
.
addr
,É¡.
maskÀn
);

1121 
IP_FW_TABLE_FLUSH
:

1123 
u_öt16_t
 
tbl
;

1125 
îr‹
 = 
	`so›tc›yö
(
s›t
, &
tbl
,

1126 (
tbl
), (tbl));

1127 i‡(
îr‹
)

1129 
	`IPFW_WLOCK
(
chaö
);

1130 
îr‹
 = 
	`ùfw_Êush_èbÀ
(
chaö
, 
tbl
);

1131 
	`IPFW_WUNLOCK
(
chaö
);

1135 
IP_FW_TABLE_GETSIZE
:

1137 
u_öt32_t
 
tbl
, 
˙t
;

1139 i‡((
îr‹
 = 
	`so›tc›yö
(
s›t
, &
tbl
, (tbl),

1140 (
tbl
))))

1142 
	`IPFW_RLOCK
(
chaö
);

1143 
îr‹
 = 
	`ùfw_cou¡_èbÀ
(
chaö
, 
tbl
, &
˙t
);

1144 
	`IPFW_RUNLOCK
(
chaö
);

1145 i‡(
îr‹
)

1147 
îr‹
 = 
	`so›tc›yout
(
s›t
, &
˙t
, (cnt));

1151 
IP_FW_TABLE_LIST
:

1153 
ùfw_èbÀ
 *
tbl
;

1155 i‡(
s›t
->
s›t_vÆsize
 < (*
tbl
)) {

1156 
îr‹
 = 
EINVAL
;

1159 
size
 = 
s›t
->
s›t_vÆsize
;

1160 
tbl
 = 
	`mÆloc
(
size
, 
M_TEMP
, 
M_WAITOK
);

1161 
îr‹
 = 
	`so›tc›yö
(
s›t
, 
tbl
, 
size
, (*tbl));

1162 i‡(
îr‹
) {

1163 
	`‰ì
(
tbl
, 
M_TEMP
);

1166 
tbl
->
size
 = (size - (*tbl)) /

1167 (
ùfw_èbÀ_íåy
);

1168 
	`IPFW_RLOCK
(
chaö
);

1169 
îr‹
 = 
	`ùfw_dump_èbÀ
(
chaö
, 
tbl
);

1170 
	`IPFW_RUNLOCK
(
chaö
);

1171 i‡(
îr‹
) {

1172 
	`‰ì
(
tbl
, 
M_TEMP
);

1175 
îr‹
 = 
	`so›tc›yout
(
s›t
, 
tbl
, 
size
);

1176 
	`‰ì
(
tbl
, 
M_TEMP
);

1181 
IP_FW_NAT_CFG
:

1182 i‡(
IPFW_NAT_LOADED
)

1183 
îr‹
 = 
	`ùfw_«t_cfg_±r
(
s›t
);

1185 
	`¥ötf
("IP_FW_NAT_CFG: %s\n",

1187 
îr‹
 = 
EINVAL
;

1191 
IP_FW_NAT_DEL
:

1192 i‡(
IPFW_NAT_LOADED
)

1193 
îr‹
 = 
	`ùfw_«t_dñ_±r
(
s›t
);

1195 
	`¥ötf
("IP_FW_NAT_DEL: %s\n",

1197 
îr‹
 = 
EINVAL
;

1201 
IP_FW_NAT_GET_CONFIG
:

1202 i‡(
IPFW_NAT_LOADED
)

1203 
îr‹
 = 
	`ùfw_«t_gë_cfg_±r
(
s›t
);

1205 
	`¥ötf
("IP_FW_NAT_GET_CFG: %s\n",

1207 
îr‹
 = 
EINVAL
;

1211 
IP_FW_NAT_GET_LOG
:

1212 i‡(
IPFW_NAT_LOADED
)

1213 
îr‹
 = 
	`ùfw_«t_gë_log_±r
(
s›t
);

1215 
	`¥ötf
("IP_FW_NAT_GET_LOG: %s\n",

1217 
îr‹
 = 
EINVAL
;

1222 
	`¥ötf
("ùfw: ipfw_˘»övÆid o±i⁄ %d\n", 
s›t
->
s›t_«me
);

1223 
îr‹
 = 
EINVAL
;

1226  (
îr‹
);

1227 #unde‡
RULE_MAXSIZE


1228 
	}
}

1231 
	#RULE_MAXSIZE
 (256*(
u_öt32_t
))

	)

1235 
	$c⁄vît_ruÀ_to_7
(
ù_fw
 *
ruÀ
)

1238 
ù_fw7
 *
ruÀ7
 = (ù_fw7 *)
ruÀ
;

1240 
ù_fw
 *
tmp
;

1243 
ùfw_ö¢
 *
ccmd
, *
d°
;

1244 
Œ
 = 0, 
ccmdÀn
 = 0;

1246 
tmp
 = 
	`mÆloc
(
RULE_MAXSIZE
, 
M_TEMP
, 
M_NOWAIT
 | 
M_ZERO
);

1247 i‡(
tmp
 =
NULL
) {

1250 
	`bc›y
(
ruÀ
, 
tmp
, 
RULE_MAXSIZE
);

1253 
ruÀ7
->
_∑d
 = 
tmp
->_pad;

1254 
ruÀ7
->
£t
 = 
tmp
->set;

1255 
ruÀ7
->
ruÀnum
 = 
tmp
->rulenum;

1256 
ruÀ7
->
cmd_Àn
 = 
tmp
->cmd_len;

1257 
ruÀ7
->
a˘_ofs
 = 
tmp
->act_ofs;

1258 
ruÀ7
->
√xt_ruÀ
 = (
ù_fw7
 *)
tmp
->next_rule;

1259 
ruÀ7
->
√xt
 = (
ù_fw7
 *)
tmp
->
x_√xt
;

1260 
ruÀ7
->
cmd_Àn
 = 
tmp
->cmd_len;

1261 
ruÀ7
->
p˙t
 = 
tmp
->pcnt;

1262 
ruÀ7
->
b˙t
 = 
tmp
->bcnt;

1263 
ruÀ7
->
time°amp
 = 
tmp
->timestamp;

1266 
Œ
 = 
tmp
->
cmd_Àn
, 
ccmd
 =Åmp->
cmd
, 
d°
 = 
ruÀ7
->cmd ;

1267 
Œ
 > 0 ;Ü»-
ccmdÀn
, 
ccmd
 +ccmdÀn, 
d°
 += ccmdlen) {

1268 
ccmdÀn
 = 
	`F_LEN
(
ccmd
);

1270 
	`bc›y
(
ccmd
, 
d°
, 
	`F_LEN
(ccmd)*(
uöt32_t
));

1272 i‡(
d°
->
›code
 > 
O_NAT
)

1276 
d°
->
›code
--;

1278 i‡(
ccmdÀn
 > 
Œ
) {

1279 
	`¥ötf
("ipfw: opcode %d sizeÅruncated\n",

1280 
ccmd
->
›code
);

1281  
EINVAL
;

1284 
	`‰ì
(
tmp
, 
M_TEMP
);

1287 
	}
}

1290 
	$c⁄vît_ruÀ_to_8
(
ù_fw
 *
ruÀ
)

1293 
ù_fw7
 *
ruÀ7
 = (ù_fw7 *Ë
ruÀ
;

1296 
ùfw_ö¢
 *
ccmd
, *
d°
;

1297 
Œ
 = 0, 
ccmdÀn
 = 0;

1300 
ù_fw7
 *
tmp
 = 
	`mÆloc
(
RULE_MAXSIZE
, 
M_TEMP
, 
M_NOWAIT
 | 
M_ZERO
);

1301 i‡(
tmp
 =
NULL
) {

1305 
	`bc›y
(
ruÀ7
, 
tmp
, 
RULE_MAXSIZE
);

1307 
Œ
 = 
tmp
->
cmd_Àn
, 
ccmd
 =Åmp->
cmd
, 
d°
 = 
ruÀ
->cmd ;

1308 
Œ
 > 0 ;Ü»-
ccmdÀn
, 
ccmd
 +ccmdÀn, 
d°
 += ccmdlen) {

1309 
ccmdÀn
 = 
	`F_LEN
(
ccmd
);

1311 
	`bc›y
(
ccmd
, 
d°
, 
	`F_LEN
(ccmd)*(
uöt32_t
));

1313 i‡(
d°
->
›code
 > 
O_NAT
)

1317 
d°
->
›code
++;

1319 i‡(
ccmdÀn
 > 
Œ
) {

1320 
	`¥ötf
("ipfw: opcode %d sizeÅruncated\n",

1321 
ccmd
->
›code
);

1322  
EINVAL
;

1326 
ruÀ
->
_∑d
 = 
tmp
->_pad;

1327 
ruÀ
->
£t
 = 
tmp
->set;

1328 
ruÀ
->
ruÀnum
 = 
tmp
->rulenum;

1329 
ruÀ
->
cmd_Àn
 = 
tmp
->cmd_len;

1330 
ruÀ
->
a˘_ofs
 = 
tmp
->act_ofs;

1331 
ruÀ
->
√xt_ruÀ
 = (
ù_fw
 *)
tmp
->next_rule;

1332 
ruÀ
->
x_√xt
 = (
ù_fw
 *)
tmp
->
√xt
;

1333 
ruÀ
->
cmd_Àn
 = 
tmp
->cmd_len;

1334 
ruÀ
->
id
 = 0;

1335 
ruÀ
->
p˙t
 = 
tmp
->pcnt;

1336 
ruÀ
->
b˙t
 = 
tmp
->bcnt;

1337 
ruÀ
->
time°amp
 = 
tmp
->timestamp;

1339 
	`‰ì
 (
tmp
, 
M_TEMP
);

1341 
	}
}

	@sys/netinet/ipfw/ip_fw_table.c

26 
	~<sys/cdefs.h
>

27 
__FBSDID
("$FreeBSD: head/sys/netinet/ipfw/ip_fw_table.c 200601 2009-12-16 10:48:40ZÜuigi $");

42 #i‡!
deföed
(
KLD_MODULE
)

43 
	~"›t_ùfw.h
"

44 
	~"›t_ùdivît.h
"

45 
	~"›t_ùdn.h
"

46 
	~"›t_öë.h
"

47 #i‚de‡
INET


48 #îr‹ 
IPFIREWALL
 
ªquúes
 
INET
.

51 
	~"›t_öë6.h
"

52 
	~"›t_ù£c.h
"

54 
	~<sys/∑øm.h
>

55 
	~<sys/sy°m.h
>

56 
	~<sys/mÆloc.h
>

57 
	~<sys/kî√l.h
>

58 
	~<sys/lock.h
>

59 
	~<sys/rwlock.h
>

60 
	~<sys/sockë.h
>

61 
	~<√t/if.h
>

62 
	~<√t/ødix.h
>

63 
	~<√t/rouã.h
>

64 
	~<√t/v√t.h
>

66 
	~<√töë/ö.h
>

67 
	~<√töë/ù_v¨.h
>

68 
	~<√töë/ù_fw.h
>

69 
	~<sys/queue.h
>

70 
	~<√töë/ùfw/ù_fw_¥iv©e.h
>

72 #ifde‡
MAC


73 
	~<£curôy/mac/mac_‰amew‹k.h
>

76 
MALLOC_DEFINE
(
M_IPFW_TBL
, "ipfw_tbl", "IpFwÅables");

78 
	sèbÀ_íåy
 {

79 
ødix_node
 
	m∫
[2];

80 
sockaddr_ö
 
	maddr
, 
	mmask
;

81 
u_öt32_t
 
	mvÆue
;

93 
	#KEY_LEN
(
v
Ë*((
uöt8_t
 *)&(v))

	)

94 
	#KEY_OFS
 (8*
	`off£tof
(
sockaddr_ö
, 
sö_addr
))

	)

97 
	$ùfw_add_èbÀ_íåy
(
ù_fw_chaö
 *
ch
, 
uöt16_t
 
tbl
, 
ö_addr_t
 
addr
,

98 
uöt8_t
 
mÀn
, 
uöt32_t
 
vÆue
)

100 
ødix_node_hód
 *
∫h
;

101 
èbÀ_íåy
 *
ít
;

102 
ødix_node
 *
∫
;

104 i‡(
tbl
 >
IPFW_TABLES_MAX
)

105  (
EINVAL
);

106 
∫h
 = 
ch
->
èbÀs
[
tbl
];

107 
ít
 = 
	`mÆloc
((*ít), 
M_IPFW_TBL
, 
M_NOWAIT
 | 
M_ZERO
);

108 i‡(
ít
 =
NULL
)

109  (
ENOMEM
);

110 
ít
->
vÆue
 = value;

111 
	`KEY_LEN
(
ít
->
addr
ËKEY_LEN”¡->
mask
) = 8;

112 
ít
->
mask
.
sö_addr
.
s_addr
 = 
	`ht⁄l
(
mÀn
 ? ~((1 << (32 - mlen)) - 1) : 0);

113 
ít
->
addr
.
sö_addr
.
s_addr
 =ádd∏&É¡->
mask
.sin_addr.s_addr;

114 
	`IPFW_WLOCK
(
ch
);

115 
∫
 = 
∫h
->
	`∫h_addaddr
(&
ít
->
addr
, &ít->
mask
,Ñnh, (*)ent);

116 i‡(
∫
 =
NULL
) {

117 
	`IPFW_WUNLOCK
(
ch
);

118 
	`‰ì
(
ít
, 
M_IPFW_TBL
);

119  (
EEXIST
);

121 
	`IPFW_WUNLOCK
(
ch
);

123 
	}
}

126 
	$ùfw_dñ_èbÀ_íåy
(
ù_fw_chaö
 *
ch
, 
uöt16_t
 
tbl
, 
ö_addr_t
 
addr
,

127 
uöt8_t
 
mÀn
)

129 
ødix_node_hód
 *
∫h
;

130 
èbÀ_íåy
 *
ít
;

131 
sockaddr_ö
 
ß
, 
mask
;

133 i‡(
tbl
 >
IPFW_TABLES_MAX
)

134  (
EINVAL
);

135 
∫h
 = 
ch
->
èbÀs
[
tbl
];

136 
	`KEY_LEN
(
ß
ËKEY_LEN(
mask
) = 8;

137 
mask
.
sö_addr
.
s_addr
 = 
	`ht⁄l
(
mÀn
 ? ~((1 << (32 - mlen)) - 1) : 0);

138 
ß
.
sö_addr
.
s_addr
 = 
addr
 & 
mask
.sin_addr.s_addr;

139 
	`IPFW_WLOCK
(
ch
);

140 
ít
 = (
èbÀ_íåy
 *)
∫h
->
	`∫h_dñaddr
(&
ß
, &
mask
,Ñnh);

141 i‡(
ít
 =
NULL
) {

142 
	`IPFW_WUNLOCK
(
ch
);

143  (
ESRCH
);

145 
	`IPFW_WUNLOCK
(
ch
);

146 
	`‰ì
(
ít
, 
M_IPFW_TBL
);

148 
	}
}

151 
	$Êush_èbÀ_íåy
(
ødix_node
 *
∫
, *
¨g
)

153 
ødix_node_hód
 * c⁄° 
∫h
 = 
¨g
;

154 
èbÀ_íåy
 *
ít
;

156 
ít
 = (
èbÀ_íåy
 *)

157 
∫h
->
	`∫h_dñaddr
(
∫
->
∫_key
,Ñn->
∫_mask
,Ñnh);

158 i‡(
ít
 !
NULL
)

159 
	`‰ì
(
ít
, 
M_IPFW_TBL
);

161 
	}
}

164 
	$ùfw_Êush_èbÀ
(
ù_fw_chaö
 *
ch
, 
uöt16_t
 
tbl
)

166 
ødix_node_hód
 *
∫h
;

168 
	`IPFW_WLOCK_ASSERT
(
ch
);

170 i‡(
tbl
 >
IPFW_TABLES_MAX
)

171  (
EINVAL
);

172 
∫h
 = 
ch
->
èbÀs
[
tbl
];

173 
	`KASSERT
(
∫h
 !
NULL
, ("NULL IPFWÅable"));

174 
∫h
->
	`∫h_wÆkåì
‘nh, 
Êush_èbÀ_íåy
,Ñnh);

176 
	}
}

179 
	$ùfw_de°roy_èbÀs
(
ù_fw_chaö
 *
ch
)

181 
uöt16_t
 
tbl
;

182 
ødix_node_hód
 *
∫h
;

184 
	`IPFW_WLOCK_ASSERT
(
ch
);

186 
tbl
 = 0;Åb»< 
IPFW_TABLES_MAX
;Åbl++) {

187 
	`ùfw_Êush_èbÀ
(
ch
, 
tbl
);

188 
∫h
 = 
ch
->
èbÀs
[
tbl
];

189 
	`∫_dëachhód
((**)&
∫h
);

191 
	}
}

194 
	$ùfw_öô_èbÀs
(
ù_fw_chaö
 *
ch
)

196 
i
;

197 
uöt16_t
 
j
;

199 
i
 = 0; i < 
IPFW_TABLES_MAX
; i++) {

200 i‡(!
	`∫_öôhód
((**)&
ch
->
èbÀs
[
i
], 
KEY_OFS
)) {

201 
j
 = 0; j < 
i
; j++) {

202 (Ë
	`ùfw_Êush_èbÀ
(
ch
, 
j
);

204  (
ENOMEM
);

208 
	}
}

211 
	$ùfw_lookup_èbÀ
(
ù_fw_chaö
 *
ch
, 
uöt16_t
 
tbl
, 
ö_addr_t
 
addr
,

212 
uöt32_t
 *
vÆ
)

214 
ødix_node_hód
 *
∫h
;

215 
èbÀ_íåy
 *
ít
;

216 
sockaddr_ö
 
ß
;

218 i‡(
tbl
 >
IPFW_TABLES_MAX
)

220 
∫h
 = 
ch
->
èbÀs
[
tbl
];

221 
	`KEY_LEN
(
ß
) = 8;

222 
ß
.
sö_addr
.
s_addr
 = 
addr
;

223 
ít
 = (
èbÀ_íåy
 *)(
∫h
->
	`∫h_lookup
(&
ß
, 
NULL
,Ñnh));

224 i‡(
ít
 !
NULL
) {

225 *
vÆ
 = 
ít
->
vÆue
;

229 
	}
}

232 
	$cou¡_èbÀ_íåy
(
ødix_node
 *
∫
, *
¨g
)

234 
u_öt32_t
 * c⁄° 
˙t
 = 
¨g
;

236 (*
˙t
)++;

238 
	}
}

241 
	$ùfw_cou¡_èbÀ
(
ù_fw_chaö
 *
ch
, 
uöt32_t
 
tbl
, uöt32_à*
˙t
)

243 
ødix_node_hód
 *
∫h
;

245 i‡(
tbl
 >
IPFW_TABLES_MAX
)

246  (
EINVAL
);

247 
∫h
 = 
ch
->
èbÀs
[
tbl
];

248 *
˙t
 = 0;

249 
∫h
->
	`∫h_wÆkåì
‘nh, 
cou¡_èbÀ_íåy
, 
˙t
);

251 
	}
}

254 
	$dump_èbÀ_íåy
(
ødix_node
 *
∫
, *
¨g
)

256 
èbÀ_íåy
 * c⁄° 
n
 = (èbÀ_íåy *)
∫
;

257 
ùfw_èbÀ
 * c⁄° 
tbl
 = 
¨g
;

258 
ùfw_èbÀ_íåy
 *
ít
;

260 i‡(
tbl
->
˙t
 =tbl->
size
)

262 
ít
 = &
tbl
->ít[tbl->
˙t
];

263 
ít
->
tbl
 =Åbl->tbl;

264 i‡(
	`ö_nuŒho°
(
n
->
mask
.
sö_addr
))

265 
ít
->
maskÀn
 = 0;

267 
ít
->
maskÀn
 = 33 - 
	`ffs
(
	`¡ohl
(
n
->
mask
.
sö_addr
.
s_addr
));

268 
ít
->
addr
 = 
n
->addr.
sö_addr
.
s_addr
;

269 
ít
->
vÆue
 = 
n
->value;

270 
tbl
->
˙t
++;

272 
	}
}

275 
	$ùfw_dump_èbÀ
(
ù_fw_chaö
 *
ch
, 
ùfw_èbÀ
 *
tbl
)

277 
ødix_node_hód
 *
∫h
;

279 i‡(
tbl
->tb»>
IPFW_TABLES_MAX
)

280  (
EINVAL
);

281 
∫h
 = 
ch
->
èbÀs
[
tbl
->tbl];

282 
tbl
->
˙t
 = 0;

283 
∫h
->
	`∫h_wÆkåì
‘nh, 
dump_èbÀ_íåy
, 
tbl
);

285 
	}
}

	@sys/netinet/tcp.h

33 #i‚de‡
_NETINET_TCP_H_


34 
	#_NETINET_TCP_H_


	)

36 
	~<sys/cdefs.h
>

38 
	#__BSD_VISIBLE
 1

	)

40 #i‡
__BSD_VISIBLE


42 
u_öt32_t
 
	tt˝_£q
;

44 
	#t˝6_£q
 
t˝_£q


	)

45 
	#t˝6hdr
 
t˝hdr


	)

51 
	st˝hdr
 {

52 
u_sh‹t
 
	mth_•‹t
;

53 
u_sh‹t
 
	mth_dp‹t
;

54 
t˝_£q
 
	mth_£q
;

55 
t˝_£q
 
	mth_ack
;

56 #i‡
BYTE_ORDER
 =
LITTLE_ENDIAN


57 
u_ch¨
 
	mth_x2
:4,

58 
	mth_off
:4;

60 #i‡
BYTE_ORDER
 =
BIG_ENDIAN


61 
u_ch¨
 
	mth_off
:4,

62 
	mth_x2
:4;

64 
u_ch¨
 
	mth_Êags
;

65 
	#TH_FIN
 0x01

	)

66 
	#TH_SYN
 0x02

	)

67 
	#TH_RST
 0x04

	)

68 
	#TH_PUSH
 0x08

	)

69 
	#TH_ACK
 0x10

	)

70 
	#TH_URG
 0x20

	)

71 
	#TH_ECE
 0x40

	)

72 
	#TH_CWR
 0x80

	)

73 
	#TH_FLAGS
 (
TH_FIN
|
TH_SYN
|
TH_RST
|
TH_PUSH
|
TH_ACK
|
TH_URG
|
TH_ECE
|
TH_CWR
)

	)

74 
	#PRINT_TH_FLAGS
 "\20\1FIN\2SYN\3RST\4PUSH\5ACK\6URG\7ECE\10CWR"

	)

76 
u_sh‹t
 
	mth_wö
;

77 
u_sh‹t
 
	mth_sum
;

78 
u_sh‹t
 
	mth_uΩ
;

81 
	#TCPOPT_EOL
 0

	)

82 
	#TCPOLEN_EOL
 1

	)

83 
	#TCPOPT_PAD
 0

	)

84 
	#TCPOLEN_PAD
 1

	)

85 
	#TCPOPT_NOP
 1

	)

86 
	#TCPOLEN_NOP
 1

	)

87 
	#TCPOPT_MAXSEG
 2

	)

88 
	#TCPOLEN_MAXSEG
 4

	)

89 
	#TCPOPT_WINDOW
 3

	)

90 
	#TCPOLEN_WINDOW
 3

	)

91 
	#TCPOPT_SACK_PERMITTED
 4

	)

92 
	#TCPOLEN_SACK_PERMITTED
 2

	)

93 
	#TCPOPT_SACK
 5

	)

94 
	#TCPOLEN_SACKHDR
 2

	)

95 
	#TCPOLEN_SACK
 8

	)

96 
	#TCPOPT_TIMESTAMP
 8

	)

97 
	#TCPOLEN_TIMESTAMP
 10

	)

98 
	#TCPOLEN_TSTAMP_APPA
 (
TCPOLEN_TIMESTAMP
+2Ë

	)

99 
	#TCPOPT_SIGNATURE
 19

	)

100 
	#TCPOLEN_SIGNATURE
 18

	)

103 
	#MAX_SACK_BLKS
 6

	)

104 
	#TCP_MAX_SACK
 4

	)

113 
	#TCP_MSS
 512

	)

122 
	#TCP_MINMSS
 216

	)

130 
	#TCP6_MSS
 1024

	)

132 
	#TCP_MAXWIN
 65535

	)

133 
	#TTCP_CLIENT_SND_WND
 4096

	)

135 
	#TCP_MAX_WINSHIFT
 14

	)

137 
	#TCP_MAXBURST
 4

	)

139 
	#TCP_MAXHLEN
 (0xf<<2Ë

	)

140 
	#TCP_MAXOLEN
 (
TCP_MAXHLEN
 - (
t˝hdr
))

	)

147 
	#TCP_NODELAY
 0x01

	)

148 #i‡
__BSD_VISIBLE


149 
	#TCP_MAXSEG
 0x02

	)

150 
	#TCP_NOPUSH
 0x04

	)

151 
	#TCP_NOOPT
 0x08

	)

152 
	#TCP_MD5SIG
 0x10

	)

153 
	#TCP_INFO
 0x20

	)

154 
	#TCP_CONGESTION
 0x40

	)

156 
	#TCP_CA_NAME_MAX
 16

	)

158 
	#TCPI_OPT_TIMESTAMPS
 0x01

	)

159 
	#TCPI_OPT_SACK
 0x02

	)

160 
	#TCPI_OPT_WSCALE
 0x04

	)

161 
	#TCPI_OPT_ECN
 0x08

	)

162 
	#TCPI_OPT_TOE
 0x10

	)

176 
	st˝_öfo
 {

177 
u_öt8_t
 
	mt˝i_°©e
;

178 
u_öt8_t
 
	m__t˝i_ˇ_°©e
;

179 
u_öt8_t
 
	m__t˝i_ªå™smôs
;

180 
u_öt8_t
 
	m__t˝i_¥obes
;

181 
u_öt8_t
 
	m__t˝i_backoff
;

182 
u_öt8_t
 
	mt˝i_›ti⁄s
;

183 
u_öt8_t
 
	mt˝i_¢d_wsˇÀ
:4,

184 
	mt˝i_rcv_wsˇÀ
:4;

186 
u_öt32_t
 
	m__t˝i_πo
;

187 
u_öt32_t
 
	m__t˝i_©o
;

188 
u_öt32_t
 
	m__t˝i_¢d_mss
;

189 
u_öt32_t
 
	m__t˝i_rcv_mss
;

191 
u_öt32_t
 
	m__t˝i_u«cked
;

192 
u_öt32_t
 
	m__t˝i_ßcked
;

193 
u_öt32_t
 
	m__t˝i_lo°
;

194 
u_öt32_t
 
	m__t˝i_ªå™s
;

195 
u_öt32_t
 
	m__t˝i_Áckës
;

198 
u_öt32_t
 
	m__t˝i_œ°_d©a_£¡
;

199 
u_öt32_t
 
	m__t˝i_œ°_ack_£¡
;

200 
u_öt32_t
 
	m__t˝i_œ°_d©a_ªcv
;

201 
u_öt32_t
 
	m__t˝i_œ°_ack_ªcv
;

204 
u_öt32_t
 
	m__t˝i_pmtu
;

205 
u_öt32_t
 
	m__t˝i_rcv_s°hªsh
;

206 
u_öt32_t
 
	mt˝i_πt
;

207 
u_öt32_t
 
	mt˝i_πtv¨
;

208 
u_öt32_t
 
	mt˝i_¢d_s°hªsh
;

209 
u_öt32_t
 
	mt˝i_¢d_cwnd
;

210 
u_öt32_t
 
	m__t˝i_advmss
;

211 
u_öt32_t
 
	m__t˝i_ª‹dîög
;

213 
u_öt32_t
 
	m__t˝i_rcv_πt
;

214 
u_öt32_t
 
	mt˝i_rcv_•a˚
;

217 
u_öt32_t
 
	mt˝i_¢d_wnd
;

218 
u_öt32_t
 
	mt˝i_¢d_bwnd
;

219 
u_öt32_t
 
	mt˝i_¢d_nxt
;

220 
u_öt32_t
 
	mt˝i_rcv_nxt
;

221 
u_öt32_t
 
	mt˝i_t€_tid
;

224 
u_öt32_t
 
	m__t˝i_∑d
[29];

	@sys/netinet/tcp_var.h

1 #i‚de‡
_NETINET_TCP_VAR_H_


2 
	#_NETINET_TCP_VAR_H_


	)

3 
	~<√töë/t˝.h
>

	@sys/netinet/udp.h

34 #i‚de‡
_NETINET_UDP_H_


35 
	#_NETINET_UDP_H_


	)

41 
	sudphdr
 {

42 
u_sh‹t
 
	muh_•‹t
;

43 
u_sh‹t
 
	muh_dp‹t
;

44 
u_sh‹t
 
	muh_uÀn
;

45 
u_sh‹t
 
	muh_sum
;

51 
	#UDP_ENCAP
 0x01

	)

58 
	#UDP_ENCAP_ESPINUDP_NON_IKE
 1

	)

59 
	#UDP_ENCAP_ESPINUDP
 2

	)

62 
	#UDP_ENCAP_ESPINUDP_PORT
 500

	)

65 
	#UDP_ENCAP_ESPINUDP_MAXFRAGLEN
 552

	)

	@sys/sys/cdefs.h

1 #i‚de‡
_CDEFS_H_


2 
	#_CDEFS_H_


	)

8 #i‚de‡
__∑cked


9 
	#__∑cked
 
	`__©åibuã__
 ((
__∑cked__
))

	)

12 #i‚de‡
__Æig√d


13 
	#__Æig√d
(
x
Ë
	`__©åibuã__
((
	`__Æig√d__
(x)))

	)

17 
∑nic
(c⁄° *
fmt
, ...);

19 
	#KASSERT
(
exp
,
msg
) do { \

20 i‡(
	`__¥edi˘_Ál£
(!(
exp
))) \

21 
∑nic
 
msg
; \

22 } 0)

	)

25 #i‚de‡
__¥edi˘_Ál£


26 
	#__¥edi˘_Ál£
(
x
Ë(xË

	)

	@sys/sys/kernel.h

4 #i‚de‡
_SYS_KERNEL_H_


5 
	#_SYS_KERNEL_H_


	)

7 
	#SYSINIT
(
a
, 
b
, 
c
, 
d
, 
e
) \

8 *
sysöô_
 ## 
d
 = 
	)
d

9 
	#VNET_SYSINIT
(
a
, 
b
, 
c
, 
d
, 
e
) \

10 *
sysöô_
 ## 
d
 = 
	)
d

11 
	#SYSUNINIT
(
a
, 
b
, 
c
, 
d
, 
e
) \

12 *
sysunöô_
 ## 
d
 = 
	)
d

13 
	#VNET_SYSUNINIT
(
a
, 
b
, 
c
, 
d
, 
e
) \

14 *
sysunöô_
 ## 
d
 = 
	)
d

19 
	esysöô_ñem_‹dî
 {

20 
	mSI_ORDER_FIRST
 = 0x0000000,

21 
	mSI_ORDER_SECOND
 = 0x0000001,

22 
	mSI_ORDER_THIRD
 = 0x0000002,

23 
	mSI_ORDER_MIDDLE
 = 0x1000000,

24 
	mSI_ORDER_ANY
 = 0xfffffff

	@sys/sys/malloc.h

1 #i‚de‡
_SYS_MALLOC_H_


2 
	#_SYS_MALLOC_H_


	)

9 #i‚de‡
_WIN32


23 #i‡!
deföed
 (
LINUX_24
Ë&& 
LINUX_VERSION_CODE
 > 
KERNEL_VERSION
(2,6,22)

24 
	#mÆloc
(
_size
, 
ty≥
, 
Êags
) \

25 ({ vﬁ©ûê
_v
 = 
_size
; 
	`kmÆloc
(_v, 
GFP_ATOMIC
 | 
__GFP_ZERO
); })

	)

28 
	#mÆloc
(
_size
, 
ty≥
, 
Êags
) \

29 ({ 
_s
 = 
_size
; \

30 *
_ªt
 = 
	`kmÆloc
(
_s
, 
GFP_ATOMIC
); \

31 i‡(
_ªt
Ë
	`mem£t
(_ªt, 0, 
_s
); \

32 (
_ªt
); \

33 })

	)

36 
	#ˇŒoc
(
_n
, 
_s
Ë
	`mÆloc
((_¿* _s), 
NULL
, 
GFP_ATOMIC
 | 
__GFP_ZERO
)

	)

37 
	#‰ì
(
_v¨
, 
ty≥
Ë
	`k‰ì
(_v¨)

	)

47 
	#mÆloc
(
_size
, 
_ty≥
, 
_Êags
Ë
	`my_Æloc
(_size)

	)

48 
	#ˇŒoc
(
_size
, 
_ty≥
, 
_Êags
Ë
	`my_Æloc
(_size)

	)

50 *
my_Æloc
(
_size
);

52 
	#‰ì
(
_v¨
, 
ty≥
Ë
	`ExFªePoﬁ
(_v¨)

	)

57 
	#M_NOWAIT
 0x0001

	)

58 
	#M_ZERO
 0x0100

	)

	@sys/sys/mbuf.h

9 #i‚de‡
_SYS_MBUF_H_


10 
	#_SYS_MBUF_H_


	)

12 
	~<sys/mÆloc.h
>

14 
	~<sys/queue.h
>

15 #ifde‡
_KERNEL


24 
	tuma_z⁄e_t
;

26 
	#uma_z¸óã
(
«me
, 
Àn
, 
_3
, 
_4
, 
_5
, 
_6
, 
_7
, 
_8
Ë÷í)

	)

29 
	#uma_z‰ì
(
z⁄e
, 
ôem
Ë
	`‰ì
(ôem, 
M_IPFW
)

	)

30 
	#uma_zÆloc
(
z⁄e
, 
Êags
Ë
	`mÆloc
(z⁄e, 
M_IPFW
, fœgs)

	)

31 
	#uma_zde°roy
(
z⁄e
Ëdÿ{} 0)

	)

37 
	#mtod
(
m
, 
t
Ë(—)((m)->
m_d©a
))

	)

44 
	sm_èg
 {

45 
SLIST_ENTRY
(
m_èg
Ë
	mm_èg_lök
;

46 
u_öt16_t
 
	mm_èg_id
;

47 
u_öt16_t
 
	mm_èg_Àn
;

48 
u_öt32_t
 
	mm_èg_cookõ
;

49 (*
	mm_èg_‰ì
)(
	mm_èg
 *);

52 #i‡
deföed
(
__löux__
Ë|| deföed–
_WIN32
 )

61 
	smbuf
 {

62 
mbuf
 *
	mm_√xt
;

63 
mbuf
 *
	mm_√xçkt
;

64 *
	mm_d©a
;

65 
	mm_Àn
;

66 
	mm_Êags
;

67 #ifde‡
__löux__


68 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,25)

69 
nf_öfo
 *
	mqueue_íåy
;

71 
nf_queue_íåy
 *
	mqueue_íåy
;

74 
	mdúe˘i⁄
;

75 
NDIS_HANDLE
 
	mc⁄ãxt
;

76 
PNDIS_PACKET
 
	mpkt
;

78 
sk_buff
 *
	mm_skb
;

80 #ifde‡
__löux__


81 
√t_devi˚
 *
	mrcvif
;

83 
i‚ë
 *
	mrcvif
;

85 
	mÀn
;

86 
SLIST_HEAD
 (
∑ckë_ègs
, 
m_èg
Ë
	mègs
;

87 } 
	mm_pkthdr
;

90 
	#M_SKIP_FIREWALL
 0x01

	)

91 
	#M_BCAST
 0x02

	)

92 
	#M_MCAST
 0x04

	)

94 
	#M_DONTWAIT
 
M_NOWAIT


	)

101 
__ölöe
 
mbuf
 *
	$m_dup
(
mbuf
 *
m
, 
n
)

103 ()
m
; ()
n
;

104  
NULL
;

105 
	}
};

107 
	#MTAG_ABI_COMPAT
 0

	)

108 
__ölöe
 
m_èg
 *

109 
	$m_èg_föd
(
mbuf
 *
m
, 
ty≥
, 
m_èg
 *
°¨t
)

111 ()
m
; ()
ty≥
; ()
°¨t
;

112  
NULL
;

113 
	}
};

116 
__ölöe
 

117 
	$m_èg_¥ïíd
(
mbuf
 *
m
, 
m_èg
 *
t
)

119 
	`SLIST_INSERT_HEAD
(&
m
->
m_pkthdr
.
ègs
, 
t
, 
m_èg_lök
);

120 
	}
}

125 
__ölöe
 
m_èg
 *

126 
	$m_èg_√xt
(
mbuf
 *
m
, 
m_èg
 *
t
)

129  (
	`SLIST_NEXT
(
t
, 
m_èg_lök
));

130 
	}
}

135 
__ölöe
 
m_èg
 *

136 
	$m_èg_Æloc
(
uöt32_t
 
cookõ
, 
ty≥
, 
Àngth
, 
waô
)

138 
l
 = 
Àngth
 + (
m_èg
);

139 
m_èg
 *
m
 = 
	`mÆloc
(
l
, 0, 
M_NOWAIT
);

140 i‡(
m
) {

141 
	`mem£t
(
m
, 0, 
l
);

142 
m
->
m_èg_id
 = 
ty≥
;

143 
m
->
m_èg_Àn
 = 
Àngth
;

144 
m
->
m_èg_cookõ
 = 
cookõ
;

146  
m
;

147 
	}
};

149 
__ölöe
 
m_èg
 *

150 
	$m_èg_gë
(
ty≥
, 
Àngth
, 
waô
)

152  
	`m_èg_Æloc
(
MTAG_ABI_COMPAT
, 
ty≥
, 
Àngth
, 
waô
);

153 
	}
}

155 
__ölöe
 
m_èg
 *

156 
	$m_èg_fú°
(
mbuf
 *
m
)

158  
	`SLIST_FIRST
(&
m
->
m_pkthdr
.
ègs
);

159 
	}
};

161 
__ölöe
 

162 
	$m_èg_dñëe
(
mbuf
 *
m
, 
m_èg
 *
t
)

164 
	}
};

166 
__ölöe
 
m_èg
 *

167 
	$m_èg_loˇã
(
mbuf
 *
m
, 
u_öt32_t
 
n
, 
x
, 
m_èg
 *
t
)

169 
m_èg
 *
èg
;

171 
èg
 = 
	`m_èg_fú°
(
m
);

172 i‡(
èg
 =
NULL
)

173  
NULL
;

175 i‡(
èg
->
m_èg_cookõ
 !
n
 ||Åag->
m_èg_id
 !
x
)

176  
NULL
;

178  
èg
;

179 
	}
};

181 
	#M_SETFIB
(
_m
, 
_fib
Ë

	)

183 
__ölöe
 

184 
	$m_‰ìm
(
mbuf
 *
m
)

186 
m_èg
 *
t
;

189  (
t
 = 
	`SLIST_FIRST
(&
m
->
m_pkthdr
.
ègs
) ) ) {

190 
	`SLIST_REMOVE_HEAD
(&
m
->
m_pkthdr
.
ègs
, 
m_èg_lök
);

191 
	`‰ì
(
t
, 0);

195 
	`‰ì
(
m
, 
M_IPFW
);

196 
	}
};

200 
	#M_GETFIB
(
_m
Ë0

	)

203 
	#MT_DATA
 1

	)

204 
	#MSIZE
 256

	)

205 
	#MGETHDR
(
_m
, 
_how
, 
_ty≥
Ë((_mË
	`m_gëhdr
((_how), (_ty≥)))

	)

208 
__ölöe
 
mbuf
 *

209 
	$m_gëhdr
(
how
, 
ty≥
)

211 
mbuf
 *
m
;

213 
m
 = 
	`mÆloc
(
MSIZE
, 
M_IPFW
, 
M_NOWAIT
);

215 i‡(
m
 =
NULL
) {

216  
m
;

220 
m
->
m_d©a
 = (*)(m + 1);

222  
m
;

223 
	}
}

239 
	#MTAG_PERSISTENT
 0x800

	)

241 
	#PACKET_TAG_NONE
 0

	)

244 
	#PACKET_TAG_IPSEC_IN_DONE
 1

	)

245 
	#PACKET_TAG_IPSEC_OUT_DONE
 2

	)

246 
	#PACKET_TAG_IPSEC_IN_CRYPTO_DONE
 3

	)

247 
	#PACKET_TAG_IPSEC_OUT_CRYPTO_NEEDED
 4

	)

248 
	#PACKET_TAG_IPSEC_IN_COULD_DO_CRYPTO
 5

	)

249 
	#PACKET_TAG_IPSEC_PENDING_TDB
 6

	)

250 
	#PACKET_TAG_BRIDGE
 7

	)

251 
	#PACKET_TAG_GIF
 8

	)

252 
	#PACKET_TAG_GRE
 9

	)

253 
	#PACKET_TAG_IN_PACKET_CHECKSUM
 10

	)

254 
	#PACKET_TAG_ENCAP
 11

	)

255 
	#PACKET_TAG_IPSEC_SOCKET
 12

	)

256 
	#PACKET_TAG_IPSEC_HISTORY
 13

	)

257 
	#PACKET_TAG_IPV6_INPUT
 14

	)

258 
	#PACKET_TAG_DUMMYNET
 15

	)

259 
	#PACKET_TAG_DIVERT
 17

	)

260 
	#PACKET_TAG_IPFORWARD
 18

	)

261 
	#PACKET_TAG_MACLABEL
 (19 | 
MTAG_PERSISTENT
Ë

	)

262 
	#PACKET_TAG_PF
 21

	)

263 
	#PACKET_TAG_RTSOCKFAM
 25

	)

264 
	#PACKET_TAG_IPOPTIONS
 27

	)

265 
	#PACKET_TAG_CARP
 28

	)

	@sys/sys/module.h

4 #i‚de‡
_SYS_MODULE_H_


5 
	#_SYS_MODULE_H_


	)

6 
moduÀ
 *
	tmoduÀ_t
;

7 (*
	tmodevíth™d_t
)(
	tmoduÀ_t
, , *);

9 
	emodevíây≥
 {

10 
MOD_LOAD
,

11 
MOD_UNLOAD
,

12 
MOD_SHUTDOWN
,

13 
MOD_QUIESCE


14 } 
	tmodevíây≥_t
;

16 
	smoduÀd©a
 {

17 c⁄° *
«me
;

18 
modevíth™d_t
 
evh™d
;

19 *
¥iv
;

20 } 
	tmoduÀd©a_t
;

28 
	#DECLARE_MODULE
(
a
, 
md
, 
c
,
d
) \

29 
moduÀd©a_t
 *
moddesc_
##
a
 = &
md
;

	)

34 
	#MODULE_DEPEND
(
a
,
b
,
c
,
d
,
e
)

	)

35 #i‡
	`deföed
–
__löux__
 ) || deföed–
_WIN32
 )

36 #unde‡
MODULE_VERSION


37 
	#MODULE_VERSION
(
a
,
b
)

	)

	@sys/sys/param.h

1 #i‚de‡
_SYS_PARAM_H_


2 
	#_SYS_PARAM_H_


	)

7 #i‚de‡
LINUX_24


8 
	#NGROUPS
 16

	)

	@sys/sys/queue.h

33 #i‚de‡
_SYS_QUEUE_H_


34 
	#_SYS_QUEUE_H_


	)

103 #ifde‡
QUEUE_MACRO_DEBUG


105 
	sqm_åa˚
 {

106 * 
	mœ°fûe
;

107 
	mœ°löe
;

108 * 
	m¥evfûe
;

109 
	m¥evlöe
;

112 
	#TRACEBUF
 
qm_åa˚
 
åa˚
;

	)

113 
	#TRASHIT
(
x
Ëdÿ{(xË(*)-1;} 0)

	)

115 
	#QMD_TRACE_HEAD
(
hód
) do { \

116 (
hód
)->
åa˚
.
¥evlöe
 = (hód)->åa˚.
œ°löe
; \

117 (
hód
)->
åa˚
.
¥evfûe
 = (hód)->åa˚.
œ°fûe
; \

118 (
hód
)->
åa˚
.
œ°löe
 = 
__LINE__
; \

119 (
hód
)->
åa˚
.
œ°fûe
 = 
__FILE__
; \

120 } 0)

	)

122 
	#QMD_TRACE_ELEM
(
ñem
) do { \

123 (
ñem
)->
åa˚
.
¥evlöe
 = (ñem)->åa˚.
œ°löe
; \

124 (
ñem
)->
åa˚
.
¥evfûe
 = (ñem)->åa˚.
œ°fûe
; \

125 (
ñem
)->
åa˚
.
œ°löe
 = 
__LINE__
; \

126 (
ñem
)->
åa˚
.
œ°fûe
 = 
__FILE__
; \

127 } 0)

	)

130 
	#QMD_TRACE_ELEM
(
ñem
)

	)

131 
	#QMD_TRACE_HEAD
(
hód
)

	)

132 
	#TRACEBUF


	)

133 
	#TRASHIT
(
x
)

	)

139 
	#SLIST_HEAD
(
«me
, 
ty≥
) \

140 
	s«me
 { \

141 
ty≥
 *
¶h_fú°
; \

142 }

	)

144 
	#SLIST_HEAD_INITIALIZER
(
hód
) \

145 { 
NULL
 }

	)

147 #i‡
deföed
–
_WIN32
 ) && deföed(
SLIST_ENTRY
)

148 #unde‡
SLIST_ENTRY


150 
	#SLIST_ENTRY
(
ty≥
) \

152 
ty≥
 *
¶e_√xt
; \

153 }

	)

158 
	#SLIST_EMPTY
(
hód
Ë((hód)->
¶h_fú°
 =
NULL
)

	)

160 
	#SLIST_FIRST
(
hód
Ë((hód)->
¶h_fú°
)

	)

162 
	#SLIST_FOREACH
(
v¨
, 
hód
, 
fõld
) \

163 (
v¨
Ë
	`SLIST_FIRST
((
hód
)); \

164 (
v¨
); \

165 (
v¨
Ë
	`SLIST_NEXT
((v¨), 
fõld
))

	)

167 
	#SLIST_FOREACH_SAFE
(
v¨
, 
hód
, 
fõld
, 
tv¨
) \

168 (
v¨
Ë
	`SLIST_FIRST
((
hód
)); \

169 (
v¨
Ë&& ((
tv¨
Ë
	`SLIST_NEXT
((v¨), 
fõld
), 1); \

170 (
v¨
Ë(
tv¨
))

	)

172 
	#SLIST_FOREACH_PREVPTR
(
v¨
, 
v¨p
, 
hód
, 
fõld
) \

173 (
v¨p
Ë&
	`SLIST_FIRST
((
hód
)); \

174 ((
v¨
Ë*(
v¨p
)Ë!
NULL
; \

175 (
v¨p
Ë&
	`SLIST_NEXT
((
v¨
), 
fõld
))

	)

177 
	#SLIST_INIT
(
hód
) do { \

178 
	`SLIST_FIRST
((
hód
)Ë
NULL
; \

179 } 0)

	)

181 
	#SLIST_INSERT_AFTER
(
¶i°ñm
, 
ñm
, 
fõld
) do { \

182 
	`SLIST_NEXT
((
ñm
), 
fõld
ËSLIST_NEXT((
¶i°ñm
), field); \

183 
	`SLIST_NEXT
((
¶i°ñm
), 
fõld
Ë(
ñm
); \

184 } 0)

	)

186 
	#SLIST_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

187 
	`SLIST_NEXT
((
ñm
), 
fõld
Ë
	`SLIST_FIRST
((
hód
)); \

188 
	`SLIST_FIRST
((
hód
)Ë(
ñm
); \

189 } 0)

	)

191 
	#SLIST_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
¶e_√xt
)

	)

193 
	#SLIST_REMOVE
(
hód
, 
ñm
, 
ty≥
, 
fõld
) do { \

194 i‡(
	`SLIST_FIRST
((
hód
)Ë=(
ñm
)) { \

195 
	`SLIST_REMOVE_HEAD
((
hód
), 
fõld
); \

198 
ty≥
 *
cuªlm
 = 
	`SLIST_FIRST
((
hód
)); \

199 
	`SLIST_NEXT
(
cuªlm
, 
fõld
Ë!(
ñm
)) \

200 
cuªlm
 = 
	`SLIST_NEXT
(cuªlm, 
fõld
); \

201 
	`SLIST_NEXT
(
cuªlm
, 
fõld
) = \

202 
	`SLIST_NEXT
(SLIST_NEXT(
cuªlm
, 
fõld
), field); \

204 
	`TRASHIT
((
ñm
)->
fõld
.
¶e_√xt
); \

205 } 0)

	)

207 
	#SLIST_REMOVE_HEAD
(
hód
, 
fõld
) do { \

208 
	`SLIST_FIRST
((
hód
)Ë
	`SLIST_NEXT
(SLIST_FIRST((hód)), 
fõld
); \

209 } 0)

	)

214 
	#STAILQ_HEAD
(
«me
, 
ty≥
) \

215 
	s«me
 { \

216 
ty≥
 *
°qh_fú°
; \

217 
ty≥
 **
°qh_œ°
; \

218 }

	)

220 
	#STAILQ_HEAD_INITIALIZER
(
hód
) \

221 { 
NULL
, &(
hód
).
°qh_fú°
 }

	)

223 
	#STAILQ_ENTRY
(
ty≥
) \

225 
ty≥
 *
°qe_√xt
; \

226 }

	)

231 
	#STAILQ_CONCAT
(
hód1
, 
hód2
) do { \

232 i‡(!
	`STAILQ_EMPTY
((
hód2
))) { \

233 *(
hód1
)->
°qh_œ°
 = (
hód2
)->
°qh_fú°
; \

234 (
hód1
)->
°qh_œ°
 = (
hód2
)->stqh_last; \

235 
	`STAILQ_INIT
((
hód2
)); \

237 } 0)

	)

239 
	#STAILQ_EMPTY
(
hód
Ë((hód)->
°qh_fú°
 =
NULL
)

	)

241 
	#STAILQ_FIRST
(
hód
Ë((hód)->
°qh_fú°
)

	)

243 
	#STAILQ_FOREACH
(
v¨
, 
hód
, 
fõld
) \

244 (
v¨
Ë
	`STAILQ_FIRST
((
hód
)); \

245 (
v¨
); \

246 (
v¨
Ë
	`STAILQ_NEXT
((v¨), 
fõld
))

	)

249 
	#STAILQ_FOREACH_SAFE
(
v¨
, 
hód
, 
fõld
, 
tv¨
) \

250 (
v¨
Ë
	`STAILQ_FIRST
((
hód
)); \

251 (
v¨
Ë&& ((
tv¨
Ë
	`STAILQ_NEXT
((v¨), 
fõld
), 1); \

252 (
v¨
Ë(
tv¨
))

	)

254 
	#STAILQ_INIT
(
hód
) do { \

255 
	`STAILQ_FIRST
((
hód
)Ë
NULL
; \

256 (
hód
)->
°qh_œ°
 = &
	`STAILQ_FIRST
((head)); \

257 } 0)

	)

259 
	#STAILQ_INSERT_AFTER
(
hód
, 
tqñm
, 
ñm
, 
fõld
) do { \

260 i‡((
	`STAILQ_NEXT
((
ñm
), 
fõld
ËSTAILQ_NEXT((
tqñm
), fõld)Ë=
NULL
)\

261 (
hód
)->
°qh_œ°
 = &
	`STAILQ_NEXT
((
ñm
), 
fõld
); \

262 
	`STAILQ_NEXT
((
tqñm
), 
fõld
Ë(
ñm
); \

263 } 0)

	)

265 
	#STAILQ_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

266 i‡((
	`STAILQ_NEXT
((
ñm
), 
fõld
Ë
	`STAILQ_FIRST
((
hód
))Ë=
NULL
) \

267 (
hód
)->
°qh_œ°
 = &
	`STAILQ_NEXT
((
ñm
), 
fõld
); \

268 
	`STAILQ_FIRST
((
hód
)Ë(
ñm
); \

269 } 0)

	)

271 
	#STAILQ_INSERT_TAIL
(
hód
, 
ñm
, 
fõld
) do { \

272 
	`STAILQ_NEXT
((
ñm
), 
fõld
Ë
NULL
; \

273 *(
hód
)->
°qh_œ°
 = (
ñm
); \

274 (
hód
)->
°qh_œ°
 = &
	`STAILQ_NEXT
((
ñm
), 
fõld
); \

275 } 0)

	)

277 
	#STAILQ_LAST
(
hód
, 
ty≥
, 
fõld
) \

278 (
	`STAILQ_EMPTY
((
hód
)) ? \

279 
NULL
 : \

280 ((
ty≥
 *)(*) \

281 ((*)((
hód
)->
°qh_œ°
Ë- 
	`__off£tof
(
ty≥
, 
fõld
))))

	)

283 
	#STAILQ_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
°qe_√xt
)

	)

285 
	#STAILQ_REMOVE
(
hód
, 
ñm
, 
ty≥
, 
fõld
) do { \

286 i‡(
	`STAILQ_FIRST
((
hód
)Ë=(
ñm
)) { \

287 
	`STAILQ_REMOVE_HEAD
((
hód
), 
fõld
); \

290 
ty≥
 *
cuªlm
 = 
	`STAILQ_FIRST
((
hód
)); \

291 
	`STAILQ_NEXT
(
cuªlm
, 
fõld
Ë!(
ñm
)) \

292 
cuªlm
 = 
	`STAILQ_NEXT
(cuªlm, 
fõld
); \

293 i‡((
	`STAILQ_NEXT
(
cuªlm
, 
fõld
) = \

294 
	`STAILQ_NEXT
(STAILQ_NEXT(
cuªlm
, 
fõld
), fõld)Ë=
NULL
)\

295 (
hód
)->
°qh_œ°
 = &
	`STAILQ_NEXT
((
cuªlm
), 
fõld
);\

297 
	`TRASHIT
((
ñm
)->
fõld
.
°qe_√xt
); \

298 } 0)

	)

300 
	#STAILQ_REMOVE_HEAD
(
hód
, 
fõld
) do { \

301 i‡((
	`STAILQ_FIRST
((
hód
)) = \

302 
	`STAILQ_NEXT
(
	`STAILQ_FIRST
((
hód
)), 
fõld
)Ë=
NULL
) \

303 (
hód
)->
°qh_œ°
 = &
	`STAILQ_FIRST
((head)); \

304 } 0)

	)

306 #i‚de‡
LIST_HEAD


310 
	#LIST_HEAD
(
«me
, 
ty≥
) \

311 
	s«me
 { \

312 
ty≥
 *
lh_fú°
; \

313 }

	)

315 
	#LIST_HEAD_INITIALIZER
(
hód
) \

316 { 
NULL
 }

	)

318 
	#LIST_ENTRY
(
ty≥
) \

320 
ty≥
 *
À_√xt
; \

321 
ty≥
 **
À_¥ev
; \

322 }

	)

328 #i‡(
deföed
(
_KERNEL
Ë&& deföed(
INVARIANTS
))

329 
	#QMD_LIST_CHECK_HEAD
(
hód
, 
fõld
) do { \

330 i‡(
	`LIST_FIRST
((
hód
)Ë!
NULL
 && \

331 
	`LIST_FIRST
((
hód
))->
fõld
.
À_¥ev
 != \

332 &
	`LIST_FIRST
((
hód
))) \

333 
	`∑nic
("BadÜi° hód %∞fú°->¥ev !hód", (
hód
)); \

334 } 0)

	)

336 
	#QMD_LIST_CHECK_NEXT
(
ñm
, 
fõld
) do { \

337 i‡(
	`LIST_NEXT
((
ñm
), 
fõld
Ë!
NULL
 && \

338 
	`LIST_NEXT
((
ñm
), 
fõld
)->fõld.
À_¥ev
 != \

339 &((
ñm
)->
fõld
.
À_√xt
)) \

340 
	`∑nic
("BadÜökÉlm %∞√xt->¥ev !ñm", (
ñm
)); \

341 } 0)

	)

343 
	#QMD_LIST_CHECK_PREV
(
ñm
, 
fõld
) do { \

344 i‡(*(
ñm
)->
fõld
.
À_¥ev
 != (elm)) \

345 
	`∑nic
("BadÜökÉlm %∞¥ev->√xà!ñm", (
ñm
)); \

346 } 0)

	)

348 
	#QMD_LIST_CHECK_HEAD
(
hód
, 
fõld
)

	)

349 
	#QMD_LIST_CHECK_NEXT
(
ñm
, 
fõld
)

	)

350 
	#QMD_LIST_CHECK_PREV
(
ñm
, 
fõld
)

	)

353 
	#LIST_EMPTY
(
hód
Ë((hód)->
lh_fú°
 =
NULL
)

	)

355 
	#LIST_FIRST
(
hód
Ë((hód)->
lh_fú°
)

	)

357 
	#LIST_FOREACH
(
v¨
, 
hód
, 
fõld
) \

358 (
v¨
Ë
	`LIST_FIRST
((
hód
)); \

359 (
v¨
); \

360 (
v¨
Ë
	`LIST_NEXT
((v¨), 
fõld
))

	)

362 
	#LIST_FOREACH_SAFE
(
v¨
, 
hód
, 
fõld
, 
tv¨
) \

363 (
v¨
Ë
	`LIST_FIRST
((
hód
)); \

364 (
v¨
Ë&& ((
tv¨
Ë
	`LIST_NEXT
((v¨), 
fõld
), 1); \

365 (
v¨
Ë(
tv¨
))

	)

367 
	#LIST_INIT
(
hód
) do { \

368 
	`LIST_FIRST
((
hód
)Ë
NULL
; \

369 } 0)

	)

371 
	#LIST_INSERT_AFTER
(
li°ñm
, 
ñm
, 
fõld
) do { \

372 
	`QMD_LIST_CHECK_NEXT
(
li°ñm
, 
fõld
); \

373 i‡((
	`LIST_NEXT
((
ñm
), 
fõld
ËLIST_NEXT((
li°ñm
), fõld)Ë!
NULL
)\

374 
	`LIST_NEXT
((
li°ñm
), 
fõld
)->fõld.
À_¥ev
 = \

375 &
	`LIST_NEXT
((
ñm
), 
fõld
); \

376 
	`LIST_NEXT
((
li°ñm
), 
fõld
Ë(
ñm
); \

377 (
ñm
)->
fõld
.
À_¥ev
 = &
	`LIST_NEXT
((
li°ñm
), field); \

378 } 0)

	)

380 
	#LIST_INSERT_BEFORE
(
li°ñm
, 
ñm
, 
fõld
) do { \

381 
	`QMD_LIST_CHECK_PREV
(
li°ñm
, 
fõld
); \

382 (
ñm
)->
fõld
.
À_¥ev
 = (
li°ñm
)->field.le_prev; \

383 
	`LIST_NEXT
((
ñm
), 
fõld
Ë(
li°ñm
); \

384 *(
li°ñm
)->
fõld
.
À_¥ev
 = (
ñm
); \

385 (
li°ñm
)->
fõld
.
À_¥ev
 = &
	`LIST_NEXT
((
ñm
), field); \

386 } 0)

	)

388 
	#LIST_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

389 
	`QMD_LIST_CHECK_HEAD
((
hód
), 
fõld
); \

390 i‡((
	`LIST_NEXT
((
ñm
), 
fõld
Ë
	`LIST_FIRST
((
hód
))Ë!
NULL
) \

391 
	`LIST_FIRST
((
hód
))->
fõld
.
À_¥ev
 = &
	`LIST_NEXT
((
ñm
), field);\

392 
	`LIST_FIRST
((
hód
)Ë(
ñm
); \

393 (
ñm
)->
fõld
.
À_¥ev
 = &
	`LIST_FIRST
((
hód
)); \

394 } 0)

	)

396 
	#LIST_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
À_√xt
)

	)

398 
	#LIST_REMOVE
(
ñm
, 
fõld
) do { \

399 
	`QMD_LIST_CHECK_NEXT
(
ñm
, 
fõld
); \

400 
	`QMD_LIST_CHECK_PREV
(
ñm
, 
fõld
); \

401 i‡(
	`LIST_NEXT
((
ñm
), 
fõld
Ë!
NULL
) \

402 
	`LIST_NEXT
((
ñm
), 
fõld
)->fõld.
À_¥ev
 = \

403 (
ñm
)->
fõld
.
À_¥ev
; \

404 *(
ñm
)->
fõld
.
À_¥ev
 = 
	`LIST_NEXT
((elm), field); \

405 
	`TRASHIT
((
ñm
)->
fõld
.
À_√xt
); \

406 
	`TRASHIT
((
ñm
)->
fõld
.
À_¥ev
); \

407 } 0)

	)

413 
	#TAILQ_HEAD
(
«me
, 
ty≥
) \

414 
	s«me
 { \

415 
ty≥
 *
tqh_fú°
; \

416 
ty≥
 **
tqh_œ°
; \

417 
TRACEBUF
 \

418 }

	)

420 
	#TAILQ_HEAD_INITIALIZER
(
hód
) \

421 { 
NULL
, &(
hód
).
tqh_fú°
 }

	)

423 
	#TAILQ_ENTRY
(
ty≥
) \

425 
ty≥
 *
tqe_√xt
; \

426 
ty≥
 **
tqe_¥ev
; \

427 
TRACEBUF
 \

428 }

	)

433 #i‡(
deföed
(
_KERNEL
Ë&& deföed(
INVARIANTS
))

434 
	#QMD_TAILQ_CHECK_HEAD
(
hód
, 
fõld
) do { \

435 i‡(!
	`TAILQ_EMPTY
(
hód
) && \

436 
	`TAILQ_FIRST
((
hód
))->
fõld
.
tqe_¥ev
 != \

437 &
	`TAILQ_FIRST
((
hód
))) \

438 
	`∑nic
("BadÅaûq hód %∞fú°->¥ev !hód", (
hód
)); \

439 } 0)

	)

441 
	#QMD_TAILQ_CHECK_TAIL
(
hód
, 
fõld
) do { \

442 i‡(*(
hód
)->
tqh_œ°
 !
NULL
) \

443 
	`∑nic
("BadÅaûq NEXT(%p->tqh_œ°Ë!NULL", (
hód
)); \

444 } 0)

	)

446 
	#QMD_TAILQ_CHECK_NEXT
(
ñm
, 
fõld
) do { \

447 i‡(
	`TAILQ_NEXT
((
ñm
), 
fõld
Ë!
NULL
 && \

448 
	`TAILQ_NEXT
((
ñm
), 
fõld
)->fõld.
tqe_¥ev
 != \

449 &((
ñm
)->
fõld
.
tqe_√xt
)) \

450 
	`∑nic
("BadÜökÉlm %∞√xt->¥ev !ñm", (
ñm
)); \

451 } 0)

	)

453 
	#QMD_TAILQ_CHECK_PREV
(
ñm
, 
fõld
) do { \

454 i‡(*(
ñm
)->
fõld
.
tqe_¥ev
 != (elm)) \

455 
	`∑nic
("BadÜökÉlm %∞¥ev->√xà!ñm", (
ñm
)); \

456 } 0)

	)

458 
	#QMD_TAILQ_CHECK_HEAD
(
hód
, 
fõld
)

	)

459 
	#QMD_TAILQ_CHECK_TAIL
(
hód
, 
hód«me
)

	)

460 
	#QMD_TAILQ_CHECK_NEXT
(
ñm
, 
fõld
)

	)

461 
	#QMD_TAILQ_CHECK_PREV
(
ñm
, 
fõld
)

	)

464 
	#TAILQ_CONCAT
(
hód1
, 
hód2
, 
fõld
) do { \

465 i‡(!
	`TAILQ_EMPTY
(
hód2
)) { \

466 *(
hód1
)->
tqh_œ°
 = (
hód2
)->
tqh_fú°
; \

467 (
hód2
)->
tqh_fú°
->
fõld
.
tqe_¥ev
 = (
hód1
)->
tqh_œ°
; \

468 (
hód1
)->
tqh_œ°
 = (
hód2
)->tqh_last; \

469 
	`TAILQ_INIT
((
hód2
)); \

470 
	`QMD_TRACE_HEAD
(
hód1
); \

471 
	`QMD_TRACE_HEAD
(
hód2
); \

473 } 0)

	)

475 
	#TAILQ_EMPTY
(
hód
Ë((hód)->
tqh_fú°
 =
NULL
)

	)

477 
	#TAILQ_FIRST
(
hód
Ë((hód)->
tqh_fú°
)

	)

479 
	#TAILQ_FOREACH
(
v¨
, 
hód
, 
fõld
) \

480 (
v¨
Ë
	`TAILQ_FIRST
((
hód
)); \

481 (
v¨
); \

482 (
v¨
Ë
	`TAILQ_NEXT
((v¨), 
fõld
))

	)

484 
	#TAILQ_FOREACH_SAFE
(
v¨
, 
hód
, 
fõld
, 
tv¨
) \

485 (
v¨
Ë
	`TAILQ_FIRST
((
hód
)); \

486 (
v¨
Ë&& ((
tv¨
Ë
	`TAILQ_NEXT
((v¨), 
fõld
), 1); \

487 (
v¨
Ë(
tv¨
))

	)

489 
	#TAILQ_FOREACH_REVERSE
(
v¨
, 
hód
, 
hód«me
, 
fõld
) \

490 (
v¨
Ë
	`TAILQ_LAST
((
hód
), 
hód«me
); \

491 (
v¨
); \

492 (
v¨
Ë
	`TAILQ_PREV
((v¨), 
hód«me
, 
fõld
))

	)

494 
	#TAILQ_FOREACH_REVERSE_SAFE
(
v¨
, 
hód
, 
hód«me
, 
fõld
, 
tv¨
) \

495 (
v¨
Ë
	`TAILQ_LAST
((
hód
), 
hód«me
); \

496 (
v¨
Ë&& ((
tv¨
Ë
	`TAILQ_PREV
((v¨), 
hód«me
, 
fõld
), 1); \

497 (
v¨
Ë(
tv¨
))

	)

499 
	#TAILQ_INIT
(
hód
) do { \

500 
	`TAILQ_FIRST
((
hód
)Ë
NULL
; \

501 (
hód
)->
tqh_œ°
 = &
	`TAILQ_FIRST
((head)); \

502 
	`QMD_TRACE_HEAD
(
hód
); \

503 } 0)

	)

505 
	#TAILQ_INSERT_AFTER
(
hód
, 
li°ñm
, 
ñm
, 
fõld
) do { \

506 
	`QMD_TAILQ_CHECK_NEXT
(
li°ñm
, 
fõld
); \

507 i‡((
	`TAILQ_NEXT
((
ñm
), 
fõld
ËTAILQ_NEXT((
li°ñm
), fõld)Ë!
NULL
)\

508 
	`TAILQ_NEXT
((
ñm
), 
fõld
)->fõld.
tqe_¥ev
 = \

509 &
	`TAILQ_NEXT
((
ñm
), 
fõld
); \

511 (
hód
)->
tqh_œ°
 = &
	`TAILQ_NEXT
((
ñm
), 
fõld
); \

512 
	`QMD_TRACE_HEAD
(
hód
); \

514 
	`TAILQ_NEXT
((
li°ñm
), 
fõld
Ë(
ñm
); \

515 (
ñm
)->
fõld
.
tqe_¥ev
 = &
	`TAILQ_NEXT
((
li°ñm
), field); \

516 
	`QMD_TRACE_ELEM
(&(
ñm
)->
fõld
); \

517 
	`QMD_TRACE_ELEM
(&
li°ñm
->
fõld
); \

518 } 0)

	)

520 
	#TAILQ_INSERT_BEFORE
(
li°ñm
, 
ñm
, 
fõld
) do { \

521 
	`QMD_TAILQ_CHECK_PREV
(
li°ñm
, 
fõld
); \

522 (
ñm
)->
fõld
.
tqe_¥ev
 = (
li°ñm
)->field.tqe_prev; \

523 
	`TAILQ_NEXT
((
ñm
), 
fõld
Ë(
li°ñm
); \

524 *(
li°ñm
)->
fõld
.
tqe_¥ev
 = (
ñm
); \

525 (
li°ñm
)->
fõld
.
tqe_¥ev
 = &
	`TAILQ_NEXT
((
ñm
), field); \

526 
	`QMD_TRACE_ELEM
(&(
ñm
)->
fõld
); \

527 
	`QMD_TRACE_ELEM
(&
li°ñm
->
fõld
); \

528 } 0)

	)

530 
	#TAILQ_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

531 
	`QMD_TAILQ_CHECK_HEAD
(
hód
, 
fõld
); \

532 i‡((
	`TAILQ_NEXT
((
ñm
), 
fõld
Ë
	`TAILQ_FIRST
((
hód
))Ë!
NULL
) \

533 
	`TAILQ_FIRST
((
hód
))->
fõld
.
tqe_¥ev
 = \

534 &
	`TAILQ_NEXT
((
ñm
), 
fõld
); \

536 (
hód
)->
tqh_œ°
 = &
	`TAILQ_NEXT
((
ñm
), 
fõld
); \

537 
	`TAILQ_FIRST
((
hód
)Ë(
ñm
); \

538 (
ñm
)->
fõld
.
tqe_¥ev
 = &
	`TAILQ_FIRST
((
hód
)); \

539 
	`QMD_TRACE_HEAD
(
hód
); \

540 
	`QMD_TRACE_ELEM
(&(
ñm
)->
fõld
); \

541 } 0)

	)

543 
	#TAILQ_INSERT_TAIL
(
hód
, 
ñm
, 
fõld
) do { \

544 
	`QMD_TAILQ_CHECK_TAIL
(
hód
, 
fõld
); \

545 
	`TAILQ_NEXT
((
ñm
), 
fõld
Ë
NULL
; \

546 (
ñm
)->
fõld
.
tqe_¥ev
 = (
hód
)->
tqh_œ°
; \

547 *(
hód
)->
tqh_œ°
 = (
ñm
); \

548 (
hód
)->
tqh_œ°
 = &
	`TAILQ_NEXT
((
ñm
), 
fõld
); \

549 
	`QMD_TRACE_HEAD
(
hód
); \

550 
	`QMD_TRACE_ELEM
(&(
ñm
)->
fõld
); \

551 } 0)

	)

553 
	#TAILQ_LAST
(
hód
, 
hód«me
) \

554 (*(((
hód«me
 *)((
hód
)->
tqh_œ°
))->tqh_œ°))

	)

556 
	#TAILQ_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
tqe_√xt
)

	)

558 
	#TAILQ_PREV
(
ñm
, 
hód«me
, 
fõld
) \

559 (*(((
hód«me
 *)((
ñm
)->
fõld
.
tqe_¥ev
))->
tqh_œ°
))

	)

561 
	#TAILQ_REMOVE
(
hód
, 
ñm
, 
fõld
) do { \

562 
	`QMD_TAILQ_CHECK_NEXT
(
ñm
, 
fõld
); \

563 
	`QMD_TAILQ_CHECK_PREV
(
ñm
, 
fõld
); \

564 i‡((
	`TAILQ_NEXT
((
ñm
), 
fõld
)Ë!
NULL
) \

565 
	`TAILQ_NEXT
((
ñm
), 
fõld
)->fõld.
tqe_¥ev
 = \

566 (
ñm
)->
fõld
.
tqe_¥ev
; \

568 (
hód
)->
tqh_œ°
 = (
ñm
)->
fõld
.
tqe_¥ev
; \

569 
	`QMD_TRACE_HEAD
(
hód
); \

571 *(
ñm
)->
fõld
.
tqe_¥ev
 = 
	`TAILQ_NEXT
((elm), field); \

572 
	`TRASHIT
((
ñm
)->
fõld
.
tqe_√xt
); \

573 
	`TRASHIT
((
ñm
)->
fõld
.
tqe_¥ev
); \

574 
	`QMD_TRACE_ELEM
(&(
ñm
)->
fõld
); \

575 } 0)

	)

578 #ifde‡
_KERNEL


585 
	squehód
 {

586 
quehód
 *
	mqh_lök
;

587 
quehód
 *
	mqh_æök
;

590 #ifde‡
__CC_SUPPORTS___INLINE


592 
__ölöe
 

593 
	$ösque
(*
a
, *
b
)

595 
quehód
 *
ñemít
 = (quehód *)
a
,

596 *
hód
 = (
quehód
 *)
b
;

598 
ñemít
->
qh_lök
 = 
hód
->qh_link;

599 
ñemít
->
qh_æök
 = 
hód
;

600 
hód
->
qh_lök
 = 
ñemít
;

601 
ñemít
->
qh_lök
->
qh_æök
 =Élement;

602 
	}
}

604 
__ölöe
 

605 
	$ªmque
(*
a
)

607 
quehód
 *
ñemít
 = (quehód *)
a
;

609 
ñemít
->
qh_lök
->
qh_æök
 =Élement->qh_rlink;

610 
ñemít
->
qh_æök
->
qh_lök
 =Élement->qh_link;

611 
ñemít
->
qh_æök
 = 0;

612 
	}
}

616 
ösque
(*
a
, *
b
);

617 
ªmque
(*
a
);

	@sys/sys/syslog.h

1 #i‚de‡
_SYS_SYSLOG_H_


2 
	#_SYS_SYSLOG_H_


	)

4 
	#LOG_SECURITY
 0

	)

5 
	#LOG_NOTICE
 0

	)

6 
	#LOG_DEBUG
 0

	)

	@sys/sys/systm.h

1 #i‚de‡
_SYS_SYSTM_H_


2 
	#_SYS_SYSTM_H_


	)

4 
	#CALLOUT_ACTIVE
 0x0002

	)

5 
	#CALLOUT_MPSAFE
 0x0008

	)

7 #i‚de‡
_WIN32


12 
	~<löux/timî.h
>

13 #ifde‡
LINUX_24


14 
	~<löux/sched.h
>

16 
	#ˇŒout
 
timî_li°


	)

17 
__ölöe
 

18 
ˇŒout_ª£t_⁄
(
ˇŒout
 *
co
, 
ticks
, (*
‚
)(*), *
¨g
, 
˝u
)

20 
co
->
expúes
 = 
jiffõs
 + 
ticks
;

21 
co
->
fun˘i⁄
 = ((*)())
‚
;

22 
co
->
d©a
 = ()
¨g
;

28 
	`add_timî
(
co
);

30 
	}
}

32 
	#ˇŒout_öô
(
co
, 
ß„
Ë
	`öô_timî
(co)

	)

33 
	#ˇŒout_døö
(
co
Ë
	`dñ_timî
(co)

	)

34 
	#ˇŒout_°›
(
co
Ë
	`dñ_timî
(co)

	)

37 
	~<ndis.h
>

40 
	sˇŒout
 {

41 
KTIMER
 
	mthëimî
;

42 
KDPC
 
	mtimîdpc
;

43 
	mdpcöôülized
;

44 
LARGE_INTEGER
 
	mduëime
;

47 
dummy√t
 (*);

48 
VOID
 
dummy√t_dpc
(

49 
__ö
 
_KDPC
 *
Dpc
,

50 
__ö_›t
 
PVOID
 
De„ºedC⁄ãxt
,

51 
__ö_›t
 
PVOID
 
Sy°emArgumít1
,

52 
__ö_›t
 
PVOID
 
Sy°emArgumít2


55 
VOID
 
ùfw_dpc
(

56 
__ö
 
_KDPC
 *
Dpc
,

57 
__ö_›t
 
PVOID
 
De„ºedC⁄ãxt
,

58 
__ö_›t
 
PVOID
 
Sy°emArgumít1
,

59 
__ö_›t
 
PVOID
 
Sy°emArgumít2


78 
__ölöe
 

79 
ˇŒout_ª£t_⁄
(
ˇŒout
 *
co
, 
ticks
, (*
‚
)(*), *
¨g
, 
˝u
)

81 if(
‚
 =&
dummy√t
)

83 if(
co
->
dpcöôülized
 == 0)

85 
	`KeInôülizeDpc
(&
co
->
timîdpc
, 
dummy√t_dpc
, 
NULL
);

86 
	`KeSëT¨gëPro˚ss‹Dpc
(&
co
->
timîdpc
, 
˝u
);

87 
co
->
dpcöôülized
 = 1;

92 
	`KeInôülizeDpc
(&
co
->
timîdpc
, 
ùfw_dpc
, 
¨g
);

94 
co
->
duëime
.
QuadP¨t
 = (-
ticks
)*10000;

95 
	`KeSëTimî
(&
co
->
thëimî
, co->
duëime
, &co->
timîdpc
);

97 
	}
}

99 
__ölöe
 

100 
	$ˇŒout_öô
(
ˇŒout
* 
co
, 
ß„
)

102 
	`¥ötf
("%s: inôülizögÅimîáà%p\n",
__FUNCTION__
,
co
);

103 
	`KeInôülizeTimî
(&
co
->
thëimî
);

104 
	}
}

106 
__ölöe
 

107 
	$ˇŒout_døö
(
ˇŒout
* 
co
)

109 
BOOLEAN
 
ˇn˚Àd
 = 
	`KeC™˚lTimî
(&
co
->
thëimî
);

110 
ˇn˚Àd
 !
TRUE
)

112 
ˇn˚Àd
 = 
	`KeC™˚lTimî
(&
co
->
thëimî
);

114 
	`¥ötf
("%s: st›pögÅimîáà%p\n",
__FUNCTION__
,
co
);

116 
	}
}

118 
__ölöe
 

119 
	$ˇŒout_°›
(
ˇŒout
* 
co
)

121  
	`ˇŒout_døö
(
co
);

122 
	}
}

	@sys/sys/taskqueue.h

1 #i‚de‡
_SYS_TASKQUEUE_H_


2 
	#_SYS_TASKQUEUE_H_


	)

8 #ifde‡
_WIN32


9 
	sèsk
 {

10 (*
	mfunc
)(*, );

12 
	#èskqueue_íqueue
(
tq
, 
è
Ë—a)->
	`func
(
NULL
,1)

	)

13 
	#TASK_INIT
(
a
,
b
,
c
,
d
) do { \

14 (
a
)->
func
 = (
c
); } 0)

	)

16 
	sèsk
 {

17 (*
	mfunc
)();

19 
	#èskqueue_íqueue
(
tq
, 
è
Ë—a)->
	`func
()

	)

20 
	#TASK_INIT
(
a
,
b
,
c
,
d
) do { \

21 (
a
)->
func
 = ((*)())
c
; } 0)

	)

24 
	#èskqueue_¸óã_Á°
(
_a
, 
_b
, 
_c
, 
_d
Ë
NULL


	)

25 
	#èskqueue_°¨t_thªads
(
_a
, 
_b
, 
_c
, 
_d
)

	)

27 
	#èskqueue_døö
(
_a
, 
_b
Ë

	)

28 
	#èskqueue_‰ì
(
_a
Ë

	)

30 
	#PRI_MIN
 (0Ë

	)

31 
	#PRI_MIN_ITHD
 (
PRI_MIN
)

	)

32 
	#PI_NET
 (
PRI_MIN_ITHD
 + 16)

	)

	@tcc_glue.h

29 #i‚de‡
_TCC_GLUE_H


30 
	#_TCC_GLUE_H


	)

33 
	#NULL
 ((*)0)

	)

34 
	tsize_t
;

35 
	tu_ch¨
;

36 
	tuöt8_t
;

37 
	tu_öt8_t
;

38 
	tu_sh‹t
;

39 
	tuöt16_t
;

40 
	tu_öt16_t
;

41 
	t__öt32_t
;

42 
	töt32_t
;

43 
	tsockÀn_t
;

44 
	tpid_t
;

45 
	ttime_t
;

46 
	tuöt
;

47 
	tu_öt
;

48 
	tuöt32_t
;

49 
	tu_öt32_t
;

50 
	tgid_t
;

51 
	tuid_t
;

52 
	tu_l⁄g
;

53 
	tuöçå_t
;

54 
	töt64_t
;

55 
	tuöt64_t
;

56 
	tu_öt64_t
;

58 
uöt32_t
 
	tö_addr_t
;

59 
	sö_addr
 {

60 
uöt32_t
 
	ms_addr
;

62 
	ssockaddr_ö
 {

63 
uöt8_t
 
	m_sö_Àn
;

64 
uöt8_t
 
	msö_Ámûy
;

65 
uöt16_t
 
	msö_p‹t
;

66 
ö_addr
 
	msö_addr
;

67 
	msö_zîo
[8];

69 
	#IFNAMSIZ
 16

	)

70 
	#INET6_ADDRSTRLEN
 64

	)

72 
	sö6_addr
 {

74 
uöt8_t
 
	m__s6_addr8
[16];

75 
uöt16_t
 
	m__s6_addr16
[8];

76 
uöt32_t
 
	m__s6_addr32
[4];

77 } 
	m__u6
;

81 
	#LITTLE_ENDIAN
 1234

	)

82 
	#BYTE_ORDER
 
LITTLE_ENDIAN


	)

85 
	#EX_OK
 0

	)

86 
	#EX_DATAERR
 1

	)

87 
	#EX_OSERR
 2

	)

88 
	#EX_UNAVAILABLE
 3

	)

89 
	#EX_USAGE
 4

	)

90 
	#EX_NOHOST
 5

	)

92 
	#EEXIST
 1

	)

93 
	#EINVAL
 2

	)

94 
	#ERANGE
 3

	)

95 
	#ESRCH
 4

	)

97 
	#IPPROTO_IP
 1

	)

98 
	#IPPROTO_IPV6
 2

	)

99 
	#IPPROTO_RAW
 100

	)

101 
	#IPTOS_LOWDELAY
 100

	)

102 
	#IPTOS_MINCOST
 101

	)

103 
	#IPTOS_RELIABILITY
 102

	)

104 
	#IPTOS_THROUGHPUT
 103

	)

105 
	#SOCK_RAW
 12

	)

106 
	#AF_INET
 2

	)

107 
	#AF_INET6
 28

	)

109 
	#INADDR_ANY
 0

	)

112 
	#bcmp
(
§c
, 
d°
, 
Àn
Ë
	`memcmp
(§c, d°,Üí)

	)

113 
	#bc›y
(
§c
, 
d°
, 
Àn
Ë
	`mem˝y
(d°, src,Üí)

	)

114 
	#bzîo
(
p
, 
Àn
Ë
	`mem£t
’, 0,Üí)

	)

115 
	#ödex
(
s
, 
c
Ë
	`°rchr
(s, c)

	)

117 *
°r£p
(**
°rögp
, c⁄° *
dñim
);

119 
w¨n
(const *, ...);

121 
	#w¨nx
 
w¨n


	)

122 
îr
(, const *, ...);

123 
	#îrx
 
îr


	)

125 
uöt16_t
 
	$ht⁄s
(
uöt16_t
)
	`__©åibuã__
 ((
°dˇŒ
));

126 
uöt16_t
 
	$¡ohs
(
uöt16_t
)
	`__©åibuã__
 ((
°dˇŒ
));

127 
uöt32_t
 
	$ht⁄l
(
uöt32_t
)
	`__©åibuã__
 ((
°dˇŒ
));

128 
uöt32_t
 
	$¡ohl
(
uöt32_t
)
	`__©åibuã__
 ((
°dˇŒ
));

129 
	$öë_©⁄
(c⁄° *
˝
, 
ö_addr
 *
pö
)
	`__©åibuã__
 ((
°dˇŒ
));;

130 * 
	$öë_¡ﬂ
(
ö_addr
)
	`__©åibuã__
 ((
°dˇŒ
));;

131 c⁄° * 
	$öë_¡›
(
af
, c⁄° * 
§c
, * 
d°
,

132 
sockÀn_t
 
size
)
	`__©åibuã__
 ((
°dˇŒ
));;

133 
	$öë_±⁄
(
af
, c⁄° * 
§c
, * 
d°
)
	`__©åibuã__
 ((
°dˇŒ
));;

135 
	sgroup
 {

136 
gid_t
 
gr_gid
;

137 
gr_«me
[16];

139 
	s∑sswd
 {

140 
uid_t
 
pw_uid
;

141 
pw_«me
[16];

144 
	#gëpw«m
(
s
Ë(
NULL
)

	)

145 
	#gëpwuid
(
s
Ë(
NULL
)

	)

147 
	#gëg∫am
(
x
Ë(
NULL
)

	)

148 
	#gëgrgid
(
x
Ë(
NULL
)

	)

150 
	`gë›t
(
¨gc
, * c⁄° 
¨gv
[], c⁄° *
›t°rög
);

152 
	`gësock›t
(
s
, 
Àvñ
, 
›äame
, * 
›tvÆ
,

153 
sockÀn_t
 * 
›éí
);

155 
	`£tsock›t
(
s
, 
Àvñ
, 
›äame
, c⁄° *
›tvÆ
,

156 
sockÀn_t
 
›éí
);

158 
	s¥Ÿ€¡
 {

159 *
p_«me
;

160 **
p_Æü£s
;

161 
p_¥Ÿo
;

164 
	s£rvít
 {

165 *
s_«me
;

166 **
s_Æü£s
;

167 
s_p‹t
;

168 *
s_¥Ÿo
;

171 
	sho°ít
 {

172 *
h_«me
;

173 **
h_Æü£s
;

174 
h_addπy≥
;

175 
h_Àngth
;

176 **
h_addr_li°
;

177 
	#h_addr
 
h_addr_li°
[0]

	)

180 
ho°ít
* 
	$gëho°byaddr
(c⁄° * 
addr
, 
Àn
, 
ty≥
)
	`__©åibuã__
 ((
°dˇŒ
));

181 
ho°ít
* 
	$gëho°by«me
(c⁄° *
«me
)
	`__©åibuã__
 ((
°dˇŒ
));

183 
¥Ÿ€¡
* 
	$gë¥Ÿobynumbî
(
numbî
)
	`__©åibuã__
 ((
°dˇŒ
));

184 
¥Ÿ€¡
* 
	$gë¥Ÿoby«me
(c⁄° * 
«me
)
	`__©åibuã__
 ((
°dˇŒ
));

186 
£rvít
* 
	$gë£rvbyp‹t
(
p‹t
, c⁄° * 
¥Ÿo
)
	`__©åibuã__
 ((
°dˇŒ
));

187 
£rvít
* 
	$gë£rvby«me
(c⁄° * 
«me
, c⁄° * 
¥Ÿo
Ë
	`__©åibuã__
 ((
°dˇŒ
));

189 
›töd
;

190 *
›èrg
;

192 
	~<wödef.h
>

194 
	#WSADESCRIPTION_LEN
 256

	)

195 
	#WSASYS_STATUS_LEN
 128

	)

197 
	sWSAD©a
 {

198 
WORD
 
wVîsi⁄
;

199 
WORD
 
wHighVîsi⁄
;

200 
szDes¸ùti⁄
[
WSADESCRIPTION_LEN
+1];

201 
szSy°emSètus
[
WSASYS_STATUS_LEN
+1];

202 
iMaxSockës
;

203 
iMaxUdpDg
;

204 
FAR
 * 
ÕVíd‹Info
;

205 } 
	tWSADATA
, * 
	tLPWSADATA
;

207 
	`WSASèπup
(

208 
WORD
 
wVîsi⁄Reque°ed
,

209 
LPWSADATA
 
ÕWSAD©a


213 
	`WSACÀ™up
();

215 
	`WSAGëLa°Eº‹
();

218 
	#pùe
(
f
Ë(-1)

	)

219 
	#kûl
(
p
, 
s
Ë(-1)

	)

220 
	#waôpid
(
w
,
s
,
o
Ë(-1)

	)

221 
	#f‹k
(
x
Ë(-1)

	)

222 
	#execvp
(
f
, 
a
Ë(-1)

	)

224 
	#_W_INT
(
i
Ë(i)

	)

225 
	#_WSTATUS
(
x
Ë(
	`_W_INT
(xË& 0177)

	)

226 
	#WIFEXITED
(
x
Ë(
	`_WSTATUS
(xË=0)

	)

227 
	#WEXITSTATUS
(
x
Ë(
	`_W_INT
(xË>> 8)

	)

228 
	#_WSTOPPED
 0177

	)

229 
	#WIFSIGNALED
(
x
Ë(
	`_WSTATUS
(xË!
_WSTOPPED
 && _WSTATUS(xË!0)

	)

230 
	#WTERMSIG
(
x
Ë(
	`_WSTATUS
(x))

	)

	@/usr/include/arpa/inet.h

18 #i‚de‡
_ARPA_INET_H


19 
	#_ARPA_INET_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<√töë/ö.h
>

25 #i‚de‡
__sockÀn_t_deföed


26 
__sockÀn_t
 
	tsockÀn_t
;

27 
	#__sockÀn_t_deföed


	)

30 
__BEGIN_DECLS


34 
ö_addr_t
 
	$öë_addr
 (c⁄° *
__˝
Ë
__THROW
;

37 
ö_addr_t
 
	$öë_ aof
 (
ö_addr
 
__ö
Ë
__THROW
;

41 
ö_addr
 
	$öë_makóddr
 (
ö_addr_t
 
__√t
, in_addr_à
__ho°
)

42 
__THROW
;

45 
ö_addr_t
 
	$öë_√tof
 (
ö_addr
 
__ö
Ë
__THROW
;

49 
ö_addr_t
 
	$öë_√tw‹k
 (c⁄° *
__˝
Ë
__THROW
;

53 *
	$öë_¡ﬂ
 (
ö_addr
 
__ö
Ë
__THROW
;

58 
	$öë_±⁄
 (
__af
, c⁄° *
__ª°ri˘
 
__˝
,

59 *
__ª°ri˘
 
__buf
Ë
__THROW
;

64 c⁄° *
	$öë_¡›
 (
__af
, c⁄° *
__ª°ri˘
 
__˝
,

65 *
__ª°ri˘
 
__buf
, 
sockÀn_t
 
__Àn
)

66 
__THROW
;

70 #ifde‡
__USE_MISC


73 
	$öë_©⁄
 (c⁄° *
__˝
, 
ö_addr
 *
__öp
Ë
__THROW
;

77 *
	$öë_√è
 (
ö_addr_t
 
__√t
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

82 *
	$öë_√t_¡›
 (
__af
, c⁄° *
__˝
, 
__bôs
,

83 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

88 
	$öë_√t_±⁄
 (
__af
, c⁄° *
__˝
,

89 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

94 
	$öë_nßp_addr
 (c⁄° *
__˝
,

95 *
__buf
, 
__Àn
Ë
__THROW
;

99 *
	$öë_nßp_¡ﬂ
 (
__Àn
, c⁄° *
__˝
,

100 *
__buf
Ë
__THROW
;

103 
__END_DECLS


	@/usr/include/assert.h

22 #ifdef 
_ASSERT_H


24 #unde‡
_ASSERT_H


25 #unde‡
as£π


26 #unde‡
__ASSERT_VOID_CAST


28 #ifdef 
__USE_GNU


29 #unde‡
as£π_≥º‹


34 
	#_ASSERT_H
 1

	)

35 
	~<„©uªs.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

38 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

40 
	#__ASSERT_VOID_CAST
 ()

	)

48 #ifdef 
NDEBUG


50 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

58 #ifdef 
__USE_GNU


59 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

64 #i‚de‡
_ASSERT_H_DECLS


65 
	#_ASSERT_H_DECLS


	)

66 
__BEGIN_DECLS


69 
	$__as£π_Áû
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
,

70 
__löe
, c⁄° *
__fun˘i⁄
)

71 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

74 
	$__as£π_≥º‹_Áû
 (
__î∫um
, c⁄° *
__fûe
,

75 
__löe
, c⁄° *
__fun˘i⁄
)

76 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

81 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

82 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

85 
__END_DECLS


88 
	#as£π
(
ex¥
) \

89 ((
ex¥
) \

90 ? 
	`__ASSERT_VOID_CAST
 (0) \

91 : 
	`__as£π_Áû
 (
	`__STRING
(
ex¥
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

93 #ifdef 
__USE_GNU


94 
	#as£π_≥º‹
(
î∫um
) \

95 (!(
î∫um
) \

96 ? 
	`__ASSERT_VOID_CAST
 (0) \

97 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

105 #i‡
deföed
 
__˝lu•lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

106 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

108 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

109 
	#__ASSERT_FUNCTION
 
__func__


	)

111 
	#__ASSERT_FUNCTION
 ((c⁄° *Ë0)

	)

118 #i‡
deföed
 
__USE_ISOC11
 && !deföed 
__˝lu•lus


120 #unde‡
°©ic_as£π


121 
	#°©ic_as£π
 
_Sètic_as£π


	)

	@/usr/include/ctype.h

22 #i‚def 
_CTYPE_H


23 
	#_CTYPE_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	g__BEGIN_DECLS


30 #i‚de‡
_ISbô


39 
	~<ídün.h
>

40 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


41 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

43 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

48 
	m_ISuµî
 = 
_ISbô
 (0),

49 
	m_ISlowî
 = 
_ISbô
 (1),

50 
	m_ISÆpha
 = 
_ISbô
 (2),

51 
	m_ISdigô
 = 
_ISbô
 (3),

52 
	m_ISxdigô
 = 
_ISbô
 (4),

53 
	m_IS•a˚
 = 
_ISbô
 (5),

54 
	m_IS¥öt
 = 
_ISbô
 (6),

55 
	m_ISgøph
 = 
_ISbô
 (7),

56 
	m_ISbœnk
 = 
_ISbô
 (8),

57 
	m_IS˙ål
 = 
_ISbô
 (9),

58 
	m_ISpun˘
 = 
_ISbô
 (10),

59 
	m_ISÆnum
 = 
_ISbô
 (11)

79 c⁄° **
	$__˘y≥_b_loc
 ()

80 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

81 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

83 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

87 #i‚de‡
__˝lu•lus


88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

90 #ñi‡
deföed
 
__USE_EXTERN_INLINES


91 
	#__is˘y≥_f
(
ty≥
) \

92 
__exã∫_ölöe
 \

93 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

95  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

96 
	}

	)
}

99 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

100 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

102 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

104 
__BEGIN_NAMESPACE_STD


110 
__ex˘y≥
 (
iß um
);

111 
__ex˘y≥
 (
ißÕha
);

112 
__ex˘y≥
 (
is˙ål
);

113 
__ex˘y≥
 (
isdigô
);

114 
__ex˘y≥
 (
i¶owî
);

115 
__ex˘y≥
 (
isgøph
);

116 
__ex˘y≥
 (
i•röt
);

117 
__ex˘y≥
 (
i•un˘
);

118 
__ex˘y≥
 (
is•a˚
);

119 
__ex˘y≥
 (
isuµî
);

120 
__ex˘y≥
 (
isxdigô
);

124 
	$tﬁowî
 (
__c
Ë
__THROW
;

127 
	$touµî
 (
__c
Ë
__THROW
;

129 
__END_NAMESPACE_STD


133 #ifdef 
__USE_ISOC99


134 
__BEGIN_NAMESPACE_C99


136 
	`__ex˘y≥
 (
isbœnk
);

138 
__END_NAMESPACE_C99


141 #ifde‡
__USE_GNU


143 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

146 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


150 
	$ißscii
 (
__c
Ë
__THROW
;

154 
	$tﬂscii
 (
__c
Ë
__THROW
;

158 
	`__ex˘y≥
 (
_touµî
);

159 
	`__ex˘y≥
 (
_tﬁowî
);

163 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

164 (
__exãnsi⁄__
 \

165 ({ 
__ªs
; \

166 i‡( (
c
) > 1) \

168 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

170 
__c
 = (
c
); \

171 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

174 
__ªs
 = 
f
 
¨gs
; \

177 
__ªs
 = (
a
)[(Ë(
c
)]; \

178 
__ªs
; 
	}
}))

	)

180 #i‡!
deföed
 
__NO_CTYPE


181 #ifde‡
__is˘y≥_f


182 
	$__is˘y≥_f
 (
Ænum
)

183 
	$__is˘y≥_f
 (
Æpha
)

184 
	$__is˘y≥_f
 (
˙ål
)

185 
	$__is˘y≥_f
 (
digô
)

186 
	$__is˘y≥_f
 (
lowî
)

187 
	$__is˘y≥_f
 (
gøph
)

188 
	$__is˘y≥_f
 (
¥öt
)

189 
	$__is˘y≥_f
 (
pun˘
)

190 
	$__is˘y≥_f
 (
•a˚
)

191 
	$__is˘y≥_f
 (
uµî
)

192 
	$__is˘y≥_f
 (
xdigô
)

193 #ifde‡
__USE_ISOC99


194 
	$__is˘y≥_f
 (
bœnk
)

196 #ñi‡
deföed
 
__is˘y≥


197 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

198 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

199 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

200 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

201 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

202 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

203 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

204 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

205 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

206 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

207 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

208 #ifde‡
__USE_ISOC99


209 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

213 #ifde‡
__USE_EXTERN_INLINES


214 
__exã∫_ölöe
 

215 
	`__NTH
 (
	$tﬁowî
 (
__c
))

217  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

218 
	}
}

220 
__exã∫_ölöe
 

221 
__NTH
 (
	$touµî
 (
__c
))

223  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

224 
	}
}

227 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


228 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

229 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

232 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


233 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

234 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

236 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

237 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

243 #ifde‡
__USE_XOPEN2K8


257 
	~<xloˇÀ.h
>

261 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

262 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

264 
	#__ex˘y≥_l
(
«me
) \

265 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

271 
__ex˘y≥_l
 (
iß um_l
);

272 
__ex˘y≥_l
 (
ißÕha_l
);

273 
__ex˘y≥_l
 (
is˙ål_l
);

274 
__ex˘y≥_l
 (
isdigô_l
);

275 
__ex˘y≥_l
 (
i¶owî_l
);

276 
__ex˘y≥_l
 (
isgøph_l
);

277 
__ex˘y≥_l
 (
i•röt_l
);

278 
__ex˘y≥_l
 (
i•un˘_l
);

279 
__ex˘y≥_l
 (
is•a˚_l
);

280 
__ex˘y≥_l
 (
isuµî_l
);

281 
__ex˘y≥_l
 (
isxdigô_l
);

283 
__ex˘y≥_l
 (
isbœnk_l
);

287 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

288 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

291 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

292 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

294 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


295 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

296 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

297 
	#__touµî_l
(
c
, 
loˇÀ
) \

298 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

299 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

300 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

304 #i‚de‡
__NO_CTYPE


305 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

306 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

307 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

308 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

309 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

310 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

311 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

312 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

313 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

314 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

315 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

317 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

319 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


320 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

321 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

324 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

325 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

326 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

327 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

328 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

329 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

330 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

331 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

332 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

333 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

334 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

336 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

338 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


339 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

340 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

347 
__END_DECLS


	@/usr/include/err.h

19 #i‚def 
_ERR_H


20 
	#_ERR_H
 1

	)

22 
	~<„©uªs.h
>

24 
	#__√ed___va_li°


	)

25 
	~<°d¨g.h
>

26 #i‚def 
__GNUC_VA_LIST


27 
	#__gnuc_va_li°
 
__±r_t


	)

30 
__BEGIN_DECLS


34 
	$w¨n
 (c⁄° *
__f‹m©
, ...)

35 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 1, 2)));

36 
	$vw¨n
 (c⁄° *
__f‹m©
, 
__gnuc_va_li°
)

37 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 1, 0)));

40 
	$w¨nx
 (c⁄° *
__f‹m©
, ...)

41 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 1, 2)));

42 
	$vw¨nx
 (c⁄° *
__f‹m©
, 
__gnuc_va_li°
)

43 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 1, 0)));

46 
	$îr
 (
__°©us
, c⁄° *
__f‹m©
, ...)

47 
	`__©åibuã__
 ((
__n‹ëu∫__
, 
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

48 
	$vîr
 (
__°©us
, c⁄° *
__f‹m©
, 
__gnuc_va_li°
)

49 
	`__©åibuã__
 ((
__n‹ëu∫__
, 
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

50 
	$îrx
 (
__°©us
, c⁄° *
__f‹m©
, ...)

51 
	`__©åibuã__
 ((
__n‹ëu∫__
, 
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

52 
	$vîrx
 (
__°©us
, c⁄° *, 
__gnuc_va_li°
)

53 
	`__©åibuã__
 ((
__n‹ëu∫__
, 
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

55 
__END_DECLS


	@/usr/include/errno.h

22 #i‚def 
_ERRNO_H


26 #i‚def 
__√ed_Em©h


27 
	#_ERRNO_H
 1

	)

28 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


35 
	~<bôs/î∫o.h
>

36 #unde‡
__√ed_Em©h


38 #ifdef 
_ERRNO_H


45 #i‚def 
î∫o


46 
î∫o
;

49 #ifde‡
__USE_GNU


54 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

58 
	g__END_DECLS


66 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


67 #i‚de‡
__îr‹_t_deföed


68 
	tîr‹_t
;

69 
	#__îr‹_t_deföed
 1

	)

71 #unde‡
__√ed_îr‹_t


	@/usr/include/fcntl.h

22 #i‚def 
_FCNTL_H


23 
	#_FCNTL_H
 1

	)

25 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

35 
	~<bôs/f˙é.h
>

40 #i‚de‡
__mode_t_deföed


41 
__mode_t
 
	tmode_t
;

42 
	#__mode_t_deföed


	)

45 #i‚de‡
__off_t_deföed


46 #i‚de‡
__USE_FILE_OFFSET64


47 
__off_t
 
	toff_t
;

49 
__off64_t
 
	toff_t
;

51 
	#__off_t_deföed


	)

54 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


55 
__off64_t
 
	toff64_t
;

56 
	#__off64_t_deföed


	)

59 #i‚de‡
__pid_t_deföed


60 
__pid_t
 
	tpid_t
;

61 
	#__pid_t_deföed


	)

65 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


66 
	#__√ed_time•ec


	)

67 
	~<time.h
>

68 
	~<bôs/°©.h
>

70 
	#S_IFMT
 
__S_IFMT


	)

71 
	#S_IFDIR
 
__S_IFDIR


	)

72 
	#S_IFCHR
 
__S_IFCHR


	)

73 
	#S_IFBLK
 
__S_IFBLK


	)

74 
	#S_IFREG
 
__S_IFREG


	)

75 #ifde‡
__S_IFIFO


76 
	#S_IFIFO
 
__S_IFIFO


	)

78 #ifde‡
__S_IFLNK


79 
	#S_IFLNK
 
__S_IFLNK


	)

81 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


82 
	#S_IFSOCK
 
__S_IFSOCK


	)

87 
	#S_ISUID
 
__S_ISUID


	)

88 
	#S_ISGID
 
__S_ISGID


	)

90 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


92 
	#S_ISVTX
 
__S_ISVTX


	)

95 
	#S_IRUSR
 
__S_IREAD


	)

96 
	#S_IWUSR
 
__S_IWRITE


	)

97 
	#S_IXUSR
 
__S_IEXEC


	)

99 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

101 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

102 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

103 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

105 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

107 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

108 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

109 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

111 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

114 #ifdef 
__USE_MISC


115 #i‚de‡
R_OK


118 
	#R_OK
 4

	)

119 
	#W_OK
 2

	)

120 
	#X_OK
 1

	)

121 
	#F_OK
 0

	)

126 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


127 
	#SEEK_SET
 0

	)

128 
	#SEEK_CUR
 1

	)

129 
	#SEEK_END
 2

	)

137 
f˙é
 (
__fd
, 
__cmd
, ...);

145 #i‚de‡
__USE_FILE_OFFSET64


146 
	$›í
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

148 #ifde‡
__REDIRECT


149 
	`__REDIRECT
 (
›í
, (c⁄° *
__fûe
, 
__oÊag
, ...), 
›í64
)

150 
	`__n⁄nuŒ
 ((1));

152 
	#›í
 
›í64


	)

155 #ifde‡
__USE_LARGEFILE64


156 
	$›í64
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

159 #ifde‡
__USE_ATFILE


169 #i‚de‡
__USE_FILE_OFFSET64


170 
	$›í©
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

171 
	`__n⁄nuŒ
 ((2));

173 #ifde‡
__REDIRECT


174 
	`__REDIRECT
 (
›í©
, (
__fd
, c⁄° *
__fûe
, 
__oÊag
,

175 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

177 
	#›í©
 
›í©64


	)

180 #ifde‡
__USE_LARGEFILE64


181 
	$›í©64
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

182 
	`__n⁄nuŒ
 ((2));

191 #i‚de‡
__USE_FILE_OFFSET64


192 
	$¸ót
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

194 #ifde‡
__REDIRECT


195 
	`__REDIRECT
 (
¸ót
, (c⁄° *
__fûe
, 
mode_t
 
__mode
),

196 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

198 
	#¸ót
 
¸ót64


	)

201 #ifde‡
__USE_LARGEFILE64


202 
	$¸ót64
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

205 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

206 && !
deföed
 
__USE_POSIX
))

215 
	#F_ULOCK
 0

	)

216 
	#F_LOCK
 1

	)

217 
	#F_TLOCK
 2

	)

218 
	#F_TEST
 3

	)

220 #i‚de‡
__USE_FILE_OFFSET64


221 
	`lockf
 (
__fd
, 
__cmd
, 
off_t
 
__Àn
);

223 #ifde‡
__REDIRECT


224 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

226 
	#lockf
 
lockf64


	)

229 #ifde‡
__USE_LARGEFILE64


230 
	`lockf64
 (
__fd
, 
__cmd
, 
off64_t
 
__Àn
);

234 #ifde‡
__USE_XOPEN2K


237 #i‚de‡
__USE_FILE_OFFSET64


238 
	$posix_Ádvi£
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
,

239 
__advi£
Ë
__THROW
;

241 #ifde‡
__REDIRECT_NTH


242 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

243 
__off64_t
 
__Àn
, 
__advi£
),

244 
posix_Ádvi£64
);

246 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

249 #ifde‡
__USE_LARGEFILE64


250 
	$posix_Ádvi£64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
,

251 
__advi£
Ë
__THROW
;

259 #i‚de‡
__USE_FILE_OFFSET64


260 
	`posix_ÁŒoˇã
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
);

262 #ifde‡
__REDIRECT


263 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

264 
__off64_t
 
__Àn
),

265 
posix_ÁŒoˇã64
);

267 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

270 #ifde‡
__USE_LARGEFILE64


271 
	`posix_ÁŒoˇã64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
);

277 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
 \

278 && 
deföed
 
__va_¨g_∑ck_Àn


279 
	~<bôs/f˙é2.h
>

282 
__END_DECLS


	@/usr/include/grp.h

22 #i‚def 
_GRP_H


23 
	#_GRP_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 
	#__√ed_size_t


	)

32 
	~<°ddef.h
>

36 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K
Ë&& !deföed 
__gid_t_deföed


37 
__gid_t
 
	tgid_t
;

38 
	#__gid_t_deföed


	)

42 
	sgroup


44 *
	mgr_«me
;

45 *
	mgr_∑sswd
;

46 
__gid_t
 
	mgr_gid
;

47 **
	mgr_mem
;

51 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_GNU


52 
	#__√ed_FILE


	)

53 
	~<°dio.h
>

57 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


62 
£tgª¡
 ();

65 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

66 || 
deföed
 
__USE_XOPEN2K8


71 
ídgª¡
 ();

77 
group
 *
gëgª¡
 ();

80 #ifdef 
__USE_SVID


87 
group
 *
fgëgª¡
 (
FILE
 *
__°ªam
);

90 #ifde‡
__USE_GNU


97 
putgª¡
 (c⁄° 
group
 *
__ª°ri˘
 
__p
,

98 
FILE
 *
__ª°ri˘
 
__f
);

105 
group
 *
gëgrgid
 (
__gid_t
 
__gid
);

111 
group
 *
gëg∫am
 (c⁄° *
__«me
);

113 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


115 #ifde‡
__USE_MISC


118 
	#NSS_BUFLEN_GROUP
 1024

	)

134 #ifde‡
__USE_GNU


135 
gëgª¡_r
 (
group
 *
__ª°ri˘
 
__ªsu…buf
,

136 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

137 
group
 **
__ª°ri˘
 
__ªsu…
);

144 
gëgrgid_r
 (
__gid_t
 
__gid
, 
group
 *
__ª°ri˘
 
__ªsu…buf
,

145 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

146 
group
 **
__ª°ri˘
 
__ªsu…
);

152 
gëg∫am_r
 (c⁄° *
__ª°ri˘
 
__«me
,

153 
group
 *
__ª°ri˘
 
__ªsu…buf
,

154 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

155 
group
 **
__ª°ri˘
 
__ªsu…
);

157 #ifdef 
__USE_SVID


165 
fgëgª¡_r
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

166 
group
 *
__ª°ri˘
 
__ªsu…buf
,

167 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

168 
group
 **
__ª°ri˘
 
__ªsu…
);

174 #ifdef 
__USE_BSD


176 
	#__√ed_size_t


	)

177 
	~<°ddef.h
>

180 
	$£tgroups
 (
size_t
 
__n
, c⁄° 
__gid_t
 *
__groups
Ë
__THROW
;

190 
	`gëgrou∂i°
 (c⁄° *
__u£r
, 
__gid_t
 
__group
,

191 
__gid_t
 *
__groups
, *
__ngroups
);

201 
	`öôgroups
 (c⁄° *
__u£r
, 
__gid_t
 
__group
);

205 
__END_DECLS


	@/usr/include/inttypes.h

22 #i‚de‡
_INTTYPES_H


23 
	#_INTTYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<°döt.h
>

30 #i‚de‡
____gwch¨_t_deföed


31 #ifde‡
__˝lu•lus


32 
	#__gwch¨_t
 
wch¨_t


	)

33 #ñi‡
deföed
 
__WCHAR_TYPE__


34 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

36 
	#__√ed_wch¨_t


	)

37 
	~<°ddef.h
>

38 
wch¨_t
 
	t__gwch¨_t
;

40 
	#____gwch¨_t_deföed
 1

	)

43 #i‡
__WORDSIZE
 == 64

44 
	#__PRI64_PREFIX
 "l"

	)

45 
	#__PRIPTR_PREFIX
 "l"

	)

47 
	#__PRI64_PREFIX
 "Œ"

	)

48 
	#__PRIPTR_PREFIX


	)

54 
	#PRId8
 "d"

	)

55 
	#PRId16
 "d"

	)

56 
	#PRId32
 "d"

	)

57 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

59 
	#PRIdLEAST8
 "d"

	)

60 
	#PRIdLEAST16
 "d"

	)

61 
	#PRIdLEAST32
 "d"

	)

62 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

64 
	#PRIdFAST8
 "d"

	)

65 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

66 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

67 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIi8
 "i"

	)

71 
	#PRIi16
 "i"

	)

72 
	#PRIi32
 "i"

	)

73 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

75 
	#PRIiLEAST8
 "i"

	)

76 
	#PRIiLEAST16
 "i"

	)

77 
	#PRIiLEAST32
 "i"

	)

78 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

80 
	#PRIiFAST8
 "i"

	)

81 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

82 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

83 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIo8
 "o"

	)

87 
	#PRIo16
 "o"

	)

88 
	#PRIo32
 "o"

	)

89 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

91 
	#PRIoLEAST8
 "o"

	)

92 
	#PRIoLEAST16
 "o"

	)

93 
	#PRIoLEAST32
 "o"

	)

94 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

96 
	#PRIoFAST8
 "o"

	)

97 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

98 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

99 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIu8
 "u"

	)

103 
	#PRIu16
 "u"

	)

104 
	#PRIu32
 "u"

	)

105 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

107 
	#PRIuLEAST8
 "u"

	)

108 
	#PRIuLEAST16
 "u"

	)

109 
	#PRIuLEAST32
 "u"

	)

110 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

112 
	#PRIuFAST8
 "u"

	)

113 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

114 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

115 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIx8
 "x"

	)

119 
	#PRIx16
 "x"

	)

120 
	#PRIx32
 "x"

	)

121 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

123 
	#PRIxLEAST8
 "x"

	)

124 
	#PRIxLEAST16
 "x"

	)

125 
	#PRIxLEAST32
 "x"

	)

126 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

128 
	#PRIxFAST8
 "x"

	)

129 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

130 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

131 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIX8
 "X"

	)

135 
	#PRIX16
 "X"

	)

136 
	#PRIX32
 "X"

	)

137 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

139 
	#PRIXLEAST8
 "X"

	)

140 
	#PRIXLEAST16
 "X"

	)

141 
	#PRIXLEAST32
 "X"

	)

142 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

144 
	#PRIXFAST8
 "X"

	)

145 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

146 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

147 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

151 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

152 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

153 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

154 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

155 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

156 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

160 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

161 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

162 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

163 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

164 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

165 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

171 
	#SCNd8
 "hhd"

	)

172 
	#SCNd16
 "hd"

	)

173 
	#SCNd32
 "d"

	)

174 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

176 
	#SCNdLEAST8
 "hhd"

	)

177 
	#SCNdLEAST16
 "hd"

	)

178 
	#SCNdLEAST32
 "d"

	)

179 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

181 
	#SCNdFAST8
 "hhd"

	)

182 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

183 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

184 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNi8
 "hhi"

	)

188 
	#SCNi16
 "hi"

	)

189 
	#SCNi32
 "i"

	)

190 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

192 
	#SCNiLEAST8
 "hhi"

	)

193 
	#SCNiLEAST16
 "hi"

	)

194 
	#SCNiLEAST32
 "i"

	)

195 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

197 
	#SCNiFAST8
 "hhi"

	)

198 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

199 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

200 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNu8
 "hhu"

	)

204 
	#SCNu16
 "hu"

	)

205 
	#SCNu32
 "u"

	)

206 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

208 
	#SCNuLEAST8
 "hhu"

	)

209 
	#SCNuLEAST16
 "hu"

	)

210 
	#SCNuLEAST32
 "u"

	)

211 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

213 
	#SCNuFAST8
 "hhu"

	)

214 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

215 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

216 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNo8
 "hho"

	)

220 
	#SCNo16
 "ho"

	)

221 
	#SCNo32
 "o"

	)

222 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

224 
	#SCNoLEAST8
 "hho"

	)

225 
	#SCNoLEAST16
 "ho"

	)

226 
	#SCNoLEAST32
 "o"

	)

227 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

229 
	#SCNoFAST8
 "hho"

	)

230 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

231 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

232 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNx8
 "hhx"

	)

236 
	#SCNx16
 "hx"

	)

237 
	#SCNx32
 "x"

	)

238 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

240 
	#SCNxLEAST8
 "hhx"

	)

241 
	#SCNxLEAST16
 "hx"

	)

242 
	#SCNxLEAST32
 "x"

	)

243 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

245 
	#SCNxFAST8
 "hhx"

	)

246 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

247 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

248 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

252 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

253 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

254 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

255 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

256 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

259 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

260 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

261 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

262 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

263 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

266 
	g__BEGIN_DECLS


268 #i‡
__WORDSIZE
 == 64

273 
	mquŸ
;

274 
	mªm
;

275 } 
	timaxdiv_t
;

282 
__exãnsi⁄__
 
	mquŸ
;

283 
__exãnsi⁄__
 
	mªm
;

284 } 
	timaxdiv_t
;

290 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

293 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

294 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

297 
ötmax_t
 
	$°πoimax
 (c⁄° *
__ª°ri˘
 
__≈å
,

298 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

301 
uötmax_t
 
	$°πoumax
 (c⁄° *
__ª°ri˘
 
__≈å
,

302 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

305 
ötmax_t
 
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

306 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

307 
__THROW
;

310 
uötmax_t
 
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

311 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

312 
__THROW
;

314 #ifde‡
__USE_EXTERN_INLINES


316 #i‡
__WORDSIZE
 == 64

318 
	$__°πﬁ_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

319 **
__ª°ri˘
 
__íd±r
,

320 
__ba£
, 
__group
)

321 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

323 
__exã∫_ölöe
 
ötmax_t


324 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

325 
ba£
))

327  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

328 
	}
}

330 
	$__°πoul_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

331 ** 
__ª°ri˘
 
__íd±r
,

332 
__ba£
, 
__group
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

335 
__exã∫_ölöe
 
uötmax_t


336 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

337 
ba£
))

339  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

340 
	}
}

342 
	$__wc°ﬁ_öã∫Æ
 (c⁄° 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

343 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

344 
__ba£
, 
__group
)

345 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

347 
__exã∫_ölöe
 
ötmax_t


348 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

349 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

351  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

352 
	}
}

354 
	$__wc°oul_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

355 
__ª°ri˘
 
__≈å
,

356 
__gwch¨_t
 **

357 
__ª°ri˘
 
__íd±r
,

358 
__ba£
, 
__group
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

361 
__exã∫_ölöe
 
uötmax_t


362 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

363 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

365  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

366 
	}
}

370 
__exãnsi⁄__


371 
	$__°πﬁl_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

372 **
__ª°ri˘
 
__íd±r
,

373 
__ba£
, 
__group
)

374 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

376 
__exã∫_ölöe
 
ötmax_t


377 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

378 
ba£
))

380  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

381 
	}
}

383 
__exãnsi⁄__


384 
	$__°πouŒ_öã∫Æ
 (const *

385 
__ª°ri˘
 
__≈å
,

387 
__ª°ri˘
 
__íd±r
,

388 
__ba£
,

389 
__group
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

392 
__exã∫_ölöe
 
uötmax_t


393 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

394 
ba£
))

396  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

397 
	}
}

399 
__exãnsi⁄__


400 
	$__wc°ﬁl_öã∫Æ
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

401 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

402 
__ba£
, 
__group
)

403 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

405 
__exã∫_ölöe
 
ötmax_t


406 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

407 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

409  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

410 
	}
}

413 
__exãnsi⁄__


414 
	$__wc°ouŒ_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

415 
__ª°ri˘
 
__≈å
,

416 
__gwch¨_t
 **

417 
__ª°ri˘
 
__íd±r
,

418 
__ba£
,

419 
__group
)

420 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

422 
__exã∫_ölöe
 
uötmax_t


423 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

424 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

426  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

427 
	}
}

432 
	g__END_DECLS


	@/usr/include/linux/errno.h

1 
	~<asm/î∫o.h
>

	@/usr/include/linux/icmp.h

17 #i‚de‡
_LINUX_ICMP_H


18 
	#_LINUX_ICMP_H


	)

20 
	~<löux/ty≥s.h
>

22 
	#ICMP_ECHOREPLY
 0

	)

23 
	#ICMP_DEST_UNREACH
 3

	)

24 
	#ICMP_SOURCE_QUENCH
 4

	)

25 
	#ICMP_REDIRECT
 5

	)

26 
	#ICMP_ECHO
 8

	)

27 
	#ICMP_TIME_EXCEEDED
 11

	)

28 
	#ICMP_PARAMETERPROB
 12

	)

29 
	#ICMP_TIMESTAMP
 13

	)

30 
	#ICMP_TIMESTAMPREPLY
 14

	)

31 
	#ICMP_INFO_REQUEST
 15

	)

32 
	#ICMP_INFO_REPLY
 16

	)

33 
	#ICMP_ADDRESS
 17

	)

34 
	#ICMP_ADDRESSREPLY
 18

	)

35 
	#NR_ICMP_TYPES
 18

	)

39 
	#ICMP_NET_UNREACH
 0

	)

40 
	#ICMP_HOST_UNREACH
 1

	)

41 
	#ICMP_PROT_UNREACH
 2

	)

42 
	#ICMP_PORT_UNREACH
 3

	)

43 
	#ICMP_FRAG_NEEDED
 4

	)

44 
	#ICMP_SR_FAILED
 5

	)

45 
	#ICMP_NET_UNKNOWN
 6

	)

46 
	#ICMP_HOST_UNKNOWN
 7

	)

47 
	#ICMP_HOST_ISOLATED
 8

	)

48 
	#ICMP_NET_ANO
 9

	)

49 
	#ICMP_HOST_ANO
 10

	)

50 
	#ICMP_NET_UNR_TOS
 11

	)

51 
	#ICMP_HOST_UNR_TOS
 12

	)

52 
	#ICMP_PKT_FILTERED
 13

	)

53 
	#ICMP_PREC_VIOLATION
 14

	)

54 
	#ICMP_PREC_CUTOFF
 15

	)

55 
	#NR_ICMP_UNREACH
 15

	)

58 
	#ICMP_REDIR_NET
 0

	)

59 
	#ICMP_REDIR_HOST
 1

	)

60 
	#ICMP_REDIR_NETTOS
 2

	)

61 
	#ICMP_REDIR_HOSTTOS
 3

	)

64 
	#ICMP_EXC_TTL
 0

	)

65 
	#ICMP_EXC_FRAGTIME
 1

	)

68 
	sicmphdr
 {

69 
__u8
 
	mty≥
;

70 
__u8
 
	mcode
;

71 
__sum16
 
	mchecksum
;

74 
__be16
 
	mid
;

75 
__be16
 
	m£quí˚
;

76 } 
	mecho
;

77 
__be32
 
	mg©eway
;

79 
__be16
 
	m__unu£d
;

80 
__be16
 
	mmtu
;

81 } 
	m‰ag
;

82 } 
	mun
;

90 
	#ICMP_FILTER
 1

	)

92 
	sicmp_fûãr
 {

93 
__u32
 
	md©a
;

	@/usr/include/linux/if.h

19 #i‚de‡
_LINUX_IF_H


20 
	#_LINUX_IF_H


	)

22 
	~<löux/ty≥s.h
>

23 
	~<löux/sockë.h
>

26 
	#IFNAMSIZ
 16

	)

27 
	#IFALIASZ
 256

	)

28 
	~<löux/hdlc/io˘l.h
>

31 
	#IFF_UP
 0x1

	)

32 
	#IFF_BROADCAST
 0x2

	)

33 
	#IFF_DEBUG
 0x4

	)

34 
	#IFF_LOOPBACK
 0x8

	)

35 
	#IFF_POINTOPOINT
 0x10

	)

36 
	#IFF_NOTRAILERS
 0x20

	)

37 
	#IFF_RUNNING
 0x40

	)

38 
	#IFF_NOARP
 0x80

	)

39 
	#IFF_PROMISC
 0x100

	)

40 
	#IFF_ALLMULTI
 0x200

	)

42 
	#IFF_MASTER
 0x400

	)

43 
	#IFF_SLAVE
 0x800

	)

45 
	#IFF_MULTICAST
 0x1000

	)

47 
	#IFF_PORTSEL
 0x2000

	)

48 
	#IFF_AUTOMEDIA
 0x4000

	)

49 
	#IFF_DYNAMIC
 0x8000

	)

51 
	#IFF_LOWER_UP
 0x10000

	)

52 
	#IFF_DORMANT
 0x20000

	)

54 
	#IFF_ECHO
 0x40000

	)

56 
	#IFF_VOLATILE
 (
IFF_LOOPBACK
|
IFF_POINTOPOINT
|
IFF_BROADCAST
|
IFF_ECHO
|\

57 
IFF_MASTER
|
IFF_SLAVE
|
IFF_RUNNING
|
IFF_LOWER_UP
|
IFF_DORMANT
)

	)

60 
	#IFF_802_1Q_VLAN
 0x1

	)

61 
	#IFF_EBRIDGE
 0x2

	)

62 
	#IFF_SLAVE_INACTIVE
 0x4

	)

63 
	#IFF_MASTER_8023AD
 0x8

	)

64 
	#IFF_MASTER_ALB
 0x10

	)

65 
	#IFF_BONDING
 0x20

	)

66 
	#IFF_SLAVE_NEEDARP
 0x40

	)

67 
	#IFF_ISATAP
 0x80

	)

68 
	#IFF_MASTER_ARPMON
 0x100

	)

69 
	#IFF_WAN_HDLC
 0x200

	)

70 
	#IFF_XMIT_DST_RELEASE
 0x400

	)

73 
	#IFF_DONT_BRIDGE
 0x800

	)

74 
	#IFF_DISABLE_NETPOLL
 0x1000

	)

75 
	#IFF_MACVLAN_PORT
 0x2000

	)

76 
	#IFF_BRIDGE_PORT
 0x4000

	)

77 
	#IFF_OVS_DATAPATH
 0x8000

	)

79 
	#IFF_TX_SKB_SHARING
 0x10000

	)

81 
	#IFF_UNICAST_FLT
 0x20000

	)

82 
	#IFF_TEAM_PORT
 0x40000

	)

83 
	#IFF_SUPP_NOFCS
 0x80000

	)

84 
	#IFF_LIVE_ADDR_CHANGE
 0x100000

	)

86 
	#IFF_MACVLAN
 0x200000

	)

89 
	#IF_GET_IFACE
 0x0001

	)

90 
	#IF_GET_PROTO
 0x0002

	)

93 
	#IF_IFACE_V35
 0x1000

	)

94 
	#IF_IFACE_V24
 0x1001

	)

95 
	#IF_IFACE_X21
 0x1002

	)

96 
	#IF_IFACE_T1
 0x1003

	)

97 
	#IF_IFACE_E1
 0x1004

	)

98 
	#IF_IFACE_SYNC_SERIAL
 0x1005

	)

99 
	#IF_IFACE_X21D
 0x1006

	)

102 
	#IF_PROTO_HDLC
 0x2000

	)

103 
	#IF_PROTO_PPP
 0x2001

	)

104 
	#IF_PROTO_CISCO
 0x2002

	)

105 
	#IF_PROTO_FR
 0x2003

	)

106 
	#IF_PROTO_FR_ADD_PVC
 0x2004

	)

107 
	#IF_PROTO_FR_DEL_PVC
 0x2005

	)

108 
	#IF_PROTO_X25
 0x2006

	)

109 
	#IF_PROTO_HDLC_ETH
 0x2007

	)

110 
	#IF_PROTO_FR_ADD_ETH_PVC
 0x2008

	)

111 
	#IF_PROTO_FR_DEL_ETH_PVC
 0x2009

	)

112 
	#IF_PROTO_FR_PVC
 0x200A

	)

113 
	#IF_PROTO_FR_ETH_PVC
 0x200B

	)

114 
	#IF_PROTO_RAW
 0x200C

	)

118 
	mIF_OPER_UNKNOWN
,

119 
	mIF_OPER_NOTPRESENT
,

120 
	mIF_OPER_DOWN
,

121 
	mIF_OPER_LOWERLAYERDOWN
,

122 
	mIF_OPER_TESTING
,

123 
	mIF_OPER_DORMANT
,

124 
	mIF_OPER_UP
,

129 
	mIF_LINK_MODE_DEFAULT
,

130 
	mIF_LINK_MODE_DORMANT
,

143 
	sifm≠
 {

144 
	mmem_°¨t
;

145 
	mmem_íd
;

146 
	mba£_addr
;

147 
	múq
;

148 
	mdma
;

149 
	mp‹t
;

153 
	sif_£âögs
 {

154 
	mty≥
;

155 
	msize
;

158 
øw_hdlc_¥Ÿo
 *
	møw_hdlc
;

159 
cisco_¥Ÿo
 *
	mcisco
;

160 
‰_¥Ÿo
 *
	m‰
;

161 
‰_¥Ÿo_pvc
 *
	m‰_pvc
;

162 
‰_¥Ÿo_pvc_öfo
 *
	m‰_pvc_öfo
;

165 
sync_£rül_£âögs
 *
	msync
;

166 
ã1_£âögs
 *
	mã1
;

167 } 
	mifs_ifsu
;

177 
	si‰eq
 {

178 
	#IFHWADDRLEN
 6

	)

181 
	mi‰n_«me
[
IFNAMSIZ
];

182 } 
	mi‰_i‰n
;

185 
sockaddr
 
	mi‰u_addr
;

186 
sockaddr
 
	mi‰u_d°addr
;

187 
sockaddr
 
	mi‰u_brﬂdaddr
;

188 
sockaddr
 
	mi‰u_√tmask
;

189 
sockaddr
 
	mi‰u_hwaddr
;

190 
	mi‰u_Êags
;

191 
	mi‰u_ivÆue
;

192 
	mi‰u_mtu
;

193 
ifm≠
 
	mi‰u_m≠
;

194 
	mi‰u_¶ave
[
IFNAMSIZ
];

195 
	mi‰u_√w«me
[
IFNAMSIZ
];

196 * 
	mi‰u_d©a
;

197 
if_£âögs
 
	mi‰u_£âögs
;

198 } 
	mi‰_i‰u
;

201 
	#i‰_«me
 
i‰_i‰n
.
i‰n_«me


	)

202 
	#i‰_hwaddr
 
i‰_i‰u
.
i‰u_hwaddr


	)

203 
	#i‰_addr
 
i‰_i‰u
.
i‰u_addr


	)

204 
	#i‰_d°addr
 
i‰_i‰u
.
i‰u_d°addr


	)

205 
	#i‰_brﬂdaddr
 
i‰_i‰u
.
i‰u_brﬂdaddr


	)

206 
	#i‰_√tmask
 
i‰_i‰u
.
i‰u_√tmask


	)

207 
	#i‰_Êags
 
i‰_i‰u
.
i‰u_Êags


	)

208 
	#i‰_mëric
 
i‰_i‰u
.
i‰u_ivÆue


	)

209 
	#i‰_mtu
 
i‰_i‰u
.
i‰u_mtu


	)

210 
	#i‰_m≠
 
i‰_i‰u
.
i‰u_m≠


	)

211 
	#i‰_¶ave
 
i‰_i‰u
.
i‰u_¶ave


	)

212 
	#i‰_d©a
 
i‰_i‰u
.
i‰u_d©a


	)

213 
	#i‰_ifödex
 
i‰_i‰u
.
i‰u_ivÆue


	)

214 
	#i‰_b™dwidth
 
i‰_i‰u
.
i‰u_ivÆue


	)

215 
	#i‰_qÀn
 
i‰_i‰u
.
i‰u_ivÆue


	)

216 
	#i‰_√w«me
 
i‰_i‰u
.
i‰u_√w«me


	)

217 
	#i‰_£âögs
 
i‰_i‰u
.
i‰u_£âögs


	)

226 
	sifc⁄f
 {

227 
	mifc_Àn
;

229 *
	mifcu_buf
;

230 
i‰eq
 *
	mifcu_ªq
;

231 } 
	mifc_ifcu
;

233 
	#ifc_buf
 
ifc_ifcu
.
ifcu_buf


	)

234 
	#ifc_ªq
 
ifc_ifcu
.
ifcu_ªq


	)

	@/usr/include/linux/in.h

18 #i‚de‡
_LINUX_IN_H


19 
	#_LINUX_IN_H


	)

21 
	~<löux/ty≥s.h
>

22 
	~<löux/sockë.h
>

26 
	mIPPROTO_IP
 = 0,

27 
	#IPPROTO_IP
 
IPPROTO_IP


	)

28 
	mIPPROTO_ICMP
 = 1,

29 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

30 
	mIPPROTO_IGMP
 = 2,

31 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

32 
	mIPPROTO_IPIP
 = 4,

33 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

34 
	mIPPROTO_TCP
 = 6,

35 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

36 
	mIPPROTO_EGP
 = 8,

37 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

38 
	mIPPROTO_PUP
 = 12,

39 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

40 
	mIPPROTO_UDP
 = 17,

41 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

42 
	mIPPROTO_IDP
 = 22,

43 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

44 
	mIPPROTO_TP
 = 29,

45 
	#IPPROTO_TP
 
IPPROTO_TP


	)

46 
	mIPPROTO_DCCP
 = 33,

47 
	#IPPROTO_DCCP
 
IPPROTO_DCCP


	)

48 
	mIPPROTO_IPV6
 = 41,

49 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

50 
	mIPPROTO_RSVP
 = 46,

51 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

52 
	mIPPROTO_GRE
 = 47,

53 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

54 
	mIPPROTO_ESP
 = 50,

55 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

56 
	mIPPROTO_AH
 = 51,

57 
	#IPPROTO_AH
 
IPPROTO_AH


	)

58 
	mIPPROTO_MTP
 = 92,

59 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

60 
	mIPPROTO_BEETPH
 = 94,

61 
	#IPPROTO_BEETPH
 
IPPROTO_BEETPH


	)

62 
	mIPPROTO_ENCAP
 = 98,

63 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

64 
	mIPPROTO_PIM
 = 103,

65 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

66 
	mIPPROTO_COMP
 = 108,

67 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

68 
	mIPPROTO_SCTP
 = 132,

69 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

70 
	mIPPROTO_UDPLITE
 = 136,

71 
	#IPPROTO_UDPLITE
 
IPPROTO_UDPLITE


	)

72 
	mIPPROTO_RAW
 = 255,

73 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

74 
	mIPPROTO_MAX


79 
	sö_addr
 {

80 
__be32
 
	ms_addr
;

83 
	#IP_TOS
 1

	)

84 
	#IP_TTL
 2

	)

85 
	#IP_HDRINCL
 3

	)

86 
	#IP_OPTIONS
 4

	)

87 
	#IP_ROUTER_ALERT
 5

	)

88 
	#IP_RECVOPTS
 6

	)

89 
	#IP_RETOPTS
 7

	)

90 
	#IP_PKTINFO
 8

	)

91 
	#IP_PKTOPTIONS
 9

	)

92 
	#IP_MTU_DISCOVER
 10

	)

93 
	#IP_RECVERR
 11

	)

94 
	#IP_RECVTTL
 12

	)

95 
	#IP_RECVTOS
 13

	)

96 
	#IP_MTU
 14

	)

97 
	#IP_FREEBIND
 15

	)

98 
	#IP_IPSEC_POLICY
 16

	)

99 
	#IP_XFRM_POLICY
 17

	)

100 
	#IP_PASSSEC
 18

	)

101 
	#IP_TRANSPARENT
 19

	)

104 
	#IP_RECVRETOPTS
 
IP_RETOPTS


	)

107 
	#IP_ORIGDSTADDR
 20

	)

108 
	#IP_RECVORIGDSTADDR
 
IP_ORIGDSTADDR


	)

110 
	#IP_MINTTL
 21

	)

111 
	#IP_NODEFRAG
 22

	)

114 
	#IP_PMTUDISC_DONT
 0

	)

115 
	#IP_PMTUDISC_WANT
 1

	)

116 
	#IP_PMTUDISC_DO
 2

	)

117 
	#IP_PMTUDISC_PROBE
 3

	)

122 
	#IP_PMTUDISC_INTERFACE
 4

	)

124 
	#IP_MULTICAST_IF
 32

	)

125 
	#IP_MULTICAST_TTL
 33

	)

126 
	#IP_MULTICAST_LOOP
 34

	)

127 
	#IP_ADD_MEMBERSHIP
 35

	)

128 
	#IP_DROP_MEMBERSHIP
 36

	)

129 
	#IP_UNBLOCK_SOURCE
 37

	)

130 
	#IP_BLOCK_SOURCE
 38

	)

131 
	#IP_ADD_SOURCE_MEMBERSHIP
 39

	)

132 
	#IP_DROP_SOURCE_MEMBERSHIP
 40

	)

133 
	#IP_MSFILTER
 41

	)

134 
	#MCAST_JOIN_GROUP
 42

	)

135 
	#MCAST_BLOCK_SOURCE
 43

	)

136 
	#MCAST_UNBLOCK_SOURCE
 44

	)

137 
	#MCAST_LEAVE_GROUP
 45

	)

138 
	#MCAST_JOIN_SOURCE_GROUP
 46

	)

139 
	#MCAST_LEAVE_SOURCE_GROUP
 47

	)

140 
	#MCAST_MSFILTER
 48

	)

141 
	#IP_MULTICAST_ALL
 49

	)

142 
	#IP_UNICAST_IF
 50

	)

144 
	#MCAST_EXCLUDE
 0

	)

145 
	#MCAST_INCLUDE
 1

	)

148 
	#IP_DEFAULT_MULTICAST_TTL
 1

	)

149 
	#IP_DEFAULT_MULTICAST_LOOP
 1

	)

153 
	sù_mªq
 {

154 
ö_addr
 
	mimr_mu…üddr
;

155 
ö_addr
 
	mimr_öãrÁ˚
;

158 
	sù_mªqn
 {

159 
ö_addr
 
	mimr_mu…üddr
;

160 
ö_addr
 
	mimr_addªss
;

161 
	mimr_ifödex
;

164 
	sù_mªq_sour˚
 {

165 
__be32
 
	mimr_mu…üddr
;

166 
__be32
 
	mimr_öãrÁ˚
;

167 
__be32
 
	mimr_sour˚addr
;

170 
	sù_msfûãr
 {

171 
__be32
 
	mimsf_mu…üddr
;

172 
__be32
 
	mimsf_öãrÁ˚
;

173 
__u32
 
	mimsf_fmode
;

174 
__u32
 
	mimsf_num§c
;

175 
__be32
 
	mimsf_¶i°
[1];

178 
	#IP_MSFILTER_SIZE
(
num§c
) \

179 ((
ù_msfûãr
Ë- (
__u32
) \

180 + (
num§c
Ë* (
__u32
))

	)

182 
	sgroup_ªq
 {

183 
__u32
 
	mgr_öãrÁ˚
;

184 
__kî√l_sockaddr_°‹age
 
	mgr_group
;

187 
	sgroup_sour˚_ªq
 {

188 
__u32
 
	mg§_öãrÁ˚
;

189 
__kî√l_sockaddr_°‹age
 
	mg§_group
;

190 
__kî√l_sockaddr_°‹age
 
	mg§_sour˚
;

193 
	sgroup_fûãr
 {

194 
__u32
 
	mgf_öãrÁ˚
;

195 
__kî√l_sockaddr_°‹age
 
	mgf_group
;

196 
__u32
 
	mgf_fmode
;

197 
__u32
 
	mgf_num§c
;

198 
__kî√l_sockaddr_°‹age
 
	mgf_¶i°
[1];

201 
	#GROUP_FILTER_SIZE
(
num§c
) \

202 ((
group_fûãr
Ë- (
__kî√l_sockaddr_°‹age
) \

203 + (
num§c
Ë* (
__kî√l_sockaddr_°‹age
))

	)

205 
	sö_pktöfo
 {

206 
	mùi_ifödex
;

207 
ö_addr
 
	mùi_•ec_d°
;

208 
ö_addr
 
	mùi_addr
;

212 
	#__SOCK_SIZE__
 16

	)

213 
	ssockaddr_ö
 {

214 
__kî√l_ß_Ámûy_t
 
	msö_Ámûy
;

215 
__be16
 
	msö_p‹t
;

216 
ö_addr
 
	msö_addr
;

219 
	m__∑d
[
__SOCK_SIZE__
 - () -

220 (Ë- (
ö_addr
)];

222 
	#sö_zîo
 
__∑d


	)

230 
	#IN_CLASSA
(
a
Ë((((Ë◊)Ë& 0x80000000Ë=0)

	)

231 
	#IN_CLASSA_NET
 0xff000000

	)

232 
	#IN_CLASSA_NSHIFT
 24

	)

233 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

234 
	#IN_CLASSA_MAX
 128

	)

236 
	#IN_CLASSB
(
a
Ë((((Ë◊)Ë& 0xc0000000Ë=0x80000000)

	)

237 
	#IN_CLASSB_NET
 0xffff0000

	)

238 
	#IN_CLASSB_NSHIFT
 16

	)

239 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

240 
	#IN_CLASSB_MAX
 65536

	)

242 
	#IN_CLASSC
(
a
Ë((((Ë◊)Ë& 0xe0000000Ë=0xc0000000)

	)

243 
	#IN_CLASSC_NET
 0xffffff00

	)

244 
	#IN_CLASSC_NSHIFT
 8

	)

245 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

247 
	#IN_CLASSD
(
a
Ë((((Ë◊)Ë& 0xf0000000Ë=0xe0000000)

	)

248 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

249 
	#IN_MULTICAST_NET
 0xF0000000

	)

251 
	#IN_EXPERIMENTAL
(
a
Ë((((Ë◊)Ë& 0xf0000000Ë=0xf0000000)

	)

252 
	#IN_BADCLASS
(
a
Ë
	`IN_EXPERIMENTAL
(◊))

	)

255 
	#INADDR_ANY
 ((Ë0x00000000)

	)

258 
	#INADDR_BROADCAST
 ((Ë0xffffffff)

	)

261 
	#INADDR_NONE
 ((Ë0xffffffff)

	)

264 
	#IN_LOOPBACKNET
 127

	)

267 
	#INADDR_LOOPBACK
 0x7f000001

	)

268 
	#IN_LOOPBACK
(
a
Ë((((Ë◊)Ë& 0xff000000Ë=0x7f000000)

	)

271 
	#INADDR_UNSPEC_GROUP
 0xe0000000U

	)

272 
	#INADDR_ALLHOSTS_GROUP
 0xe0000001U

	)

273 
	#INADDR_ALLRTRS_GROUP
 0xe0000002U

	)

274 
	#INADDR_MAX_LOCAL_GROUP
 0xe00000ffU

	)

278 
	~<asm/byã‹dî.h
>

	@/usr/include/linux/in6.h

21 #i‚de‡
_LINUX_IN6_H


22 
	#_LINUX_IN6_H


	)

24 
	~<löux/ty≥s.h
>

25 
	~<löux/libc-com∑t.h
>

31 #i‡
__UAPI_DEF_IN6_ADDR


32 
	sö6_addr
 {

34 
__u8
 
	mu6_addr8
[16];

35 #i‡
__UAPI_DEF_IN6_ADDR_ALT


36 
__be16
 
	mu6_addr16
[8];

37 
__be32
 
	mu6_addr32
[4];

39 } 
	mö6_u
;

40 
	#s6_addr
 
ö6_u
.
u6_addr8


	)

41 #i‡
__UAPI_DEF_IN6_ADDR_ALT


42 
	#s6_addr16
 
ö6_u
.
u6_addr16


	)

43 
	#s6_addr32
 
ö6_u
.
u6_addr32


	)

48 #i‡
__UAPI_DEF_SOCKADDR_IN6


49 
	ssockaddr_ö6
 {

50 
	msö6_Ámûy
;

51 
__be16
 
	msö6_p‹t
;

52 
__be32
 
	msö6_Êowöfo
;

53 
ö6_addr
 
	msö6_addr
;

54 
__u32
 
	msö6_sc›e_id
;

58 #i‡
__UAPI_DEF_IPV6_MREQ


59 
	sùv6_mªq
 {

61 
ö6_addr
 
	mùv6mr_mu…üddr
;

64 
	mùv6mr_ifödex
;

68 
	#ùv6mr_aˇddr
 
ùv6mr_mu…üddr


	)

70 
	sö6_Êowœbñ_ªq
 {

71 
ö6_addr
 
	mÊr_d°
;

72 
__be32
 
	mÊr_œbñ
;

73 
__u8
 
	mÊr_a˘i⁄
;

74 
__u8
 
	mÊr_sh¨e
;

75 
__u16
 
	mÊr_Êags
;

76 
__u16
 
	mÊr_expúes
;

77 
__u16
 
	mÊr_lögî
;

78 
__u32
 
	m__Êr_∑d
;

82 
	#IPV6_FL_A_GET
 0

	)

83 
	#IPV6_FL_A_PUT
 1

	)

84 
	#IPV6_FL_A_RENEW
 2

	)

86 
	#IPV6_FL_F_CREATE
 1

	)

87 
	#IPV6_FL_F_EXCL
 2

	)

89 
	#IPV6_FL_S_NONE
 0

	)

90 
	#IPV6_FL_S_EXCL
 1

	)

91 
	#IPV6_FL_S_PROCESS
 2

	)

92 
	#IPV6_FL_S_USER
 3

	)

93 
	#IPV6_FL_S_ANY
 255

	)

104 
	#IPV6_FLOWINFO_FLOWLABEL
 0x000fffff

	)

105 
	#IPV6_FLOWINFO_PRIORITY
 0x0ff00000

	)

108 
	#IPV6_PRIORITY_UNCHARACTERIZED
 0x0000

	)

109 
	#IPV6_PRIORITY_FILLER
 0x0100

	)

110 
	#IPV6_PRIORITY_UNATTENDED
 0x0200

	)

111 
	#IPV6_PRIORITY_RESERVED1
 0x0300

	)

112 
	#IPV6_PRIORITY_BULK
 0x0400

	)

113 
	#IPV6_PRIORITY_RESERVED2
 0x0500

	)

114 
	#IPV6_PRIORITY_INTERACTIVE
 0x0600

	)

115 
	#IPV6_PRIORITY_CONTROL
 0x0700

	)

116 
	#IPV6_PRIORITY_8
 0x0800

	)

117 
	#IPV6_PRIORITY_9
 0x0900

	)

118 
	#IPV6_PRIORITY_10
 0x0a00

	)

119 
	#IPV6_PRIORITY_11
 0x0b00

	)

120 
	#IPV6_PRIORITY_12
 0x0c00

	)

121 
	#IPV6_PRIORITY_13
 0x0d00

	)

122 
	#IPV6_PRIORITY_14
 0x0e00

	)

123 
	#IPV6_PRIORITY_15
 0x0f00

	)

128 #i‡
__UAPI_DEF_IPPROTO_V6


130 
	mIPPROTO_HOPOPTS
 = 0,

131 
	#IPPROTO_HOPOPTS
 
IPPROTO_HOPOPTS


	)

132 
	mIPPROTO_ROUTING
 = 43,

133 
	#IPPROTO_ROUTING
 
IPPROTO_ROUTING


	)

134 
	mIPPROTO_FRAGMENT
 = 44,

135 
	#IPPROTO_FRAGMENT
 
IPPROTO_FRAGMENT


	)

136 
	mIPPROTO_ICMPV6
 = 58,

137 
	#IPPROTO_ICMPV6
 
IPPROTO_ICMPV6


	)

138 
	mIPPROTO_NONE
 = 59,

139 
	#IPPROTO_NONE
 
IPPROTO_NONE


	)

140 
	mIPPROTO_DSTOPTS
 = 60,

141 
	#IPPROTO_DSTOPTS
 
IPPROTO_DSTOPTS


	)

142 
	mIPPROTO_MH
 = 135,

143 
	#IPPROTO_MH
 
IPPROTO_MH


	)

150 
	#IPV6_TLV_PAD1
 0

	)

151 
	#IPV6_TLV_PADN
 1

	)

152 
	#IPV6_TLV_ROUTERALERT
 5

	)

153 
	#IPV6_TLV_JUMBO
 194

	)

154 
	#IPV6_TLV_HAO
 201

	)

159 #i‡
__UAPI_DEF_IPV6_OPTIONS


160 
	#IPV6_ADDRFORM
 1

	)

161 
	#IPV6_2292PKTINFO
 2

	)

162 
	#IPV6_2292HOPOPTS
 3

	)

163 
	#IPV6_2292DSTOPTS
 4

	)

164 
	#IPV6_2292RTHDR
 5

	)

165 
	#IPV6_2292PKTOPTIONS
 6

	)

166 
	#IPV6_CHECKSUM
 7

	)

167 
	#IPV6_2292HOPLIMIT
 8

	)

168 
	#IPV6_NEXTHOP
 9

	)

169 
	#IPV6_AUTHHDR
 10

	)

170 
	#IPV6_FLOWINFO
 11

	)

172 
	#IPV6_UNICAST_HOPS
 16

	)

173 
	#IPV6_MULTICAST_IF
 17

	)

174 
	#IPV6_MULTICAST_HOPS
 18

	)

175 
	#IPV6_MULTICAST_LOOP
 19

	)

176 
	#IPV6_ADD_MEMBERSHIP
 20

	)

177 
	#IPV6_DROP_MEMBERSHIP
 21

	)

178 
	#IPV6_ROUTER_ALERT
 22

	)

179 
	#IPV6_MTU_DISCOVER
 23

	)

180 
	#IPV6_MTU
 24

	)

181 
	#IPV6_RECVERR
 25

	)

182 
	#IPV6_V6ONLY
 26

	)

183 
	#IPV6_JOIN_ANYCAST
 27

	)

184 
	#IPV6_LEAVE_ANYCAST
 28

	)

187 
	#IPV6_PMTUDISC_DONT
 0

	)

188 
	#IPV6_PMTUDISC_WANT
 1

	)

189 
	#IPV6_PMTUDISC_DO
 2

	)

190 
	#IPV6_PMTUDISC_PROBE
 3

	)

193 
	#IPV6_FLOWLABEL_MGR
 32

	)

194 
	#IPV6_FLOWINFO_SEND
 33

	)

196 
	#IPV6_IPSEC_POLICY
 34

	)

197 
	#IPV6_XFRM_POLICY
 35

	)

219 
	#IPV6_RECVPKTINFO
 49

	)

220 
	#IPV6_PKTINFO
 50

	)

221 
	#IPV6_RECVHOPLIMIT
 51

	)

222 
	#IPV6_HOPLIMIT
 52

	)

223 
	#IPV6_RECVHOPOPTS
 53

	)

224 
	#IPV6_HOPOPTS
 54

	)

225 
	#IPV6_RTHDRDSTOPTS
 55

	)

226 
	#IPV6_RECVRTHDR
 56

	)

227 
	#IPV6_RTHDR
 57

	)

228 
	#IPV6_RECVDSTOPTS
 58

	)

229 
	#IPV6_DSTOPTS
 59

	)

230 
	#IPV6_RECVPATHMTU
 60

	)

231 
	#IPV6_PATHMTU
 61

	)

232 
	#IPV6_DONTFRAG
 62

	)

234 
	#IPV6_USE_MIN_MTU
 63

	)

250 
	#IPV6_RECVTCLASS
 66

	)

251 
	#IPV6_TCLASS
 67

	)

265 
	#IPV6_ADDR_PREFERENCES
 72

	)

267 
	#IPV6_PREFER_SRC_TMP
 0x0001

	)

268 
	#IPV6_PREFER_SRC_PUBLIC
 0x0002

	)

269 
	#IPV6_PREFER_SRC_PUBTMP_DEFAULT
 0x0100

	)

270 
	#IPV6_PREFER_SRC_COA
 0x0004

	)

271 
	#IPV6_PREFER_SRC_HOME
 0x0400

	)

272 
	#IPV6_PREFER_SRC_CGA
 0x0008

	)

273 
	#IPV6_PREFER_SRC_NONCGA
 0x0800

	)

276 
	#IPV6_MINHOPCOUNT
 73

	)

278 
	#IPV6_ORIGDSTADDR
 74

	)

279 
	#IPV6_RECVORIGDSTADDR
 
IPV6_ORIGDSTADDR


	)

280 
	#IPV6_TRANSPARENT
 75

	)

281 
	#IPV6_UNICAST_IF
 76

	)

	@/usr/include/linux/kernel.h

1 #i‚de‡
_LINUX_KERNEL_H


2 
	#_LINUX_KERNEL_H


	)

4 
	~<löux/sysöfo.h
>

9 
	#__ALIGN_KERNEL
(
x
, 
a
Ë
	`__ALIGN_KERNEL_MASK
(x, (
	`ty≥of
(x))◊Ë- 1)

	)

10 
	#__ALIGN_KERNEL_MASK
(
x
, 
mask
Ë(((xË+ (mask)Ë& ~(mask))

	)

	@/usr/include/linux/msg.h

1 #i‚de‡
_LINUX_MSG_H


2 
	#_LINUX_MSG_H


	)

4 
	~<löux/ùc.h
>

7 
	#MSG_STAT
 11

	)

8 
	#MSG_INFO
 12

	)

11 
	#MSG_NOERROR
 010000

	)

12 
	#MSG_EXCEPT
 020000

	)

13 
	#MSG_COPY
 040000

	)

16 
	smsqid_ds
 {

17 
ùc_≥rm
 
	mmsg_≥rm
;

18 
msg
 *
	mmsg_fú°
;

19 
msg
 *
	mmsg_œ°
;

20 
__kî√l_time_t
 
	mmsg_°ime
;

21 
__kî√l_time_t
 
	mmsg_πime
;

22 
__kî√l_time_t
 
	mmsg_˘ime
;

23 
	mmsg_lcbyãs
;

24 
	mmsg_lqbyãs
;

25 
	mmsg_cbyãs
;

26 
	mmsg_qnum
;

27 
	mmsg_qbyãs
;

28 
__kî√l_ùc_pid_t
 
	mmsg_l•id
;

29 
__kî√l_ùc_pid_t
 
	mmsg_Ãpid
;

33 
	~<asm/msgbuf.h
>

36 
	smsgbuf
 {

37 
	mmty≥
;

38 
	mmãxt
[1];

42 
	smsgöfo
 {

43 
	mmsgpoﬁ
;

44 
	mmsgm≠
;

45 
	mmsgmax
;

46 
	mmsgmnb
;

47 
	mmsgmni
;

48 
	mmsgssz
;

49 
	mmsgtql
;

50 
	mmsg£g
;

61 
	#MSG_MEM_SCALE
 32

	)

63 
	#MSGMNI
 16

	)

64 
	#MSGMAX
 8192

	)

65 
	#MSGMNB
 16384

	)

68 
	#MSGPOOL
 (
MSGMNI
 * 
MSGMNB
 / 1024Ë

	)

69 
	#MSGTQL
 
MSGMNB


	)

70 
	#MSGMAP
 
MSGMNB


	)

71 
	#MSGSSZ
 16

	)

72 
	#__MSGSEG
 ((
MSGPOOL
 * 1024Ë/ 
MSGSSZ
Ë

	)

73 
	#MSGSEG
 (
__MSGSEG
 <0xfff‡? __MSGSEG : 0xffff)

	)

	@/usr/include/linux/netdevice.h

25 #i‚de‡
_LINUX_NETDEVICE_H


26 
	#_LINUX_NETDEVICE_H


	)

28 
	~<löux/if.h
>

29 
	~<löux/if_ëhî.h
>

30 
	~<löux/if_∑ckë.h
>

31 
	~<löux/if_lök.h
>

34 
	#MAX_ADDR_LEN
 32

	)

37 
	#INIT_NETDEV_GROUP
 0

	)

43 
	mIF_PORT_UNKNOWN
 = 0,

44 
	mIF_PORT_10BASE2
,

45 
	mIF_PORT_10BASET
,

46 
	mIF_PORT_AUI
,

47 
	mIF_PORT_100BASET
,

48 
	mIF_PORT_100BASETX
,

49 
	mIF_PORT_100BASEFX


	@/usr/include/linux/netfilter.h

1 #i‚de‡
__LINUX_NETFILTER_H


2 
	#__LINUX_NETFILTER_H


	)

4 
	~<löux/ty≥s.h
>

6 
	~<löux/sys˘l.h
>

10 
	#NF_DROP
 0

	)

11 
	#NF_ACCEPT
 1

	)

12 
	#NF_STOLEN
 2

	)

13 
	#NF_QUEUE
 3

	)

14 
	#NF_REPEAT
 4

	)

15 
	#NF_STOP
 5

	)

16 
	#NF_MAX_VERDICT
 
NF_STOP


	)

21 
	#NF_VERDICT_MASK
 0x000000ff

	)

24 
	#NF_VERDICT_FLAG_QUEUE_BYPASS
 0x00008000

	)

27 
	#NF_VERDICT_QMASK
 0xffff0000

	)

28 
	#NF_VERDICT_QBITS
 16

	)

30 
	#NF_QUEUE_NR
(
x
Ë((((xË<< 16Ë& 
NF_VERDICT_QMASK
Ë| 
NF_QUEUE
)

	)

32 
	#NF_DROP_ERR
(
x
Ë(((-xË<< 16Ë| 
NF_DROP
)

	)

37 
	#NFC_UNKNOWN
 0x4000

	)

38 
	#NFC_ALTERED
 0x8000

	)

41 
	#NF_VERDICT_BITS
 16

	)

43 
	enf_öë_hooks
 {

44 
	mNF_INET_PRE_ROUTING
,

45 
	mNF_INET_LOCAL_IN
,

46 
	mNF_INET_FORWARD
,

47 
	mNF_INET_LOCAL_OUT
,

48 
	mNF_INET_POST_ROUTING
,

49 
	mNF_INET_NUMHOOKS


53 
	mNFPROTO_UNSPEC
 = 0,

54 
	mNFPROTO_IPV4
 = 2,

55 
	mNFPROTO_ARP
 = 3,

56 
	mNFPROTO_BRIDGE
 = 7,

57 
	mNFPROTO_IPV6
 = 10,

58 
	mNFPROTO_DECNET
 = 12,

59 
	mNFPROTO_NUMPROTO
,

62 
	unf_öë_addr
 {

63 
__u32
 
	mÆl
[4];

64 
__be32
 
	mù
;

65 
__be32
 
	mù6
[4];

66 
ö_addr
 
	mö
;

67 
ö6_addr
 
	mö6
;

	@/usr/include/linux/netfilter_ipv4.h

4 #i‚de‡
__LINUX_IP_NETFILTER_H


5 
	#__LINUX_IP_NETFILTER_H


	)

8 
	~<löux/√tfûãr.h
>

12 
	~<limôs.h
>

16 
	#NFC_IP_SRC
 0x0001

	)

18 
	#NFC_IP_DST
 0x0002

	)

20 
	#NFC_IP_IF_IN
 0x0004

	)

22 
	#NFC_IP_IF_OUT
 0x0008

	)

24 
	#NFC_IP_TOS
 0x0010

	)

26 
	#NFC_IP_PROTO
 0x0020

	)

28 
	#NFC_IP_OPTIONS
 0x0040

	)

30 
	#NFC_IP_FRAG
 0x0080

	)

34 
	#NFC_IP_TCPFLAGS
 0x0100

	)

36 
	#NFC_IP_SRC_PT
 0x0200

	)

38 
	#NFC_IP_DST_PT
 0x0400

	)

40 
	#NFC_IP_PROTO_UNKNOWN
 0x2000

	)

44 
	#NF_IP_PRE_ROUTING
 0

	)

46 
	#NF_IP_LOCAL_IN
 1

	)

48 
	#NF_IP_FORWARD
 2

	)

50 
	#NF_IP_LOCAL_OUT
 3

	)

52 
	#NF_IP_POST_ROUTING
 4

	)

53 
	#NF_IP_NUMHOOKS
 5

	)

55 
	enf_ù_hook_¥i‹ôõs
 {

56 
	mNF_IP_PRI_FIRST
 = 
INT_MIN
,

57 
	mNF_IP_PRI_CONNTRACK_DEFRAG
 = -400,

58 
	mNF_IP_PRI_RAW
 = -300,

59 
	mNF_IP_PRI_SELINUX_FIRST
 = -225,

60 
	mNF_IP_PRI_CONNTRACK
 = -200,

61 
	mNF_IP_PRI_MANGLE
 = -150,

62 
	mNF_IP_PRI_NAT_DST
 = -100,

63 
	mNF_IP_PRI_FILTER
 = 0,

64 
	mNF_IP_PRI_SECURITY
 = 50,

65 
	mNF_IP_PRI_NAT_SRC
 = 100,

66 
	mNF_IP_PRI_SELINUX_LAST
 = 225,

67 
	mNF_IP_PRI_CONNTRACK_HELPER
 = 300,

68 
	mNF_IP_PRI_CONNTRACK_CONFIRM
 = 
INT_MAX
,

69 
	mNF_IP_PRI_LAST
 = 
INT_MAX
,

76 
	#SO_ORIGINAL_DST
 80

	)

	@/usr/include/linux/random.h

7 #i‚de‡
_LINUX_RANDOM_H


8 
	#_LINUX_RANDOM_H


	)

10 
	~<löux/ty≥s.h
>

11 
	~<löux/io˘l.h
>

12 
	~<löux/úqƒ.h
>

17 
	#RNDGETENTCNT
 
	`_IOR
–'R', 0x00, )

	)

20 
	#RNDADDTOENTCNT
 
	`_IOW
–'R', 0x01, )

	)

23 
	#RNDGETPOOL
 
	`_IOR
–'R', 0x02, [2] )

	)

29 
	#RNDADDENTROPY
 
	`_IOW
–'R', 0x03, [2] )

	)

32 
	#RNDZAPENTCNT
 
	`_IO
–'R', 0x04 )

	)

35 
	#RNDCLEARPOOL
 
	`_IO
–'R', 0x06 )

	)

37 
	sønd_poﬁ_öfo
 {

38 
	míå›y_cou¡
;

39 
	mbuf_size
;

40 
__u32
 
	mbuf
[0];

	@/usr/include/linux/sched.h

1 #i‚de‡
_LINUX_SCHED_H


2 
	#_LINUX_SCHED_H


	)

7 
	#CSIGNAL
 0x000000f‡

	)

8 
	#CLONE_VM
 0x00000100

	)

9 
	#CLONE_FS
 0x00000200

	)

10 
	#CLONE_FILES
 0x00000400

	)

11 
	#CLONE_SIGHAND
 0x00000800

	)

12 
	#CLONE_PTRACE
 0x00002000

	)

13 
	#CLONE_VFORK
 0x00004000

	)

14 
	#CLONE_PARENT
 0x00008000

	)

15 
	#CLONE_THREAD
 0x00010000

	)

16 
	#CLONE_NEWNS
 0x00020000

	)

17 
	#CLONE_SYSVSEM
 0x00040000

	)

18 
	#CLONE_SETTLS
 0x00080000

	)

19 
	#CLONE_PARENT_SETTID
 0x00100000

	)

20 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

21 
	#CLONE_DETACHED
 0x00400000

	)

22 
	#CLONE_UNTRACED
 0x00800000

	)

23 
	#CLONE_CHILD_SETTID
 0x01000000

	)

26 
	#CLONE_NEWUTS
 0x04000000

	)

27 
	#CLONE_NEWIPC
 0x08000000

	)

28 
	#CLONE_NEWUSER
 0x10000000

	)

29 
	#CLONE_NEWPID
 0x20000000

	)

30 
	#CLONE_NEWNET
 0x40000000

	)

31 
	#CLONE_IO
 0x80000000

	)

36 
	#SCHED_NORMAL
 0

	)

37 
	#SCHED_FIFO
 1

	)

38 
	#SCHED_RR
 2

	)

39 
	#SCHED_BATCH
 3

	)

41 
	#SCHED_IDLE
 5

	)

43 
	#SCHED_RESET_ON_FORK
 0x40000000

	)

	@/usr/include/linux/stddef.h

	@/usr/include/linux/sysctl.h

22 #i‚de‡
_LINUX_SYSCTL_H


23 
	#_LINUX_SYSCTL_H


	)

25 
	~<löux/kî√l.h
>

26 
	~<löux/ty≥s.h
>

29 
	gcom∂ëi⁄
;

31 
	#CTL_MAXNAME
 10

	)

36 
	s__sys˘l_¨gs
 {

37 *
	m«me
;

38 
	m∆í
;

39 *
	mﬁdvÆ
;

40 
size_t
 *
	mﬁdÀ≈
;

41 *
	m√wvÆ
;

42 
size_t
 
	m√wÀn
;

43 
	m__unu£d
[4];

52 
	mCTL_KERN
=1,

53 
	mCTL_VM
=2,

54 
	mCTL_NET
=3,

55 
	mCTL_PROC
=4,

56 
	mCTL_FS
=5,

57 
	mCTL_DEBUG
=6,

58 
	mCTL_DEV
=7,

59 
	mCTL_BUS
=8,

60 
	mCTL_ABI
=9,

61 
	mCTL_CPU
=10,

62 
	mCTL_ARLAN
=254,

63 
	mCTL_S390DBF
=5677,

64 
	mCTL_SUNRPC
=7249,

65 
	mCTL_PM
=9899,

66 
	mCTL_FRV
=9898,

72 
	mCTL_BUS_ISA
=1

78 
	mINOTIFY_MAX_USER_INSTANCES
=1,

79 
	mINOTIFY_MAX_USER_WATCHES
=2,

80 
	mINOTIFY_MAX_QUEUED_EVENTS
=3

86 
	mKERN_OSTYPE
=1,

87 
	mKERN_OSRELEASE
=2,

88 
	mKERN_OSREV
=3,

89 
	mKERN_VERSION
=4,

90 
	mKERN_SECUREMASK
=5,

91 
	mKERN_PROF
=6,

92 
	mKERN_NODENAME
=7,

93 
	mKERN_DOMAINNAME
=8,

95 
	mKERN_PANIC
=15,

96 
	mKERN_REALROOTDEV
=16,

98 
	mKERN_SPARC_REBOOT
=21,

99 
	mKERN_CTLALTDEL
=22,

100 
	mKERN_PRINTK
=23,

101 
	mKERN_NAMETRANS
=24,

102 
	mKERN_PPC_HTABRECLAIM
=25,

103 
	mKERN_PPC_ZEROPAGED
=26,

104 
	mKERN_PPC_POWERSAVE_NAP
=27,

105 
	mKERN_MODPROBE
=28,

106 
	mKERN_SG_BIG_BUFF
=29,

107 
	mKERN_ACCT
=30,

108 
	mKERN_PPC_L2CR
=31,

110 
	mKERN_RTSIGNR
=32,

111 
	mKERN_RTSIGMAX
=33,

113 
	mKERN_SHMMAX
=34,

114 
	mKERN_MSGMAX
=35,

115 
	mKERN_MSGMNB
=36,

116 
	mKERN_MSGPOOL
=37,

117 
	mKERN_SYSRQ
=38,

118 
	mKERN_MAX_THREADS
=39,

119 
	mKERN_RANDOM
=40,

120 
	mKERN_SHMALL
=41,

121 
	mKERN_MSGMNI
=42,

122 
	mKERN_SEM
=43,

123 
	mKERN_SPARC_STOP_A
=44,

124 
	mKERN_SHMMNI
=45,

125 
	mKERN_OVERFLOWUID
=46,

126 
	mKERN_OVERFLOWGID
=47,

127 
	mKERN_SHMPATH
=48,

128 
	mKERN_HOTPLUG
=49,

129 
	mKERN_IEEE_EMULATION_WARNINGS
=50,

130 
	mKERN_S390_USER_DEBUG_LOGGING
=51,

131 
	mKERN_CORE_USES_PID
=52,

132 
	mKERN_TAINTED
=53,

133 
	mKERN_CADPID
=54,

134 
	mKERN_PIDMAX
=55,

135 
	mKERN_CORE_PATTERN
=56,

136 
	mKERN_PANIC_ON_OOPS
=57,

137 
	mKERN_HPPA_PWRSW
=58,

138 
	mKERN_HPPA_UNALIGNED
=59,

139 
	mKERN_PRINTK_RATELIMIT
=60,

140 
	mKERN_PRINTK_RATELIMIT_BURST
=61,

141 
	mKERN_PTY
=62,

142 
	mKERN_NGROUPS_MAX
=63,

143 
	mKERN_SPARC_SCONS_PWROFF
=64,

144 
	mKERN_HZ_TIMER
=65,

145 
	mKERN_UNKNOWN_NMI_PANIC
=66,

146 
	mKERN_BOOTLOADER_TYPE
=67,

147 
	mKERN_RANDOMIZE
=68,

148 
	mKERN_SETUID_DUMPABLE
=69,

149 
	mKERN_SPIN_RETRY
=70,

150 
	mKERN_ACPI_VIDEO_FLAGS
=71,

151 
	mKERN_IA64_UNALIGNED
=72,

152 
	mKERN_COMPAT_LOG
=73,

153 
	mKERN_MAX_LOCK_DEPTH
=74,

154 
	mKERN_NMI_WATCHDOG
=75,

155 
	mKERN_PANIC_ON_NMI
=76,

163 
	mVM_UNUSED1
=1,

164 
	mVM_UNUSED2
=2,

165 
	mVM_UNUSED3
=3,

166 
	mVM_UNUSED4
=4,

167 
	mVM_OVERCOMMIT_MEMORY
=5,

168 
	mVM_UNUSED5
=6,

169 
	mVM_UNUSED7
=7,

170 
	mVM_UNUSED8
=8,

171 
	mVM_UNUSED9
=9,

172 
	mVM_PAGE_CLUSTER
=10,

173 
	mVM_DIRTY_BACKGROUND
=11,

174 
	mVM_DIRTY_RATIO
=12,

175 
	mVM_DIRTY_WB_CS
=13,

176 
	mVM_DIRTY_EXPIRE_CS
=14,

177 
	mVM_NR_PDFLUSH_THREADS
=15,

178 
	mVM_OVERCOMMIT_RATIO
=16,

179 
	mVM_PAGEBUF
=17,

180 
	mVM_HUGETLB_PAGES
=18,

181 
	mVM_SWAPPINESS
=19,

182 
	mVM_LOWMEM_RESERVE_RATIO
=20,

183 
	mVM_MIN_FREE_KBYTES
=21,

184 
	mVM_MAX_MAP_COUNT
=22,

185 
	mVM_LAPTOP_MODE
=23,

186 
	mVM_BLOCK_DUMP
=24,

187 
	mVM_HUGETLB_GROUP
=25,

188 
	mVM_VFS_CACHE_PRESSURE
=26,

189 
	mVM_LEGACY_VA_LAYOUT
=27,

190 
	mVM_SWAP_TOKEN_TIMEOUT
=28,

191 
	mVM_DROP_PAGECACHE
=29,

192 
	mVM_PERCPU_PAGELIST_FRACTION
=30,

193 
	mVM_ZONE_RECLAIM_MODE
=31,

194 
	mVM_MIN_UNMAPPED
=32,

195 
	mVM_PANIC_ON_OOM
=33,

196 
	mVM_VDSO_ENABLED
=34,

197 
	mVM_MIN_SLAB
=35,

204 
	mNET_CORE
=1,

205 
	mNET_ETHER
=2,

206 
	mNET_802
=3,

207 
	mNET_UNIX
=4,

208 
	mNET_IPV4
=5,

209 
	mNET_IPX
=6,

210 
	mNET_ATALK
=7,

211 
	mNET_NETROM
=8,

212 
	mNET_AX25
=9,

213 
	mNET_BRIDGE
=10,

214 
	mNET_ROSE
=11,

215 
	mNET_IPV6
=12,

216 
	mNET_X25
=13,

217 
	mNET_TR
=14,

218 
	mNET_DECNET
=15,

219 
	mNET_ECONET
=16,

220 
	mNET_SCTP
=17,

221 
	mNET_LLC
=18,

222 
	mNET_NETFILTER
=19,

223 
	mNET_DCCP
=20,

224 
	mNET_IRDA
=412,

230 
	mRANDOM_POOLSIZE
=1,

231 
	mRANDOM_ENTROPY_COUNT
=2,

232 
	mRANDOM_READ_THRESH
=3,

233 
	mRANDOM_WRITE_THRESH
=4,

234 
	mRANDOM_BOOT_ID
=5,

235 
	mRANDOM_UUID
=6

241 
	mPTY_MAX
=1,

242 
	mPTY_NR
=2

248 
	mBUS_ISA_MEM_BASE
=1,

249 
	mBUS_ISA_PORT_BASE
=2,

250 
	mBUS_ISA_PORT_SHIFT
=3

256 
	mNET_CORE_WMEM_MAX
=1,

257 
	mNET_CORE_RMEM_MAX
=2,

258 
	mNET_CORE_WMEM_DEFAULT
=3,

259 
	mNET_CORE_RMEM_DEFAULT
=4,

261 
	mNET_CORE_MAX_BACKLOG
=6,

262 
	mNET_CORE_FASTROUTE
=7,

263 
	mNET_CORE_MSG_COST
=8,

264 
	mNET_CORE_MSG_BURST
=9,

265 
	mNET_CORE_OPTMEM_MAX
=10,

266 
	mNET_CORE_HOT_LIST_LENGTH
=11,

267 
	mNET_CORE_DIVERT_VERSION
=12,

268 
	mNET_CORE_NO_CONG_THRESH
=13,

269 
	mNET_CORE_NO_CONG
=14,

270 
	mNET_CORE_LO_CONG
=15,

271 
	mNET_CORE_MOD_CONG
=16,

272 
	mNET_CORE_DEV_WEIGHT
=17,

273 
	mNET_CORE_SOMAXCONN
=18,

274 
	mNET_CORE_BUDGET
=19,

275 
	mNET_CORE_AEVENT_ETIME
=20,

276 
	mNET_CORE_AEVENT_RSEQTH
=21,

277 
	mNET_CORE_WARNINGS
=22,

288 
	mNET_UNIX_DESTROY_DELAY
=1,

289 
	mNET_UNIX_DELETE_DELAY
=2,

290 
	mNET_UNIX_MAX_DGRAM_QLEN
=3,

296 
	mNET_NF_CONNTRACK_MAX
=1,

297 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_SYN_SENT
=2,

298 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_SYN_RECV
=3,

299 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_ESTABLISHED
=4,

300 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_FIN_WAIT
=5,

301 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_CLOSE_WAIT
=6,

302 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_LAST_ACK
=7,

303 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_TIME_WAIT
=8,

304 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_CLOSE
=9,

305 
	mNET_NF_CONNTRACK_UDP_TIMEOUT
=10,

306 
	mNET_NF_CONNTRACK_UDP_TIMEOUT_STREAM
=11,

307 
	mNET_NF_CONNTRACK_ICMP_TIMEOUT
=12,

308 
	mNET_NF_CONNTRACK_GENERIC_TIMEOUT
=13,

309 
	mNET_NF_CONNTRACK_BUCKETS
=14,

310 
	mNET_NF_CONNTRACK_LOG_INVALID
=15,

311 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_MAX_RETRANS
=16,

312 
	mNET_NF_CONNTRACK_TCP_LOOSE
=17,

313 
	mNET_NF_CONNTRACK_TCP_BE_LIBERAL
=18,

314 
	mNET_NF_CONNTRACK_TCP_MAX_RETRANS
=19,

315 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_CLOSED
=20,

316 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_WAIT
=21,

317 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_ECHOED
=22,

318 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_ESTABLISHED
=23,

319 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_SENT
=24,

320 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_RECD
=25,

321 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_ACK_SENT
=26,

322 
	mNET_NF_CONNTRACK_COUNT
=27,

323 
	mNET_NF_CONNTRACK_ICMPV6_TIMEOUT
=28,

324 
	mNET_NF_CONNTRACK_FRAG6_TIMEOUT
=29,

325 
	mNET_NF_CONNTRACK_FRAG6_LOW_THRESH
=30,

326 
	mNET_NF_CONNTRACK_FRAG6_HIGH_THRESH
=31,

327 
	mNET_NF_CONNTRACK_CHECKSUM
=32,

334 
	mNET_IPV4_FORWARD
=8,

335 
	mNET_IPV4_DYNADDR
=9,

337 
	mNET_IPV4_CONF
=16,

338 
	mNET_IPV4_NEIGH
=17,

339 
	mNET_IPV4_ROUTE
=18,

340 
	mNET_IPV4_FIB_HASH
=19,

341 
	mNET_IPV4_NETFILTER
=20,

343 
	mNET_IPV4_TCP_TIMESTAMPS
=33,

344 
	mNET_IPV4_TCP_WINDOW_SCALING
=34,

345 
	mNET_IPV4_TCP_SACK
=35,

346 
	mNET_IPV4_TCP_RETRANS_COLLAPSE
=36,

347 
	mNET_IPV4_DEFAULT_TTL
=37,

348 
	mNET_IPV4_AUTOCONFIG
=38,

349 
	mNET_IPV4_NO_PMTU_DISC
=39,

350 
	mNET_IPV4_TCP_SYN_RETRIES
=40,

351 
	mNET_IPV4_IPFRAG_HIGH_THRESH
=41,

352 
	mNET_IPV4_IPFRAG_LOW_THRESH
=42,

353 
	mNET_IPV4_IPFRAG_TIME
=43,

354 
	mNET_IPV4_TCP_MAX_KA_PROBES
=44,

355 
	mNET_IPV4_TCP_KEEPALIVE_TIME
=45,

356 
	mNET_IPV4_TCP_KEEPALIVE_PROBES
=46,

357 
	mNET_IPV4_TCP_RETRIES1
=47,

358 
	mNET_IPV4_TCP_RETRIES2
=48,

359 
	mNET_IPV4_TCP_FIN_TIMEOUT
=49,

360 
	mNET_IPV4_IP_MASQ_DEBUG
=50,

361 
	mNET_TCP_SYNCOOKIES
=51,

362 
	mNET_TCP_STDURG
=52,

363 
	mNET_TCP_RFC1337
=53,

364 
	mNET_TCP_SYN_TAILDROP
=54,

365 
	mNET_TCP_MAX_SYN_BACKLOG
=55,

366 
	mNET_IPV4_LOCAL_PORT_RANGE
=56,

367 
	mNET_IPV4_ICMP_ECHO_IGNORE_ALL
=57,

368 
	mNET_IPV4_ICMP_ECHO_IGNORE_BROADCASTS
=58,

369 
	mNET_IPV4_ICMP_SOURCEQUENCH_RATE
=59,

370 
	mNET_IPV4_ICMP_DESTUNREACH_RATE
=60,

371 
	mNET_IPV4_ICMP_TIMEEXCEED_RATE
=61,

372 
	mNET_IPV4_ICMP_PARAMPROB_RATE
=62,

373 
	mNET_IPV4_ICMP_ECHOREPLY_RATE
=63,

374 
	mNET_IPV4_ICMP_IGNORE_BOGUS_ERROR_RESPONSES
=64,

375 
	mNET_IPV4_IGMP_MAX_MEMBERSHIPS
=65,

376 
	mNET_TCP_TW_RECYCLE
=66,

377 
	mNET_IPV4_ALWAYS_DEFRAG
=67,

378 
	mNET_IPV4_TCP_KEEPALIVE_INTVL
=68,

379 
	mNET_IPV4_INET_PEER_THRESHOLD
=69,

380 
	mNET_IPV4_INET_PEER_MINTTL
=70,

381 
	mNET_IPV4_INET_PEER_MAXTTL
=71,

382 
	mNET_IPV4_INET_PEER_GC_MINTIME
=72,

383 
	mNET_IPV4_INET_PEER_GC_MAXTIME
=73,

384 
	mNET_TCP_ORPHAN_RETRIES
=74,

385 
	mNET_TCP_ABORT_ON_OVERFLOW
=75,

386 
	mNET_TCP_SYNACK_RETRIES
=76,

387 
	mNET_TCP_MAX_ORPHANS
=77,

388 
	mNET_TCP_MAX_TW_BUCKETS
=78,

389 
	mNET_TCP_FACK
=79,

390 
	mNET_TCP_REORDERING
=80,

391 
	mNET_TCP_ECN
=81,

392 
	mNET_TCP_DSACK
=82,

393 
	mNET_TCP_MEM
=83,

394 
	mNET_TCP_WMEM
=84,

395 
	mNET_TCP_RMEM
=85,

396 
	mNET_TCP_APP_WIN
=86,

397 
	mNET_TCP_ADV_WIN_SCALE
=87,

398 
	mNET_IPV4_NONLOCAL_BIND
=88,

399 
	mNET_IPV4_ICMP_RATELIMIT
=89,

400 
	mNET_IPV4_ICMP_RATEMASK
=90,

401 
	mNET_TCP_TW_REUSE
=91,

402 
	mNET_TCP_FRTO
=92,

403 
	mNET_TCP_LOW_LATENCY
=93,

404 
	mNET_IPV4_IPFRAG_SECRET_INTERVAL
=94,

405 
	mNET_IPV4_IGMP_MAX_MSF
=96,

406 
	mNET_TCP_NO_METRICS_SAVE
=97,

407 
	mNET_TCP_DEFAULT_WIN_SCALE
=105,

408 
	mNET_TCP_MODERATE_RCVBUF
=106,

409 
	mNET_TCP_TSO_WIN_DIVISOR
=107,

410 
	mNET_TCP_BIC_BETA
=108,

411 
	mNET_IPV4_ICMP_ERRORS_USE_INBOUND_IFADDR
=109,

412 
	mNET_TCP_CONG_CONTROL
=110,

413 
	mNET_TCP_ABC
=111,

414 
	mNET_IPV4_IPFRAG_MAX_DIST
=112,

415 
	mNET_TCP_MTU_PROBING
=113,

416 
	mNET_TCP_BASE_MSS
=114,

417 
	mNET_IPV4_TCP_WORKAROUND_SIGNED_WINDOWS
=115,

418 
	mNET_TCP_DMA_COPYBREAK
=116,

419 
	mNET_TCP_SLOW_START_AFTER_IDLE
=117,

420 
	mNET_CIPSOV4_CACHE_ENABLE
=118,

421 
	mNET_CIPSOV4_CACHE_BUCKET_SIZE
=119,

422 
	mNET_CIPSOV4_RBM_OPTFMT
=120,

423 
	mNET_CIPSOV4_RBM_STRICTVALID
=121,

424 
	mNET_TCP_AVAIL_CONG_CONTROL
=122,

425 
	mNET_TCP_ALLOWED_CONG_CONTROL
=123,

426 
	mNET_TCP_MAX_SSTHRESH
=124,

427 
	mNET_TCP_FRTO_RESPONSE
=125,

431 
	mNET_IPV4_ROUTE_FLUSH
=1,

432 
	mNET_IPV4_ROUTE_MIN_DELAY
=2,

433 
	mNET_IPV4_ROUTE_MAX_DELAY
=3,

434 
	mNET_IPV4_ROUTE_GC_THRESH
=4,

435 
	mNET_IPV4_ROUTE_MAX_SIZE
=5,

436 
	mNET_IPV4_ROUTE_GC_MIN_INTERVAL
=6,

437 
	mNET_IPV4_ROUTE_GC_TIMEOUT
=7,

438 
	mNET_IPV4_ROUTE_GC_INTERVAL
=8,

439 
	mNET_IPV4_ROUTE_REDIRECT_LOAD
=9,

440 
	mNET_IPV4_ROUTE_REDIRECT_NUMBER
=10,

441 
	mNET_IPV4_ROUTE_REDIRECT_SILENCE
=11,

442 
	mNET_IPV4_ROUTE_ERROR_COST
=12,

443 
	mNET_IPV4_ROUTE_ERROR_BURST
=13,

444 
	mNET_IPV4_ROUTE_GC_ELASTICITY
=14,

445 
	mNET_IPV4_ROUTE_MTU_EXPIRES
=15,

446 
	mNET_IPV4_ROUTE_MIN_PMTU
=16,

447 
	mNET_IPV4_ROUTE_MIN_ADVMSS
=17,

448 
	mNET_IPV4_ROUTE_SECRET_INTERVAL
=18,

449 
	mNET_IPV4_ROUTE_GC_MIN_INTERVAL_MS
=19,

454 
	mNET_PROTO_CONF_ALL
=-2,

455 
	mNET_PROTO_CONF_DEFAULT
=-3

462 
	mNET_IPV4_CONF_FORWARDING
=1,

463 
	mNET_IPV4_CONF_MC_FORWARDING
=2,

464 
	mNET_IPV4_CONF_PROXY_ARP
=3,

465 
	mNET_IPV4_CONF_ACCEPT_REDIRECTS
=4,

466 
	mNET_IPV4_CONF_SECURE_REDIRECTS
=5,

467 
	mNET_IPV4_CONF_SEND_REDIRECTS
=6,

468 
	mNET_IPV4_CONF_SHARED_MEDIA
=7,

469 
	mNET_IPV4_CONF_RP_FILTER
=8,

470 
	mNET_IPV4_CONF_ACCEPT_SOURCE_ROUTE
=9,

471 
	mNET_IPV4_CONF_BOOTP_RELAY
=10,

472 
	mNET_IPV4_CONF_LOG_MARTIANS
=11,

473 
	mNET_IPV4_CONF_TAG
=12,

474 
	mNET_IPV4_CONF_ARPFILTER
=13,

475 
	mNET_IPV4_CONF_MEDIUM_ID
=14,

476 
	mNET_IPV4_CONF_NOXFRM
=15,

477 
	mNET_IPV4_CONF_NOPOLICY
=16,

478 
	mNET_IPV4_CONF_FORCE_IGMP_VERSION
=17,

479 
	mNET_IPV4_CONF_ARP_ANNOUNCE
=18,

480 
	mNET_IPV4_CONF_ARP_IGNORE
=19,

481 
	mNET_IPV4_CONF_PROMOTE_SECONDARIES
=20,

482 
	mNET_IPV4_CONF_ARP_ACCEPT
=21,

483 
	mNET_IPV4_CONF_ARP_NOTIFY
=22,

489 
	mNET_IPV4_NF_CONNTRACK_MAX
=1,

490 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_SYN_SENT
=2,

491 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_SYN_RECV
=3,

492 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_ESTABLISHED
=4,

493 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_FIN_WAIT
=5,

494 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_CLOSE_WAIT
=6,

495 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_LAST_ACK
=7,

496 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_TIME_WAIT
=8,

497 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_CLOSE
=9,

498 
	mNET_IPV4_NF_CONNTRACK_UDP_TIMEOUT
=10,

499 
	mNET_IPV4_NF_CONNTRACK_UDP_TIMEOUT_STREAM
=11,

500 
	mNET_IPV4_NF_CONNTRACK_ICMP_TIMEOUT
=12,

501 
	mNET_IPV4_NF_CONNTRACK_GENERIC_TIMEOUT
=13,

502 
	mNET_IPV4_NF_CONNTRACK_BUCKETS
=14,

503 
	mNET_IPV4_NF_CONNTRACK_LOG_INVALID
=15,

504 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_MAX_RETRANS
=16,

505 
	mNET_IPV4_NF_CONNTRACK_TCP_LOOSE
=17,

506 
	mNET_IPV4_NF_CONNTRACK_TCP_BE_LIBERAL
=18,

507 
	mNET_IPV4_NF_CONNTRACK_TCP_MAX_RETRANS
=19,

508 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_CLOSED
=20,

509 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_WAIT
=21,

510 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_ECHOED
=22,

511 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_ESTABLISHED
=23,

512 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_SENT
=24,

513 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_RECD
=25,

514 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_ACK_SENT
=26,

515 
	mNET_IPV4_NF_CONNTRACK_COUNT
=27,

516 
	mNET_IPV4_NF_CONNTRACK_CHECKSUM
=28,

521 
	mNET_IPV6_CONF
=16,

522 
	mNET_IPV6_NEIGH
=17,

523 
	mNET_IPV6_ROUTE
=18,

524 
	mNET_IPV6_ICMP
=19,

525 
	mNET_IPV6_BINDV6ONLY
=20,

526 
	mNET_IPV6_IP6FRAG_HIGH_THRESH
=21,

527 
	mNET_IPV6_IP6FRAG_LOW_THRESH
=22,

528 
	mNET_IPV6_IP6FRAG_TIME
=23,

529 
	mNET_IPV6_IP6FRAG_SECRET_INTERVAL
=24,

530 
	mNET_IPV6_MLD_MAX_MSF
=25,

534 
	mNET_IPV6_ROUTE_FLUSH
=1,

535 
	mNET_IPV6_ROUTE_GC_THRESH
=2,

536 
	mNET_IPV6_ROUTE_MAX_SIZE
=3,

537 
	mNET_IPV6_ROUTE_GC_MIN_INTERVAL
=4,

538 
	mNET_IPV6_ROUTE_GC_TIMEOUT
=5,

539 
	mNET_IPV6_ROUTE_GC_INTERVAL
=6,

540 
	mNET_IPV6_ROUTE_GC_ELASTICITY
=7,

541 
	mNET_IPV6_ROUTE_MTU_EXPIRES
=8,

542 
	mNET_IPV6_ROUTE_MIN_ADVMSS
=9,

543 
	mNET_IPV6_ROUTE_GC_MIN_INTERVAL_MS
=10

547 
	mNET_IPV6_FORWARDING
=1,

548 
	mNET_IPV6_HOP_LIMIT
=2,

549 
	mNET_IPV6_MTU
=3,

550 
	mNET_IPV6_ACCEPT_RA
=4,

551 
	mNET_IPV6_ACCEPT_REDIRECTS
=5,

552 
	mNET_IPV6_AUTOCONF
=6,

553 
	mNET_IPV6_DAD_TRANSMITS
=7,

554 
	mNET_IPV6_RTR_SOLICITS
=8,

555 
	mNET_IPV6_RTR_SOLICIT_INTERVAL
=9,

556 
	mNET_IPV6_RTR_SOLICIT_DELAY
=10,

557 
	mNET_IPV6_USE_TEMPADDR
=11,

558 
	mNET_IPV6_TEMP_VALID_LFT
=12,

559 
	mNET_IPV6_TEMP_PREFERED_LFT
=13,

560 
	mNET_IPV6_REGEN_MAX_RETRY
=14,

561 
	mNET_IPV6_MAX_DESYNC_FACTOR
=15,

562 
	mNET_IPV6_MAX_ADDRESSES
=16,

563 
	mNET_IPV6_FORCE_MLD_VERSION
=17,

564 
	mNET_IPV6_ACCEPT_RA_DEFRTR
=18,

565 
	mNET_IPV6_ACCEPT_RA_PINFO
=19,

566 
	mNET_IPV6_ACCEPT_RA_RTR_PREF
=20,

567 
	mNET_IPV6_RTR_PROBE_INTERVAL
=21,

568 
	mNET_IPV6_ACCEPT_RA_RT_INFO_MAX_PLEN
=22,

569 
	mNET_IPV6_PROXY_NDP
=23,

570 
	mNET_IPV6_ACCEPT_SOURCE_ROUTE
=25,

571 
	m__NET_IPV6_MAX


576 
	mNET_IPV6_ICMP_RATELIMIT
=1

581 
	mNET_NEIGH_MCAST_SOLICIT
=1,

582 
	mNET_NEIGH_UCAST_SOLICIT
=2,

583 
	mNET_NEIGH_APP_SOLICIT
=3,

584 
	mNET_NEIGH_RETRANS_TIME
=4,

585 
	mNET_NEIGH_REACHABLE_TIME
=5,

586 
	mNET_NEIGH_DELAY_PROBE_TIME
=6,

587 
	mNET_NEIGH_GC_STALE_TIME
=7,

588 
	mNET_NEIGH_UNRES_QLEN
=8,

589 
	mNET_NEIGH_PROXY_QLEN
=9,

590 
	mNET_NEIGH_ANYCAST_DELAY
=10,

591 
	mNET_NEIGH_PROXY_DELAY
=11,

592 
	mNET_NEIGH_LOCKTIME
=12,

593 
	mNET_NEIGH_GC_INTERVAL
=13,

594 
	mNET_NEIGH_GC_THRESH1
=14,

595 
	mNET_NEIGH_GC_THRESH2
=15,

596 
	mNET_NEIGH_GC_THRESH3
=16,

597 
	mNET_NEIGH_RETRANS_TIME_MS
=17,

598 
	mNET_NEIGH_REACHABLE_TIME_MS
=18,

603 
	mNET_DCCP_DEFAULT
=1,

608 
	mNET_IPX_PPROP_BROADCASTING
=1,

609 
	mNET_IPX_FORWARDING
=2

614 
	mNET_LLC2
=1,

615 
	mNET_LLC_STATION
=2,

620 
	mNET_LLC2_TIMEOUT
=1,

625 
	mNET_LLC_STATION_ACK_TIMEOUT
=1,

630 
	mNET_LLC2_ACK_TIMEOUT
=1,

631 
	mNET_LLC2_P_TIMEOUT
=2,

632 
	mNET_LLC2_REJ_TIMEOUT
=3,

633 
	mNET_LLC2_BUSY_TIMEOUT
=4,

638 
	mNET_ATALK_AARP_EXPIRY_TIME
=1,

639 
	mNET_ATALK_AARP_TICK_TIME
=2,

640 
	mNET_ATALK_AARP_RETRANSMIT_LIMIT
=3,

641 
	mNET_ATALK_AARP_RESOLVE_TIME
=4

647 
	mNET_NETROM_DEFAULT_PATH_QUALITY
=1,

648 
	mNET_NETROM_OBSOLESCENCE_COUNT_INITIALISER
=2,

649 
	mNET_NETROM_NETWORK_TTL_INITIALISER
=3,

650 
	mNET_NETROM_TRANSPORT_TIMEOUT
=4,

651 
	mNET_NETROM_TRANSPORT_MAXIMUM_TRIES
=5,

652 
	mNET_NETROM_TRANSPORT_ACKNOWLEDGE_DELAY
=6,

653 
	mNET_NETROM_TRANSPORT_BUSY_DELAY
=7,

654 
	mNET_NETROM_TRANSPORT_REQUESTED_WINDOW_SIZE
=8,

655 
	mNET_NETROM_TRANSPORT_NO_ACTIVITY_TIMEOUT
=9,

656 
	mNET_NETROM_ROUTING_CONTROL
=10,

657 
	mNET_NETROM_LINK_FAILS_COUNT
=11,

658 
	mNET_NETROM_RESET
=12

663 
	mNET_AX25_IP_DEFAULT_MODE
=1,

664 
	mNET_AX25_DEFAULT_MODE
=2,

665 
	mNET_AX25_BACKOFF_TYPE
=3,

666 
	mNET_AX25_CONNECT_MODE
=4,

667 
	mNET_AX25_STANDARD_WINDOW
=5,

668 
	mNET_AX25_EXTENDED_WINDOW
=6,

669 
	mNET_AX25_T1_TIMEOUT
=7,

670 
	mNET_AX25_T2_TIMEOUT
=8,

671 
	mNET_AX25_T3_TIMEOUT
=9,

672 
	mNET_AX25_IDLE_TIMEOUT
=10,

673 
	mNET_AX25_N2
=11,

674 
	mNET_AX25_PACLEN
=12,

675 
	mNET_AX25_PROTOCOL
=13,

676 
	mNET_AX25_DAMA_SLAVE_TIMEOUT
=14

681 
	mNET_ROSE_RESTART_REQUEST_TIMEOUT
=1,

682 
	mNET_ROSE_CALL_REQUEST_TIMEOUT
=2,

683 
	mNET_ROSE_RESET_REQUEST_TIMEOUT
=3,

684 
	mNET_ROSE_CLEAR_REQUEST_TIMEOUT
=4,

685 
	mNET_ROSE_ACK_HOLD_BACK_TIMEOUT
=5,

686 
	mNET_ROSE_ROUTING_CONTROL
=6,

687 
	mNET_ROSE_LINK_FAIL_TIMEOUT
=7,

688 
	mNET_ROSE_MAX_VCS
=8,

689 
	mNET_ROSE_WINDOW_SIZE
=9,

690 
	mNET_ROSE_NO_ACTIVITY_TIMEOUT
=10

695 
	mNET_X25_RESTART_REQUEST_TIMEOUT
=1,

696 
	mNET_X25_CALL_REQUEST_TIMEOUT
=2,

697 
	mNET_X25_RESET_REQUEST_TIMEOUT
=3,

698 
	mNET_X25_CLEAR_REQUEST_TIMEOUT
=4,

699 
	mNET_X25_ACK_HOLD_BACK_TIMEOUT
=5,

700 
	mNET_X25_FORWARD
=6

706 
	mNET_TR_RIF_TIMEOUT
=1

711 
	mNET_DECNET_NODE_TYPE
 = 1,

712 
	mNET_DECNET_NODE_ADDRESS
 = 2,

713 
	mNET_DECNET_NODE_NAME
 = 3,

714 
	mNET_DECNET_DEFAULT_DEVICE
 = 4,

715 
	mNET_DECNET_TIME_WAIT
 = 5,

716 
	mNET_DECNET_DN_COUNT
 = 6,

717 
	mNET_DECNET_DI_COUNT
 = 7,

718 
	mNET_DECNET_DR_COUNT
 = 8,

719 
	mNET_DECNET_DST_GC_INTERVAL
 = 9,

720 
	mNET_DECNET_CONF
 = 10,

721 
	mNET_DECNET_NO_FC_MAX_CWND
 = 11,

722 
	mNET_DECNET_MEM
 = 12,

723 
	mNET_DECNET_RMEM
 = 13,

724 
	mNET_DECNET_WMEM
 = 14,

725 
	mNET_DECNET_DEBUG_LEVEL
 = 255

730 
	mNET_DECNET_CONF_LOOPBACK
 = -2,

731 
	mNET_DECNET_CONF_DDCMP
 = -3,

732 
	mNET_DECNET_CONF_PPP
 = -4,

733 
	mNET_DECNET_CONF_X25
 = -5,

734 
	mNET_DECNET_CONF_GRE
 = -6,

735 
	mNET_DECNET_CONF_ETHER
 = -7

742 
	mNET_DECNET_CONF_DEV_PRIORITY
 = 1,

743 
	mNET_DECNET_CONF_DEV_T1
 = 2,

744 
	mNET_DECNET_CONF_DEV_T2
 = 3,

745 
	mNET_DECNET_CONF_DEV_T3
 = 4,

746 
	mNET_DECNET_CONF_DEV_FORWARDING
 = 5,

747 
	mNET_DECNET_CONF_DEV_BLKSIZE
 = 6,

748 
	mNET_DECNET_CONF_DEV_STATE
 = 7

753 
	mNET_SCTP_RTO_INITIAL
 = 1,

754 
	mNET_SCTP_RTO_MIN
 = 2,

755 
	mNET_SCTP_RTO_MAX
 = 3,

756 
	mNET_SCTP_RTO_ALPHA
 = 4,

757 
	mNET_SCTP_RTO_BETA
 = 5,

758 
	mNET_SCTP_VALID_COOKIE_LIFE
 = 6,

759 
	mNET_SCTP_ASSOCIATION_MAX_RETRANS
 = 7,

760 
	mNET_SCTP_PATH_MAX_RETRANS
 = 8,

761 
	mNET_SCTP_MAX_INIT_RETRANSMITS
 = 9,

762 
	mNET_SCTP_HB_INTERVAL
 = 10,

763 
	mNET_SCTP_PRESERVE_ENABLE
 = 11,

764 
	mNET_SCTP_MAX_BURST
 = 12,

765 
	mNET_SCTP_ADDIP_ENABLE
 = 13,

766 
	mNET_SCTP_PRSCTP_ENABLE
 = 14,

767 
	mNET_SCTP_SNDBUF_POLICY
 = 15,

768 
	mNET_SCTP_SACK_TIMEOUT
 = 16,

769 
	mNET_SCTP_RCVBUF_POLICY
 = 17,

774 
	mNET_BRIDGE_NF_CALL_ARPTABLES
 = 1,

775 
	mNET_BRIDGE_NF_CALL_IPTABLES
 = 2,

776 
	mNET_BRIDGE_NF_CALL_IP6TABLES
 = 3,

777 
	mNET_BRIDGE_NF_FILTER_VLAN_TAGGED
 = 4,

778 
	mNET_BRIDGE_NF_FILTER_PPPOE_TAGGED
 = 5,

783 
	mNET_IRDA_DISCOVERY
=1,

784 
	mNET_IRDA_DEVNAME
=2,

785 
	mNET_IRDA_DEBUG
=3,

786 
	mNET_IRDA_FAST_POLL
=4,

787 
	mNET_IRDA_DISCOVERY_SLOTS
=5,

788 
	mNET_IRDA_DISCOVERY_TIMEOUT
=6,

789 
	mNET_IRDA_SLOT_TIMEOUT
=7,

790 
	mNET_IRDA_MAX_BAUD_RATE
=8,

791 
	mNET_IRDA_MIN_TX_TURN_TIME
=9,

792 
	mNET_IRDA_MAX_TX_DATA_SIZE
=10,

793 
	mNET_IRDA_MAX_TX_WINDOW
=11,

794 
	mNET_IRDA_MAX_NOREPLY_TIME
=12,

795 
	mNET_IRDA_WARN_NOREPLY_TIME
=13,

796 
	mNET_IRDA_LAP_KEEPALIVE_TIME
=14,

803 
	mFS_NRINODE
=1,

804 
	mFS_STATINODE
=2,

805 
	mFS_MAXINODE
=3,

806 
	mFS_NRDQUOT
=4,

807 
	mFS_MAXDQUOT
=5,

808 
	mFS_NRFILE
=6,

809 
	mFS_MAXFILE
=7,

810 
	mFS_DENTRY
=8,

811 
	mFS_NRSUPER
=9,

812 
	mFS_MAXSUPER
=10,

813 
	mFS_OVERFLOWUID
=11,

814 
	mFS_OVERFLOWGID
=12,

815 
	mFS_LEASES
=13,

816 
	mFS_DIR_NOTIFY
=14,

817 
	mFS_LEASE_TIME
=15,

818 
	mFS_DQSTATS
=16,

819 
	mFS_XFS
=17,

820 
	mFS_AIO_NR
=18,

821 
	mFS_AIO_MAX_NR
=19,

822 
	mFS_INOTIFY
=20,

823 
	mFS_OCFS2
=988,

828 
	mFS_DQ_LOOKUPS
 = 1,

829 
	mFS_DQ_DROPS
 = 2,

830 
	mFS_DQ_READS
 = 3,

831 
	mFS_DQ_WRITES
 = 4,

832 
	mFS_DQ_CACHE_HITS
 = 5,

833 
	mFS_DQ_ALLOCATED
 = 6,

834 
	mFS_DQ_FREE
 = 7,

835 
	mFS_DQ_SYNCS
 = 8,

836 
	mFS_DQ_WARNINGS
 = 9,

843 
	mDEV_CDROM
=1,

844 
	mDEV_HWMON
=2,

845 
	mDEV_PARPORT
=3,

846 
	mDEV_RAID
=4,

847 
	mDEV_MAC_HID
=5,

848 
	mDEV_SCSI
=6,

849 
	mDEV_IPMI
=7,

854 
	mDEV_CDROM_INFO
=1,

855 
	mDEV_CDROM_AUTOCLOSE
=2,

856 
	mDEV_CDROM_AUTOEJECT
=3,

857 
	mDEV_CDROM_DEBUG
=4,

858 
	mDEV_CDROM_LOCK
=5,

859 
	mDEV_CDROM_CHECK_MEDIA
=6

864 
	mDEV_PARPORT_DEFAULT
=-3

869 
	mDEV_RAID_SPEED_LIMIT_MIN
=1,

870 
	mDEV_RAID_SPEED_LIMIT_MAX
=2

875 
	mDEV_PARPORT_DEFAULT_TIMESLICE
=1,

876 
	mDEV_PARPORT_DEFAULT_SPINTIME
=2

881 
	mDEV_PARPORT_SPINTIME
=1,

882 
	mDEV_PARPORT_BASE_ADDR
=2,

883 
	mDEV_PARPORT_IRQ
=3,

884 
	mDEV_PARPORT_DMA
=4,

885 
	mDEV_PARPORT_MODES
=5,

886 
	mDEV_PARPORT_DEVICES
=6,

887 
	mDEV_PARPORT_AUTOPROBE
=16

892 
	mDEV_PARPORT_DEVICES_ACTIVE
=-3,

897 
	mDEV_PARPORT_DEVICE_TIMESLICE
=1,

902 
	mDEV_MAC_HID_KEYBOARD_SENDS_LINUX_KEYCODES
=1,

903 
	mDEV_MAC_HID_KEYBOARD_LOCK_KEYCODES
=2,

904 
	mDEV_MAC_HID_MOUSE_BUTTON_EMULATION
=3,

905 
	mDEV_MAC_HID_MOUSE_BUTTON2_KEYCODE
=4,

906 
	mDEV_MAC_HID_MOUSE_BUTTON3_KEYCODE
=5,

907 
	mDEV_MAC_HID_ADB_MOUSE_SENDS_KEYCODES
=6

912 
	mDEV_SCSI_LOGGING_LEVEL
=1,

917 
	mDEV_IPMI_POWEROFF_POWERCYCLE
=1,

923 
	mABI_DEFHANDLER_COFF
=1,

924 
	mABI_DEFHANDLER_ELF
=2,

925 
	mABI_DEFHANDLER_LCALL7
=3,

926 
	mABI_DEFHANDLER_LIBCSO
=4,

927 
	mABI_TRACE
=5,

928 
	mABI_FAKE_UTSNAME
=6,

	@/usr/include/linux/tcp.h

17 #i‚de‡
_LINUX_TCP_H


18 
	#_LINUX_TCP_H


	)

20 
	~<löux/ty≥s.h
>

21 
	~<asm/byã‹dî.h
>

22 
	~<löux/sockë.h
>

24 
	st˝hdr
 {

25 
__be16
 
	msour˚
;

26 
__be16
 
	mde°
;

27 
__be32
 
	m£q
;

28 
__be32
 
	mack_£q
;

29 #i‡
deföed
(
__LITTLE_ENDIAN_BITFIELD
)

30 
__u16
 
	mªs1
:4,

31 
	mdoff
:4,

32 
	mfö
:1,

33 
	msyn
:1,

34 
	mr°
:1,

35 
	mpsh
:1,

36 
	mack
:1,

37 
	murg
:1,

38 
	me˚
:1,

39 
	mcwr
:1;

40 #ñi‡
deföed
(
__BIG_ENDIAN_BITFIELD
)

41 
__u16
 
	mdoff
:4,

42 
	mªs1
:4,

43 
	mcwr
:1,

44 
	me˚
:1,

45 
	murg
:1,

46 
	mack
:1,

47 
	mpsh
:1,

48 
	mr°
:1,

49 
	msyn
:1,

50 
	mfö
:1;

54 
__be16
 
	mwödow
;

55 
__sum16
 
	mcheck
;

56 
__be16
 
	murg_±r
;

64 
	ut˝_w‹d_hdr
 {

65 
t˝hdr
 
	mhdr
;

66 
__be32
 
	mw‹ds
[5];

69 
	#t˝_Êag_w‹d
(
ç
Ë–((
t˝_w‹d_hdr
 *)—p))->
w‹ds
 [3])

	)

72 
	mTCP_FLAG_CWR
 = 
__c⁄°™t_˝u_to_be32
(0x00800000),

73 
	mTCP_FLAG_ECE
 = 
__c⁄°™t_˝u_to_be32
(0x00400000),

74 
	mTCP_FLAG_URG
 = 
__c⁄°™t_˝u_to_be32
(0x00200000),

75 
	mTCP_FLAG_ACK
 = 
__c⁄°™t_˝u_to_be32
(0x00100000),

76 
	mTCP_FLAG_PSH
 = 
__c⁄°™t_˝u_to_be32
(0x00080000),

77 
	mTCP_FLAG_RST
 = 
__c⁄°™t_˝u_to_be32
(0x00040000),

78 
	mTCP_FLAG_SYN
 = 
__c⁄°™t_˝u_to_be32
(0x00020000),

79 
	mTCP_FLAG_FIN
 = 
__c⁄°™t_˝u_to_be32
(0x00010000),

80 
	mTCP_RESERVED_BITS
 = 
__c⁄°™t_˝u_to_be32
(0x0F000000),

81 
	mTCP_DATA_OFFSET
 = 
__c⁄°™t_˝u_to_be32
(0xF0000000)

87 
	#TCP_MSS_DEFAULT
 536U

	)

88 
	#TCP_MSS_DESIRED
 1220U

	)

91 
	#TCP_NODELAY
 1

	)

92 
	#TCP_MAXSEG
 2

	)

93 
	#TCP_CORK
 3

	)

94 
	#TCP_KEEPIDLE
 4

	)

95 
	#TCP_KEEPINTVL
 5

	)

96 
	#TCP_KEEPCNT
 6

	)

97 
	#TCP_SYNCNT
 7

	)

98 
	#TCP_LINGER2
 8

	)

99 
	#TCP_DEFER_ACCEPT
 9

	)

100 
	#TCP_WINDOW_CLAMP
 10

	)

101 
	#TCP_INFO
 11

	)

102 
	#TCP_QUICKACK
 12

	)

103 
	#TCP_CONGESTION
 13

	)

104 
	#TCP_MD5SIG
 14

	)

105 
	#TCP_THIN_LINEAR_TIMEOUTS
 16

	)

106 
	#TCP_THIN_DUPACK
 17

	)

107 
	#TCP_USER_TIMEOUT
 18

	)

108 
	#TCP_REPAIR
 19

	)

109 
	#TCP_REPAIR_QUEUE
 20

	)

110 
	#TCP_QUEUE_SEQ
 21

	)

111 
	#TCP_REPAIR_OPTIONS
 22

	)

112 
	#TCP_FASTOPEN
 23

	)

113 
	#TCP_TIMESTAMP
 24

	)

114 
	#TCP_NOTSENT_LOWAT
 25

	)

116 
	st˝_ª∑ú_›t
 {

117 
__u32
 
	m›t_code
;

118 
__u32
 
	m›t_vÆ
;

122 
	mTCP_NO_QUEUE
,

123 
	mTCP_RECV_QUEUE
,

124 
	mTCP_SEND_QUEUE
,

125 
	mTCP_QUEUES_NR
,

129 
	#TCPI_OPT_TIMESTAMPS
 1

	)

130 
	#TCPI_OPT_SACK
 2

	)

131 
	#TCPI_OPT_WSCALE
 4

	)

132 
	#TCPI_OPT_ECN
 8

	)

133 
	#TCPI_OPT_ECN_SEEN
 16

	)

134 
	#TCPI_OPT_SYN_DATA
 32

	)

136 
	et˝_ˇ_°©e
 {

137 
	mTCP_CA_O≥n
 = 0,

138 
	#TCPF_CA_O≥n
 (1<<
TCP_CA_O≥n
)

	)

139 
	mTCP_CA_Dis‹dî
 = 1,

140 
	#TCPF_CA_Dis‹dî
 (1<<
TCP_CA_Dis‹dî
)

	)

141 
	mTCP_CA_CWR
 = 2,

142 
	#TCPF_CA_CWR
 (1<<
TCP_CA_CWR
)

	)

143 
	mTCP_CA_Recovîy
 = 3,

144 
	#TCPF_CA_Recovîy
 (1<<
TCP_CA_Recovîy
)

	)

145 
	mTCP_CA_Loss
 = 4

146 
	#TCPF_CA_Loss
 (1<<
TCP_CA_Loss
)

	)

149 
	st˝_öfo
 {

150 
__u8
 
	mt˝i_°©e
;

151 
__u8
 
	mt˝i_ˇ_°©e
;

152 
__u8
 
	mt˝i_ªå™smôs
;

153 
__u8
 
	mt˝i_¥obes
;

154 
__u8
 
	mt˝i_backoff
;

155 
__u8
 
	mt˝i_›ti⁄s
;

156 
__u8
 
	mt˝i_¢d_wsˇÀ
 : 4, 
	mt˝i_rcv_wsˇÀ
 : 4;

158 
__u32
 
	mt˝i_πo
;

159 
__u32
 
	mt˝i_©o
;

160 
__u32
 
	mt˝i_¢d_mss
;

161 
__u32
 
	mt˝i_rcv_mss
;

163 
__u32
 
	mt˝i_u«cked
;

164 
__u32
 
	mt˝i_ßcked
;

165 
__u32
 
	mt˝i_lo°
;

166 
__u32
 
	mt˝i_ªå™s
;

167 
__u32
 
	mt˝i_Áckës
;

170 
__u32
 
	mt˝i_œ°_d©a_£¡
;

171 
__u32
 
	mt˝i_œ°_ack_£¡
;

172 
__u32
 
	mt˝i_œ°_d©a_ªcv
;

173 
__u32
 
	mt˝i_œ°_ack_ªcv
;

176 
__u32
 
	mt˝i_pmtu
;

177 
__u32
 
	mt˝i_rcv_s°hªsh
;

178 
__u32
 
	mt˝i_πt
;

179 
__u32
 
	mt˝i_πtv¨
;

180 
__u32
 
	mt˝i_¢d_s°hªsh
;

181 
__u32
 
	mt˝i_¢d_cwnd
;

182 
__u32
 
	mt˝i_advmss
;

183 
__u32
 
	mt˝i_ª‹dîög
;

185 
__u32
 
	mt˝i_rcv_πt
;

186 
__u32
 
	mt˝i_rcv_•a˚
;

188 
__u32
 
	mt˝i_tŸÆ_ªå™s
;

192 
	#TCP_MD5SIG_MAXKEYLEN
 80

	)

194 
	st˝_md5sig
 {

195 
__kî√l_sockaddr_°‹age
 
	mt˝m_addr
;

196 
__u16
 
	m__t˝m_∑d1
;

197 
__u16
 
	mt˝m_keyÀn
;

198 
__u32
 
	m__t˝m_∑d2
;

199 
__u8
 
	mt˝m_key
[
TCP_MD5SIG_MAXKEYLEN
];

	@/usr/include/linux/time.h

1 #i‚de‡
_LINUX_TIME_H


2 
	#_LINUX_TIME_H


	)

4 
	~<löux/ty≥s.h
>

7 #i‚de‡
_STRUCT_TIMESPEC


8 
	#_STRUCT_TIMESPEC


	)

9 
	stime•ec
 {

10 
__kî√l_time_t
 
	mtv_£c
;

11 
	mtv_n£c
;

15 
	stimevÆ
 {

16 
__kî√l_time_t
 
	mtv_£c
;

17 
__kî√l_su£c⁄ds_t
 
	mtv_u£c
;

20 
	stimez⁄e
 {

21 
	mtz_möuãswe°
;

22 
	mtz_d°time
;

30 
	#ITIMER_REAL
 0

	)

31 
	#ITIMER_VIRTUAL
 1

	)

32 
	#ITIMER_PROF
 2

	)

34 
	sôimî•ec
 {

35 
time•ec
 
	mô_öãrvÆ
;

36 
time•ec
 
	mô_vÆue
;

39 
	sôimîvÆ
 {

40 
timevÆ
 
	mô_öãrvÆ
;

41 
timevÆ
 
	mô_vÆue
;

47 
	#CLOCK_REALTIME
 0

	)

48 
	#CLOCK_MONOTONIC
 1

	)

49 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

50 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

51 
	#CLOCK_MONOTONIC_RAW
 4

	)

52 
	#CLOCK_REALTIME_COARSE
 5

	)

53 
	#CLOCK_MONOTONIC_COARSE
 6

	)

54 
	#CLOCK_BOOTTIME
 7

	)

55 
	#CLOCK_REALTIME_ALARM
 8

	)

56 
	#CLOCK_BOOTTIME_ALARM
 9

	)

57 
	#CLOCK_SGI_CYCLE
 10

	)

58 
	#CLOCK_TAI
 11

	)

60 
	#MAX_CLOCKS
 16

	)

61 
	#CLOCKS_MASK
 (
CLOCK_REALTIME
 | 
CLOCK_MONOTONIC
)

	)

62 
	#CLOCKS_MONO
 
CLOCK_MONOTONIC


	)

67 
	#TIMER_ABSTIME
 0x01

	)

	@/usr/include/linux/types.h

1 #i‚de‡
_LINUX_TYPES_H


2 
	#_LINUX_TYPES_H


	)

4 
	~<asm/ty≥s.h
>

6 #i‚de‡
__ASSEMBLY__


8 
	~<löux/posix_ty≥s.h
>

16 #ifde‡
__CHECKER__


17 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

19 
	#__bôwi£__


	)

21 #ifde‡
__CHECK_ENDIAN__


22 
	#__bôwi£
 
__bôwi£__


	)

24 
	#__bôwi£


	)

27 
__u16
 
	t__bôwi£
 
	t__À16
;

28 
__u16
 
	t__bôwi£
 
	t__be16
;

29 
__u32
 
	t__bôwi£
 
	t__À32
;

30 
__u32
 
	t__bôwi£
 
	t__be32
;

31 
__u64
 
	t__bôwi£
 
	t__À64
;

32 
__u64
 
	t__bôwi£
 
	t__be64
;

34 
__u16
 
	t__bôwi£
 
	t__sum16
;

35 
__u32
 
	t__bôwi£
 
	t__wsum
;

46 
	#__Æig√d_u64
 
__u64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

47 
	#__Æig√d_be64
 
__be64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

48 
	#__Æig√d_À64
 
__À64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

	@/usr/include/linux/version.h

1 
	#LINUX_VERSION_CODE
 199947

	)

2 
	#KERNEL_VERSION
(
a
,
b
,
c
Ë((◊Ë<< 16Ë+ ((bË<< 8Ë+ (c))

	)

	@/usr/include/net/ethernet.h

21 #i‚de‡
__NET_ETHERNET_H


22 
	#__NET_ETHERNET_H
 1

	)

24 
	~<sys/cdefs.h
>

25 
	~<sys/ty≥s.h
>

26 
	~<löux/if_ëhî.h
>

28 
__BEGIN_DECLS


32 
	sëhî_addr


34 
u_öt8_t
 
	mëhî_addr_o˘ë
[
ETH_ALEN
];

35 } 
__©åibuã__
 ((
__∑cked__
));

38 
	sëhî_hódî


40 
u_öt8_t
 
	mëhî_dho°
[
ETH_ALEN
];

41 
u_öt8_t
 
	mëhî_sho°
[
ETH_ALEN
];

42 
u_öt16_t
 
	mëhî_ty≥
;

43 } 
__©åibuã__
 ((
__∑cked__
));

46 
	#ETHERTYPE_PUP
 0x0200

	)

47 
	#ETHERTYPE_SPRITE
 0x0500

	)

48 
	#ETHERTYPE_IP
 0x0800

	)

49 
	#ETHERTYPE_ARP
 0x0806

	)

50 
	#ETHERTYPE_REVARP
 0x8035

	)

51 
	#ETHERTYPE_AT
 0x809B

	)

52 
	#ETHERTYPE_AARP
 0x80F3

	)

53 
	#ETHERTYPE_VLAN
 0x8100

	)

54 
	#ETHERTYPE_IPX
 0x8137

	)

55 
	#ETHERTYPE_IPV6
 0x86dd

	)

56 
	#ETHERTYPE_LOOPBACK
 0x9000

	)

59 
	#ETHER_ADDR_LEN
 
ETH_ALEN


	)

60 
	#ETHER_TYPE_LEN
 2

	)

61 
	#ETHER_CRC_LEN
 4

	)

62 
	#ETHER_HDR_LEN
 
ETH_HLEN


	)

63 
	#ETHER_MIN_LEN
 (
ETH_ZLEN
 + 
ETHER_CRC_LEN
Ë

	)

64 
	#ETHER_MAX_LEN
 (
ETH_FRAME_LEN
 + 
ETHER_CRC_LEN
Ë

	)

67 
	#ETHER_IS_VALID_LEN
(
foo
) \

68 ((
foo
Ë>
ETHER_MIN_LEN
 && (fooË<
ETHER_MAX_LEN
)

	)

75 
	#ETHERTYPE_TRAIL
 0x1000

	)

76 
	#ETHERTYPE_NTRAILER
 16

	)

78 
	#ETHERMTU
 
ETH_DATA_LEN


	)

79 
	#ETHERMIN
 (
ETHER_MIN_LEN
 - 
ETHER_HDR_LEN
 - 
ETHER_CRC_LEN
)

	)

81 
	g__END_DECLS


	@/usr/include/net/if.h

19 #i‚de‡
_NET_IF_H


20 
	#_NET_IF_H
 1

	)

22 
	~<„©uªs.h
>

24 #ifde‡
__USE_MISC


25 
	~<sys/ty≥s.h
>

26 
	~<sys/sockë.h
>

31 
	#IF_NAMESIZE
 16

	)

33 
	sif_«meödex


35 
	mif_ödex
;

36 *
	mif_«me
;

40 #ifde‡
__USE_MISC


44 
	mIFF_UP
 = 0x1,

45 
	#IFF_UP
 
IFF_UP


	)

46 
	mIFF_BROADCAST
 = 0x2,

47 
	#IFF_BROADCAST
 
IFF_BROADCAST


	)

48 
	mIFF_DEBUG
 = 0x4,

49 
	#IFF_DEBUG
 
IFF_DEBUG


	)

50 
	mIFF_LOOPBACK
 = 0x8,

51 
	#IFF_LOOPBACK
 
IFF_LOOPBACK


	)

52 
	mIFF_POINTOPOINT
 = 0x10,

53 
	#IFF_POINTOPOINT
 
IFF_POINTOPOINT


	)

54 
	mIFF_NOTRAILERS
 = 0x20,

55 
	#IFF_NOTRAILERS
 
IFF_NOTRAILERS


	)

56 
	mIFF_RUNNING
 = 0x40,

57 
	#IFF_RUNNING
 
IFF_RUNNING


	)

58 
	mIFF_NOARP
 = 0x80,

59 
	#IFF_NOARP
 
IFF_NOARP


	)

60 
	mIFF_PROMISC
 = 0x100,

61 
	#IFF_PROMISC
 
IFF_PROMISC


	)

64 
	mIFF_ALLMULTI
 = 0x200,

65 
	#IFF_ALLMULTI
 
IFF_ALLMULTI


	)

67 
	mIFF_MASTER
 = 0x400,

68 
	#IFF_MASTER
 
IFF_MASTER


	)

69 
	mIFF_SLAVE
 = 0x800,

70 
	#IFF_SLAVE
 
IFF_SLAVE


	)

72 
	mIFF_MULTICAST
 = 0x1000,

73 
	#IFF_MULTICAST
 
IFF_MULTICAST


	)

75 
	mIFF_PORTSEL
 = 0x2000,

76 
	#IFF_PORTSEL
 
IFF_PORTSEL


	)

77 
	mIFF_AUTOMEDIA
 = 0x4000,

78 
	#IFF_AUTOMEDIA
 
IFF_AUTOMEDIA


	)

79 
	mIFF_DYNAMIC
 = 0x8000

80 
	#IFF_DYNAMIC
 
IFF_DYNAMIC


	)

88 
	siÁddr


90 
sockaddr
 
	miÁ_addr
;

93 
sockaddr
 
	mifu_brﬂdaddr
;

94 
sockaddr
 
	mifu_d°addr
;

95 } 
	miÁ_ifu
;

96 
iÁ˚
 *
	miÁ_iÂ
;

97 
iÁddr
 *
	miÁ_√xt
;

100 
	#iÁ_brﬂdaddr
 
iÁ_ifu
.
ifu_brﬂdaddr


	)

101 
	#iÁ_d°addr
 
iÁ_ifu
.
ifu_d°addr


	)

111 
	sifm≠


113 
	mmem_°¨t
;

114 
	mmem_íd
;

115 
	mba£_addr
;

116 
	múq
;

117 
	mdma
;

118 
	mp‹t
;

126 
	si‰eq


128 
	#IFHWADDRLEN
 6

	)

129 
	#IFNAMSIZ
 
IF_NAMESIZE


	)

132 
	mi‰n_«me
[
IFNAMSIZ
];

133 } 
	mi‰_i‰n
;

137 
sockaddr
 
	mi‰u_addr
;

138 
sockaddr
 
	mi‰u_d°addr
;

139 
sockaddr
 
	mi‰u_brﬂdaddr
;

140 
sockaddr
 
	mi‰u_√tmask
;

141 
sockaddr
 
	mi‰u_hwaddr
;

142 
	mi‰u_Êags
;

143 
	mi‰u_ivÆue
;

144 
	mi‰u_mtu
;

145 
ifm≠
 
	mi‰u_m≠
;

146 
	mi‰u_¶ave
[
IFNAMSIZ
];

147 
	mi‰u_√w«me
[
IFNAMSIZ
];

148 
__ˇddr_t
 
	mi‰u_d©a
;

149 } 
	mi‰_i‰u
;

151 
	#i‰_«me
 
i‰_i‰n
.
i‰n_«me


	)

152 
	#i‰_hwaddr
 
i‰_i‰u
.
i‰u_hwaddr


	)

153 
	#i‰_addr
 
i‰_i‰u
.
i‰u_addr


	)

154 
	#i‰_d°addr
 
i‰_i‰u
.
i‰u_d°addr


	)

155 
	#i‰_brﬂdaddr
 
i‰_i‰u
.
i‰u_brﬂdaddr


	)

156 
	#i‰_√tmask
 
i‰_i‰u
.
i‰u_√tmask


	)

157 
	#i‰_Êags
 
i‰_i‰u
.
i‰u_Êags


	)

158 
	#i‰_mëric
 
i‰_i‰u
.
i‰u_ivÆue


	)

159 
	#i‰_mtu
 
i‰_i‰u
.
i‰u_mtu


	)

160 
	#i‰_m≠
 
i‰_i‰u
.
i‰u_m≠


	)

161 
	#i‰_¶ave
 
i‰_i‰u
.
i‰u_¶ave


	)

162 
	#i‰_d©a
 
i‰_i‰u
.
i‰u_d©a


	)

163 
	#i‰_ifödex
 
i‰_i‰u
.
i‰u_ivÆue


	)

164 
	#i‰_b™dwidth
 
i‰_i‰u
.
i‰u_ivÆue


	)

165 
	#i‰_qÀn
 
i‰_i‰u
.
i‰u_ivÆue


	)

166 
	#i‰_√w«me
 
i‰_i‰u
.
i‰u_√w«me


	)

167 
	#_IOT_i‰eq
 
	`_IOT
(
	`_IOTS
(),
IFNAMSIZ
,_IOTS(),16,0,0)

	)

168 
	#_IOT_i‰eq_sh‹t
 
	`_IOT
(
	`_IOTS
(),
IFNAMSIZ
,_IOTS(),1,0,0)

	)

169 
	#_IOT_i‰eq_öt
 
	`_IOT
(
	`_IOTS
(),
IFNAMSIZ
,_IOTS(),1,0,0)

	)

176 
	sifc⁄f


178 
	mifc_Àn
;

181 
__ˇddr_t
 
	mifcu_buf
;

182 
i‰eq
 *
	mifcu_ªq
;

183 } 
	mifc_ifcu
;

185 
	#ifc_buf
 
ifc_ifcu
.
ifcu_buf


	)

186 
	#ifc_ªq
 
ifc_ifcu
.
ifcu_ªq


	)

187 
	#_IOT_ifc⁄f
 
	`_IOT
(
	`_IOTS
(
ifc⁄f
),1,0,0,0,0Ë

	)

190 
__BEGIN_DECLS


193 
	$if_«mëoödex
 (c⁄° *
__i‚ame
Ë
__THROW
;

194 *
	$if_ödext⁄ame
 (
__ifödex
, *
__i‚ame
Ë
__THROW
;

197 
if_«meödex
 *
	$if_«meödex
 (Ë
__THROW
;

200 
	$if_‰ì«meödex
 (
if_«meödex
 *
__±r
Ë
__THROW
;

202 
__END_DECLS


	@/usr/include/net/route.h

20 #i‚de‡
_NET_ROUTE_H


21 
	#_NET_ROUTE_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<sys/sockë.h
>

25 
	~<sys/ty≥s.h
>

26 
	~<√töë/ö.h
>

27 
	~<bôs/w‹dsize.h
>

31 
	sπíåy


33 
	mπ_∑d1
;

34 
sockaddr
 
	mπ_d°
;

35 
sockaddr
 
	mπ_g©eway
;

36 
sockaddr
 
	mπ_gímask
;

37 
	mπ_Êags
;

38 
	mπ_∑d2
;

39 
	mπ_∑d3
;

40 
	mπ_tos
;

41 
	mπ_˛ass
;

42 #i‡
__WORDSIZE
 == 64

43 
	mπ_∑d4
[3];

45 
	mπ_∑d4
;

47 
	mπ_mëric
;

48 *
	mπ_dev
;

49 
	mπ_mtu
;

50 
	mπ_wödow
;

51 
	mπ_úâ
;

54 
	#π_mss
 
π_mtu


	)

57 
	sö6_πmsg


59 
ö6_addr
 
	mπmsg_d°
;

60 
ö6_addr
 
	mπmsg_§c
;

61 
ö6_addr
 
	mπmsg_g©eway
;

62 
u_öt32_t
 
	mπmsg_ty≥
;

63 
u_öt16_t
 
	mπmsg_d°_Àn
;

64 
u_öt16_t
 
	mπmsg_§c_Àn
;

65 
u_öt32_t
 
	mπmsg_mëric
;

66 
	mπmsg_öfo
;

67 
u_öt32_t
 
	mπmsg_Êags
;

68 
	mπmsg_ifödex
;

72 
	#RTF_UP
 0x0001

	)

73 
	#RTF_GATEWAY
 0x0002

	)

75 
	#RTF_HOST
 0x0004

	)

76 
	#RTF_REINSTATE
 0x0008

	)

77 
	#RTF_DYNAMIC
 0x0010

	)

78 
	#RTF_MODIFIED
 0x0020

	)

79 
	#RTF_MTU
 0x0040

	)

80 
	#RTF_MSS
 
RTF_MTU


	)

81 
	#RTF_WINDOW
 0x0080

	)

82 
	#RTF_IRTT
 0x0100

	)

83 
	#RTF_REJECT
 0x0200

	)

84 
	#RTF_STATIC
 0x0400

	)

85 
	#RTF_XRESOLVE
 0x0800

	)

86 
	#RTF_NOFORWARD
 0x1000

	)

87 
	#RTF_THROW
 0x2000

	)

88 
	#RTF_NOPMTUDISC
 0x4000

	)

91 
	#RTF_DEFAULT
 0x00010000

	)

92 
	#RTF_ALLONLINK
 0x00020000

	)

93 
	#RTF_ADDRCONF
 0x00040000

	)

95 
	#RTF_LINKRT
 0x00100000

	)

96 
	#RTF_NONEXTHOP
 0x00200000

	)

98 
	#RTF_CACHE
 0x01000000

	)

99 
	#RTF_FLOW
 0x02000000

	)

100 
	#RTF_POLICY
 0x04000000

	)

102 
	#RTCF_VALVE
 0x00200000

	)

103 
	#RTCF_MASQ
 0x00400000

	)

104 
	#RTCF_NAT
 0x00800000

	)

105 
	#RTCF_DOREDIRECT
 0x01000000

	)

106 
	#RTCF_LOG
 0x02000000

	)

107 
	#RTCF_DIRECTSRC
 0x04000000

	)

109 
	#RTF_LOCAL
 0x80000000

	)

110 
	#RTF_INTERFACE
 0x40000000

	)

111 
	#RTF_MULTICAST
 0x20000000

	)

112 
	#RTF_BROADCAST
 0x10000000

	)

113 
	#RTF_NAT
 0x08000000

	)

115 
	#RTF_ADDRCLASSMASK
 0xF8000000

	)

116 
	#RT_ADDRCLASS
(
Êags
Ë((
__u_öt32_t
ËÊag†>> 23)

	)

118 
	#RT_TOS
(
tos
Ë(—osË& 
IPTOS_TOS_MASK
)

	)

120 
	#RT_LOCALADDR
(
Êags
Ë((Êag†& 
RTF_ADDRCLASSMASK
) \

121 =(
RTF_LOCAL
|
RTF_INTERFACE
))

	)

123 
	#RT_CLASS_UNSPEC
 0

	)

124 
	#RT_CLASS_DEFAULT
 253

	)

126 
	#RT_CLASS_MAIN
 254

	)

127 
	#RT_CLASS_LOCAL
 255

	)

128 
	#RT_CLASS_MAX
 255

	)

131 
	#RTMSG_ACK
 
NLMSG_ACK


	)

132 
	#RTMSG_OVERRUN
 
NLMSG_OVERRUN


	)

134 
	#RTMSG_NEWDEVICE
 0x11

	)

135 
	#RTMSG_DELDEVICE
 0x12

	)

136 
	#RTMSG_NEWROUTE
 0x21

	)

137 
	#RTMSG_DELROUTE
 0x22

	)

138 
	#RTMSG_NEWRULE
 0x31

	)

139 
	#RTMSG_DELRULE
 0x32

	)

140 
	#RTMSG_CONTROL
 0x40

	)

142 
	#RTMSG_AR_FAILED
 0x51

	)

	@/usr/include/netdb.h

22 #i‚def 
_NETDB_H


23 
	#_NETDB_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<√töë/ö.h
>

28 
	~<°döt.h
>

29 #ifde‡
__USE_MISC


32 
	~<Ωc/√tdb.h
>

35 #ifde‡
__USE_GNU


36 
	#__√ed_sigevít_t


	)

37 
	~<bôs/sigöfo.h
>

38 
	#__√ed_time•ec


	)

39 
	~<time.h
>

42 
	~<bôs/√tdb.h
>

45 
	#_PATH_HEQUIV
 "/ëc/ho°s.equiv"

	)

46 
	#_PATH_HOSTS
 "/ëc/ho°s"

	)

47 
	#_PATH_NETWORKS
 "/ëc/√tw‹ks"

	)

48 
	#_PATH_NSSWITCH_CONF
 "/ëc/nsswôch.c⁄f"

	)

49 
	#_PATH_PROTOCOLS
 "/ëc/¥Ÿocﬁs"

	)

50 
	#_PATH_SERVICES
 "/ëc/£rvi˚s"

	)

53 
	g__BEGIN_DECLS


55 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


58 
	#h_î∫o
 (*
	`__h_î∫o_loˇti⁄
 ())

	)

61 *
	$__h_î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

65 
	#HOST_NOT_FOUND
 1

	)

66 
	#TRY_AGAIN
 2

	)

68 
	#NO_RECOVERY
 3

	)

70 
	#NO_DATA
 4

	)

73 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


74 
	#NETDB_INTERNAL
 -1

	)

75 
	#NETDB_SUCCESS
 0

	)

76 
	#NO_ADDRESS
 
NO_DATA


	)

79 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_XOPEN_EXTENDED


81 
	#IPPORT_RESERVED
 1024

	)

84 #ifde‡
__USE_GNU


86 
	#SCOPE_DELIMITER
 '%'

	)

89 #ifde‡
__USE_MISC


92 
	$hîr‹
 (c⁄° *
__°r
Ë
__THROW
;

95 c⁄° *
	$h°ªº‹
 (
__îr_num
Ë
__THROW
;

100 
	sho°ít


102 *
h_«me
;

103 **
h_Æü£s
;

104 
h_addπy≥
;

105 
h_Àngth
;

106 **
h_addr_li°
;

107 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


108 
	#h_addr
 
h_addr_li°
[0]

	)

117 
	`£tho°ít
 (
__°ay_›í
);

123 
	`ídho°ít
 ();

130 
ho°ít
 *
	`gëho°ít
 ();

137 
ho°ít
 *
	`gëho°byaddr
 (c⁄° *
__addr
, 
__sockÀn_t
 
__Àn
,

138 
__ty≥
);

144 
ho°ít
 *
	`gëho°by«me
 (c⁄° *
__«me
);

146 #ifde‡
__USE_MISC


155 
ho°ít
 *
	`gëho°by«me2
 (c⁄° *
__«me
, 
__af
);

167 
	`gëho°ít_r
 (
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

168 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

169 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

170 *
__ª°ri˘
 
__h_î∫›
);

172 
	`gëho°byaddr_r
 (c⁄° *
__ª°ri˘
 
__addr
, 
__sockÀn_t
 
__Àn
,

173 
__ty≥
,

174 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

175 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

176 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

177 *
__ª°ri˘
 
__h_î∫›
);

179 
	`gëho°by«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

180 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

181 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

182 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

183 *
__ª°ri˘
 
__h_î∫›
);

185 
	`gëho°by«me2_r
 (c⁄° *
__ª°ri˘
 
__«me
, 
__af
,

186 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

187 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

188 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

189 *
__ª°ri˘
 
__h_î∫›
);

198 
	`£äëít
 (
__°ay_›í
);

204 
	`íd√ã¡
 ();

211 
√ã¡
 *
	`gë√ã¡
 ();

218 
√ã¡
 *
	`gë√tbyaddr
 (
uöt32_t
 
__√t
, 
__ty≥
);

224 
√ã¡
 *
	`gë√tby«me
 (c⁄° *
__«me
);

226 #ifdef 
__USE_MISC


237 
	`gë√ã¡_r
 (
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

238 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

239 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

240 *
__ª°ri˘
 
__h_î∫›
);

242 
	`gë√tbyaddr_r
 (
uöt32_t
 
__√t
, 
__ty≥
,

243 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

244 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

245 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

246 *
__ª°ri˘
 
__h_î∫›
);

248 
	`gë√tby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

249 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

250 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

251 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

252 *
__ª°ri˘
 
__h_î∫›
);

257 
	s£rvít


259 *
s_«me
;

260 **
s_Æü£s
;

261 
s_p‹t
;

262 *
s_¥Ÿo
;

270 
	`£t£rvít
 (
__°ay_›í
);

276 
	`íd£rvít
 ();

283 
£rvít
 *
	`gë£rvít
 ();

290 
£rvít
 *
	`gë£rvby«me
 (c⁄° *
__«me
, c⁄° *
__¥Ÿo
);

297 
£rvít
 *
	`gë£rvbyp‹t
 (
__p‹t
, c⁄° *
__¥Ÿo
);

300 #ifdef 
__USE_MISC


308 
	`gë£rvít_r
 (
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

309 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

310 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

312 
	`gë£rvby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

313 c⁄° *
__ª°ri˘
 
__¥Ÿo
,

314 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

315 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

316 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

318 
	`gë£rvbyp‹t_r
 (
__p‹t
, c⁄° *
__ª°ri˘
 
__¥Ÿo
,

319 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

320 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

321 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

326 
	s¥Ÿ€¡


328 *
p_«me
;

329 **
p_Æü£s
;

330 
p_¥Ÿo
;

338 
	`£çrŸ€¡
 (
__°ay_›í
);

344 
	`íd¥Ÿ€¡
 ();

351 
¥Ÿ€¡
 *
	`gë¥Ÿ€¡
 ();

357 
¥Ÿ€¡
 *
	`gë¥Ÿoby«me
 (c⁄° *
__«me
);

363 
¥Ÿ€¡
 *
	`gë¥Ÿobynumbî
 (
__¥Ÿo
);

366 #ifdef 
__USE_MISC


374 
	`gë¥Ÿ€¡_r
 (
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

375 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

376 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

378 
	`gë¥Ÿoby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

379 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

380 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

381 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

383 
	`gë¥Ÿobynumbî_r
 (
__¥Ÿo
,

384 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

385 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

386 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

395 
	`£äëgª¡
 (c⁄° *
__√tgroup
);

403 
	`íd√tgª¡
 ();

412 
	`gë√tgª¡
 (**
__ª°ri˘
 
__ho°p
,

413 **
__ª°ri˘
 
__u£Ω
,

414 **
__ª°ri˘
 
__domaöp
);

423 
	`ö√tgr
 (c⁄° *
__√tgroup
, c⁄° *
__ho°
,

424 c⁄° *
__u£r
, c⁄° *
__domaö
);

432 
	`gë√tgª¡_r
 (**
__ª°ri˘
 
__ho°p
,

433 **
__ª°ri˘
 
__u£Ω
,

434 **
__ª°ri˘
 
__domaöp
,

435 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
);

439 #ifde‡
__USE_BSD


451 
	`rcmd
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

452 c⁄° *
__ª°ri˘
 
__locu£r
,

453 c⁄° *
__ª°ri˘
 
__ªmu£r
,

454 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

463 
	`rcmd_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

464 c⁄° *
__ª°ri˘
 
__locu£r
,

465 c⁄° *
__ª°ri˘
 
__ªmu£r
,

466 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

467 
ß_Ámûy_t
 
__af
);

479 
	`ªxec
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

480 c⁄° *
__ª°ri˘
 
__«me
,

481 c⁄° *
__ª°ri˘
 
__∑ss
,

482 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

491 
	`ªxec_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

492 c⁄° *
__ª°ri˘
 
__«me
,

493 c⁄° *
__ª°ri˘
 
__∑ss
,

494 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

495 
ß_Ámûy_t
 
__af
);

505 
	`ru£rok
 (c⁄° *
__rho°
, 
__su£r
,

506 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
);

515 
	`ru£rok_af
 (c⁄° *
__rho°
, 
__su£r
,

516 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
,

517 
ß_Ámûy_t
 
__af
);

528 
	`úu£rok
 (
uöt32_t
 
__øddr
, 
__su£r
,

529 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
);

539 
	`úu£rok_af
 (c⁄° *
__øddr
, 
__su£r
,

540 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
,

541 
ß_Ámûy_t
 
__af
);

551 
	`ºesvp‹t
 (*
__Æp‹t
);

560 
	`ºesvp‹t_af
 (*
__Æp‹t
, 
ß_Ámûy_t
 
__af
);

565 #ifdef 
__USE_POSIX


567 
	saddröfo


569 
ai_Êags
;

570 
ai_Ámûy
;

571 
ai_sockty≥
;

572 
ai_¥Ÿocﬁ
;

573 
sockÀn_t
 
ai_addæí
;

574 
sockaddr
 *
ai_addr
;

575 *
ai_ˇn⁄«me
;

576 
addröfo
 *
ai_√xt
;

579 #ifde‡
__USE_GNU


581 
	sgaicb


583 c⁄° *
¨_«me
;

584 c⁄° *
¨_£rvi˚
;

585 c⁄° 
addröfo
 *
¨_ªque°
;

586 
addröfo
 *
¨_ªsu…
;

588 
__ªtu∫
;

589 
__glibc_ª£rved
[5];

593 
	#GAI_WAIT
 0

	)

594 
	#GAI_NOWAIT
 1

	)

598 
	#AI_PASSIVE
 0x0001

	)

599 
	#AI_CANONNAME
 0x0002

	)

600 
	#AI_NUMERICHOST
 0x0004

	)

601 
	#AI_V4MAPPED
 0x0008

	)

602 
	#AI_ALL
 0x0010

	)

603 
	#AI_ADDRCONFIG
 0x0020

	)

605 #ifde‡
__USE_GNU


606 
	#AI_IDN
 0x0040

	)

609 
	#AI_CANONIDN
 0x0080

	)

610 
	#AI_IDN_ALLOW_UNASSIGNED
 0x0100

	)

612 
	#AI_IDN_USE_STD3_ASCII_RULES
 0x0200

	)

615 
	#AI_NUMERICSERV
 0x0400

	)

618 
	#EAI_BADFLAGS
 -1

	)

619 
	#EAI_NONAME
 -2

	)

620 
	#EAI_AGAIN
 -3

	)

621 
	#EAI_FAIL
 -4

	)

622 
	#EAI_FAMILY
 -6

	)

623 
	#EAI_SOCKTYPE
 -7

	)

624 
	#EAI_SERVICE
 -8

	)

625 
	#EAI_MEMORY
 -10

	)

626 
	#EAI_SYSTEM
 -11

	)

627 
	#EAI_OVERFLOW
 -12

	)

628 #ifde‡
__USE_GNU


629 
	#EAI_NODATA
 -5

	)

630 
	#EAI_ADDRFAMILY
 -9

	)

631 
	#EAI_INPROGRESS
 -100

	)

632 
	#EAI_CANCELED
 -101

	)

633 
	#EAI_NOTCANCELED
 -102

	)

634 
	#EAI_ALLDONE
 -103

	)

635 
	#EAI_INTR
 -104

	)

636 
	#EAI_IDN_ENCODE
 -105

	)

639 #ifde‡
__USE_MISC


640 
	#NI_MAXHOST
 1025

	)

641 
	#NI_MAXSERV
 32

	)

644 
	#NI_NUMERICHOST
 1

	)

645 
	#NI_NUMERICSERV
 2

	)

646 
	#NI_NOFQDN
 4

	)

647 
	#NI_NAMEREQD
 8

	)

648 
	#NI_DGRAM
 16

	)

649 #ifde‡
__USE_GNU


650 
	#NI_IDN
 32

	)

651 
	#NI_IDN_ALLOW_UNASSIGNED
 64

	)

653 
	#NI_IDN_USE_STD3_ASCII_RULES
 128

	)

662 
	`gëaddröfo
 (c⁄° *
__ª°ri˘
 
__«me
,

663 c⁄° *
__ª°ri˘
 
__£rvi˚
,

664 c⁄° 
addröfo
 *
__ª°ri˘
 
__ªq
,

665 
addröfo
 **
__ª°ri˘
 
__∑i
);

668 
	$‰ìaddröfo
 (
addröfo
 *
__ai
Ë
__THROW
;

671 c⁄° *
	$gai_°ªº‹
 (
__ecode
Ë
__THROW
;

677 
	`gë«meöfo
 (c⁄° 
sockaddr
 *
__ª°ri˘
 
__ß
,

678 
sockÀn_t
 
__ßÀn
, *
__ª°ri˘
 
__ho°
,

679 
sockÀn_t
 
__ho°Àn
, *
__ª°ri˘
 
__£rv
,

680 
sockÀn_t
 
__£rvÀn
, 
__Êags
);

683 #ifde‡
__USE_GNU


692 
	`gëaddröfo_a
 (
__mode
, 
gaicb
 *
__li°
[
__ª°ri˘_¨r
],

693 
__ít
, 
sigevít
 *
__ª°ri˘
 
__sig
);

703 
	`gai_su•íd
 (c⁄° 
gaicb
 *c⁄° 
__li°
[], 
__ít
,

704 c⁄° 
time•ec
 *
__timeout
);

707 
	$gai_îr‹
 (
gaicb
 *
__ªq
Ë
__THROW
;

710 
	$gai_ˇn˚l
 (
gaicb
 *
__gaicbp
Ë
__THROW
;

713 
__END_DECLS


	@/usr/include/netinet/ether.h

19 #i‚de‡
_NETINET_ETHER_H


20 
	#_NETINET_ETHER_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<√töë/if_ëhî.h
>

27 
__BEGIN_DECLS


30 *
	$ëhî_¡ﬂ
 (c⁄° 
ëhî_addr
 *
__addr
Ë
__THROW
;

31 *
	$ëhî_¡ﬂ_r
 (c⁄° 
ëhî_addr
 *
__addr
, *
__buf
)

32 
__THROW
;

35 
ëhî_addr
 *
	$ëhî_©⁄
 (c⁄° *
__asc
Ë
__THROW
;

36 
ëhî_addr
 *
	$ëhî_©⁄_r
 (c⁄° *
__asc
,

37 
ëhî_addr
 *
__addr
Ë
__THROW
;

40 
	$ëhî_¡oho°
 (*
__ho°«me
, c⁄° 
ëhî_addr
 *
__addr
)

41 
__THROW
;

44 
	$ëhî_ho°t⁄
 (c⁄° *
__ho°«me
, 
ëhî_addr
 *
__addr
)

45 
__THROW
;

48 
	$ëhî_löe
 (c⁄° *
__löe
, 
ëhî_addr
 *
__addr
,

49 *
__ho°«me
Ë
__THROW
;

51 
__END_DECLS


	@/usr/include/netinet/icmp6.h

18 #i‚de‡
_NETINET_ICMP6_H


19 
	#_NETINET_ICMP6_H
 1

	)

21 
	~<öây≥s.h
>

22 
	~<°rög.h
>

23 
	~<sys/ty≥s.h
>

24 
	~<√töë/ö.h
>

26 
	#ICMP6_FILTER
 1

	)

28 
	#ICMP6_FILTER_BLOCK
 1

	)

29 
	#ICMP6_FILTER_PASS
 2

	)

30 
	#ICMP6_FILTER_BLOCKOTHERS
 3

	)

31 
	#ICMP6_FILTER_PASSONLY
 4

	)

33 
	sicmp6_fûãr


35 
uöt32_t
 
	micmp6_fût
[8];

38 
	sicmp6_hdr


40 
uöt8_t
 
	micmp6_ty≥
;

41 
uöt8_t
 
	micmp6_code
;

42 
uöt16_t
 
	micmp6_cksum
;

45 
uöt32_t
 
	micmp6_un_d©a32
[1];

46 
uöt16_t
 
	micmp6_un_d©a16
[2];

47 
uöt8_t
 
	micmp6_un_d©a8
[4];

48 } 
	micmp6_d©aun
;

51 
	#icmp6_d©a32
 
icmp6_d©aun
.
icmp6_un_d©a32


	)

52 
	#icmp6_d©a16
 
icmp6_d©aun
.
icmp6_un_d©a16


	)

53 
	#icmp6_d©a8
 
icmp6_d©aun
.
icmp6_un_d©a8


	)

54 
	#icmp6_µå
 
icmp6_d©a32
[0]

	)

55 
	#icmp6_mtu
 
icmp6_d©a32
[0]

	)

56 
	#icmp6_id
 
icmp6_d©a16
[0]

	)

57 
	#icmp6_£q
 
icmp6_d©a16
[1]

	)

58 
	#icmp6_maxdñay
 
icmp6_d©a16
[0]

	)

60 
	#ICMP6_DST_UNREACH
 1

	)

61 
	#ICMP6_PACKET_TOO_BIG
 2

	)

62 
	#ICMP6_TIME_EXCEEDED
 3

	)

63 
	#ICMP6_PARAM_PROB
 4

	)

65 
	#ICMP6_INFOMSG_MASK
 0x80

	)

67 
	#ICMP6_ECHO_REQUEST
 128

	)

68 
	#ICMP6_ECHO_REPLY
 129

	)

69 
	#MLD_LISTENER_QUERY
 130

	)

70 
	#MLD_LISTENER_REPORT
 131

	)

71 
	#MLD_LISTENER_REDUCTION
 132

	)

73 
	#ICMP6_DST_UNREACH_NOROUTE
 0

	)

74 
	#ICMP6_DST_UNREACH_ADMIN
 1

	)

76 
	#ICMP6_DST_UNREACH_BEYONDSCOPE
 2

	)

77 
	#ICMP6_DST_UNREACH_ADDR
 3

	)

78 
	#ICMP6_DST_UNREACH_NOPORT
 4

	)

80 
	#ICMP6_TIME_EXCEED_TRANSIT
 0

	)

81 
	#ICMP6_TIME_EXCEED_REASSEMBLY
 1

	)

83 
	#ICMP6_PARAMPROB_HEADER
 0

	)

84 
	#ICMP6_PARAMPROB_NEXTHEADER
 1

	)

85 
	#ICMP6_PARAMPROB_OPTION
 2

	)

87 
	#ICMP6_FILTER_WILLPASS
(
ty≥
, 
fûãΩ
) \

88 ((((
fûãΩ
)->
icmp6_fût
[(
ty≥
Ë>> 5]Ë& (1 << (—y≥Ë& 31))Ë=0)

	)

90 
	#ICMP6_FILTER_WILLBLOCK
(
ty≥
, 
fûãΩ
) \

91 ((((
fûãΩ
)->
icmp6_fût
[(
ty≥
Ë>> 5]Ë& (1 << (—y≥Ë& 31))Ë!0)

	)

93 
	#ICMP6_FILTER_SETPASS
(
ty≥
, 
fûãΩ
) \

94 ((((
fûãΩ
)->
icmp6_fût
[(
ty≥
Ë>> 5]Ë&~(1 << (—y≥Ë& 31))))

	)

96 
	#ICMP6_FILTER_SETBLOCK
(
ty≥
, 
fûãΩ
) \

97 ((((
fûãΩ
)->
icmp6_fût
[(
ty≥
Ë>> 5]Ë|(1 << (—y≥Ë& 31))))

	)

99 
	#ICMP6_FILTER_SETPASSALL
(
fûãΩ
) \

100 
	`mem£t
 (
fûãΩ
, 0,  (
icmp6_fûãr
));

	)

102 
	#ICMP6_FILTER_SETBLOCKALL
(
fûãΩ
) \

103 
	`mem£t
 (
fûãΩ
, 0xFF,  (
icmp6_fûãr
));

	)

105 
	#ND_ROUTER_SOLICIT
 133

	)

106 
	#ND_ROUTER_ADVERT
 134

	)

107 
	#ND_NEIGHBOR_SOLICIT
 135

	)

108 
	#ND_NEIGHBOR_ADVERT
 136

	)

109 
	#ND_REDIRECT
 137

	)

111 
	snd_rouãr_sﬁicô


113 
icmp6_hdr
 
	mnd_rs_hdr
;

117 
	#nd_rs_ty≥
 
nd_rs_hdr
.
icmp6_ty≥


	)

118 
	#nd_rs_code
 
nd_rs_hdr
.
icmp6_code


	)

119 
	#nd_rs_cksum
 
nd_rs_hdr
.
icmp6_cksum


	)

120 
	#nd_rs_ª£rved
 
nd_rs_hdr
.
icmp6_d©a32
[0]

	)

122 
	snd_rouãr_advît


124 
icmp6_hdr
 
	mnd_ø_hdr
;

125 
uöt32_t
 
	mnd_ø_ªachabÀ
;

126 
uöt32_t
 
	mnd_ø_ªå™smô
;

130 
	#nd_ø_ty≥
 
nd_ø_hdr
.
icmp6_ty≥


	)

131 
	#nd_ø_code
 
nd_ø_hdr
.
icmp6_code


	)

132 
	#nd_ø_cksum
 
nd_ø_hdr
.
icmp6_cksum


	)

133 
	#nd_ø_curh›limô
 
nd_ø_hdr
.
icmp6_d©a8
[0]

	)

134 
	#nd_ø_Êags_ª£rved
 
nd_ø_hdr
.
icmp6_d©a8
[1]

	)

135 
	#ND_RA_FLAG_MANAGED
 0x80

	)

136 
	#ND_RA_FLAG_OTHER
 0x40

	)

137 
	#ND_RA_FLAG_HOME_AGENT
 0x20

	)

138 
	#nd_ø_rouãr_li„time
 
nd_ø_hdr
.
icmp6_d©a16
[1]

	)

140 
	snd_√ighb‹_sﬁicô


142 
icmp6_hdr
 
	mnd_ns_hdr
;

143 
ö6_addr
 
	mnd_ns_èrgë
;

147 
	#nd_ns_ty≥
 
nd_ns_hdr
.
icmp6_ty≥


	)

148 
	#nd_ns_code
 
nd_ns_hdr
.
icmp6_code


	)

149 
	#nd_ns_cksum
 
nd_ns_hdr
.
icmp6_cksum


	)

150 
	#nd_ns_ª£rved
 
nd_ns_hdr
.
icmp6_d©a32
[0]

	)

152 
	snd_√ighb‹_advît


154 
icmp6_hdr
 
	mnd_«_hdr
;

155 
ö6_addr
 
	mnd_«_èrgë
;

159 
	#nd_«_ty≥
 
nd_«_hdr
.
icmp6_ty≥


	)

160 
	#nd_«_code
 
nd_«_hdr
.
icmp6_code


	)

161 
	#nd_«_cksum
 
nd_«_hdr
.
icmp6_cksum


	)

162 
	#nd_«_Êags_ª£rved
 
nd_«_hdr
.
icmp6_d©a32
[0]

	)

163 #i‡ 
BYTE_ORDER
 =
BIG_ENDIAN


164 
	#ND_NA_FLAG_ROUTER
 0x80000000

	)

165 
	#ND_NA_FLAG_SOLICITED
 0x40000000

	)

166 
	#ND_NA_FLAG_OVERRIDE
 0x20000000

	)

168 
	#ND_NA_FLAG_ROUTER
 0x00000080

	)

169 
	#ND_NA_FLAG_SOLICITED
 0x00000040

	)

170 
	#ND_NA_FLAG_OVERRIDE
 0x00000020

	)

173 
	snd_ªdúe˘


175 
icmp6_hdr
 
	mnd_rd_hdr
;

176 
ö6_addr
 
	mnd_rd_èrgë
;

177 
ö6_addr
 
	mnd_rd_d°
;

181 
	#nd_rd_ty≥
 
nd_rd_hdr
.
icmp6_ty≥


	)

182 
	#nd_rd_code
 
nd_rd_hdr
.
icmp6_code


	)

183 
	#nd_rd_cksum
 
nd_rd_hdr
.
icmp6_cksum


	)

184 
	#nd_rd_ª£rved
 
nd_rd_hdr
.
icmp6_d©a32
[0]

	)

186 
	snd_›t_hdr


188 
uöt8_t
 
	mnd_›t_ty≥
;

189 
uöt8_t
 
	mnd_›t_Àn
;

193 
	#ND_OPT_SOURCE_LINKADDR
 1

	)

194 
	#ND_OPT_TARGET_LINKADDR
 2

	)

195 
	#ND_OPT_PREFIX_INFORMATION
 3

	)

196 
	#ND_OPT_REDIRECTED_HEADER
 4

	)

197 
	#ND_OPT_MTU
 5

	)

198 
	#ND_OPT_RTR_ADV_INTERVAL
 7

	)

199 
	#ND_OPT_HOME_AGENT_INFO
 8

	)

201 
	snd_›t_¥efix_öfo


203 
uöt8_t
 
	mnd_›t_pi_ty≥
;

204 
uöt8_t
 
	mnd_›t_pi_Àn
;

205 
uöt8_t
 
	mnd_›t_pi_¥efix_Àn
;

206 
uöt8_t
 
	mnd_›t_pi_Êags_ª£rved
;

207 
uöt32_t
 
	mnd_›t_pi_vÆid_time
;

208 
uöt32_t
 
	mnd_›t_pi_¥e„ºed_time
;

209 
uöt32_t
 
	mnd_›t_pi_ª£rved2
;

210 
ö6_addr
 
	mnd_›t_pi_¥efix
;

213 
	#ND_OPT_PI_FLAG_ONLINK
 0x80

	)

214 
	#ND_OPT_PI_FLAG_AUTO
 0x40

	)

215 
	#ND_OPT_PI_FLAG_RADDR
 0x20

	)

217 
	snd_›t_rd_hdr


219 
uöt8_t
 
	mnd_›t_rh_ty≥
;

220 
uöt8_t
 
	mnd_›t_rh_Àn
;

221 
uöt16_t
 
	mnd_›t_rh_ª£rved1
;

222 
uöt32_t
 
	mnd_›t_rh_ª£rved2
;

226 
	snd_›t_mtu


228 
uöt8_t
 
	mnd_›t_mtu_ty≥
;

229 
uöt8_t
 
	mnd_›t_mtu_Àn
;

230 
uöt16_t
 
	mnd_›t_mtu_ª£rved
;

231 
uöt32_t
 
	mnd_›t_mtu_mtu
;

234 
	smld_hdr


236 
icmp6_hdr
 
	mmld_icmp6_hdr
;

237 
ö6_addr
 
	mmld_addr
;

240 
	#mld_ty≥
 
mld_icmp6_hdr
.
icmp6_ty≥


	)

241 
	#mld_code
 
mld_icmp6_hdr
.
icmp6_code


	)

242 
	#mld_cksum
 
mld_icmp6_hdr
.
icmp6_cksum


	)

243 
	#mld_maxdñay
 
mld_icmp6_hdr
.
icmp6_d©a16
[0]

	)

244 
	#mld_ª£rved
 
mld_icmp6_hdr
.
icmp6_d©a16
[1]

	)

246 
	#ICMP6_ROUTER_RENUMBERING
 138

	)

248 
	sicmp6_rouãr_ªnum


250 
icmp6_hdr
 
	mº_hdr
;

251 
uöt8_t
 
	mº_£gnum
;

252 
uöt8_t
 
	mº_Êags
;

253 
uöt16_t
 
	mº_maxdñay
;

254 
uöt32_t
 
	mº_ª£rved
;

257 
	#º_ty≥
 
º_hdr
.
icmp6_ty≥


	)

258 
	#º_code
 
º_hdr
.
icmp6_code


	)

259 
	#º_cksum
 
º_hdr
.
icmp6_cksum


	)

260 
	#º_£qnum
 
º_hdr
.
icmp6_d©a32
[0]

	)

263 
	#ICMP6_RR_FLAGS_TEST
 0x80

	)

264 
	#ICMP6_RR_FLAGS_REQRESULT
 0x40

	)

265 
	#ICMP6_RR_FLAGS_FORCEAPPLY
 0x20

	)

266 
	#ICMP6_RR_FLAGS_SPECSITE
 0x10

	)

267 
	#ICMP6_RR_FLAGS_PREVDONE
 0x08

	)

269 
	sº_pco_m©ch


271 
uöt8_t
 
	mΩm_code
;

272 
uöt8_t
 
	mΩm_Àn
;

273 
uöt8_t
 
	mΩm_‹döÆ
;

274 
uöt8_t
 
	mΩm_m©chÀn
;

275 
uöt8_t
 
	mΩm_möÀn
;

276 
uöt8_t
 
	mΩm_maxÀn
;

277 
uöt16_t
 
	mΩm_ª£rved
;

278 
ö6_addr
 
	mΩm_¥efix
;

282 
	#RPM_PCO_ADD
 1

	)

283 
	#RPM_PCO_CHANGE
 2

	)

284 
	#RPM_PCO_SETGLOBAL
 3

	)

286 
	sº_pco_u£


288 
uöt8_t
 
	mΩu_u£Àn
;

289 
uöt8_t
 
	mΩu_kì∂í
;

290 
uöt8_t
 
	mΩu_ømask
;

291 
uöt8_t
 
	mΩu_øÊags
;

292 
uöt32_t
 
	mΩu_v…ime
;

293 
uöt32_t
 
	mΩu_∂time
;

294 
uöt32_t
 
	mΩu_Êags
;

295 
ö6_addr
 
	mΩu_¥efix
;

298 
	#ICMP6_RR_PCOUSE_RAFLAGS_ONLINK
 0x20

	)

299 
	#ICMP6_RR_PCOUSE_RAFLAGS_AUTO
 0x10

	)

301 #i‡
BYTE_ORDER
 =
BIG_ENDIAN


302 
	#ICMP6_RR_PCOUSE_FLAGS_DECRVLTIME
 0x80000000

	)

303 
	#ICMP6_RR_PCOUSE_FLAGS_DECRPLTIME
 0x40000000

	)

304 #ñi‡
BYTE_ORDER
 =
LITTLE_ENDIAN


305 
	#ICMP6_RR_PCOUSE_FLAGS_DECRVLTIME
 0x80

	)

306 
	#ICMP6_RR_PCOUSE_FLAGS_DECRPLTIME
 0x40

	)

309 
	sº_ªsu…


311 
uöt16_t
 
	mºr_Êags
;

312 
uöt8_t
 
	mºr_‹döÆ
;

313 
uöt8_t
 
	mºr_m©chedÀn
;

314 
uöt32_t
 
	mºr_ifid
;

315 
ö6_addr
 
	mºr_¥efix
;

318 #i‡
BYTE_ORDER
 =
BIG_ENDIAN


319 
	#ICMP6_RR_RESULT_FLAGS_OOB
 0x0002

	)

320 
	#ICMP6_RR_RESULT_FLAGS_FORBIDDEN
 0x0001

	)

321 #ñi‡
BYTE_ORDER
 =
LITTLE_ENDIAN


322 
	#ICMP6_RR_RESULT_FLAGS_OOB
 0x0200

	)

323 
	#ICMP6_RR_RESULT_FLAGS_FORBIDDEN
 0x0100

	)

327 
	snd_›t_adv_öãrvÆ


329 
uöt8_t
 
	mnd_›t_adv_öãrvÆ_ty≥
;

330 
uöt8_t
 
	mnd_›t_adv_öãrvÆ_Àn
;

331 
uöt16_t
 
	mnd_›t_adv_öãrvÆ_ª£rved
;

332 
uöt32_t
 
	mnd_›t_adv_öãrvÆ_ivÆ
;

336 
	snd_›t_home_agít_öfo


338 
uöt8_t
 
	mnd_›t_home_agít_öfo_ty≥
;

339 
uöt8_t
 
	mnd_›t_home_agít_öfo_Àn
;

340 
uöt16_t
 
	mnd_›t_home_agít_öfo_ª£rved
;

341 
uöt16_t
 
	mnd_›t_home_agít_öfo_¥e„ªn˚
;

342 
uöt16_t
 
	mnd_›t_home_agít_öfo_li„time
;

	@/usr/include/netinet/if_ether.h

18 #i‚de‡
__NETINET_IF_ETHER_H


20 
	#__NETINET_IF_ETHER_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<sys/ty≥s.h
>

25 
	~<löux/if_ëhî.h
>

27 #ifde‡
__USE_BSD


60 
	~<√t/ëhî√t.h
>

61 
	~<√t/if_¨p.h
>

63 
__BEGIN_DECLS


71 
	sëhî_¨p
 {

72 
¨phdr
 
	mó_hdr
;

73 
u_öt8_t
 
	m¨p_sha
[
ETH_ALEN
];

74 
u_öt8_t
 
	m¨p_•a
[4];

75 
u_öt8_t
 
	m¨p_tha
[
ETH_ALEN
];

76 
u_öt8_t
 
	m¨p_ça
[4];

78 
	#¨p_hrd
 
ó_hdr
.
¨_hrd


	)

79 
	#¨p_¥o
 
ó_hdr
.
¨_¥o


	)

80 
	#¨p_h 
 
ó_hdr
.
¨_h 


	)

81 
	#¨p_∂n
 
ó_hdr
.
¨_∂n


	)

82 
	#¨p_›
 
ó_hdr
.
¨_›


	)

89 
	#ETHER_MAP_IP_MULTICAST
(
ùaddr
, 
íaddr
) \

93 (
íaddr
)[0] = 0x01; \

94 (
íaddr
)[1] = 0x00; \

95 (
íaddr
)[2] = 0x5e; \

96 (
íaddr
)[3] = ((
u_öt8_t
 *)
ùaddr
)[1] & 0x7f; \

97 (
íaddr
)[4] = ((
u_öt8_t
 *)
ùaddr
)[2]; \

98 (
íaddr
)[5] = ((
u_öt8_t
 *)
ùaddr
)[3]; \

99 }

	)

101 
	g__END_DECLS


	@/usr/include/netinet/in.h

18 #i‚def 
_NETINET_IN_H


19 
	#_NETINET_IN_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<°döt.h
>

23 
	~<sys/sockë.h
>

24 
	~<bôs/ty≥s.h
>

27 
__BEGIN_DECLS


30 
uöt32_t
 
	tö_addr_t
;

31 
	sö_addr


33 
ö_addr_t
 
	ms_addr
;

37 
	~<bôs/ö.h
>

42 
	mIPPROTO_IP
 = 0,

43 
	#IPPROTO_IP
 
IPPROTO_IP


	)

44 
	mIPPROTO_ICMP
 = 1,

45 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

46 
	mIPPROTO_IGMP
 = 2,

47 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

48 
	mIPPROTO_IPIP
 = 4,

49 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

50 
	mIPPROTO_TCP
 = 6,

51 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

52 
	mIPPROTO_EGP
 = 8,

53 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

54 
	mIPPROTO_PUP
 = 12,

55 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

56 
	mIPPROTO_UDP
 = 17,

57 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

58 
	mIPPROTO_IDP
 = 22,

59 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

60 
	mIPPROTO_TP
 = 29,

61 
	#IPPROTO_TP
 
IPPROTO_TP


	)

62 
	mIPPROTO_DCCP
 = 33,

63 
	#IPPROTO_DCCP
 
IPPROTO_DCCP


	)

64 
	mIPPROTO_IPV6
 = 41,

65 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

66 
	mIPPROTO_RSVP
 = 46,

67 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

68 
	mIPPROTO_GRE
 = 47,

69 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

70 
	mIPPROTO_ESP
 = 50,

71 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

72 
	mIPPROTO_AH
 = 51,

73 
	#IPPROTO_AH
 
IPPROTO_AH


	)

74 
	mIPPROTO_MTP
 = 92,

75 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

76 
	mIPPROTO_BEETPH
 = 94,

77 
	#IPPROTO_BEETPH
 
IPPROTO_BEETPH


	)

78 
	mIPPROTO_ENCAP
 = 98,

79 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

80 
	mIPPROTO_PIM
 = 103,

81 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

82 
	mIPPROTO_COMP
 = 108,

83 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

84 
	mIPPROTO_SCTP
 = 132,

85 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

86 
	mIPPROTO_UDPLITE
 = 136,

87 
	#IPPROTO_UDPLITE
 
IPPROTO_UDPLITE


	)

88 
	mIPPROTO_RAW
 = 255,

89 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

90 
	mIPPROTO_MAX


96 #i‚de‡
__USE_KERNEL_IPV6_DEFS


99 
	mIPPROTO_HOPOPTS
 = 0,

100 
	#IPPROTO_HOPOPTS
 
IPPROTO_HOPOPTS


	)

101 
	mIPPROTO_ROUTING
 = 43,

102 
	#IPPROTO_ROUTING
 
IPPROTO_ROUTING


	)

103 
	mIPPROTO_FRAGMENT
 = 44,

104 
	#IPPROTO_FRAGMENT
 
IPPROTO_FRAGMENT


	)

105 
	mIPPROTO_ICMPV6
 = 58,

106 
	#IPPROTO_ICMPV6
 
IPPROTO_ICMPV6


	)

107 
	mIPPROTO_NONE
 = 59,

108 
	#IPPROTO_NONE
 
IPPROTO_NONE


	)

109 
	mIPPROTO_DSTOPTS
 = 60,

110 
	#IPPROTO_DSTOPTS
 
IPPROTO_DSTOPTS


	)

111 
	mIPPROTO_MH
 = 135

112 
	#IPPROTO_MH
 
IPPROTO_MH


	)

117 
uöt16_t
 
	tö_p‹t_t
;

122 
	mIPPORT_ECHO
 = 7,

123 
	mIPPORT_DISCARD
 = 9,

124 
	mIPPORT_SYSTAT
 = 11,

125 
	mIPPORT_DAYTIME
 = 13,

126 
	mIPPORT_NETSTAT
 = 15,

127 
	mIPPORT_FTP
 = 21,

128 
	mIPPORT_TELNET
 = 23,

129 
	mIPPORT_SMTP
 = 25,

130 
	mIPPORT_TIMESERVER
 = 37,

131 
	mIPPORT_NAMESERVER
 = 42,

132 
	mIPPORT_WHOIS
 = 43,

133 
	mIPPORT_MTP
 = 57,

135 
	mIPPORT_TFTP
 = 69,

136 
	mIPPORT_RJE
 = 77,

137 
	mIPPORT_FINGER
 = 79,

138 
	mIPPORT_TTYLINK
 = 87,

139 
	mIPPORT_SUPDUP
 = 95,

142 
	mIPPORT_EXECSERVER
 = 512,

143 
	mIPPORT_LOGINSERVER
 = 513,

144 
	mIPPORT_CMDSERVER
 = 514,

145 
	mIPPORT_EFSSERVER
 = 520,

148 
	mIPPORT_BIFFUDP
 = 512,

149 
	mIPPORT_WHOSERVER
 = 513,

150 
	mIPPORT_ROUTESERVER
 = 520,

153 
	mIPPORT_RESERVED
 = 1024,

156 
	mIPPORT_USERRESERVED
 = 5000

164 
	#IN_CLASSA
(
a
Ë((((
ö_addr_t
)◊)Ë& 0x80000000Ë=0)

	)

165 
	#IN_CLASSA_NET
 0xff000000

	)

166 
	#IN_CLASSA_NSHIFT
 24

	)

167 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

168 
	#IN_CLASSA_MAX
 128

	)

170 
	#IN_CLASSB
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xc0000000Ë=0x80000000)

	)

171 
	#IN_CLASSB_NET
 0xffff0000

	)

172 
	#IN_CLASSB_NSHIFT
 16

	)

173 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

174 
	#IN_CLASSB_MAX
 65536

	)

176 
	#IN_CLASSC
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xc0000000)

	)

177 
	#IN_CLASSC_NET
 0xffffff00

	)

178 
	#IN_CLASSC_NSHIFT
 8

	)

179 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

181 
	#IN_CLASSD
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xe0000000)

	)

182 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

184 
	#IN_EXPERIMENTAL
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xe0000000)

	)

185 
	#IN_BADCLASS
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xf0000000)

	)

188 
	#INADDR_ANY
 ((
ö_addr_t
Ë0x00000000)

	)

190 
	#INADDR_BROADCAST
 ((
ö_addr_t
Ë0xffffffff)

	)

192 
	#INADDR_NONE
 ((
ö_addr_t
Ë0xffffffff)

	)

195 
	#IN_LOOPBACKNET
 127

	)

197 #i‚de‡
INADDR_LOOPBACK


198 
	#INADDR_LOOPBACK
 ((
ö_addr_t
Ë0x7f000001Ë

	)

202 
	#INADDR_UNSPEC_GROUP
 ((
ö_addr_t
Ë0xe0000000Ë

	)

203 
	#INADDR_ALLHOSTS_GROUP
 ((
ö_addr_t
Ë0xe0000001Ë

	)

204 
	#INADDR_ALLRTRS_GROUP
 ((
ö_addr_t
Ë0xe0000002Ë

	)

205 
	#INADDR_MAX_LOCAL_GROUP
 ((
ö_addr_t
Ë0xe00000ffË

	)

207 #i‚de‡
__USE_KERNEL_IPV6_DEFS


209 
	sö6_addr


213 
uöt8_t
 
	m__u6_addr8
[16];

214 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


215 
uöt16_t
 
	m__u6_addr16
[8];

216 
uöt32_t
 
	m__u6_addr32
[4];

218 } 
	m__ö6_u
;

219 
	#s6_addr
 
__ö6_u
.
__u6_addr8


	)

220 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


221 
	#s6_addr16
 
__ö6_u
.
__u6_addr16


	)

222 
	#s6_addr32
 
__ö6_u
.
__u6_addr32


	)

227 c⁄° 
ö6_addr
 
ö6addr_™y
;

228 c⁄° 
ö6_addr
 
ö6addr_lo›back
;

229 
	#IN6ADDR_ANY_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } } }

	)

230 
	#IN6ADDR_LOOPBACK_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 } } }

	)

232 
	#INET_ADDRSTRLEN
 16

	)

233 
	#INET6_ADDRSTRLEN
 46

	)

237 
	ssockaddr_ö


239 
__SOCKADDR_COMMON
 (
sö_
);

240 
ö_p‹t_t
 
	msö_p‹t
;

241 
ö_addr
 
	msö_addr
;

244 
	msö_zîo
[ (
sockaddr
) -

245 
__SOCKADDR_COMMON_SIZE
 -

246  (
ö_p‹t_t
) -

247  (
ö_addr
)];

250 #i‚de‡
__USE_KERNEL_IPV6_DEFS


252 
	ssockaddr_ö6


254 
__SOCKADDR_COMMON
 (
sö6_
);

255 
ö_p‹t_t
 
	msö6_p‹t
;

256 
uöt32_t
 
	msö6_Êowöfo
;

257 
ö6_addr
 
	msö6_addr
;

258 
uöt32_t
 
	msö6_sc›e_id
;

262 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


264 
	sù_mªq


267 
ö_addr
 
	mimr_mu…üddr
;

270 
ö_addr
 
	mimr_öãrÁ˚
;

273 
	sù_mªq_sour˚


276 
ö_addr
 
	mimr_mu…üddr
;

279 
ö_addr
 
	mimr_öãrÁ˚
;

282 
ö_addr
 
	mimr_sour˚addr
;

286 #i‚de‡
__USE_KERNEL_IPV6_DEFS


288 
	sùv6_mªq


291 
ö6_addr
 
	mùv6mr_mu…üddr
;

294 
	mùv6mr_öãrÁ˚
;

298 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


300 
	sgroup_ªq


303 
uöt32_t
 
	mgr_öãrÁ˚
;

306 
sockaddr_°‹age
 
	mgr_group
;

309 
	sgroup_sour˚_ªq


312 
uöt32_t
 
	mg§_öãrÁ˚
;

315 
sockaddr_°‹age
 
	mg§_group
;

318 
sockaddr_°‹age
 
	mg§_sour˚
;

323 
	sù_msfûãr


326 
ö_addr
 
	mimsf_mu…üddr
;

329 
ö_addr
 
	mimsf_öãrÁ˚
;

332 
uöt32_t
 
	mimsf_fmode
;

335 
uöt32_t
 
	mimsf_num§c
;

337 
ö_addr
 
	mimsf_¶i°
[1];

340 
	#IP_MSFILTER_SIZE
(
num§c
Ë( (
ù_msfûãr
) \

341 -  (
ö_addr
) \

342 + (
num§c
Ë*  (
ö_addr
))

	)

344 
	sgroup_fûãr


347 
uöt32_t
 
	mgf_öãrÁ˚
;

350 
sockaddr_°‹age
 
	mgf_group
;

353 
uöt32_t
 
	mgf_fmode
;

356 
uöt32_t
 
	mgf_num§c
;

358 
sockaddr_°‹age
 
	mgf_¶i°
[1];

361 
	#GROUP_FILTER_SIZE
(
num§c
Ë( (
group_fûãr
) \

362 -  (
sockaddr_°‹age
) \

363 + ((
num§c
) \

364 *  (
sockaddr_°‹age
)))

	)

374 
uöt32_t
 
	$¡ohl
 (
uöt32_t
 
__√é⁄g
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

375 
uöt16_t
 
	$¡ohs
 (
uöt16_t
 
__√tsh‹t
)

376 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

377 
uöt32_t
 
	$ht⁄l
 (
uöt32_t
 
__ho°l⁄g
)

378 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

379 
uöt16_t
 
	$ht⁄s
 (
uöt16_t
 
__ho°sh‹t
)

380 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

382 
	~<ídün.h
>

385 
	~<bôs/byãsw≠.h
>

387 #ifde‡
__OPTIMIZE__


391 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


394 
	#¡ohl
(
x
Ë(x)

	)

395 
	#¡ohs
(
x
Ë(x)

	)

396 
	#ht⁄l
(
x
Ë(x)

	)

397 
	#ht⁄s
(
x
Ë(x)

	)

399 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


400 
	#¡ohl
(
x
Ë
	`__bsw≠_32
 (x)

	)

401 
	#¡ohs
(
x
Ë
	`__bsw≠_16
 (x)

	)

402 
	#ht⁄l
(
x
Ë
	`__bsw≠_32
 (x)

	)

403 
	#ht⁄s
(
x
Ë
	`__bsw≠_16
 (x)

	)

408 #ifde‡
__GNUC__


409 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

410 (
__exãnsi⁄__
 \

411 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

412 
__a
->
s6_addr32
[0] == 0 \

413 && 
__a
->
s6_addr32
[1] == 0 \

414 && 
__a
->
s6_addr32
[2] == 0 \

415 && 
__a
->
s6_addr32
[3] =0; 
	}
}))

	)

417 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

418 (
__exãnsi⁄__
 \

419 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

420 
__a
->
s6_addr32
[0] == 0 \

421 && 
__a
->
s6_addr32
[1] == 0 \

422 && 
__a
->
s6_addr32
[2] == 0 \

423 && 
__a
->
s6_addr32
[3] =
	`ht⁄l
 (1); }))

	)

425 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

426 (
__exãnsi⁄__
 \

427 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

428 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„800000); }))

	)

430 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

431 (
__exãnsi⁄__
 \

432 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

433 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„c00000); }))

	)

435 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

436 (
__exãnsi⁄__
 \

437 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

438 
__a
->
s6_addr32
[0] == 0 \

439 && 
__a
->
s6_addr32
[1] == 0 \

440 && 
__a
->
s6_addr32
[2] =
	`ht⁄l
 (0xffff); }))

	)

442 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

443 (
__exãnsi⁄__
 \

444 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

445 
__a
->
s6_addr32
[0] == 0 \

446 && 
__a
->
s6_addr32
[1] == 0 \

447 && 
__a
->
s6_addr32
[2] == 0 \

448 && 
	`¡ohl
 (
__a
->
s6_addr32
[3]Ë> 1; }))

	)

450 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

451 (
__exãnsi⁄__
 \

452 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

453 c⁄° 
ö6_addr
 *
__b
 = (c⁄° ö6_add∏*Ë(
b
); \

454 
__a
->
s6_addr32
[0] =
__b
->s6_addr32[0] \

455 && 
__a
->
s6_addr32
[1] =
__b
->s6_addr32[1] \

456 && 
__a
->
s6_addr32
[2] =
__b
->s6_addr32[2] \

457 && 
__a
->
s6_addr32
[3] =
__b
->s6_addr32[3]; }))

	)

459 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

460 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

461 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

462 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

463 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =0)

	)

465 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

466 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

467 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

468 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

469 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =
	`ht⁄l
 (1))

	)

471 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

472 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

473 =
	`ht⁄l
 (0x„800000))

	)

475 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

476 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

477 =
	`ht⁄l
 (0x„c00000))

	)

479 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

480 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

481 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

482 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =
	`ht⁄l
 (0xffff)))

	)

484 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

485 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

486 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

487 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0) \

488 && (
	`¡ohl
 (((c⁄° 
uöt32_t
 *Ë(
a
))[3]Ë> 1))

	)

490 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

491 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] =((c⁄° uöt32_à*Ë(
b
))[0]) \

492 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] =((c⁄° uöt32_à*Ë(
b
))[1]) \

493 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =((c⁄° uöt32_à*Ë(
b
))[2]) \

494 && (((c⁄° 
uöt32_t
 *Ë(
a
))[3] =((c⁄° uöt32_à*Ë(
b
))[3]))

	)

497 
	#IN6_IS_ADDR_MULTICAST
(
a
Ë(((c⁄° 
uöt8_t
 *Ë◊))[0] =0xff)

	)

499 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


501 
	$bödªsvp‹t
 (
__sockfd
, 
sockaddr_ö
 *
__sock_ö
Ë
__THROW
;

504 
	$bödªsvp‹t6
 (
__sockfd
, 
sockaddr_ö6
 *
__sock_ö
)

505 
__THROW
;

509 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

510 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

511 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x1))

	)

513 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

514 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

515 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x2))

	)

517 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

518 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

519 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x5))

	)

521 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

522 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

523 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x8))

	)

525 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

526 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

527 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0xe))

	)

530 #ifde‡
__USE_GNU


531 
cmsghdr
;

534 
	sö6_pktöfo


536 
ö6_addr
 
ùi6_addr
;

537 
ùi6_ifödex
;

541 
	sù6_mtuöfo


543 
sockaddr_ö6
 
ù6m_addr
;

544 
uöt32_t
 
ù6m_mtu
;

549 
	$öë6_›ti⁄_•a˚
 (
__nbyãs
)

550 
__THROW
 
__©åibuã_dïªˇãd__
;

551 
	$öë6_›ti⁄_öô
 (*
__bp
, 
cmsghdr
 **
__cmsgp
,

552 
__ty≥
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

553 
	$öë6_›ti⁄_≠≥nd
 (
cmsghdr
 *
__cmsg
,

554 c⁄° 
uöt8_t
 *
__ty≥p
, 
__mu…x
,

555 
__∂usy
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

556 
uöt8_t
 *
	$öë6_›ti⁄_Æloc
 (
cmsghdr
 *
__cmsg
, 
__d©Æí
,

557 
__mu…x
, 
__∂usy
)

558 
__THROW
 
__©åibuã_dïªˇãd__
;

559 
	$öë6_›ti⁄_√xt
 (c⁄° 
cmsghdr
 *
__cmsg
,

560 
uöt8_t
 **
__çåp
)

561 
__THROW
 
__©åibuã_dïªˇãd__
;

562 
	$öë6_›ti⁄_föd
 (c⁄° 
cmsghdr
 *
__cmsg
,

563 
uöt8_t
 **
__çåp
, 
__ty≥
)

564 
__THROW
 
__©åibuã_dïªˇãd__
;

568 
	$öë6_›t_öô
 (*
__extbuf
, 
sockÀn_t
 
__exéí
Ë
__THROW
;

569 
	$öë6_›t_≠≥nd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

570 
uöt8_t
 
__ty≥
, 
sockÀn_t
 
__Àn
, uöt8_à
__Æign
,

571 **
__d©abuÂ
Ë
__THROW
;

572 
	$öë6_›t_föish
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
)

573 
__THROW
;

574 
	$öë6_›t_£t_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

575 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

576 
	$öë6_›t_√xt
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

577 
uöt8_t
 *
__ty≥p
, 
sockÀn_t
 *
__À≈
,

578 **
__d©abuÂ
Ë
__THROW
;

579 
	$öë6_›t_föd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

580 
uöt8_t
 
__ty≥
, 
sockÀn_t
 *
__À≈
,

581 **
__d©abuÂ
Ë
__THROW
;

582 
	$öë6_›t_gë_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

583 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

587 
sockÀn_t
 
	$öë6_πh_•a˚
 (
__ty≥
, 
__£gmíts
Ë
__THROW
;

588 *
	$öë6_πh_öô
 (*
__bp
, 
sockÀn_t
 
__bp_Àn
, 
__ty≥
,

589 
__£gmíts
Ë
__THROW
;

590 
	$öë6_πh_add
 (*
__bp
, c⁄° 
ö6_addr
 *
__addr
Ë
__THROW
;

591 
	$öë6_πh_ªvî£
 (c⁄° *
__ö
, *
__out
Ë
__THROW
;

592 
	$öë6_πh_£gmíts
 (c⁄° *
__bp
Ë
__THROW
;

593 
ö6_addr
 *
	$öë6_πh_gëaddr
 (c⁄° *
__bp
, 
__ödex
)

594 
__THROW
;

600 
	$gëùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

601 
ö_addr
 
__group
, 
uöt32_t
 *
__fmode
,

602 
uöt32_t
 *
__num§c
, 
ö_addr
 *
__¶i°
)

603 
__THROW
;

606 
	$£tùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

607 
ö_addr
 
__group
, 
uöt32_t
 
__fmode
,

608 
uöt32_t
 
__num§c
,

609 c⁄° 
ö_addr
 *
__¶i°
)

610 
__THROW
;

614 
	$gësour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

615 c⁄° 
sockaddr
 *
__group
,

616 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 *
__fmode
,

617 
uöt32_t
 *
__num§c
,

618 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

621 
	$£tsour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

622 c⁄° 
sockaddr
 *
__group
,

623 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 
__fmode
,

624 
uöt32_t
 
__num§c
,

625 c⁄° 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

628 
__END_DECLS


	@/usr/include/netinet/in_systm.h

19 #i‚de‡
_NETINET_IN_SYSTM_H


20 
	#_NETINET_IN_SYSTM_H
 1

	)

22 
	~<sys/cdefs.h
>

23 
	~<sys/ty≥s.h
>

25 
__BEGIN_DECLS


34 
u_öt16_t
 
	tn_sh‹t
;

35 
u_öt32_t
 
	tn_l⁄g
;

36 
u_öt32_t
 
	tn_time
;

38 
	g__END_DECLS


	@/usr/include/netinet/ip.h

18 #i‚de‡
__NETINET_IP_H


19 
	#__NETINET_IP_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<sys/ty≥s.h
>

24 
	~<√töë/ö.h
>

26 
__BEGIN_DECLS


28 
	stime°amp


30 
u_öt8_t
 
	mÀn
;

31 
u_öt8_t
 
	m±r
;

32 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


33 
	mÊags
:4;

34 
	movîÊow
:4;

35 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


36 
	movîÊow
:4;

37 
	mÊags
:4;

41 
u_öt32_t
 
	md©a
[9];

44 
	sùhdr


46 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


47 
	mihl
:4;

48 
	mvîsi⁄
:4;

49 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


50 
	mvîsi⁄
:4;

51 
	mihl
:4;

55 
u_öt8_t
 
	mtos
;

56 
u_öt16_t
 
	mtŸ_Àn
;

57 
u_öt16_t
 
	mid
;

58 
u_öt16_t
 
	m‰ag_off
;

59 
u_öt8_t
 
	mâl
;

60 
u_öt8_t
 
	m¥Ÿocﬁ
;

61 
u_öt16_t
 
	mcheck
;

62 
u_öt32_t
 
	mßddr
;

63 
u_öt32_t
 
	mdaddr
;

67 #ifde‡
__USE_BSD


107 
	sù


109 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


110 
	mù_hl
:4;

111 
	mù_v
:4;

113 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


114 
	mù_v
:4;

115 
	mù_hl
:4;

117 
u_öt8_t
 
	mù_tos
;

118 
u_sh‹t
 
	mù_Àn
;

119 
u_sh‹t
 
	mù_id
;

120 
u_sh‹t
 
	mù_off
;

121 
	#IP_RF
 0x8000

	)

122 
	#IP_DF
 0x4000

	)

123 
	#IP_MF
 0x2000

	)

124 
	#IP_OFFMASK
 0x1ff‡

	)

125 
u_öt8_t
 
	mù_âl
;

126 
u_öt8_t
 
	mù_p
;

127 
u_sh‹t
 
	mù_sum
;

128 
ö_addr
 
	mù_§c
, 
	mù_d°
;

134 
	sù_time°amp


136 
u_öt8_t
 
	mùt_code
;

137 
u_öt8_t
 
	mùt_Àn
;

138 
u_öt8_t
 
	mùt_±r
;

139 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


140 
	mùt_Êg
:4;

141 
	mùt_oÊw
:4;

143 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


144 
	mùt_oÊw
:4;

145 
	mùt_Êg
:4;

147 
u_öt32_t
 
	md©a
[9];

151 
	#IPVERSION
 4

	)

152 
	#IP_MAXPACKET
 65535

	)

160 
	#IPTOS_ECN_MASK
 0x03

	)

161 
	#IPTOS_ECN
(
x
Ë((xË& 
IPTOS_ECN_MASK
)

	)

162 
	#IPTOS_ECN_NOT_ECT
 0x00

	)

163 
	#IPTOS_ECN_ECT1
 0x01

	)

164 
	#IPTOS_ECN_ECT0
 0x02

	)

165 
	#IPTOS_ECN_CE
 0x03

	)

173 
	#IPTOS_DSCP_MASK
 0xfc

	)

174 
	#IPTOS_DSCP
(
x
Ë((xË& 
IPTOS_DSCP_MASK
)

	)

175 
	#IPTOS_DSCP_AF11
 0x28

	)

176 
	#IPTOS_DSCP_AF12
 0x30

	)

177 
	#IPTOS_DSCP_AF13
 0x38

	)

178 
	#IPTOS_DSCP_AF21
 0x48

	)

179 
	#IPTOS_DSCP_AF22
 0x50

	)

180 
	#IPTOS_DSCP_AF23
 0x58

	)

181 
	#IPTOS_DSCP_AF31
 0x68

	)

182 
	#IPTOS_DSCP_AF32
 0x70

	)

183 
	#IPTOS_DSCP_AF33
 0x78

	)

184 
	#IPTOS_DSCP_AF41
 0x88

	)

185 
	#IPTOS_DSCP_AF42
 0x90

	)

186 
	#IPTOS_DSCP_AF43
 0x98

	)

187 
	#IPTOS_DSCP_EF
 0xb8

	)

194 
	#IPTOS_CLASS_MASK
 0xe0

	)

195 
	#IPTOS_CLASS
(
˛ass
Ë((˛assË& 
IPTOS_CLASS_MASK
)

	)

196 
	#IPTOS_CLASS_CS0
 0x00

	)

197 
	#IPTOS_CLASS_CS1
 0x20

	)

198 
	#IPTOS_CLASS_CS2
 0x40

	)

199 
	#IPTOS_CLASS_CS3
 0x60

	)

200 
	#IPTOS_CLASS_CS4
 0x80

	)

201 
	#IPTOS_CLASS_CS5
 0xa0

	)

202 
	#IPTOS_CLASS_CS6
 0xc0

	)

203 
	#IPTOS_CLASS_CS7
 0xe0

	)

205 
	#IPTOS_CLASS_DEFAULT
 
IPTOS_CLASS_CS0


	)

211 
	#IPTOS_TOS_MASK
 0x1E

	)

212 
	#IPTOS_TOS
(
tos
Ë(—osË& 
IPTOS_TOS_MASK
)

	)

213 
	#IPTOS_LOWDELAY
 0x10

	)

214 
	#IPTOS_THROUGHPUT
 0x08

	)

215 
	#IPTOS_RELIABILITY
 0x04

	)

216 
	#IPTOS_LOWCOST
 0x02

	)

217 
	#IPTOS_MINCOST
 
IPTOS_LOWCOST


	)

222 
	#IPTOS_PREC_MASK
 
IPTOS_CLASS_MASK


	)

223 
	#IPTOS_PREC
(
tos
Ë
	`IPTOS_CLASS
—os)

	)

224 
	#IPTOS_PREC_NETCONTROL
 
IPTOS_CLASS_CS7


	)

225 
	#IPTOS_PREC_INTERNETCONTROL
 
IPTOS_CLASS_CS6


	)

226 
	#IPTOS_PREC_CRITIC_ECP
 
IPTOS_CLASS_CS5


	)

227 
	#IPTOS_PREC_FLASHOVERRIDE
 
IPTOS_CLASS_CS4


	)

228 
	#IPTOS_PREC_FLASH
 
IPTOS_CLASS_CS3


	)

229 
	#IPTOS_PREC_IMMEDIATE
 
IPTOS_CLASS_CS2


	)

230 
	#IPTOS_PREC_PRIORITY
 
IPTOS_CLASS_CS1


	)

231 
	#IPTOS_PREC_ROUTINE
 
IPTOS_CLASS_CS0


	)

236 
	#IPOPT_COPY
 0x80

	)

237 
	#IPOPT_CLASS_MASK
 0x60

	)

238 
	#IPOPT_NUMBER_MASK
 0x1f

	)

240 
	#IPOPT_COPIED
(
o
Ë((oË& 
IPOPT_COPY
)

	)

241 
	#IPOPT_CLASS
(
o
Ë((oË& 
IPOPT_CLASS_MASK
)

	)

242 
	#IPOPT_NUMBER
(
o
Ë((oË& 
IPOPT_NUMBER_MASK
)

	)

244 
	#IPOPT_CONTROL
 0x00

	)

245 
	#IPOPT_RESERVED1
 0x20

	)

246 
	#IPOPT_DEBMEAS
 0x40

	)

247 
	#IPOPT_MEASUREMENT
 
IPOPT_DEBMEAS


	)

248 
	#IPOPT_RESERVED2
 0x60

	)

250 
	#IPOPT_EOL
 0

	)

251 
	#IPOPT_END
 
IPOPT_EOL


	)

252 
	#IPOPT_NOP
 1

	)

253 
	#IPOPT_NOOP
 
IPOPT_NOP


	)

255 
	#IPOPT_RR
 7

	)

256 
	#IPOPT_TS
 68

	)

257 
	#IPOPT_TIMESTAMP
 
IPOPT_TS


	)

258 
	#IPOPT_SECURITY
 130

	)

259 
	#IPOPT_SEC
 
IPOPT_SECURITY


	)

260 
	#IPOPT_LSRR
 131

	)

261 
	#IPOPT_SATID
 136

	)

262 
	#IPOPT_SID
 
IPOPT_SATID


	)

263 
	#IPOPT_SSRR
 137

	)

264 
	#IPOPT_RA
 148

	)

269 
	#IPOPT_OPTVAL
 0

	)

270 
	#IPOPT_OLEN
 1

	)

271 
	#IPOPT_OFFSET
 2

	)

272 
	#IPOPT_MINOFF
 4

	)

274 
	#MAX_IPOPTLEN
 40

	)

277 
	#IPOPT_TS_TSONLY
 0

	)

278 
	#IPOPT_TS_TSANDADDR
 1

	)

279 
	#IPOPT_TS_PRESPEC
 3

	)

282 
	#IPOPT_SECUR_UNCLASS
 0x0000

	)

283 
	#IPOPT_SECUR_CONFID
 0xf135

	)

284 
	#IPOPT_SECUR_EFTO
 0x789a

	)

285 
	#IPOPT_SECUR_MMMM
 0xbc4d

	)

286 
	#IPOPT_SECUR_RESTR
 0xaf13

	)

287 
	#IPOPT_SECUR_SECRET
 0xd788

	)

288 
	#IPOPT_SECUR_TOPSECRET
 0x6bc5

	)

293 
	#MAXTTL
 255

	)

294 
	#IPDEFTTL
 64

	)

295 
	#IPFRAGTTL
 60

	)

296 
	#IPTTLDEC
 1

	)

298 
	#IP_MSS
 576

	)

300 
	g__END_DECLS


	@/usr/include/netinet/ip6.h

18 #i‚de‡
_NETINET_IP6_H


19 
	#_NETINET_IP6_H
 1

	)

21 
	~<öây≥s.h
>

22 
	~<√töë/ö.h
>

24 
	sù6_hdr


28 
	sù6_hdr˘l


30 
uöt32_t
 
	mù6_un1_Êow
;

32 
uöt16_t
 
	mù6_un1_∂í
;

33 
uöt8_t
 
	mù6_un1_nxt
;

34 
uöt8_t
 
	mù6_un1_hlim
;

35 } 
	mù6_un1
;

36 
uöt8_t
 
	mù6_un2_vfc
;

37 } 
	mù6_˘lun
;

38 
ö6_addr
 
	mù6_§c
;

39 
ö6_addr
 
	mù6_d°
;

42 
	#ù6_vfc
 
ù6_˘lun
.
ù6_un2_vfc


	)

43 
	#ù6_Êow
 
ù6_˘lun
.
ù6_un1
.
ù6_un1_Êow


	)

44 
	#ù6_∂í
 
ù6_˘lun
.
ù6_un1
.
ù6_un1_∂í


	)

45 
	#ù6_nxt
 
ù6_˘lun
.
ù6_un1
.
ù6_un1_nxt


	)

46 
	#ù6_hlim
 
ù6_˘lun
.
ù6_un1
.
ù6_un1_hlim


	)

47 
	#ù6_h›s
 
ù6_˘lun
.
ù6_un1
.
ù6_un1_hlim


	)

50 
	sù6_ext


52 
uöt8_t
 
	mù6e_nxt
;

53 
uöt8_t
 
	mù6e_Àn
;

57 
	sù6_hbh


59 
uöt8_t
 
	mù6h_nxt
;

60 
uöt8_t
 
	mù6h_Àn
;

65 
	sù6_de°


67 
uöt8_t
 
	mù6d_nxt
;

68 
uöt8_t
 
	mù6d_Àn
;

73 
	sù6_πhdr


75 
uöt8_t
 
	mù6r_nxt
;

76 
uöt8_t
 
	mù6r_Àn
;

77 
uöt8_t
 
	mù6r_ty≥
;

78 
uöt8_t
 
	mù6r_£gÀ·
;

83 
	sù6_πhdr0


85 
uöt8_t
 
	mù6r0_nxt
;

86 
uöt8_t
 
	mù6r0_Àn
;

87 
uöt8_t
 
	mù6r0_ty≥
;

88 
uöt8_t
 
	mù6r0_£gÀ·
;

89 
uöt8_t
 
	mù6r0_ª£rved
;

90 
uöt8_t
 
	mù6r0_¶m≠
[3];

92 
ö6_addr
 
	mù6r0_addr
[0];

96 
	sù6_‰ag


98 
uöt8_t
 
	mù6f_nxt
;

99 
uöt8_t
 
	mù6f_ª£rved
;

100 
uöt16_t
 
	mù6f_ofÊg
;

101 
uöt32_t
 
	mù6f_idít
;

104 #i‡
BYTE_ORDER
 =
BIG_ENDIAN


105 
	#IP6F_OFF_MASK
 0xfff8

	)

106 
	#IP6F_RESERVED_MASK
 0x0006

	)

107 
	#IP6F_MORE_FRAG
 0x0001

	)

109 
	#IP6F_OFF_MASK
 0xf8f‡

	)

110 
	#IP6F_RESERVED_MASK
 0x0600

	)

111 
	#IP6F_MORE_FRAG
 0x0100

	)

115 
	sù6_›t


117 
uöt8_t
 
	mù6o_ty≥
;

118 
uöt8_t
 
	mù6o_Àn
;

125 
	#IP6OPT_TYPE
(
o
Ë((oË& 0xc0)

	)

126 
	#IP6OPT_TYPE_SKIP
 0x00

	)

127 
	#IP6OPT_TYPE_DISCARD
 0x40

	)

128 
	#IP6OPT_TYPE_FORCEICMP
 0x80

	)

129 
	#IP6OPT_TYPE_ICMP
 0xc0

	)

130 
	#IP6OPT_TYPE_MUTABLE
 0x20

	)

133 
	#IP6OPT_PAD1
 0

	)

134 
	#IP6OPT_PADN
 1

	)

136 
	#IP6OPT_JUMBO
 0xc2

	)

137 
	#IP6OPT_NSAP_ADDR
 0xc3

	)

138 
	#IP6OPT_TUNNEL_LIMIT
 0x04

	)

139 
	#IP6OPT_ROUTER_ALERT
 0x05

	)

142 
	sù6_›t_jumbo


144 
uöt8_t
 
	mù6oj_ty≥
;

145 
uöt8_t
 
	mù6oj_Àn
;

146 
uöt8_t
 
	mù6oj_jumbo_Àn
[4];

148 
	#IP6OPT_JUMBO_LEN
 6

	)

151 
	sù6_›t_nßp


153 
uöt8_t
 
	mù6⁄_ty≥
;

154 
uöt8_t
 
	mù6⁄_Àn
;

155 
uöt8_t
 
	mù6⁄_§c_nßp_Àn
;

156 
uöt8_t
 
	mù6⁄_d°_nßp_Àn
;

162 
	sù6_›t_tu¬ñ


164 
uöt8_t
 
	mù6Ÿ_ty≥
;

165 
uöt8_t
 
	mù6Ÿ_Àn
;

166 
uöt8_t
 
	mù6Ÿ_íˇp_limô
;

170 
	sù6_›t_rouãr


172 
uöt8_t
 
	mù6‹_ty≥
;

173 
uöt8_t
 
	mù6‹_Àn
;

174 
uöt8_t
 
	mù6‹_vÆue
[2];

178 #i‡
BYTE_ORDER
 =
BIG_ENDIAN


179 
	#IP6_ALERT_MLD
 0x0000

	)

180 
	#IP6_ALERT_RSVP
 0x0001

	)

181 
	#IP6_ALERT_AN
 0x0002

	)

183 
	#IP6_ALERT_MLD
 0x0000

	)

184 
	#IP6_ALERT_RSVP
 0x0100

	)

185 
	#IP6_ALERT_AN
 0x0200

	)

	@/usr/include/netinet/ip_icmp.h

18 #i‚de‡
__NETINET_IP_ICMP_H


19 
	#__NETINET_IP_ICMP_H
 1

	)

21 
	~<sys/cdefs.h
>

22 
	~<sys/ty≥s.h
>

24 
__BEGIN_DECLS


26 
	sicmphdr


28 
u_öt8_t
 
	mty≥
;

29 
u_öt8_t
 
	mcode
;

30 
u_öt16_t
 
	mchecksum
;

35 
u_öt16_t
 
	mid
;

36 
u_öt16_t
 
	m£quí˚
;

37 } 
	mecho
;

38 
u_öt32_t
 
	mg©eway
;

41 
u_öt16_t
 
	m__glibc_ª£rved
;

42 
u_öt16_t
 
	mmtu
;

43 } 
	m‰ag
;

44 } 
	mun
;

47 
	#ICMP_ECHOREPLY
 0

	)

48 
	#ICMP_DEST_UNREACH
 3

	)

49 
	#ICMP_SOURCE_QUENCH
 4

	)

50 
	#ICMP_REDIRECT
 5

	)

51 
	#ICMP_ECHO
 8

	)

52 
	#ICMP_TIME_EXCEEDED
 11

	)

53 
	#ICMP_PARAMETERPROB
 12

	)

54 
	#ICMP_TIMESTAMP
 13

	)

55 
	#ICMP_TIMESTAMPREPLY
 14

	)

56 
	#ICMP_INFO_REQUEST
 15

	)

57 
	#ICMP_INFO_REPLY
 16

	)

58 
	#ICMP_ADDRESS
 17

	)

59 
	#ICMP_ADDRESSREPLY
 18

	)

60 
	#NR_ICMP_TYPES
 18

	)

64 
	#ICMP_NET_UNREACH
 0

	)

65 
	#ICMP_HOST_UNREACH
 1

	)

66 
	#ICMP_PROT_UNREACH
 2

	)

67 
	#ICMP_PORT_UNREACH
 3

	)

68 
	#ICMP_FRAG_NEEDED
 4

	)

69 
	#ICMP_SR_FAILED
 5

	)

70 
	#ICMP_NET_UNKNOWN
 6

	)

71 
	#ICMP_HOST_UNKNOWN
 7

	)

72 
	#ICMP_HOST_ISOLATED
 8

	)

73 
	#ICMP_NET_ANO
 9

	)

74 
	#ICMP_HOST_ANO
 10

	)

75 
	#ICMP_NET_UNR_TOS
 11

	)

76 
	#ICMP_HOST_UNR_TOS
 12

	)

77 
	#ICMP_PKT_FILTERED
 13

	)

78 
	#ICMP_PREC_VIOLATION
 14

	)

79 
	#ICMP_PREC_CUTOFF
 15

	)

80 
	#NR_ICMP_UNREACH
 15

	)

83 
	#ICMP_REDIR_NET
 0

	)

84 
	#ICMP_REDIR_HOST
 1

	)

85 
	#ICMP_REDIR_NETTOS
 2

	)

86 
	#ICMP_REDIR_HOSTTOS
 3

	)

89 
	#ICMP_EXC_TTL
 0

	)

90 
	#ICMP_EXC_FRAGTIME
 1

	)

93 #ifde‡
__USE_BSD


125 
	~<√töë/ö.h
>

126 
	~<√töë/ù.h
>

131 
	sicmp_ø_addr


133 
u_öt32_t
 
	múa_addr
;

134 
u_öt32_t
 
	múa_¥e„ªn˚
;

137 
	sicmp


139 
u_öt8_t
 
	micmp_ty≥
;

140 
u_öt8_t
 
	micmp_code
;

141 
u_öt16_t
 
	micmp_cksum
;

144 
u_ch¨
 
	mih_µå
;

145 
ö_addr
 
	mih_gwaddr
;

146 
	sih_id£q


148 
u_öt16_t
 
	micd_id
;

149 
u_öt16_t
 
	micd_£q
;

150 } 
	mih_id£q
;

151 
u_öt32_t
 
	mih_void
;

154 
	sih_pmtu


156 
u_öt16_t
 
	mùm_void
;

157 
u_öt16_t
 
	mùm_√xtmtu
;

158 } 
	mih_pmtu
;

160 
	sih_πødv


162 
u_öt8_t
 
	mút_num_addrs
;

163 
u_öt8_t
 
	mút_w∑
;

164 
u_öt16_t
 
	mút_li„time
;

165 } 
	mih_πødv
;

166 } 
	micmp_hun
;

167 
	#icmp_µå
 
icmp_hun
.
ih_µå


	)

168 
	#icmp_gwaddr
 
icmp_hun
.
ih_gwaddr


	)

169 
	#icmp_id
 
icmp_hun
.
ih_id£q
.
icd_id


	)

170 
	#icmp_£q
 
icmp_hun
.
ih_id£q
.
icd_£q


	)

171 
	#icmp_void
 
icmp_hun
.
ih_void


	)

172 
	#icmp_pmvoid
 
icmp_hun
.
ih_pmtu
.
ùm_void


	)

173 
	#icmp_√xtmtu
 
icmp_hun
.
ih_pmtu
.
ùm_√xtmtu


	)

174 
	#icmp_num_addrs
 
icmp_hun
.
ih_πødv
.
út_num_addrs


	)

175 
	#icmp_w∑
 
icmp_hun
.
ih_πødv
.
út_w∑


	)

176 
	#icmp_li„time
 
icmp_hun
.
ih_πødv
.
út_li„time


	)

181 
u_öt32_t
 
	môs_Ÿime
;

182 
u_öt32_t
 
	môs_πime
;

183 
u_öt32_t
 
	môs_âime
;

184 } 
	mid_ts
;

187 
ù
 
	midi_ù
;

189 } 
	mid_ù
;

190 
icmp_ø_addr
 
	mid_ødv
;

191 
u_öt32_t
 
	mid_mask
;

192 
u_öt8_t
 
	mid_d©a
[1];

193 } 
	micmp_dun
;

194 
	#icmp_Ÿime
 
icmp_dun
.
id_ts
.
ôs_Ÿime


	)

195 
	#icmp_πime
 
icmp_dun
.
id_ts
.
ôs_πime


	)

196 
	#icmp_âime
 
icmp_dun
.
id_ts
.
ôs_âime


	)

197 
	#icmp_ù
 
icmp_dun
.
id_ù
.
idi_ù


	)

198 
	#icmp_ødv
 
icmp_dun
.
id_ødv


	)

199 
	#icmp_mask
 
icmp_dun
.
id_mask


	)

200 
	#icmp_d©a
 
icmp_dun
.
id_d©a


	)

211 
	#ICMP_MINLEN
 8

	)

212 
	#ICMP_TSLEN
 (8 + 3 *  (
n_time
)Ë

	)

213 
	#ICMP_MASKLEN
 12

	)

214 
	#ICMP_ADVLENMIN
 (8 +  (
ù
Ë+ 8Ë

	)

215 #i‚de‡
_IP_VHL


216 
	#ICMP_ADVLEN
(
p
Ë(8 + (’)->
icmp_ù
.
ù_hl
 << 2Ë+ 8)

	)

219 
	#ICMP_ADVLEN
(
p
Ë(8 + (
	`IP_VHL_HL
(’)->
icmp_ù
.
ù_vhl
Ë<< 2Ë+ 8)

	)

225 
	#ICMP_UNREACH
 3

	)

226 
	#ICMP_SOURCEQUENCH
 4

	)

227 
	#ICMP_ROUTERADVERT
 9

	)

228 
	#ICMP_ROUTERSOLICIT
 10

	)

229 
	#ICMP_TIMXCEED
 11

	)

230 
	#ICMP_PARAMPROB
 12

	)

231 
	#ICMP_TSTAMP
 13

	)

232 
	#ICMP_TSTAMPREPLY
 14

	)

233 
	#ICMP_IREQ
 15

	)

234 
	#ICMP_IREQREPLY
 16

	)

235 
	#ICMP_MASKREQ
 17

	)

236 
	#ICMP_MASKREPLY
 18

	)

238 
	#ICMP_MAXTYPE
 18

	)

241 
	#ICMP_UNREACH_NET
 0

	)

242 
	#ICMP_UNREACH_HOST
 1

	)

243 
	#ICMP_UNREACH_PROTOCOL
 2

	)

244 
	#ICMP_UNREACH_PORT
 3

	)

245 
	#ICMP_UNREACH_NEEDFRAG
 4

	)

246 
	#ICMP_UNREACH_SRCFAIL
 5

	)

247 
	#ICMP_UNREACH_NET_UNKNOWN
 6

	)

248 
	#ICMP_UNREACH_HOST_UNKNOWN
 7

	)

249 
	#ICMP_UNREACH_ISOLATED
 8

	)

250 
	#ICMP_UNREACH_NET_PROHIB
 9

	)

251 
	#ICMP_UNREACH_HOST_PROHIB
 10

	)

252 
	#ICMP_UNREACH_TOSNET
 11

	)

253 
	#ICMP_UNREACH_TOSHOST
 12

	)

254 
	#ICMP_UNREACH_FILTER_PROHIB
 13

	)

255 
	#ICMP_UNREACH_HOST_PRECEDENCE
 14

	)

256 
	#ICMP_UNREACH_PRECEDENCE_CUTOFF
 15

	)

259 
	#ICMP_REDIRECT_NET
 0

	)

260 
	#ICMP_REDIRECT_HOST
 1

	)

261 
	#ICMP_REDIRECT_TOSNET
 2

	)

262 
	#ICMP_REDIRECT_TOSHOST
 3

	)

265 
	#ICMP_TIMXCEED_INTRANS
 0

	)

266 
	#ICMP_TIMXCEED_REASS
 1

	)

269 
	#ICMP_PARAMPROB_OPTABSENT
 1

	)

271 
	#ICMP_INFOTYPE
(
ty≥
) \

272 ((
ty≥
Ë=
ICMP_ECHOREPLY
 || (ty≥Ë=
ICMP_ECHO
 || \

273 (
ty≥
Ë=
ICMP_ROUTERADVERT
 || (ty≥Ë=
ICMP_ROUTERSOLICIT
 || \

274 (
ty≥
Ë=
ICMP_TSTAMP
 || (ty≥Ë=
ICMP_TSTAMPREPLY
 || \

275 (
ty≥
Ë=
ICMP_IREQ
 || (ty≥Ë=
ICMP_IREQREPLY
 || \

276 (
ty≥
Ë=
ICMP_MASKREQ
 || (ty≥Ë=
ICMP_MASKREPLY
)

	)

280 
	g__END_DECLS


	@/usr/include/netinet/tcp.h

32 #i‚de‡
_NETINET_TCP_H


33 
	#_NETINET_TCP_H
 1

	)

35 
	~<„©uªs.h
>

40 
	#TCP_NODELAY
 1

	)

41 
	#TCP_MAXSEG
 2

	)

42 
	#TCP_CORK
 3

	)

43 
	#TCP_KEEPIDLE
 4

	)

44 
	#TCP_KEEPINTVL
 5

	)

45 
	#TCP_KEEPCNT
 6

	)

46 
	#TCP_SYNCNT
 7

	)

47 
	#TCP_LINGER2
 8

	)

48 
	#TCP_DEFER_ACCEPT
 9

	)

49 
	#TCP_WINDOW_CLAMP
 10

	)

50 
	#TCP_INFO
 11

	)

51 
	#TCP_QUICKACK
 12

	)

52 
	#TCP_CONGESTION
 13

	)

53 
	#TCP_MD5SIG
 14

	)

54 
	#TCP_COOKIE_TRANSACTIONS
 15

	)

55 
	#TCP_THIN_LINEAR_TIMEOUTS
 16

	)

56 
	#TCP_THIN_DUPACK
 17

	)

57 
	#TCP_USER_TIMEOUT
 18

	)

58 
	#TCP_REPAIR
 19

	)

59 
	#TCP_REPAIR_QUEUE
 20

	)

60 
	#TCP_QUEUE_SEQ
 21

	)

61 
	#TCP_REPAIR_OPTIONS
 22

	)

62 
	#TCP_FASTOPEN
 23

	)

63 
	#TCP_TIMESTAMP
 24

	)

65 #ifde‡
__USE_MISC


66 
	~<sys/ty≥s.h
>

67 
	~<sys/sockë.h
>

69 
u_öt32_t
 
	tt˝_£q
;

74 
	st˝hdr


76 
__exãnsi⁄__
 union

80 
u_öt16_t
 
	mth_•‹t
;

81 
u_öt16_t
 
	mth_dp‹t
;

82 
t˝_£q
 
	mth_£q
;

83 
t˝_£q
 
	mth_ack
;

84 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


85 
u_öt8_t
 
	mth_x2
:4;

86 
u_öt8_t
 
	mth_off
:4;

88 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


89 
u_öt8_t
 
	mth_off
:4;

90 
u_öt8_t
 
	mth_x2
:4;

92 
u_öt8_t
 
	mth_Êags
;

93 
	#TH_FIN
 0x01

	)

94 
	#TH_SYN
 0x02

	)

95 
	#TH_RST
 0x04

	)

96 
	#TH_PUSH
 0x08

	)

97 
	#TH_ACK
 0x10

	)

98 
	#TH_URG
 0x20

	)

99 
u_öt16_t
 
	mth_wö
;

100 
u_öt16_t
 
	mth_sum
;

101 
u_öt16_t
 
	mth_uΩ
;

105 
u_öt16_t
 
	msour˚
;

106 
u_öt16_t
 
	mde°
;

107 
u_öt32_t
 
	m£q
;

108 
u_öt32_t
 
	mack_£q
;

109 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


110 
u_öt16_t
 
	mªs1
:4;

111 
u_öt16_t
 
	mdoff
:4;

112 
u_öt16_t
 
	mfö
:1;

113 
u_öt16_t
 
	msyn
:1;

114 
u_öt16_t
 
	mr°
:1;

115 
u_öt16_t
 
	mpsh
:1;

116 
u_öt16_t
 
	mack
:1;

117 
u_öt16_t
 
	murg
:1;

118 
u_öt16_t
 
	mªs2
:2;

119 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


120 
u_öt16_t
 
	mdoff
:4;

121 
u_öt16_t
 
	mªs1
:4;

122 
u_öt16_t
 
	mªs2
:2;

123 
u_öt16_t
 
	murg
:1;

124 
u_öt16_t
 
	mack
:1;

125 
u_öt16_t
 
	mpsh
:1;

126 
u_öt16_t
 
	mr°
:1;

127 
u_öt16_t
 
	msyn
:1;

128 
u_öt16_t
 
	mfö
:1;

132 
u_öt16_t
 
	mwödow
;

133 
u_öt16_t
 
	mcheck
;

134 
u_öt16_t
 
	murg_±r
;

141 
	mTCP_ESTABLISHED
 = 1,

142 
	mTCP_SYN_SENT
,

143 
	mTCP_SYN_RECV
,

144 
	mTCP_FIN_WAIT1
,

145 
	mTCP_FIN_WAIT2
,

146 
	mTCP_TIME_WAIT
,

147 
	mTCP_CLOSE
,

148 
	mTCP_CLOSE_WAIT
,

149 
	mTCP_LAST_ACK
,

150 
	mTCP_LISTEN
,

151 
	mTCP_CLOSING


154 
	#TCPOPT_EOL
 0

	)

155 
	#TCPOPT_NOP
 1

	)

156 
	#TCPOPT_MAXSEG
 2

	)

157 
	#TCPOLEN_MAXSEG
 4

	)

158 
	#TCPOPT_WINDOW
 3

	)

159 
	#TCPOLEN_WINDOW
 3

	)

160 
	#TCPOPT_SACK_PERMITTED
 4

	)

161 
	#TCPOLEN_SACK_PERMITTED
 2

	)

162 
	#TCPOPT_SACK
 5

	)

163 
	#TCPOPT_TIMESTAMP
 8

	)

164 
	#TCPOLEN_TIMESTAMP
 10

	)

165 
	#TCPOLEN_TSTAMP_APPA
 (
TCPOLEN_TIMESTAMP
+2Ë

	)

167 
	#TCPOPT_TSTAMP_HDR
 \

168 (
TCPOPT_NOP
<<24|TCPOPT_NOP<<16|
TCPOPT_TIMESTAMP
<<8|
TCPOLEN_TIMESTAMP
)

	)

176 
	#TCP_MSS
 512

	)

178 
	#TCP_MAXWIN
 65535

	)

180 
	#TCP_MAX_WINSHIFT
 14

	)

182 
	#SOL_TCP
 6

	)

185 
	#TCPI_OPT_TIMESTAMPS
 1

	)

186 
	#TCPI_OPT_SACK
 2

	)

187 
	#TCPI_OPT_WSCALE
 4

	)

188 
	#TCPI_OPT_ECN
 8

	)

189 
	#TCPI_OPT_ECN_SEEN
 16

	)

190 
	#TCPI_OPT_SYN_DATA
 32

	)

193 
	et˝_ˇ_°©e


195 
	mTCP_CA_O≥n
 = 0,

196 
	mTCP_CA_Dis‹dî
 = 1,

197 
	mTCP_CA_CWR
 = 2,

198 
	mTCP_CA_Recovîy
 = 3,

199 
	mTCP_CA_Loss
 = 4

202 
	st˝_öfo


204 
u_öt8_t
 
	mt˝i_°©e
;

205 
u_öt8_t
 
	mt˝i_ˇ_°©e
;

206 
u_öt8_t
 
	mt˝i_ªå™smôs
;

207 
u_öt8_t
 
	mt˝i_¥obes
;

208 
u_öt8_t
 
	mt˝i_backoff
;

209 
u_öt8_t
 
	mt˝i_›ti⁄s
;

210 
u_öt8_t
 
	mt˝i_¢d_wsˇÀ
 : 4, 
	mt˝i_rcv_wsˇÀ
 : 4;

212 
u_öt32_t
 
	mt˝i_πo
;

213 
u_öt32_t
 
	mt˝i_©o
;

214 
u_öt32_t
 
	mt˝i_¢d_mss
;

215 
u_öt32_t
 
	mt˝i_rcv_mss
;

217 
u_öt32_t
 
	mt˝i_u«cked
;

218 
u_öt32_t
 
	mt˝i_ßcked
;

219 
u_öt32_t
 
	mt˝i_lo°
;

220 
u_öt32_t
 
	mt˝i_ªå™s
;

221 
u_öt32_t
 
	mt˝i_Áckës
;

224 
u_öt32_t
 
	mt˝i_œ°_d©a_£¡
;

225 
u_öt32_t
 
	mt˝i_œ°_ack_£¡
;

226 
u_öt32_t
 
	mt˝i_œ°_d©a_ªcv
;

227 
u_öt32_t
 
	mt˝i_œ°_ack_ªcv
;

230 
u_öt32_t
 
	mt˝i_pmtu
;

231 
u_öt32_t
 
	mt˝i_rcv_s°hªsh
;

232 
u_öt32_t
 
	mt˝i_πt
;

233 
u_öt32_t
 
	mt˝i_πtv¨
;

234 
u_öt32_t
 
	mt˝i_¢d_s°hªsh
;

235 
u_öt32_t
 
	mt˝i_¢d_cwnd
;

236 
u_öt32_t
 
	mt˝i_advmss
;

237 
u_öt32_t
 
	mt˝i_ª‹dîög
;

239 
u_öt32_t
 
	mt˝i_rcv_πt
;

240 
u_öt32_t
 
	mt˝i_rcv_•a˚
;

242 
u_öt32_t
 
	mt˝i_tŸÆ_ªå™s
;

247 
	#TCP_MD5SIG_MAXKEYLEN
 80

	)

249 
	st˝_md5sig


251 
sockaddr_°‹age
 
	mt˝m_addr
;

252 
u_öt16_t
 
	m__t˝m_∑d1
;

253 
u_öt16_t
 
	mt˝m_keyÀn
;

254 
u_öt32_t
 
	m__t˝m_∑d2
;

255 
u_öt8_t
 
	mt˝m_key
[
TCP_MD5SIG_MAXKEYLEN
];

259 
	st˝_ª∑ú_›t


261 
u_öt32_t
 
	m›t_code
;

262 
u_öt32_t
 
	m›t_vÆ
;

268 
	mTCP_NO_QUEUE
,

269 
	mTCP_RECV_QUEUE
,

270 
	mTCP_SEND_QUEUE
,

271 
	mTCP_QUEUES_NR
,

275 
	#TCP_COOKIE_MIN
 8

	)

276 
	#TCP_COOKIE_MAX
 16

	)

277 
	#TCP_COOKIE_PAIR_SIZE
 (2*
TCP_COOKIE_MAX
)

	)

280 
	#TCP_COOKIE_IN_ALWAYS
 (1 << 0Ë

	)

281 
	#TCP_COOKIE_OUT_NEVER
 (1 << 1Ë

	)

285 
	#TCP_S_DATA_IN
 (1 << 2Ë

	)

286 
	#TCP_S_DATA_OUT
 (1 << 3Ë

	)

288 
	#TCP_MSS_DEFAULT
 536U

	)

289 
	#TCP_MSS_DESIRED
 1220U

	)

291 
	st˝_cookõ_å™ß˘i⁄s


293 
u_öt16_t
 
	mt˝˘_Êags
;

294 
u_öt8_t
 
	m__t˝˘_∑d1
;

295 
u_öt8_t
 
	mt˝˘_cookõ_desúed
;

296 
u_öt16_t
 
	mt˝˘_s_d©a_desúed
;

297 
u_öt16_t
 
	mt˝˘_u£d
;

298 
u_öt8_t
 
	mt˝˘_vÆue
[
TCP_MSS_DEFAULT
];

	@/usr/include/netinet/udp.h

47 #i‚de‡
__NETINET_UDP_H


48 
	#__NETINET_UDP_H
 1

	)

50 
	~<„©uªs.h
>

51 
	~<sys/ty≥s.h
>

56 
	sudphdr


58 
__exãnsi⁄__
 union

62 
u_öt16_t
 
	muh_•‹t
;

63 
u_öt16_t
 
	muh_dp‹t
;

64 
u_öt16_t
 
	muh_uÀn
;

65 
u_öt16_t
 
	muh_sum
;

69 
u_öt16_t
 
	msour˚
;

70 
u_öt16_t
 
	mde°
;

71 
u_öt16_t
 
	mÀn
;

72 
u_öt16_t
 
	mcheck
;

78 
	#UDP_CORK
 1

	)

79 
	#UDP_ENCAP
 100

	)

83 
	#UDP_ENCAP_ESPINUDP_NON_IKE
 1

	)

84 
	#UDP_ENCAP_ESPINUDP
 2

	)

85 
	#UDP_ENCAP_L2TPINUDP
 3

	)

87 
	#SOL_UDP
 17

	)

	@/usr/include/pwd.h

22 #i‚def 
_PWD_H


23 
	#_PWD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 
	#__√ed_size_t


	)

32 
	~<°ddef.h
>

34 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


37 #i‚de‡
__gid_t_deföed


38 
__gid_t
 
	tgid_t
;

39 
	#__gid_t_deföed


	)

42 #i‚de‡
__uid_t_deföed


43 
__uid_t
 
	tuid_t
;

44 
	#__uid_t_deföed


	)

49 
	s∑sswd


51 *
	mpw_«me
;

52 *
	mpw_∑sswd
;

53 
__uid_t
 
	mpw_uid
;

54 
__gid_t
 
	mpw_gid
;

55 *
	mpw_gecos
;

56 *
	mpw_dú
;

57 *
	mpw_shñl
;

61 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_GNU


62 
	#__√ed_FILE


	)

63 
	~<°dio.h
>

67 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


72 
£çwít
 ();

78 
ídpwít
 ();

84 
∑sswd
 *
gëpwít
 ();

87 #ifdef 
__USE_SVID


94 
∑sswd
 *
fgëpwít
 (
FILE
 *
__°ªam
);

102 
puçwít
 (c⁄° 
∑sswd
 *
__ª°ri˘
 
__p
,

103 
FILE
 *
__ª°ri˘
 
__f
);

110 
∑sswd
 *
gëpwuid
 (
__uid_t
 
__uid
);

116 
∑sswd
 *
gëpw«m
 (c⁄° *
__«me
);

118 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


120 #ifde‡
__USE_MISC


123 
	#NSS_BUFLEN_PASSWD
 1024

	)

134 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


139 
gëpwít_r
 (
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

140 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

141 
∑sswd
 **
__ª°ri˘
 
__ªsu…
);

144 
gëpwuid_r
 (
__uid_t
 
__uid
,

145 
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

146 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

147 
∑sswd
 **
__ª°ri˘
 
__ªsu…
);

149 
gëpw«m_r
 (c⁄° *
__ª°ri˘
 
__«me
,

150 
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

151 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

152 
∑sswd
 **
__ª°ri˘
 
__ªsu…
);

155 #ifdef 
__USE_SVID


163 
fgëpwít_r
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

164 
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

165 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

166 
∑sswd
 **
__ª°ri˘
 
__ªsu…
);

171 #ifde‡
__USE_GNU


180 
gëpw
 (
__uid_t
 
__uid
, *
__buf„r
);

183 
	g__END_DECLS


	@/usr/include/signal.h

22 #i‚def 
_SIGNAL_H


24 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


25 
	#_SIGNAL_H


	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	~<bôs/sig£t.h
>

36 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


37 #i‚de‡
__sig_©omic_t_deföed


38 
	#__sig_©omic_t_deföed


	)

39 
__BEGIN_NAMESPACE_STD


40 
__sig_©omic_t
 
	tsig_©omic_t
;

41 
	g__END_NAMESPACE_STD


43 #unde‡
__√ed_sig_©omic_t


46 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

47 #i‚de‡
__sig£t_t_deföed


48 
	#__sig£t_t_deföed


	)

49 
__sig£t_t
 
	tsig£t_t
;

51 #unde‡
__√ed_sig£t_t


54 #ifde‡
_SIGNAL_H


56 
	~<bôs/ty≥s.h
>

57 
	~<bôs/signum.h
>

59 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


60 #i‚de‡
__pid_t_deföed


61 
__pid_t
 
	tpid_t
;

62 
	#__pid_t_deföed


	)

64 #ifde‡
__USE_XOPEN


66 #i‚de‡
__uid_t_deföed


67 
__uid_t
 
	tuid_t
;

68 
	#__uid_t_deföed


	)

72 #ifde‡
__USE_POSIX199309


74 
	#__√ed_time•ec


	)

75 
	~<time.h
>

78 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_XOPEN_EXTENDED


80 
	~<bôs/sigöfo.h
>

85 (*
	t__sigh™dÀr_t
) ();

90 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

91 
__THROW
;

92 #ifde‡
__USE_GNU


93 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

94 
__THROW
;

100 
__BEGIN_NAMESPACE_STD


101 #ifde‡
__USE_BSD


102 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

103 
__THROW
;

106 #ifde‡
__REDIRECT_NTH


107 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

108 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

109 
__sysv_sig«l
);

111 
	#sig«l
 
__sysv_sig«l


	)

114 
__END_NAMESPACE_STD


116 #ifde‡
__USE_XOPEN


119 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

120 
__THROW
;

126 #ifde‡
__USE_POSIX


127 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

130 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


134 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

137 
__BEGIN_NAMESPACE_STD


139 
	$øi£
 (
__sig
Ë
__THROW
;

140 
__END_NAMESPACE_STD


142 #ifde‡
__USE_SVID


144 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

145 
__THROW
;

146 
	$gsig«l
 (
__sig
Ë
__THROW
;

149 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K


151 
	`psig«l
 (
__sig
, c⁄° *
__s
);

154 #ifde‡
__USE_XOPEN2K


156 
	`psigöfo
 (c⁄° 
sigöfo_t
 *
__pöfo
, c⁄° *
__s
);

167 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

169 #ifde‡
__USE_XOPEN


170 #ifde‡
__GNUC__


171 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

174 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

179 #ifde‡
__USE_BSD


186 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

189 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

192 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

195 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

199 #ifde‡
__USE_MISC


200 
	#NSIG
 
_NSIG


	)

203 #ifde‡
__USE_GNU


204 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

208 #ifde‡
__USE_BSD


209 
__sigh™dÀr_t
 
	tsig_t
;

212 #ifde‡
__USE_POSIX


215 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

218 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

221 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

224 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

227 
	$sigismembî
 (c⁄° 
sig£t_t
 *
__£t
, 
__signo
)

228 
__THROW
 
	`__n⁄nuŒ
 ((1));

230 #ifde‡
__USE_GNU


232 
	$sigi£m±y£t
 (c⁄° 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

235 
	$sig™d£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

236 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

239 
	$sig‹£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

240 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

245 
	~<bôs/siga˘i⁄.h
>

248 
	$sig¥ocmask
 (
__how
, c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

249 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

256 
	$sigsu•íd
 (c⁄° 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

259 
	$siga˘i⁄
 (
__sig
, c⁄° 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

260 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

263 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

270 
	$sigwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

271 
	`__n⁄nuŒ
 ((1, 2));

273 #ifde‡
__USE_POSIX199309


278 
	$sigwaôöfo
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

279 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

286 
	$sigtimedwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

287 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

288 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
)

289 
	`__n⁄nuŒ
 ((1));

293 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, c⁄° 
sigvÆ
 
__vÆ
)

294 
__THROW
;

299 #ifde‡
__USE_BSD


303 c⁄° *c⁄° 
_sys_sigli°
[
_NSIG
];

304 c⁄° *c⁄° 
sys_sigli°
[
_NSIG
];

307 
	ssigvec


309 
__sigh™dÀr_t
 
sv_h™dÀr
;

310 
sv_mask
;

312 
sv_Êags
;

313 
	#sv_⁄°ack
 
sv_Êags


	)

317 
	#SV_ONSTACK
 (1 << 0)

	)

318 
	#SV_INTERRUPT
 (1 << 1)

	)

319 
	#SV_RESETHAND
 (1 << 2)

	)

327 
	$sigvec
 (
__sig
, c⁄° 
sigvec
 *
__vec
,

328 
sigvec
 *
__ovec
Ë
__THROW
;

332 
	~<bôs/sigc⁄ãxt.h
>

335 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

340 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


341 
	#__√ed_size_t


	)

342 
	~<°ddef.h
>

347 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

349 
	~<bôs/sig°ack.h
>

350 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


352 
	~<sys/uc⁄ãxt.h
>

358 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

359 
__THROW
 
__©åibuã_dïªˇãd__
;

363 
	$sigÆt°ack
 (c⁄° 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

364 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

368 #ifde‡
__USE_XOPEN_EXTENDED


372 
	$sighﬁd
 (
__sig
Ë
__THROW
;

375 
	$sigªl£
 (
__sig
Ë
__THROW
;

378 
	$sigign‹e
 (
__sig
Ë
__THROW
;

381 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

384 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


387 
	~<bôs/±hªadty≥s.h
>

388 
	~<bôs/sigthªad.h
>

395 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

397 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

401 
__END_DECLS


	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/wch¨.h
>

27 
	~<bôs/w‹dsize.h
>

34 #i‚de‡
__öt8_t_deföed


35 
	#__öt8_t_deföed


	)

36 sig√d 
	töt8_t
;

37 
	töt16_t
;

38 
	töt32_t
;

39 #i‡
__WORDSIZE
 == 64

40 
	töt64_t
;

42 
__exãnsi⁄__


43 
	töt64_t
;

48 
	tuöt8_t
;

49 
	tuöt16_t
;

50 #i‚de‡
__uöt32_t_deföed


51 
	tuöt32_t
;

52 
	#__uöt32_t_deföed


	)

54 #i‡
__WORDSIZE
 == 64

55 
	tuöt64_t
;

57 
__exãnsi⁄__


58 
	tuöt64_t
;

65 sig√d 
	töt_Àa°8_t
;

66 
	töt_Àa°16_t
;

67 
	töt_Àa°32_t
;

68 #i‡
__WORDSIZE
 == 64

69 
	töt_Àa°64_t
;

71 
__exãnsi⁄__


72 
	töt_Àa°64_t
;

76 
	tuöt_Àa°8_t
;

77 
	tuöt_Àa°16_t
;

78 
	tuöt_Àa°32_t
;

79 #i‡
__WORDSIZE
 == 64

80 
	tuöt_Àa°64_t
;

82 
__exãnsi⁄__


83 
	tuöt_Àa°64_t
;

90 sig√d 
	töt_Á°8_t
;

91 #i‡
__WORDSIZE
 == 64

92 
	töt_Á°16_t
;

93 
	töt_Á°32_t
;

94 
	töt_Á°64_t
;

96 
	töt_Á°16_t
;

97 
	töt_Á°32_t
;

98 
__exãnsi⁄__


99 
	töt_Á°64_t
;

103 
	tuöt_Á°8_t
;

104 #i‡
__WORDSIZE
 == 64

105 
	tuöt_Á°16_t
;

106 
	tuöt_Á°32_t
;

107 
	tuöt_Á°64_t
;

109 
	tuöt_Á°16_t
;

110 
	tuöt_Á°32_t
;

111 
__exãnsi⁄__


112 
	tuöt_Á°64_t
;

117 #i‡
__WORDSIZE
 == 64

118 #i‚de‡
__öçå_t_deföed


119 
	töçå_t
;

120 
	#__öçå_t_deföed


	)

122 
	tuöçå_t
;

124 #i‚de‡
__öçå_t_deföed


125 
	töçå_t
;

126 
	#__öçå_t_deföed


	)

128 
	tuöçå_t
;

133 #i‡
__WORDSIZE
 == 64

134 
	tötmax_t
;

135 
	tuötmax_t
;

137 
__exãnsi⁄__


138 
	tötmax_t
;

139 
__exãnsi⁄__


140 
	tuötmax_t
;

144 #i‡
__WORDSIZE
 == 64

145 
	#__INT64_C
(
c
Ë¯## 
L


	)

146 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

148 
	#__INT64_C
(
c
Ë¯## 
LL


	)

149 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

155 
	#INT8_MIN
 (-128)

	)

156 
	#INT16_MIN
 (-32767-1)

	)

157 
	#INT32_MIN
 (-2147483647-1)

	)

158 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

160 
	#INT8_MAX
 (127)

	)

161 
	#INT16_MAX
 (32767)

	)

162 
	#INT32_MAX
 (2147483647)

	)

163 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

166 
	#UINT8_MAX
 (255)

	)

167 
	#UINT16_MAX
 (65535)

	)

168 
	#UINT32_MAX
 (4294967295U)

	)

169 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

173 
	#INT_LEAST8_MIN
 (-128)

	)

174 
	#INT_LEAST16_MIN
 (-32767-1)

	)

175 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

176 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

178 
	#INT_LEAST8_MAX
 (127)

	)

179 
	#INT_LEAST16_MAX
 (32767)

	)

180 
	#INT_LEAST32_MAX
 (2147483647)

	)

181 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

184 
	#UINT_LEAST8_MAX
 (255)

	)

185 
	#UINT_LEAST16_MAX
 (65535)

	)

186 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

187 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

191 
	#INT_FAST8_MIN
 (-128)

	)

192 #i‡
__WORDSIZE
 == 64

193 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

194 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

196 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

197 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

199 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

201 
	#INT_FAST8_MAX
 (127)

	)

202 #i‡
__WORDSIZE
 == 64

203 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

204 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

206 
	#INT_FAST16_MAX
 (2147483647)

	)

207 
	#INT_FAST32_MAX
 (2147483647)

	)

209 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

212 
	#UINT_FAST8_MAX
 (255)

	)

213 #i‡
__WORDSIZE
 == 64

214 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

215 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

217 
	#UINT_FAST16_MAX
 (4294967295U)

	)

218 
	#UINT_FAST32_MAX
 (4294967295U)

	)

220 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

224 #i‡
__WORDSIZE
 == 64

225 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

226 
	#INTPTR_MAX
 (9223372036854775807L)

	)

227 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

229 
	#INTPTR_MIN
 (-2147483647-1)

	)

230 
	#INTPTR_MAX
 (2147483647)

	)

231 
	#UINTPTR_MAX
 (4294967295U)

	)

236 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

238 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

241 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

247 #i‡
__WORDSIZE
 == 64

248 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

249 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

251 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

252 
	#PTRDIFF_MAX
 (2147483647)

	)

256 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

257 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

260 #i‡
__WORDSIZE
 == 64

261 
	#SIZE_MAX
 (18446744073709551615UL)

	)

263 
	#SIZE_MAX
 (4294967295U)

	)

267 #i‚de‡
WCHAR_MIN


269 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

270 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

274 
	#WINT_MIN
 (0u)

	)

275 
	#WINT_MAX
 (4294967295u)

	)

278 
	#INT8_C
(
c
Ë
	)
c

279 
	#INT16_C
(
c
Ë
	)
c

280 
	#INT32_C
(
c
Ë
	)
c

281 #i‡
__WORDSIZE
 == 64

282 
	#INT64_C
(
c
Ë¯## 
L


	)

284 
	#INT64_C
(
c
Ë¯## 
LL


	)

288 
	#UINT8_C
(
c
Ë
	)
c

289 
	#UINT16_C
(
c
Ë
	)
c

290 
	#UINT32_C
(
c
Ë¯## 
U


	)

291 #i‡
__WORDSIZE
 == 64

292 
	#UINT64_C
(
c
Ë¯## 
UL


	)

294 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

298 #i‡
__WORDSIZE
 == 64

299 
	#INTMAX_C
(
c
Ë¯## 
L


	)

300 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

302 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

303 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


25 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


26 
	#_STDIO_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	~<bôs/ty≥s.h
>

36 
	#__√ed_FILE


	)

37 
	#__√ed___FILE


	)

41 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


44 
	g_IO_FILE
;

46 
__BEGIN_NAMESPACE_STD


48 
_IO_FILE
 
	tFILE
;

49 
	g__END_NAMESPACE_STD


50 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

51 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

52 || 
deföed
 
__USE_POSIX2


53 
	$__USING_NAMESPACE_STD
(
FILE
)

56 
	#__FILE_deföed
 1

	)

58 #unde‡
__√ed_FILE


61 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


64 
_IO_FILE
 
	t__FILE
;

66 
	#____FILE_deföed
 1

	)

68 #unde‡
__√ed___FILE


71 #ifdef 
_STDIO_H


72 
	#_STDIO_USES_IOSTREAM


	)

74 
	~<libio.h
>

76 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


77 #ifde‡
__GNUC__


78 #i‚de‡
_VA_LIST_DEFINED


79 
_G_va_li°
 
	tva_li°
;

80 
	#_VA_LIST_DEFINED


	)

83 
	~<°d¨g.h
>

87 #ifde‡
__USE_XOPEN2K8


88 #i‚de‡
__off_t_deföed


89 #i‚de‡
__USE_FILE_OFFSET64


90 
__off_t
 
	toff_t
;

92 
__off64_t
 
	toff_t
;

94 
	#__off_t_deföed


	)

96 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


97 
__off64_t
 
	toff64_t
;

98 
	#__off64_t_deföed


	)

101 #i‚de‡
__ssize_t_deföed


102 
__ssize_t
 
	tssize_t
;

103 
	#__ssize_t_deföed


	)

108 
__BEGIN_NAMESPACE_STD


109 #i‚de‡
__USE_FILE_OFFSET64


110 
_G_Âos_t
 
	tÂos_t
;

112 
_G_Âos64_t
 
	tÂos_t
;

114 
__END_NAMESPACE_STD


115 #ifde‡
__USE_LARGEFILE64


116 
_G_Âos64_t
 
	tÂos64_t
;

120 
	#_IOFBF
 0

	)

121 
	#_IOLBF
 1

	)

122 
	#_IONBF
 2

	)

126 #i‚de‡
BUFSIZ


127 
	#BUFSIZ
 
_IO_BUFSIZ


	)

133 #i‚de‡
EOF


134 
	#EOF
 (-1)

	)

140 
	#SEEK_SET
 0

	)

141 
	#SEEK_CUR
 1

	)

142 
	#SEEK_END
 2

	)

143 #ifde‡
__USE_GNU


144 
	#SEEK_DATA
 3

	)

145 
	#SEEK_HOLE
 4

	)

149 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


151 
	#P_tmpdú
 "/tmp"

	)

164 
	~<bôs/°dio_lim.h
>

168 
_IO_FILE
 *
°dö
;

169 
_IO_FILE
 *
°dout
;

170 
_IO_FILE
 *
°dîr
;

172 
	#°dö
 
°dö


	)

173 
	#°dout
 
°dout


	)

174 
	#°dîr
 
°dîr


	)

176 
__BEGIN_NAMESPACE_STD


178 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

180 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

181 
__END_NAMESPACE_STD


183 #ifde‡
__USE_ATFILE


185 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

186 c⁄° *
__√w
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


194 #i‚de‡
__USE_FILE_OFFSET64


195 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

197 #ifde‡
__REDIRECT


198 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

200 
	#tmpfûe
 
tmpfûe64


	)

204 #ifde‡
__USE_LARGEFILE64


205 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

209 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

210 
__END_NAMESPACE_STD


212 #ifde‡
__USE_MISC


215 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

219 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


227 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

228 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

232 
__BEGIN_NAMESPACE_STD


237 
	`f˛o£
 (
FILE
 *
__°ªam
);

242 
	`fÊush
 (
FILE
 *
__°ªam
);

243 
__END_NAMESPACE_STD


245 #ifde‡
__USE_MISC


252 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

255 #ifde‡
__USE_GNU


262 
	`f˛o£Æl
 ();

266 
__BEGIN_NAMESPACE_STD


267 #i‚de‡
__USE_FILE_OFFSET64


272 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

273 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

278 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

279 c⁄° *
__ª°ri˘
 
__modes
,

280 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

282 #ifde‡
__REDIRECT


283 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

284 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

285 
__wur
;

286 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

287 c⁄° *
__ª°ri˘
 
__modes
,

288 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

289 
__wur
;

291 
	#f›í
 
f›í64


	)

292 
	#‰e›í
 
‰e›í64


	)

295 
__END_NAMESPACE_STD


296 #ifde‡
__USE_LARGEFILE64


297 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

298 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

299 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

300 c⁄° *
__ª°ri˘
 
__modes
,

301 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

304 #ifdef 
__USE_POSIX


306 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

309 #ifdef 
__USE_GNU


312 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

313 c⁄° *
__ª°ri˘
 
__modes
,

314 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

317 #ifde‡
__USE_XOPEN2K8


319 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

320 
__THROW
 
__wur
;

325 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

329 
__BEGIN_NAMESPACE_STD


332 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

336 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

337 
__modes
, 
size_t
 
__n
Ë
__THROW
;

338 
__END_NAMESPACE_STD


340 #ifdef 
__USE_BSD


343 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

344 
size_t
 
__size
Ë
__THROW
;

347 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

351 
__BEGIN_NAMESPACE_STD


356 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

357 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

362 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

364 
	$•rötf
 (*
__ª°ri˘
 
__s
,

365 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

371 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

372 
_G_va_li°
 
__¨g
);

377 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

379 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

380 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

381 
__END_NAMESPACE_STD


383 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


384 
__BEGIN_NAMESPACE_C99


386 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

387 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

388 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

390 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

391 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

392 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

393 
__END_NAMESPACE_C99


396 #ifde‡
__USE_GNU


399 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

400 
_G_va_li°
 
__¨g
)

401 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

402 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

403 c⁄° *
__ª°ri˘
 
__fmt
, ...)

404 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

405 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

406 c⁄° *
__ª°ri˘
 
__fmt
, ...)

407 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

410 #ifde‡
__USE_XOPEN2K8


412 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

413 
_G_va_li°
 
__¨g
)

414 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

415 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

416 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

420 
__BEGIN_NAMESPACE_STD


425 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

426 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

431 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

433 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

434 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

436 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

437 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

438 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

439 #ifde‡
__REDIRECT


443 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

444 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

445 
__isoc99_fsˇnf
Ë
__wur
;

446 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

447 
__isoc99_sˇnf
Ë
__wur
;

448 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

449 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

450 
__isoc99_ssˇnf
);

452 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

453 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

454 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

455 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

456 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

457 
	#fsˇnf
 
__isoc99_fsˇnf


	)

458 
	#sˇnf
 
__isoc99_sˇnf


	)

459 
	#ssˇnf
 
__isoc99_ssˇnf


	)

463 
__END_NAMESPACE_STD


465 #ifdef 
__USE_ISOC99


466 
__BEGIN_NAMESPACE_C99


471 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

472 
_G_va_li°
 
__¨g
)

473 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

479 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

480 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

483 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

484 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

485 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

487 #i‡!
deföed
 
__USE_GNU
 \

488 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

489 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

490 #ifde‡
__REDIRECT


494 
	`__REDIRECT
 (
vfsˇnf
,

495 (
FILE
 *
__ª°ri˘
 
__s
,

496 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

497 
__isoc99_vfsˇnf
)

498 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

499 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

500 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

501 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

502 
	`__REDIRECT_NTH
 (
vssˇnf
,

503 (c⁄° *
__ª°ri˘
 
__s
,

504 c⁄° *
__ª°ri˘
 
__f‹m©
,

505 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

506 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

508 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

509 c⁄° *
__ª°ri˘
 
__f‹m©
,

510 
_G_va_li°
 
__¨g
Ë
__wur
;

511 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

512 
_G_va_li°
 
__¨g
Ë
__wur
;

513 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

514 c⁄° *
__ª°ri˘
 
__f‹m©
,

515 
_G_va_li°
 
__¨g
Ë
__THROW
;

516 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

517 
	#vsˇnf
 
__isoc99_vsˇnf


	)

518 
	#vssˇnf
 
__isoc99_vssˇnf


	)

522 
__END_NAMESPACE_C99


526 
__BEGIN_NAMESPACE_STD


531 
	`fgëc
 (
FILE
 *
__°ªam
);

532 
	`gëc
 (
FILE
 *
__°ªam
);

538 
	`gëch¨
 ();

539 
__END_NAMESPACE_STD


543 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

545 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


550 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

551 
	`gëch¨_u∆ocked
 ();

554 #ifde‡
__USE_MISC


561 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

565 
__BEGIN_NAMESPACE_STD


573 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

574 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

580 
	`putch¨
 (
__c
);

581 
__END_NAMESPACE_STD


585 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

587 #ifde‡
__USE_MISC


594 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

597 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


602 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

603 
	`putch¨_u∆ocked
 (
__c
);

607 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

608 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

610 
	`gëw
 (
FILE
 *
__°ªam
);

613 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

617 
__BEGIN_NAMESPACE_STD


622 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

623 
__wur
;

625 #i‡!
deföed
 
__USE_ISOC11
 \

626 || (
deföed
 
__˝lu•lus
 && __cplusplus <= 201103L)

638 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

640 
__END_NAMESPACE_STD


642 #ifde‡
__USE_GNU


649 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

650 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

654 #ifdef 
__USE_XOPEN2K8


665 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

666 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

667 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

668 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

669 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

670 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

678 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

679 
size_t
 *
__ª°ri˘
 
__n
,

680 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

684 
__BEGIN_NAMESPACE_STD


689 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

695 
	`puts
 (c⁄° *
__s
);

702 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

709 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

710 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

715 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

716 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

717 
__END_NAMESPACE_STD


719 #ifde‡
__USE_GNU


726 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

727 
FILE
 *
__ª°ri˘
 
__°ªam
);

730 #ifde‡
__USE_MISC


737 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

738 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

739 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

740 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

744 
__BEGIN_NAMESPACE_STD


749 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

754 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

759 
	`ªwöd
 (
FILE
 *
__°ªam
);

760 
__END_NAMESPACE_STD


767 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


768 #i‚de‡
__USE_FILE_OFFSET64


773 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

778 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

780 #ifde‡
__REDIRECT


781 
	`__REDIRECT
 (
f£eko
,

782 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

783 
f£eko64
);

784 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

786 
	#f£eko
 
f£eko64


	)

787 
	#·ñlo
 
·ñlo64


	)

792 
__BEGIN_NAMESPACE_STD


793 #i‚de‡
__USE_FILE_OFFSET64


798 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

803 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

805 #ifde‡
__REDIRECT


806 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

807 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

808 
	`__REDIRECT
 (
f£ços
,

809 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

811 
	#fgëpos
 
fgëpos64


	)

812 
	#f£ços
 
f£ços64


	)

815 
__END_NAMESPACE_STD


817 #ifde‡
__USE_LARGEFILE64


818 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

819 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

820 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

821 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

824 
__BEGIN_NAMESPACE_STD


826 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

828 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

830 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

831 
__END_NAMESPACE_STD


833 #ifde‡
__USE_MISC


835 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

836 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

837 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

841 
__BEGIN_NAMESPACE_STD


846 
	`≥º‹
 (c⁄° *
__s
);

847 
__END_NAMESPACE_STD


853 
	~<bôs/sys_îæi°.h
>

856 #ifdef 
__USE_POSIX


858 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

861 #ifde‡
__USE_MISC


863 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

867 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

868 
deföed
 
__USE_MISC
)

873 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

879 
	`p˛o£
 (
FILE
 *
__°ªam
);

883 #ifdef 
__USE_POSIX


885 *
	$˘îmid
 (*
__s
Ë
__THROW
;

889 #ifde‡
__USE_XOPEN


891 *
	`cu£rid
 (*
__s
);

895 #ifdef 
__USE_GNU


896 
ob°ack
;

899 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

900 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

901 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

902 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

903 c⁄° *
__ª°ri˘
 
__f‹m©
,

904 
_G_va_li°
 
__¨gs
)

905 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

909 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


913 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

917 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

920 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

923 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


927 
	#__√ed_gë›t


	)

928 
	~<gë›t.h
>

933 #ifde‡
__USE_EXTERN_INLINES


934 
	~<bôs/°dio.h
>

936 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


937 
	~<bôs/°dio2.h
>

939 #ifde‡
__LDBL_COMPAT


940 
	~<bôs/°dio-ldbl.h
>

943 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

34 
	g__BEGIN_DECLS


36 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


37 
	#_STDLIB_H
 1

	)

39 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


41 
	~<bôs/waôÊags.h
>

42 
	~<bôs/waô°©us.h
>

44 #ifde‡
__USE_BSD


49 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


50 
	#__WAIT_INT
(
°©us
) \

51 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

52 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

54 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

62 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


63 
	#__WAIT_STATUS
 *

	)

64 
	#__WAIT_STATUS_DEFN
 *

	)

69 
waô
 *
	m__u±r
;

70 *
	m__ùå
;

71 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

72 
	#__WAIT_STATUS_DEFN
 *

	)

77 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

78 
	#__WAIT_STATUS
 *

	)

79 
	#__WAIT_STATUS_DEFN
 *

	)

84 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

85 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

90 #ifde‡
__WIFCONTINUED


91 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

95 
__BEGIN_NAMESPACE_STD


99 
	mquŸ
;

100 
	mªm
;

101 } 
	tdiv_t
;

104 #i‚de‡
__ldiv_t_deföed


107 
	mquŸ
;

108 
	mªm
;

109 } 
	tldiv_t
;

110 
	#__ldiv_t_deföed
 1

	)

112 
	g__END_NAMESPACE_STD


114 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


115 
__BEGIN_NAMESPACE_C99


117 
__exãnsi⁄__
 struct

119 
	mquŸ
;

120 
	mªm
;

121 } 
	tŒdiv_t
;

122 
	#__Œdiv_t_deföed
 1

	)

123 
	g__END_NAMESPACE_C99


128 
	#RAND_MAX
 2147483647

	)

133 
	#EXIT_FAILURE
 1

	)

134 
	#EXIT_SUCCESS
 0

	)

138 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

139 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

142 
__BEGIN_NAMESPACE_STD


144 
	$©of
 (c⁄° *
__≈å
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

147 
	$©oi
 (c⁄° *
__≈å
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

150 
	$©ﬁ
 (c⁄° *
__≈å
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

152 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_MISC


155 
__BEGIN_NAMESPACE_C99


157 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

158 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

159 
__END_NAMESPACE_C99


162 
__BEGIN_NAMESPACE_STD


164 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

167 
__END_NAMESPACE_STD


169 #ifdef 
__USE_ISOC99


170 
__BEGIN_NAMESPACE_C99


172 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

173 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

175 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

176 **
__ª°ri˘
 
__íd±r
)

177 
__THROW
 
	`__n⁄nuŒ
 ((1));

178 
__END_NAMESPACE_C99


181 
__BEGIN_NAMESPACE_STD


183 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

184 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

185 
__THROW
 
	`__n⁄nuŒ
 ((1));

187 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

190 
__END_NAMESPACE_STD


192 #ifde‡
__USE_BSD


194 
__exãnsi⁄__


195 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

196 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

197 
__THROW
 
	`__n⁄nuŒ
 ((1));

199 
__exãnsi⁄__


200 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

205 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_MISC


206 
__BEGIN_NAMESPACE_C99


208 
__exãnsi⁄__


209 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

210 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

211 
__THROW
 
	`__n⁄nuŒ
 ((1));

213 
__exãnsi⁄__


214 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

215 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1));

217 
__END_NAMESPACE_C99


221 #ifde‡
__USE_GNU


235 
	~<xloˇÀ.h
>

239 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

240 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

241 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

243 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

244 **
__ª°ri˘
 
__íd±r
,

245 
__ba£
, 
__loˇÀ_t
 
__loc
)

246 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

248 
__exãnsi⁄__


249 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

250 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

251 
__loˇÀ_t
 
__loc
)

252 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

254 
__exãnsi⁄__


255 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

256 **
__ª°ri˘
 
__íd±r
,

257 
__ba£
, 
__loˇÀ_t
 
__loc
)

258 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

260 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

261 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

262 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

264 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

265 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

266 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

268 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

269 **
__ª°ri˘
 
__íd±r
,

270 
__loˇÀ_t
 
__loc
)

271 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

275 #ifde‡
__USE_EXTERN_INLINES


276 
__BEGIN_NAMESPACE_STD


277 
__exã∫_ölöe
 

278 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

280  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

281 
	}
}

282 
__exã∫_ölöe
 

283 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

285  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

286 
	}
}

287 
	g__END_NAMESPACE_STD


289 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


290 
__BEGIN_NAMESPACE_C99


291 
__exãnsi⁄__
 
__exã∫_ölöe
 

292 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

294  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

295 
	}
}

296 
	g__END_NAMESPACE_C99


301 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


305 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

308 
	$a64l
 (c⁄° *
__s
)

309 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

313 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


314 
	~<sys/ty≥s.h
>

321 
	$øndom
 (Ë
__THROW
;

324 
	$§™dom
 (
__£ed
Ë
__THROW
;

330 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

331 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

335 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

338 #ifde‡
__USE_MISC


343 
	søndom_d©a


345 
öt32_t
 *
Âå
;

346 
öt32_t
 *
Ωå
;

347 
öt32_t
 *
°©e
;

348 
ønd_ty≥
;

349 
ønd_deg
;

350 
ønd_£p
;

351 
öt32_t
 *
íd_±r
;

354 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

355 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

357 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

358 
__THROW
 
	`__n⁄nuŒ
 ((2));

360 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

361 
size_t
 
__°©ñí
,

362 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

363 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

365 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

366 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

367 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

372 
__BEGIN_NAMESPACE_STD


374 
	$ønd
 (Ë
__THROW
;

376 
	$§™d
 (
__£ed
Ë
__THROW
;

377 
__END_NAMESPACE_STD


379 #ifde‡
__USE_POSIX


381 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

385 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


389 
	$dønd48
 (Ë
__THROW
;

390 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

393 
	$Ã™d48
 (Ë
__THROW
;

394 
	$ƒ™d48
 (
__xsubi
[3])

395 
__THROW
 
	`__n⁄nuŒ
 ((1));

398 
	$mønd48
 (Ë
__THROW
;

399 
	$jønd48
 (
__xsubi
[3])

400 
__THROW
 
	`__n⁄nuŒ
 ((1));

403 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

404 *
	$£ed48
 (
__£ed16v
[3])

405 
__THROW
 
	`__n⁄nuŒ
 ((1));

406 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

408 #ifde‡
__USE_MISC


412 
	sdønd48_d©a


414 
__x
[3];

415 
__ﬁd_x
[3];

416 
__c
;

417 
__öô
;

418 
__exãnsi⁄__
 
__a
;

423 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

424 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

425 
	$î™d48_r
 (
__xsubi
[3],

426 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

427 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

431 *
__ª°ri˘
 
__ªsu…
)

432 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

433 
	$ƒ™d48_r
 (
__xsubi
[3],

434 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

435 *
__ª°ri˘
 
__ªsu…
)

436 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

439 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

442 
	$jønd48_r
 (
__xsubi
[3],

443 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

444 *
__ª°ri˘
 
__ªsu…
)

445 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

448 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

449 
__THROW
 
	`__n⁄nuŒ
 ((2));

451 
	$£ed48_r
 (
__£ed16v
[3],

452 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$lc⁄g48_r
 (
__∑øm
[7],

455 
dønd48_d©a
 *
__buf„r
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

462 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


463 
	#__mÆloc_™d_ˇŒoc_deföed


	)

464 
__BEGIN_NAMESPACE_STD


466 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

468 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

469 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

470 
__END_NAMESPACE_STD


473 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


474 
__BEGIN_NAMESPACE_STD


480 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

481 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

483 
	$‰ì
 (*
__±r
Ë
__THROW
;

484 
__END_NAMESPACE_STD


486 #ifdef 
__USE_MISC


488 
	$c‰ì
 (*
__±r
Ë
__THROW
;

491 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


492 
	~<Æloˇ.h
>

495 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

496 || 
deföed
 
__USE_BSD


498 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

501 #ifde‡
__USE_XOPEN2K


503 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

504 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

507 #ifde‡
__USE_ISOC11


509 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

510 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

513 
__BEGIN_NAMESPACE_STD


515 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

519 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

521 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


523 #ifde‡
__˝lu•lus


524 "C++" 
	`©_quick_exô
 ((*
__func
) ())

525 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

527 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

530 
__END_NAMESPACE_STD


532 #ifdef 
__USE_MISC


535 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

536 
__THROW
 
	`__n⁄nuŒ
 ((1));

539 
__BEGIN_NAMESPACE_STD


543 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

545 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


549 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

551 
__END_NAMESPACE_STD


553 #ifde‡
__USE_ISOC99


554 
__BEGIN_NAMESPACE_C99


557 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

558 
__END_NAMESPACE_C99


562 
__BEGIN_NAMESPACE_STD


564 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

565 
__END_NAMESPACE_STD


567 #ifde‡
__USE_GNU


570 *
	$£cuª_gëív
 (c⁄° *
__«me
)

571 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

574 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


578 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

581 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


584 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

585 
__THROW
 
	`__n⁄nuŒ
 ((2));

588 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 #ifdef 
__USE_MISC


595 
	$˛óªnv
 (Ë
__THROW
;

599 #i‡
deföed
 
__USE_MISC
 \

600 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

609 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 \

610 || 
deföed
 
__USE_XOPEN2K8


619 #i‚de‡
__USE_FILE_OFFSET64


620 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

622 #ifde‡
__REDIRECT


623 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

624 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

626 
	#mk°emp
 
mk°emp64


	)

629 #ifde‡
__USE_LARGEFILE64


630 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

634 #ifde‡
__USE_MISC


641 #i‚de‡
__USE_FILE_OFFSET64


642 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

644 #ifde‡
__REDIRECT


645 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

646 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

648 
	#mk°emps
 
mk°emps64


	)

651 #ifde‡
__USE_LARGEFILE64


652 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

653 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

657 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


663 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

666 #ifde‡
__USE_GNU


673 #i‚de‡
__USE_FILE_OFFSET64


674 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

676 #ifde‡
__REDIRECT


677 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

678 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

680 
	#mko°emp
 
mko°emp64


	)

683 #ifde‡
__USE_LARGEFILE64


684 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

693 #i‚de‡
__USE_FILE_OFFSET64


694 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

695 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

697 #ifde‡
__REDIRECT


698 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

699 
__Êags
), 
mko°emps64
)

700 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

702 
	#mko°emps
 
mko°emps64


	)

705 #ifde‡
__USE_LARGEFILE64


706 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

707 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

712 
__BEGIN_NAMESPACE_STD


717 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

718 
__END_NAMESPACE_STD


721 #ifdef 
__USE_GNU


724 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

725 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

728 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


734 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

735 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

740 #i‚de‡
__COMPAR_FN_T


741 
	#__COMPAR_FN_T


	)

742 (*
	t__com∑r_‚_t
) (const *, const *);

744 #ifdef 
__USE_GNU


745 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

748 #ifde‡
__USE_GNU


749 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

752 
__BEGIN_NAMESPACE_STD


755 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

756 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

757 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

759 #ifde‡
__USE_EXTERN_INLINES


760 
	~<bôs/°dlib-b£¨ch.h
>

765 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

766 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

767 #ifde‡
__USE_GNU


768 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

769 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

770 
	`__n⁄nuŒ
 ((1, 4));

775 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

776 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

777 
__END_NAMESPACE_STD


779 #ifde‡
__USE_ISOC99


780 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

781 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

785 
__BEGIN_NAMESPACE_STD


789 
div_t
 
	$div
 (
__numî
, 
__díom
)

790 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

791 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

792 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

793 
__END_NAMESPACE_STD


795 #ifde‡
__USE_ISOC99


796 
__BEGIN_NAMESPACE_C99


797 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

798 
__díom
)

799 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

800 
__END_NAMESPACE_C99


804 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

805 || 
deföed
 
__USE_SVID


812 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

813 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

818 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

819 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

824 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

825 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

828 #ifde‡
__USE_MISC


830 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

831 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

832 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

833 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

834 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

835 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

836 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

837 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

842 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

843 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

844 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

845 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

846 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

847 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

849 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

850 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

851 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

852 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

853 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

854 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

855 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

856 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

860 
__BEGIN_NAMESPACE_STD


863 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

866 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

867 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

870 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

874 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

875 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

877 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

878 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

879 
__THROW
;

880 
__END_NAMESPACE_STD


883 #ifde‡
__USE_SVID


888 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

892 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


899 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

900 *c⁄° *
__ª°ri˘
 
__tokís
,

901 **
__ª°ri˘
 
__vÆuï
)

902 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

906 #ifde‡
__USE_XOPEN


908 
	$£tkey
 (c⁄° *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

914 #ifde‡
__USE_XOPEN2KXSI


916 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

919 #ifde‡
__USE_XOPEN


924 
	$gø¡±
 (
__fd
Ë
__THROW
;

928 
	$u∆ock±
 (
__fd
Ë
__THROW
;

933 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

936 #ifde‡
__USE_GNU


940 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

941 
__THROW
 
	`__n⁄nuŒ
 ((2));

944 
	`gë±
 ();

947 #ifde‡
__USE_BSD


951 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

952 
__THROW
 
	`__n⁄nuŒ
 ((1));

955 
	~<bôs/°dlib-Êﬂt.h
>

958 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


959 
	~<bôs/°dlib.h
>

961 #ifde‡
__LDBL_COMPAT


962 
	~<bôs/°dlib-ldbl.h
>

966 #unde‡
__√ed_mÆloc_™d_ˇŒoc


968 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


30 
	#__√ed_size_t


	)

31 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

39 #i‡
deföed
 
__˝lu•lus
 && (__˝lu•lu†>199711L || 
__GNUC_PREREQ
 (4, 4))

40 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

44 
__BEGIN_NAMESPACE_STD


46 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

47 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

50 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

51 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

52 
__END_NAMESPACE_STD


57 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


58 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

59 
__c
, 
size_t
 
__n
)

60 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

64 
__BEGIN_NAMESPACE_STD


66 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

69 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

70 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

73 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


76 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

77 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

78 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

79 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

81 #ifde‡
__OPTIMIZE__


82 
__exã∫_Æways_ölöe
 *

83 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


85  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

88 
__exã∫_Æways_ölöe
 const *

89 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


91  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

94 
	}
}

96 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

97 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

99 
__END_NAMESPACE_STD


101 #ifde‡
__USE_GNU


104 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


105 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

106 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

107 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

108 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

110 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

111 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

115 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


116 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

117 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

118 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

119 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

121 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

122 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

127 
__BEGIN_NAMESPACE_STD


129 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

132 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

133 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

134 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

137 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

138 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

140 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

141 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

144 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

147 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

151 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

154 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

155 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

156 
__THROW
 
	`__n⁄nuŒ
 ((2));

157 
__END_NAMESPACE_STD


159 #ifde‡
__USE_XOPEN2K8


163 
	~<xloˇÀ.h
>

166 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

167 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

169 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

170 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

173 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

174 || 
deföed
 
__USE_XOPEN2K8


176 *
	$°rdup
 (c⁄° *
__s
)

177 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

183 #i‡
deföed
 
__USE_XOPEN2K8


184 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

185 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

188 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


190 
	#°rdu∑
(
s
) \

191 (
__exãnsi⁄__
 \

193 c⁄° *
__ﬁd
 = (
s
); \

194 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

195 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

196 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

197 
	}
}))

	)

200 
	#°∫du∑
(
s
, 
n
) \

201 (
__exãnsi⁄__
 \

203 c⁄° *
__ﬁd
 = (
s
); \

204 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

205 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

206 
__√w
[
__Àn
] = '\0'; \

207 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

208 }))

	)

211 
	g__BEGIN_NAMESPACE_STD


213 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


216 *
°rchr
 (*
__s
, 
__c
)

217 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

218 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

219 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

221 #ifde‡
__OPTIMIZE__


222 
__exã∫_Æways_ölöe
 *

223 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


225  
__buûtö_°rchr
 (
__s
, 
__c
);

228 
__exã∫_Æways_ölöe
 const *

229 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


231  
__buûtö_°rchr
 (
__s
, 
__c
);

236 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

237 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

240 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


243 *
	`°ºchr
 (*
__s
, 
__c
)

244 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

245 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

246 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

248 #ifde‡
__OPTIMIZE__


249 
__exã∫_Æways_ölöe
 *

250 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


252  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

255 
__exã∫_Æways_ölöe
 const *

256 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


258  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

261 
	}
}

263 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

264 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

266 
__END_NAMESPACE_STD


268 #ifde‡
__USE_GNU


271 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


272 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

273 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

274 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

275 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

277 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

278 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

282 
__BEGIN_NAMESPACE_STD


285 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

286 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

289 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

290 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

292 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


295 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

296 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

297 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

298 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

300 #ifde‡
__OPTIMIZE__


301 
__exã∫_Æways_ölöe
 *

302 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


304  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

307 
__exã∫_Æways_ölöe
 const *

308 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


310  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

313 
	}
}

315 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

316 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

319 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


322 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

323 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

324 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

325 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

327 #ifde‡
__OPTIMIZE__


328 
__exã∫_Æways_ölöe
 *

329 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


331  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

334 
__exã∫_Æways_ölöe
 const *

335 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


337  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

340 
	}
}

342 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

343 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

348 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

349 
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
__END_NAMESPACE_STD


354 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

355 c⁄° *
__ª°ri˘
 
__dñim
,

356 **
__ª°ri˘
 
__ßve_±r
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

358 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


359 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

360 **
__ª°ri˘
 
__ßve_±r
)

361 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

364 #ifde‡
__USE_GNU


366 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


367 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

368 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

370 c⁄° *
__√edÀ
)

371 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

374 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

378 #ifde‡
__USE_GNU


382 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

383 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

384 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

388 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

389 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

391 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

392 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

397 
__BEGIN_NAMESPACE_STD


399 
size_t
 
	$°æí
 (c⁄° *
__s
)

400 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

401 
__END_NAMESPACE_STD


403 #ifdef 
__USE_XOPEN2K8


406 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

407 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

411 
__BEGIN_NAMESPACE_STD


413 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

414 
__END_NAMESPACE_STD


415 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


423 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


426 #ifde‡
__REDIRECT_NTH


427 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

428 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

429 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

431 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

433 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

438 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

439 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

443 #ifde‡
__USE_XOPEN2K8


445 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

451 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

453 #ifde‡
__USE_BSD


455 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

462 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

463 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

466 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


469 *
	`ödex
 (*
__s
, 
__c
)

470 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

471 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

472 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

474 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


475 
__exã∫_Æways_ölöe
 *

476 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


478  
	`__buûtö_ödex
 (
__s
, 
__c
);

481 
__exã∫_Æways_ölöe
 const *

482 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


484  
	`__buûtö_ödex
 (
__s
, 
__c
);

487 
	}
}

489 *
	$ödex
 (c⁄° *
__s
, 
__c
)

490 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


497 *
	`rödex
 (*
__s
, 
__c
)

498 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

499 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

500 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

502 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


503 
__exã∫_Æways_ölöe
 *

504 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


506  
	`__buûtö_rödex
 (
__s
, 
__c
);

509 
__exã∫_Æways_ölöe
 const *

510 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


512  
	`__buûtö_rödex
 (
__s
, 
__c
);

515 
	}
}

517 *
	$rödex
 (c⁄° *
__s
, 
__c
)

518 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

523 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

527 #ifdef 
__USE_GNU


528 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

530 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

534 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

535 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

538 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

539 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

542 #ifdef 
__USE_GNU


545 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

546 
__loˇÀ_t
 
__loc
)

547 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

549 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

550 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

551 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

554 #ifdef 
__USE_BSD


557 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

558 c⁄° *
__ª°ri˘
 
__dñim
)

559 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

562 #ifdef 
__USE_XOPEN2K8


564 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

567 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

568 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

569 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

574 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

575 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

576 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

577 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

578 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

579 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

582 #ifdef 
__USE_GNU


584 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

585 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

588 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

593 #i‚de‡
ba£«me


598 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


599 "C++" *
	$ba£«me
 (*
__fûíame
)

600 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

601 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

602 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

604 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

610 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

611 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

612 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


632 
	~<bôs/°rög.h
>

635 
	~<bôs/°rög2.h
>

638 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


640 
	~<bôs/°rög3.h
>

644 
__END_DECLS


	@/usr/include/strings.h

18 #i‚def 
_STRINGS_H


19 
	#_STRINGS_H
 1

	)

24 #i‡!
deföed
 
_STRING_H
 || !deföed 
__USE_BSD


26 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 
	~<°ddef.h
>

35 #i‡
deföed
 
__˝lu•lus
 && (__˝lu•lu†>199711L || 
__GNUC_PREREQ
 (4, 4))

36 
	#__CORRECT_ISO_CPP_STRINGS_H_PROTO


	)

39 
	g__BEGIN_DECLS


41 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


43 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

44 
__THROW
 
__©åibuã_puª__
;

47 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
Ë
__THROW
;

50 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
;

53 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


56 *
	`ödex
 (*
__s
, 
__c
)

57 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

58 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

59 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

61 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRING_H_PROTO


62 
__exã∫_Æways_ölöe
 *

63 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


65  
	`__buûtö_ödex
 (
__s
, 
__c
);

68 
__exã∫_Æways_ölöe
 const *

69 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


71  
	`__buûtö_ödex
 (
__s
, 
__c
);

74 
	}
}

76 *
	$ödex
 (c⁄° *
__s
, 
__c
)

77 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

81 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


84 *
	`rödex
 (*
__s
, 
__c
)

85 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

86 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

87 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

89 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRING_H_PROTO


90 
__exã∫_Æways_ölöe
 *

91 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


93  
	`__buûtö_rödex
 (
__s
, 
__c
);

96 
__exã∫_Æways_ölöe
 const *

97 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


99  
	`__buûtö_rödex
 (
__s
, 
__c
);

102 
	}
}

104 *
	$rödex
 (c⁄° *
__s
, 
__c
)

105 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

109 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8
 || deföed 
__USE_XOPEN2K8XSI


112 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((const));

116 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

117 
__THROW
 
__©åibuã_puª__
;

120 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
;

123 #ifdef 
__USE_XOPEN2K8


127 
	~<xloˇÀ.h
>

131 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__loc
)

132 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

134 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

135 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

136 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

139 
__END_DECLS


	@/usr/include/sysexits.h

32 #i‚def 
_SYSEXITS_H


33 
	#_SYSEXITS_H
 1

	)

92 
	#EX_OK
 0

	)

94 
	#EX__BASE
 64

	)

96 
	#EX_USAGE
 64

	)

97 
	#EX_DATAERR
 65

	)

98 
	#EX_NOINPUT
 66

	)

99 
	#EX_NOUSER
 67

	)

100 
	#EX_NOHOST
 68

	)

101 
	#EX_UNAVAILABLE
 69

	)

102 
	#EX_SOFTWARE
 70

	)

103 
	#EX_OSERR
 71

	)

104 
	#EX_OSFILE
 72

	)

105 
	#EX_CANTCREAT
 73

	)

106 
	#EX_IOERR
 74

	)

107 
	#EX_TEMPFAIL
 75

	)

108 
	#EX_PROTOCOL
 76

	)

109 
	#EX_NOPERM
 77

	)

110 
	#EX_CONFIG
 78

	)

112 
	#EX__MAX
 78

	)

	@/usr/include/time.h

22 #i‚def 
_TIME_H


24 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

25 ! 
deföed
 
	g__√ed_time•ec
)

26 
	#_TIME_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


33 #ifdef 
_TIME_H


35 
	#__√ed_size_t


	)

36 
	#__√ed_NULL


	)

37 
	~<°ddef.h
>

41 
	~<bôs/time.h
>

44 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


45 #i‚de‡
CLK_TCK


46 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

52 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

53 
	#__˛ock_t_deföed
 1

	)

55 
	~<bôs/ty≥s.h
>

57 
__BEGIN_NAMESPACE_STD


59 
__˛ock_t
 
	t˛ock_t
;

60 
	g__END_NAMESPACE_STD


61 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


62 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

66 #unde‡
__√ed_˛ock_t


68 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

69 
	#__time_t_deföed
 1

	)

71 
	~<bôs/ty≥s.h
>

73 
__BEGIN_NAMESPACE_STD


75 
__time_t
 
	ttime_t
;

76 
__END_NAMESPACE_STD


77 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


78 
	$__USING_NAMESPACE_STD
(
time_t
)

82 #unde‡
__√ed_time_t


84 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

85 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

86 
	#__˛ockid_t_deföed
 1

	)

88 
	~<bôs/ty≥s.h
>

91 
__˛ockid_t
 
	t˛ockid_t
;

94 #unde‡
__˛ockid_time_t


96 #i‡!
deföed
 
__timî_t_deföed
 && \

97 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

98 
	#__timî_t_deföed
 1

	)

100 
	~<bôs/ty≥s.h
>

103 
__timî_t
 
	ttimî_t
;

106 #unde‡
__√ed_timî_t


109 #i‡(!
deföed
 
__time•ec_deföed
 \

110 && ((
deföed
 
_TIME_H
 \

111 && (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
 \

112 || 
deföed
 
__USE_ISOC11
)) \

113 || 
deföed
 
__√ed_time•ec
))

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
__sysˇŒ_¶⁄g_t
 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 c⁄° *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 c⁄° *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 #ifde‡
__USE_ISOC11


182 
	#TIME_UTC
 1

	)

186 
__BEGIN_NAMESPACE_STD


189 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

192 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

195 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

196 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

199 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

205 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

206 c⁄° *
__ª°ri˘
 
__f‹m©
,

207 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

208 
__END_NAMESPACE_STD


210 #ifde‡
__USE_XOPEN


213 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

214 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

215 
__THROW
;

218 #ifde‡
__USE_XOPEN2K8


221 
	~<xloˇÀ.h
>

223 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

224 c⁄° *
__ª°ri˘
 
__f‹m©
,

225 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

229 #ifde‡
__USE_GNU


230 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

231 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

232 
__loˇÀ_t
 
__loc
Ë
__THROW
;

236 
__BEGIN_NAMESPACE_STD


239 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

243 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

244 
__END_NAMESPACE_STD


246 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


249 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

250 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

254 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

255 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

258 
__BEGIN_NAMESPACE_STD


261 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

264 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

265 
__END_NAMESPACE_STD


267 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


272 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

273 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

277 *
__ª°ri˘
 
__buf
Ë
__THROW
;

282 *
__tz«me
[2];

283 
__daylight
;

284 
__timez⁄e
;

287 #ifdef 
__USE_POSIX


289 *
tz«me
[2];

293 
	$tz£t
 (Ë
__THROW
;

296 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


297 
daylight
;

298 
timez⁄e
;

301 #ifde‡
__USE_SVID


304 
	$°ime
 (c⁄° 
time_t
 *
__whí
Ë
__THROW
;

310 
	#__i¶óp
(
yór
) \

311 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

314 #ifde‡
__USE_MISC


319 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

322 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

325 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

329 #ifde‡
__USE_POSIX199309


334 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

335 
time•ec
 *
__ªmaöög
);

339 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

342 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

345 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

346 
__THROW
;

348 #ifde‡
__USE_XOPEN2K


353 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

354 c⁄° 
time•ec
 *
__ªq
,

355 
time•ec
 *
__ªm
);

358 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

363 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

364 
sigevít
 *
__ª°ri˘
 
__evp
,

365 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

368 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

371 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

372 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

373 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

376 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

377 
__THROW
;

380 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

384 #ifde‡
__USE_ISOC11


386 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

387 
__THROW
 
	`__n⁄nuŒ
 ((1));

391 #ifde‡
__USE_XOPEN_EXTENDED


403 
gëd©e_îr
;

412 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

415 #ifde‡
__USE_GNU


426 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

427 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

430 
__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

71 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

75 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

79 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

83 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

86 #ifde‡
__USE_XOPEN2K8


87 
	#_XOPEN_VERSION
 700

	)

88 #ñi‡
deföed
 
__USE_XOPEN2K


89 
	#_XOPEN_VERSION
 600

	)

90 #ñi‡
deföed
 
__USE_UNIX98


91 
	#_XOPEN_VERSION
 500

	)

93 
	#_XOPEN_VERSION
 4

	)

97 
	#_XOPEN_XCU_VERSION
 4

	)

100 
	#_XOPEN_XPG2
 1

	)

101 
	#_XOPEN_XPG3
 1

	)

102 
	#_XOPEN_XPG4
 1

	)

105 
	#_XOPEN_UNIX
 1

	)

108 
	#_XOPEN_CRYPT
 1

	)

112 
	#_XOPEN_ENH_I18N
 1

	)

115 
	#_XOPEN_LEGACY
 1

	)

202 
	~<bôs/posix_›t.h
>

205 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


206 
	~<bôs/ívú⁄míts.h
>

210 
	#STDIN_FILENO
 0

	)

211 
	#STDOUT_FILENO
 1

	)

212 
	#STDERR_FILENO
 2

	)

217 
	~<bôs/ty≥s.h
>

219 #i‚def 
__ssize_t_deföed


220 
__ssize_t
 
	tssize_t
;

221 
	#__ssize_t_deföed


	)

224 
	#__√ed_size_t


	)

225 
	#__√ed_NULL


	)

226 
	~<°ddef.h
>

228 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


231 #i‚de‡
__gid_t_deföed


232 
__gid_t
 
	tgid_t
;

233 
	#__gid_t_deföed


	)

236 #i‚de‡
__uid_t_deföed


237 
__uid_t
 
	tuid_t
;

238 
	#__uid_t_deföed


	)

241 #i‚de‡
__off_t_deföed


242 #i‚de‡
__USE_FILE_OFFSET64


243 
__off_t
 
	toff_t
;

245 
__off64_t
 
	toff_t
;

247 
	#__off_t_deföed


	)

249 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


250 
__off64_t
 
	toff64_t
;

251 
	#__off64_t_deföed


	)

254 #i‚de‡
__u£c⁄ds_t_deföed


255 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

256 
	#__u£c⁄ds_t_deföed


	)

259 #i‚de‡
__pid_t_deföed


260 
__pid_t
 
	tpid_t
;

261 
	#__pid_t_deföed


	)

265 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


266 #i‚de‡
__öçå_t_deföed


267 
__öçå_t
 
	töçå_t
;

268 
	#__öçå_t_deföed


	)

272 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


273 #i‚de‡
__sockÀn_t_deföed


274 
__sockÀn_t
 
	tsockÀn_t
;

275 
	#__sockÀn_t_deföed


	)

281 
	#R_OK
 4

	)

282 
	#W_OK
 2

	)

283 
	#X_OK
 1

	)

284 
	#F_OK
 0

	)

287 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

289 #ifde‡
__USE_GNU


292 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

297 
__THROW
 
	`__n⁄nuŒ
 ((1));

300 #ifde‡
__USE_ATFILE


304 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

305 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

310 #i‚def 
_STDIO_H


311 
	#SEEK_SET
 0

	)

312 
	#SEEK_CUR
 1

	)

313 
	#SEEK_END
 2

	)

314 #ifde‡
__USE_GNU


315 
	#SEEK_DATA
 3

	)

316 
	#SEEK_HOLE
 4

	)

320 #i‡
deföed
 
__USE_BSD
 && !deföed 
L_SET


322 
	#L_SET
 
SEEK_SET


	)

323 
	#L_INCR
 
SEEK_CUR


	)

324 
	#L_XTND
 
SEEK_END


	)

333 #i‚de‡
__USE_FILE_OFFSET64


334 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

336 #ifde‡
__REDIRECT_NTH


337 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

338 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

339 
l£ek64
);

341 
	#l£ek
 
l£ek64


	)

344 #ifde‡
__USE_LARGEFILE64


345 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

346 
__THROW
;

353 
	`˛o£
 (
__fd
);

360 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

366 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur
;

368 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


369 #i‚de‡
__USE_FILE_OFFSET64


376 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

377 
__off_t
 
__off£t
Ë
__wur
;

384 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

385 
__off_t
 
__off£t
Ë
__wur
;

387 #ifde‡
__REDIRECT


388 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

389 
__off64_t
 
__off£t
),

390 
¥ód64
Ë
__wur
;

391 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

392 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

393 
pwrôe64
Ë
__wur
;

395 
	#¥ód
 
¥ód64


	)

396 
	#pwrôe
 
pwrôe64


	)

400 #ifde‡
__USE_LARGEFILE64


404 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

405 
__off64_t
 
__off£t
Ë
__wur
;

408 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

409 
__off64_t
 
__off£t
Ë
__wur
;

417 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

419 #ifde‡
__USE_GNU


422 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

432 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

444 
	`¶ìp
 (
__£c⁄ds
);

446 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

447 || 
deföed
 
__USE_BSD


452 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

453 
__THROW
;

460 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

469 
	`∑u£
 ();

473 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

474 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

476 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


478 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

483 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

484 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

488 #ifde‡
__USE_ATFILE


491 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

492 
__gid_t
 
__group
, 
__Êag
)

493 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

497 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

499 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


501 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

511 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

513 #ifdef 
__USE_GNU


517 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

520 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

521 || 
deföed
 
__USE_BSD


525 *
	$gëwd
 (*
__buf
)

526 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

531 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

534 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

536 #ifde‡
__USE_GNU


539 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

543 **
__ívú⁄
;

544 #ifde‡
__USE_GNU


545 **
ívú⁄
;

551 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

552 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

554 #ifde‡
__USE_XOPEN2K8


557 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

558 
__THROW
 
	`__n⁄nuŒ
 ((2));

563 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

564 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

568 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

569 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

573 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

574 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

578 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

579 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

585 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

587 #ifde‡
__USE_GNU


590 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

591 *c⁄° 
__ívp
[])

592 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

596 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


598 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

603 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

609 
	~<bôs/c⁄‚ame.h
>

612 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

613 
__THROW
 
	`__n⁄nuŒ
 ((1));

616 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

619 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

621 #ifdef 
__USE_POSIX2


623 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

628 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

631 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

634 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

637 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

638 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


639 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

646 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

648 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


660 
	$£çgΩ
 (Ë
__THROW
;

667 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

669 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


671 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

675 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

678 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

681 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

684 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

689 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

691 #ifdef 
__USE_GNU


693 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

700 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

702 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


705 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

708 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


710 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

717 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

719 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


722 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

725 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


727 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

730 #ifde‡
__USE_GNU


733 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

734 
__THROW
;

738 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

739 
__THROW
;

743 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

744 
__THROW
 
__wur
;

748 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

749 
__THROW
 
__wur
;

756 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

758 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

759 || 
deföed
 
__USE_BSD


764 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

770 *
	$ây«me
 (
__fd
Ë
__THROW
;

774 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

775 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

779 
	$ißây
 (
__fd
Ë
__THROW
;

781 #i‡
deföed
 
__USE_BSD
 \

782 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

785 
	$ây¶Ÿ
 (Ë
__THROW
;

790 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

791 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

793 #ifde‡
__USE_ATFILE


796 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

797 c⁄° *
__to
, 
__Êags
)

798 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

801 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


803 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

804 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

809 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

810 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

811 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

814 #ifde‡
__USE_ATFILE


816 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

817 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

820 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

821 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

822 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

826 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

828 #ifde‡
__USE_ATFILE


830 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

831 
__THROW
 
	`__n⁄nuŒ
 ((2));

835 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

839 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

842 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

849 *
	`gëlogö
 ();

850 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


857 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

860 #ifdef 
__USE_BSD


862 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

866 #ifdef 
__USE_POSIX2


870 
	#__√ed_gë›t


	)

871 
	~<gë›t.h
>

875 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


879 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

883 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

886 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

887 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

891 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

897 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

898 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

899 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

900 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

906 
	$vh™gup
 (Ë
__THROW
;

909 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

917 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

918 
size_t
 
__off£t
, 
__sˇÀ
)

919 
__THROW
 
	`__n⁄nuŒ
 ((1));

925 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

929 *
	$gëu£rshñl
 (Ë
__THROW
;

930 
	$ídu£rshñl
 (Ë
__THROW
;

931 
	$£tu£rshñl
 (Ë
__THROW
;

937 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

941 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

944 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

948 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

956 
	`fsync
 (
__fd
);

959 #ifde‡
__USE_GNU


962 
	$syncfs
 (
__fd
Ë
__THROW
;

966 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


969 
	`gëho°id
 ();

972 
	$sync
 (Ë
__THROW
;

975 #i‡
deföed
 
__USE_BSD
 || !deföed 
__USE_XOPEN2K


978 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

983 
	$gëdèbÀsize
 (Ë
__THROW
;

989 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


992 #i‚de‡
__USE_FILE_OFFSET64


993 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

994 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

996 #ifde‡
__REDIRECT_NTH


997 
	`__REDIRECT_NTH
 (
åunˇã
,

998 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

999 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1001 
	#åunˇã
 
åunˇã64


	)

1004 #ifde‡
__USE_LARGEFILE64


1005 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1006 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1011 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_POSIX199309
 \

1012 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1015 #i‚de‡
__USE_FILE_OFFSET64


1016 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1018 #ifde‡
__REDIRECT_NTH


1019 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1020 
·runˇã64
Ë
__wur
;

1022 
	#·runˇã
 
·runˇã64


	)

1025 #ifde‡
__USE_LARGEFILE64


1026 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1032 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1033 || 
deföed
 
__USE_MISC


1037 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1043 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1047 #ifde‡
__USE_MISC


1058 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1063 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1075 
	#F_ULOCK
 0

	)

1076 
	#F_LOCK
 1

	)

1077 
	#F_TLOCK
 2

	)

1078 
	#F_TEST
 3

	)

1080 #i‚de‡
__USE_FILE_OFFSET64


1081 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1083 #ifde‡
__REDIRECT


1084 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1085 
lockf64
Ë
__wur
;

1087 
	#lockf
 
lockf64


	)

1090 #ifde‡
__USE_LARGEFILE64


1091 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1096 #ifde‡
__USE_GNU


1101 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1102 (
__exãnsi⁄__
 \

1103 ({ 
__ªsu…
; \

1104 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1105 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1106 
__ªsu…
; 
	}
}))

	)

1109 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1112 
fd©async
 (
__fûdes
);

1118 #ifdef 
__USE_XOPEN


1120 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1121 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1125 
	$í¸y±
 (*
__glibc_block
, 
__edÊag
)

1126 
__THROW
 
	`__n⁄nuŒ
 ((1));

1133 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1134 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1140 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1142 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1147 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1148 
	~<bôs/uni°d.h
>

1151 
__END_DECLS


	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_BSD


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_BSD
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

62 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


63 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

64 
	#htﬁe16
(
x
Ë(x)

	)

65 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

66 
	#À16toh
(
x
Ë(x)

	)

68 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

69 
	#htﬁe32
(
x
Ë(x)

	)

70 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

71 
	#À32toh
(
x
Ë(x)

	)

73 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

74 
	#htﬁe64
(
x
Ë(x)

	)

75 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

76 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

101 #unde‡
__USE_ISOC11


102 #unde‡
__USE_ISOC99


103 #unde‡
__USE_ISOC95


104 #unde‡
__USE_ISOCXX11


105 #unde‡
__USE_POSIX


106 #unde‡
__USE_POSIX2


107 #unde‡
__USE_POSIX199309


108 #unde‡
__USE_POSIX199506


109 #unde‡
__USE_XOPEN


110 #unde‡
__USE_XOPEN_EXTENDED


111 #unde‡
__USE_UNIX98


112 #unde‡
__USE_XOPEN2K


113 #unde‡
__USE_XOPEN2KXSI


114 #unde‡
__USE_XOPEN2K8


115 #unde‡
__USE_XOPEN2K8XSI


116 #unde‡
__USE_LARGEFILE


117 #unde‡
__USE_LARGEFILE64


118 #unde‡
__USE_FILE_OFFSET64


119 #unde‡
__USE_BSD


120 #unde‡
__USE_SVID


121 #unde‡
__USE_MISC


122 #unde‡
__USE_ATFILE


123 #unde‡
__USE_GNU


124 #unde‡
__USE_REENTRANT


125 #unde‡
__USE_FORTIFY_LEVEL


126 #unde‡
__KERNEL_STRICT_NAMES


130 #i‚de‡
_LOOSE_KERNEL_NAMES


131 
	#__KERNEL_STRICT_NAMES


	)

141 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


142 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

143 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

145 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

150 #ifde‡
_GNU_SOURCE


151 #unde‡
_ISOC95_SOURCE


152 
	#_ISOC95_SOURCE
 1

	)

153 #unde‡
_ISOC99_SOURCE


154 
	#_ISOC99_SOURCE
 1

	)

155 #unde‡
_ISOC11_SOURCE


156 
	#_ISOC11_SOURCE
 1

	)

157 #unde‡
_POSIX_SOURCE


158 
	#_POSIX_SOURCE
 1

	)

159 #unde‡
_POSIX_C_SOURCE


160 
	#_POSIX_C_SOURCE
 200809L

	)

161 #unde‡
_XOPEN_SOURCE


162 
	#_XOPEN_SOURCE
 700

	)

163 #unde‡
_XOPEN_SOURCE_EXTENDED


164 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

165 #unde‡
_LARGEFILE64_SOURCE


166 
	#_LARGEFILE64_SOURCE
 1

	)

167 #unde‡
_DEFAULT_SOURCE


168 
	#_DEFAULT_SOURCE
 1

	)

169 #unde‡
_BSD_SOURCE


170 
	#_BSD_SOURCE
 1

	)

171 #unde‡
_SVID_SOURCE


172 
	#_SVID_SOURCE
 1

	)

173 #unde‡
_ATFILE_SOURCE


174 
	#_ATFILE_SOURCE
 1

	)

179 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

180 || (!
deföed
 
	g__STRICT_ANSI__
 \

181 && !
deföed
 
	g_ISOC99_SOURCE
 \

182 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

183 && !
deföed
 
	g_XOPEN_SOURCE
 \

184 && !
deföed
 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
))

185 #unde‡
_DEFAULT_SOURCE


186 
	#_DEFAULT_SOURCE
 1

	)

187 #unde‡
_BSD_SOURCE


188 
	#_BSD_SOURCE
 1

	)

189 #unde‡
_SVID_SOURCE


190 
	#_SVID_SOURCE
 1

	)

194 #i‡(
deföed
 
_ISOC11_SOURCE
 \

195 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

196 
	#__USE_ISOC11
 1

	)

200 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

201 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

202 
	#__USE_ISOC99
 1

	)

206 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

207 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

208 
	#__USE_ISOC95
 1

	)

215 #i‡((
deföed
 
__˝lu•lus
 && __cplusplus >= 201103L) \

216 || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
)

217 
	#__USE_ISOCXX11
 1

	)

223 #ifde‡
_DEFAULT_SOURCE


224 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


225 
	#__USE_POSIX_IMPLICITLY
 1

	)

227 #unde‡
_POSIX_SOURCE


228 
	#_POSIX_SOURCE
 1

	)

229 #unde‡
_POSIX_C_SOURCE


230 
	#_POSIX_C_SOURCE
 200809L

	)

232 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

233 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

234 
	#_POSIX_SOURCE
 1

	)

235 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

236 
	#_POSIX_C_SOURCE
 2

	)

237 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

238 
	#_POSIX_C_SOURCE
 199506L

	)

239 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

240 
	#_POSIX_C_SOURCE
 200112L

	)

242 
	#_POSIX_C_SOURCE
 200809L

	)

244 
	#__USE_POSIX_IMPLICITLY
 1

	)

247 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


248 
	#__USE_POSIX
 1

	)

251 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


252 
	#__USE_POSIX2
 1

	)

255 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

256 
	#__USE_POSIX199309
 1

	)

259 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

260 
	#__USE_POSIX199506
 1

	)

263 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

264 
	#__USE_XOPEN2K
 1

	)

265 #unde‡
__USE_ISOC95


266 
	#__USE_ISOC95
 1

	)

267 #unde‡
__USE_ISOC99


268 
	#__USE_ISOC99
 1

	)

271 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

272 
	#__USE_XOPEN2K8
 1

	)

273 #unde‡
_ATFILE_SOURCE


274 
	#_ATFILE_SOURCE
 1

	)

277 #ifdef 
_XOPEN_SOURCE


278 
	#__USE_XOPEN
 1

	)

279 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

280 
	#__USE_XOPEN_EXTENDED
 1

	)

281 
	#__USE_UNIX98
 1

	)

282 #unde‡
_LARGEFILE_SOURCE


283 
	#_LARGEFILE_SOURCE
 1

	)

284 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

285 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

286 
	#__USE_XOPEN2K8
 1

	)

287 
	#__USE_XOPEN2K8XSI
 1

	)

289 
	#__USE_XOPEN2K
 1

	)

290 
	#__USE_XOPEN2KXSI
 1

	)

291 #unde‡
__USE_ISOC95


292 
	#__USE_ISOC95
 1

	)

293 #unde‡
__USE_ISOC99


294 
	#__USE_ISOC99
 1

	)

297 #ifde‡
_XOPEN_SOURCE_EXTENDED


298 
	#__USE_XOPEN_EXTENDED
 1

	)

303 #ifde‡
_LARGEFILE_SOURCE


304 
	#__USE_LARGEFILE
 1

	)

307 #ifde‡
_LARGEFILE64_SOURCE


308 
	#__USE_LARGEFILE64
 1

	)

311 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

312 
	#__USE_FILE_OFFSET64
 1

	)

315 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


316 
	#__USE_MISC
 1

	)

319 #ifdef 
_BSD_SOURCE


320 
	#__USE_BSD
 1

	)

323 #ifdef 
_SVID_SOURCE


324 
	#__USE_SVID
 1

	)

327 #ifdef 
_ATFILE_SOURCE


328 
	#__USE_ATFILE
 1

	)

331 #ifdef 
_GNU_SOURCE


332 
	#__USE_GNU
 1

	)

335 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


336 
	#__USE_REENTRANT
 1

	)

339 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

340 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

341 #i‡
_FORTIFY_SOURCE
 > 1

342 
	#__USE_FORTIFY_LEVEL
 2

	)

344 
	#__USE_FORTIFY_LEVEL
 1

	)

347 
	#__USE_FORTIFY_LEVEL
 0

	)

352 
	~<°dc-¥edef.h
>

360 #unde‡
__GNU_LIBRARY__


361 
	#__GNU_LIBRARY__
 6

	)

365 
	#__GLIBC__
 2

	)

366 
	#__GLIBC_MINOR__
 19

	)

368 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

369 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

372 #i‚de‡
__ASSEMBLER__


373 #i‚de‡
_SYS_CDEFS_H


374 
	~<sys/cdefs.h
>

379 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


380 
	#__USE_LARGEFILE
 1

	)

381 
	#__USE_LARGEFILE64
 1

	)

387 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

388 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

389 && 
deföed
 
	g__exã∫_ölöe


390 
	#__USE_EXTERN_INLINES
 1

	)

398 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

19 #i‚de‡
_GETOPT_H


21 #i‚de‡
__√ed_gë›t


22 
	#_GETOPT_H
 1

	)

32 #i‡!
deföed
 
__GNU_LIBRARY__


33 
	~<˘y≥.h
>

36 #i‚de‡
__THROW


37 #i‚de‡
__GNUC_PREREQ


38 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

40 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

41 
	#__THROW
 
	`throw
 ()

	)

43 
	#__THROW


	)

47 #ifdef 
__˝lu•lus


57 *
›èrg
;

71 
›töd
;

76 
›ãº
;

80 
›t›t
;

82 #i‚de‡
__√ed_gë›t


104 
	s›ti⁄


106 c⁄° *
	g«me
;

109 
	ghas_¨g
;

110 *
	gÊag
;

111 
	gvÆ
;

116 
	#no_¨gumít
 0

	)

117 
	#ªquúed_¨gumít
 1

	)

118 
	#›ti⁄Æ_¨gumít
 2

	)

146 #ifde‡
__GNU_LIBRARY__


150 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

151 
__THROW
;

153 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

154 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


158 #ifde‡
__REDIRECT


159 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

160 c⁄° *
__sh‹t›ts
),

161 
__posix_gë›t
);

163 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

164 c⁄° *
__sh‹t›ts
Ë
__THROW
;

165 
	#gë›t
 
__posix_gë›t


	)

169 
gë›t
 ();

172 #i‚de‡
__√ed_gë›t


173 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

174 c⁄° *
__sh‹t›ts
,

175 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

176 
__THROW
;

177 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

178 c⁄° *
__sh‹t›ts
,

179 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

180 
__THROW
;

184 #ifdef 
__˝lu•lus


189 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

28 #i‚de‡
_IO_STDIO_H


29 
	#_IO_STDIO_H


	)

31 
	~<_G_c⁄fig.h
>

33 
	#_IO_Âos_t
 
_G_Âos_t


	)

34 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

35 
	#_IO_size_t
 
size_t


	)

36 
	#_IO_ssize_t
 
__ssize_t


	)

37 
	#_IO_off_t
 
__off_t


	)

38 
	#_IO_off64_t
 
__off64_t


	)

39 
	#_IO_pid_t
 
__pid_t


	)

40 
	#_IO_uid_t
 
__uid_t


	)

41 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

42 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

43 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

44 
	#_IO_va_li°
 
_G_va_li°


	)

45 
	#_IO_wöt_t
 
wöt_t


	)

48 
	#__√ed___va_li°


	)

49 
	~<°d¨g.h
>

50 #ifde‡
__GNUC_VA_LIST


51 #unde‡
_IO_va_li°


52 
	#_IO_va_li°
 
__gnuc_va_li°


	)

55 #i‚de‡
__P


56 
	~<sys/cdefs.h
>

59 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

61 #i‚de‡
EOF


62 
	#EOF
 (-1)

	)

64 #i‚de‡
NULL


65 #i‡
deföed
 
__GNUG__
 && \

66 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

67 
	#NULL
 (
__nuŒ
)

	)

69 #i‡!
deföed
(
__˝lu•lus
)

70 
	#NULL
 ((*)0)

	)

72 
	#NULL
 (0)

	)

77 
	#_IOS_INPUT
 1

	)

78 
	#_IOS_OUTPUT
 2

	)

79 
	#_IOS_ATEND
 4

	)

80 
	#_IOS_APPEND
 8

	)

81 
	#_IOS_TRUNC
 16

	)

82 
	#_IOS_NOCREATE
 32

	)

83 
	#_IOS_NOREPLACE
 64

	)

84 
	#_IOS_BIN
 128

	)

92 
	#_IO_MAGIC
 0xFBAD0000

	)

93 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

94 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

95 
	#_IO_USER_BUF
 1

	)

96 
	#_IO_UNBUFFERED
 2

	)

97 
	#_IO_NO_READS
 4

	)

98 
	#_IO_NO_WRITES
 8

	)

99 
	#_IO_EOF_SEEN
 0x10

	)

100 
	#_IO_ERR_SEEN
 0x20

	)

101 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

102 
	#_IO_LINKED
 0x80

	)

103 
	#_IO_IN_BACKUP
 0x100

	)

104 
	#_IO_LINE_BUF
 0x200

	)

105 
	#_IO_TIED_PUT_GET
 0x400

	)

106 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

107 
	#_IO_IS_APPENDING
 0x1000

	)

108 
	#_IO_IS_FILEBUF
 0x2000

	)

109 
	#_IO_BAD_SEEN
 0x4000

	)

110 
	#_IO_USER_LOCK
 0x8000

	)

112 
	#_IO_FLAGS2_MMAP
 1

	)

113 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

114 #ifde‡
_LIBC


115 
	#_IO_FLAGS2_FORTIFY
 4

	)

117 
	#_IO_FLAGS2_USER_WBUF
 8

	)

118 #ifde‡
_LIBC


119 
	#_IO_FLAGS2_SCANF_STD
 16

	)

120 
	#_IO_FLAGS2_NOCLOSE
 32

	)

121 
	#_IO_FLAGS2_CLOEXEC
 64

	)

125 
	#_IO_SKIPWS
 01

	)

126 
	#_IO_LEFT
 02

	)

127 
	#_IO_RIGHT
 04

	)

128 
	#_IO_INTERNAL
 010

	)

129 
	#_IO_DEC
 020

	)

130 
	#_IO_OCT
 040

	)

131 
	#_IO_HEX
 0100

	)

132 
	#_IO_SHOWBASE
 0200

	)

133 
	#_IO_SHOWPOINT
 0400

	)

134 
	#_IO_UPPERCASE
 01000

	)

135 
	#_IO_SHOWPOS
 02000

	)

136 
	#_IO_SCIENTIFIC
 04000

	)

137 
	#_IO_FIXED
 010000

	)

138 
	#_IO_UNITBUF
 020000

	)

139 
	#_IO_STDIO
 040000

	)

140 
	#_IO_DONT_CLOSE
 0100000

	)

141 
	#_IO_BOOLALPHA
 0200000

	)

144 
_IO_jump_t
; 
	g_IO_FILE
;

147 #ifde‡
_IO_MTSAFE_IO


148 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

149 
	~<bôs/°dio-lock.h
>

154 
	t_IO_lock_t
;

160 
	s_IO_m¨kî
 {

161 
_IO_m¨kî
 *
	m_√xt
;

162 
_IO_FILE
 *
	m_sbuf
;

166 
	m_pos
;

168 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

169 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

170 
	mpublic
:

171 
°ªamm¨kî
(
°ªambuf
 *
sb
);

172 ~
°ªamm¨kî
();

173 
ßvög
(Ë{  
	m_•os
 == -2; }

174 
dñè
(
°ªamm¨kî
&);

175 
dñè
();

180 
	e__codecvt_ªsu…


182 
	m__codecvt_ok
,

183 
	m__codecvt_∑πül
,

184 
	m__codecvt_îr‹
,

185 
	m__codecvt_noc⁄v


188 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


191 
	s_IO_codecvt


193 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

194 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

195 
	m__mb°©e_t
 *,

196 c⁄° 
	mwch¨_t
 *,

197 c⁄° 
	mwch¨_t
 *,

198 c⁄° 
	mwch¨_t
 **, *,

200 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

201 
	m__mb°©e_t
 *, *,

203 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

204 
	m__mb°©e_t
 *,

206 c⁄° **, 
	mwch¨_t
 *,

207 
	mwch¨_t
 *, wchar_t **);

208 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

209 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

210 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

211 c⁄° *, c⁄° *, 
	m_IO_size_t
);

212 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

214 
_IO_ic⁄v_t
 
	m__cd_ö
;

215 
_IO_ic⁄v_t
 
	m__cd_out
;

219 
	s_IO_wide_d©a


221 
wch¨_t
 *
	m_IO_ªad_±r
;

222 
wch¨_t
 *
	m_IO_ªad_íd
;

223 
wch¨_t
 *
	m_IO_ªad_ba£
;

224 
wch¨_t
 *
	m_IO_wrôe_ba£
;

225 
wch¨_t
 *
	m_IO_wrôe_±r
;

226 
wch¨_t
 *
	m_IO_wrôe_íd
;

227 
wch¨_t
 *
	m_IO_buf_ba£
;

228 
wch¨_t
 *
	m_IO_buf_íd
;

230 
wch¨_t
 *
	m_IO_ßve_ba£
;

231 
wch¨_t
 *
	m_IO_backup_ba£
;

233 
wch¨_t
 *
	m_IO_ßve_íd
;

235 
__mb°©e_t
 
	m_IO_°©e
;

236 
__mb°©e_t
 
	m_IO_œ°_°©e
;

237 
_IO_codecvt
 
	m_codecvt
;

239 
wch¨_t
 
	m_sh‹tbuf
[1];

241 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

245 
	s_IO_FILE
 {

246 
	m_Êags
;

247 
	#_IO_fûe_Êags
 
_Êags


	)

251 * 
	m_IO_ªad_±r
;

252 * 
	m_IO_ªad_íd
;

253 * 
	m_IO_ªad_ba£
;

254 * 
	m_IO_wrôe_ba£
;

255 * 
	m_IO_wrôe_±r
;

256 * 
	m_IO_wrôe_íd
;

257 * 
	m_IO_buf_ba£
;

258 * 
	m_IO_buf_íd
;

260 *
	m_IO_ßve_ba£
;

261 *
	m_IO_backup_ba£
;

262 *
	m_IO_ßve_íd
;

264 
_IO_m¨kî
 *
	m_m¨kîs
;

266 
_IO_FILE
 *
	m_chaö
;

268 
	m_fûío
;

270 
	m_blksize
;

272 
	m_Êags2
;

274 
_IO_off_t
 
	m_ﬁd_off£t
;

276 
	#__HAVE_COLUMN


	)

278 
	m_cur_cﬁumn
;

279 sig√d 
	m_vèbÀ_off£t
;

280 
	m_sh‹tbuf
[1];

284 
_IO_lock_t
 *
	m_lock
;

285 #ifde‡
_IO_USE_OLD_IO_FILE


288 
	s_IO_FILE_com∂ëe


290 
_IO_FILE
 
	m_fûe
;

292 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

293 
_IO_off64_t
 
	m_off£t
;

294 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


296 
_IO_codecvt
 *
	m_codecvt
;

297 
_IO_wide_d©a
 *
	m_wide_d©a
;

298 
_IO_FILE
 *
	m_‰ìªs_li°
;

299 *
	m_‰ìªs_buf
;

300 
size_t
 
	m_‰ìªs_size
;

302 *
	m__∑d1
;

303 *
	m__∑d2
;

304 *
	m__∑d3
;

305 *
	m__∑d4
;

306 
size_t
 
	m__∑d5
;

308 
	m_mode
;

310 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

314 #i‚de‡
__˝lu•lus


315 
_IO_FILE
 
	t_IO_FILE
;

318 
	g_IO_FILE_∂us
;

320 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

321 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

322 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

323 #i‚de‡
_LIBC


324 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

325 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

326 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

328 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

329 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

330 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

338 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

346 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, c⁄° *
	t__buf
,

347 
	tsize_t
 
	t__n
);

355 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

358 
	t__io_˛o£_‚
 (*
	t__cookõ
);

361 #ifde‡
_GNU_SOURCE


363 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

364 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

365 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

366 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

371 
__io_ªad_‚
 *
	mªad
;

372 
__io_wrôe_‚
 *
	mwrôe
;

373 
__io_£ek_‚
 *
	m£ek
;

374 
__io_˛o£_‚
 *
	m˛o£
;

375 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

376 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

378 
	g_IO_cookõ_fûe
;

381 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

382 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

386 #ifde‡
__˝lu•lus


390 
__undîÊow
 (
_IO_FILE
 *);

391 
__uÊow
 (
_IO_FILE
 *);

392 
__ovîÊow
 (
_IO_FILE
 *, );

393 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


394 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

395 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

396 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

399 #i‡ 
__GNUC__
 >= 3

400 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

402 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

405 
	#_IO_gëc_u∆ocked
(
_Â
) \

406 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

407 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

408 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

409 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

410 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

411 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

412 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

413 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

414 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

415 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

417 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


418 
	#_IO_gëwc_u∆ocked
(
_Â
) \

419 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

420 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

421 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

422 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

423 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

424 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

425 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

426 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

427 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

428 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

431 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

432 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

434 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

435 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

436 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

437 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

439 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

442 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

443 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

445 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

446 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

447 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

449 #ifde‡
_IO_MTSAFE_IO


450 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

451 
	#_IO_Êockfûe
(
_Â
) \

452 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

453 
	#_IO_fu∆ockfûe
(
_Â
) \

454 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

456 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

457 
	#_IO_Êockfûe
(
_Â
Ë

	)

458 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

459 
	#_IO_·rylockfûe
(
_Â
Ë

	)

460 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

461 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

464 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

465 
_IO_va_li°
, *
__ª°ri˘
);

466 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

467 
_IO_va_li°
);

468 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

469 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

471 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

472 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

474 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

476 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


477 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

478 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

479 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

480 #i‡
__GNUC__
 >= 2

483 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


484 
	~<shlib-com∑t.h
>

485 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

486 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

487 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

488 c⁄° 
_IO_°dö_u£d
;

489 
wók_exã∫
 (
_IO_°dö_u£d
);

492 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


493 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

497 
	#_IO_fwide
(
__Â
, 
__mode
) \

498 ({ 
__ªsu…
 = (
__mode
); \

499 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

501 i‡((
__Â
)->
_mode
 == 0) \

503 (
__Â
)->
_mode
 = -1; \

504 
__ªsu…
 = (
__Â
)->
_mode
; \

506 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

507 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

509 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

510 
__ªsu…
; })

	)

513 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

514 
_IO_va_li°
, *
__ª°ri˘
);

515 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

516 
_IO_va_li°
);

517 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

518 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

521 #ifde‡
__LDBL_COMPAT


522 
	~<bôs/libio-ldbl.h
>

525 #ifde‡
__˝lu•lus


	@/usr/include/limits.h

22 #i‚de‡
_LIBC_LIMITS_H_


23 
	#_LIBC_LIMITS_H_
 1

	)

25 
	~<„©uªs.h
>

31 
	#MB_LEN_MAX
 16

	)

36 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

41 #i‚de‡
_LIMITS_H


42 
	#_LIMITS_H
 1

	)

44 
	~<bôs/w‹dsize.h
>

53 
	#CHAR_BIT
 8

	)

56 
	#SCHAR_MIN
 (-128)

	)

57 
	#SCHAR_MAX
 127

	)

60 
	#UCHAR_MAX
 255

	)

63 #ifde‡
__CHAR_UNSIGNED__


64 
	#CHAR_MIN
 0

	)

65 
	#CHAR_MAX
 
UCHAR_MAX


	)

67 
	#CHAR_MIN
 
SCHAR_MIN


	)

68 
	#CHAR_MAX
 
SCHAR_MAX


	)

72 
	#SHRT_MIN
 (-32768)

	)

73 
	#SHRT_MAX
 32767

	)

76 
	#USHRT_MAX
 65535

	)

79 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

80 
	#INT_MAX
 2147483647

	)

83 
	#UINT_MAX
 4294967295U

	)

86 #i‡
__WORDSIZE
 == 64

87 
	#LONG_MAX
 9223372036854775807L

	)

89 
	#LONG_MAX
 2147483647L

	)

91 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

94 #i‡
__WORDSIZE
 == 64

95 
	#ULONG_MAX
 18446744073709551615UL

	)

97 
	#ULONG_MAX
 4294967295UL

	)

100 #ifde‡
__USE_ISOC99


103 
	#LLONG_MAX
 9223372036854775807LL

	)

104 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

107 
	#ULLONG_MAX
 18446744073709551615ULL

	)

121 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


123 #ö˛ude_√xà<
limôs
.
h
>

129 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


130 #i‚de‡
LLONG_MIN


131 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

133 #i‚de‡
LLONG_MAX


134 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

136 #i‚de‡
ULLONG_MAX


137 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

141 #ifdef 
__USE_POSIX


143 
	~<bôs/posix1_lim.h
>

146 #ifdef 
__USE_POSIX2


147 
	~<bôs/posix2_lim.h
>

150 #ifdef 
__USE_XOPEN


151 
	~<bôs/x›í_lim.h
>

	@/usr/include/linux/hdlc/ioctl.h

1 #i‚de‡
__HDLC_IOCTL_H__


2 
	#__HDLC_IOCTL_H__


	)

5 
	#GENERIC_HDLC_VERSION
 4

	)

7 
	#CLOCK_DEFAULT
 0

	)

8 
	#CLOCK_EXT
 1

	)

9 
	#CLOCK_INT
 2

	)

10 
	#CLOCK_TXINT
 3

	)

11 
	#CLOCK_TXFROMRX
 4

	)

14 
	#ENCODING_DEFAULT
 0

	)

15 
	#ENCODING_NRZ
 1

	)

16 
	#ENCODING_NRZI
 2

	)

17 
	#ENCODING_FM_MARK
 3

	)

18 
	#ENCODING_FM_SPACE
 4

	)

19 
	#ENCODING_MANCHESTER
 5

	)

22 
	#PARITY_DEFAULT
 0

	)

23 
	#PARITY_NONE
 1

	)

24 
	#PARITY_CRC16_PR0
 2

	)

25 
	#PARITY_CRC16_PR1
 3

	)

26 
	#PARITY_CRC16_PR0_CCITT
 4

	)

27 
	#PARITY_CRC16_PR1_CCITT
 5

	)

28 
	#PARITY_CRC32_PR0_CCITT
 6

	)

29 
	#PARITY_CRC32_PR1_CCITT
 7

	)

31 
	#LMI_DEFAULT
 0

	)

32 
	#LMI_NONE
 1

	)

33 
	#LMI_ANSI
 2

	)

34 
	#LMI_CCITT
 3

	)

35 
	#LMI_CISCO
 4

	)

37 #i‚de‡
__ASSEMBLY__


40 
	m˛ock_øã
;

41 
	m˛ock_ty≥
;

42 
	mlo›back
;

43 } 
	tsync_£rül_£âögs
;

46 
	m˛ock_øã
;

47 
	m˛ock_ty≥
;

48 
	mlo›back
;

49 
	m¶Ÿ_m≠
;

50 } 
	tã1_£âögs
;

53 
	mícodög
;

54 
	m∑rôy
;

55 } 
	tøw_hdlc_¥Ÿo
;

58 
	mt391
;

59 
	mt392
;

60 
	mn391
;

61 
	mn392
;

62 
	mn393
;

63 
	mlmi
;

64 
	md˚
;

65 } 
	t‰_¥Ÿo
;

68 
	mdlci
;

69 } 
	t‰_¥Ÿo_pvc
;

72 
	mdlci
;

73 
	mma°î
[
IFNAMSIZ
];

74 }
	t‰_¥Ÿo_pvc_öfo
;

77 
	möãrvÆ
;

78 
	mtimeout
;

79 } 
	tcisco_¥Ÿo
;

	@/usr/include/linux/if_ether.h

21 #i‚de‡
_LINUX_IF_ETHER_H


22 
	#_LINUX_IF_ETHER_H


	)

24 
	~<löux/ty≥s.h
>

31 
	#ETH_ALEN
 6

	)

32 
	#ETH_HLEN
 14

	)

33 
	#ETH_ZLEN
 60

	)

34 
	#ETH_DATA_LEN
 1500

	)

35 
	#ETH_FRAME_LEN
 1514

	)

36 
	#ETH_FCS_LEN
 4

	)

42 
	#ETH_P_LOOP
 0x0060

	)

43 
	#ETH_P_PUP
 0x0200

	)

44 
	#ETH_P_PUPAT
 0x0201

	)

45 
	#ETH_P_IP
 0x0800

	)

46 
	#ETH_P_X25
 0x0805

	)

47 
	#ETH_P_ARP
 0x0806

	)

48 
	#ETH_P_BPQ
 0x08FF

	)

49 
	#ETH_P_IEEEPUP
 0x0a00

	)

50 
	#ETH_P_IEEEPUPAT
 0x0a01

	)

51 
	#ETH_P_BATMAN
 0x4305

	)

52 
	#ETH_P_DEC
 0x6000

	)

53 
	#ETH_P_DNA_DL
 0x6001

	)

54 
	#ETH_P_DNA_RC
 0x6002

	)

55 
	#ETH_P_DNA_RT
 0x6003

	)

56 
	#ETH_P_LAT
 0x6004

	)

57 
	#ETH_P_DIAG
 0x6005

	)

58 
	#ETH_P_CUST
 0x6006

	)

59 
	#ETH_P_SCA
 0x6007

	)

60 
	#ETH_P_TEB
 0x6558

	)

61 
	#ETH_P_RARP
 0x8035

	)

62 
	#ETH_P_ATALK
 0x809B

	)

63 
	#ETH_P_AARP
 0x80F3

	)

64 
	#ETH_P_8021Q
 0x8100

	)

65 
	#ETH_P_IPX
 0x8137

	)

66 
	#ETH_P_IPV6
 0x86DD

	)

67 
	#ETH_P_PAUSE
 0x8808

	)

68 
	#ETH_P_SLOW
 0x8809

	)

69 
	#ETH_P_WCCP
 0x883E

	)

71 
	#ETH_P_PPP_DISC
 0x8863

	)

72 
	#ETH_P_PPP_SES
 0x8864

	)

73 
	#ETH_P_MPLS_UC
 0x8847

	)

74 
	#ETH_P_MPLS_MC
 0x8848

	)

75 
	#ETH_P_ATMMPOA
 0x884¯

	)

76 
	#ETH_P_LINK_CTL
 0x886¯

	)

77 
	#ETH_P_ATMFATE
 0x8884

	)

80 
	#ETH_P_PAE
 0x888E

	)

81 
	#ETH_P_AOE
 0x88A2

	)

82 
	#ETH_P_8021AD
 0x88A8

	)

83 
	#ETH_P_802_EX1
 0x88B5

	)

84 
	#ETH_P_TIPC
 0x88CA

	)

85 
	#ETH_P_8021AH
 0x88E7

	)

86 
	#ETH_P_MVRP
 0x88F5

	)

87 
	#ETH_P_1588
 0x88F7

	)

88 
	#ETH_P_PRP
 0x88FB

	)

89 
	#ETH_P_FCOE
 0x8906

	)

90 
	#ETH_P_TDLS
 0x890D

	)

91 
	#ETH_P_FIP
 0x8914

	)

92 
	#ETH_P_QINQ1
 0x9100

	)

93 
	#ETH_P_QINQ2
 0x9200

	)

94 
	#ETH_P_QINQ3
 0x9300

	)

95 
	#ETH_P_EDSA
 0xDADA

	)

96 
	#ETH_P_AF_IUCV
 0xFBFB

	)

98 
	#ETH_P_802_3_MIN
 0x0600

	)

105 
	#ETH_P_802_3
 0x0001

	)

106 
	#ETH_P_AX25
 0x0002

	)

107 
	#ETH_P_ALL
 0x0003

	)

108 
	#ETH_P_802_2
 0x0004

	)

109 
	#ETH_P_SNAP
 0x0005

	)

110 
	#ETH_P_DDCMP
 0x0006

	)

111 
	#ETH_P_WAN_PPP
 0x0007

	)

112 
	#ETH_P_PPP_MP
 0x0008

	)

113 
	#ETH_P_LOCALTALK
 0x0009

	)

114 
	#ETH_P_CAN
 0x000C

	)

115 
	#ETH_P_CANFD
 0x000D

	)

116 
	#ETH_P_PPPTALK
 0x0010

	)

117 
	#ETH_P_TR_802_2
 0x0011

	)

118 
	#ETH_P_MOBITEX
 0x0015

	)

119 
	#ETH_P_CONTROL
 0x0016

	)

120 
	#ETH_P_IRDA
 0x0017

	)

121 
	#ETH_P_ECONET
 0x0018

	)

122 
	#ETH_P_HDLC
 0x0019

	)

123 
	#ETH_P_ARCNET
 0x001A

	)

124 
	#ETH_P_DSA
 0x001B

	)

125 
	#ETH_P_TRAILER
 0x001C

	)

126 
	#ETH_P_PHONET
 0x00F5

	)

127 
	#ETH_P_IEEE802154
 0x00F6

	)

128 
	#ETH_P_CAIF
 0x00F7

	)

134 
	sëhhdr
 {

135 
	mh_de°
[
ETH_ALEN
];

136 
	mh_sour˚
[
ETH_ALEN
];

137 
__be16
 
	mh_¥Ÿo
;

138 } 
__©åibuã__
((
∑cked
));

	@/usr/include/linux/if_link.h

1 #i‚de‡
_LINUX_IF_LINK_H


2 
	#_LINUX_IF_LINK_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/√éök.h
>

8 
	sπ∆_lök_°©s
 {

9 
__u32
 
	mrx_∑ckës
;

10 
__u32
 
	mtx_∑ckës
;

11 
__u32
 
	mrx_byãs
;

12 
__u32
 
	mtx_byãs
;

13 
__u32
 
	mrx_îr‹s
;

14 
__u32
 
	mtx_îr‹s
;

15 
__u32
 
	mrx_dr›≥d
;

16 
__u32
 
	mtx_dr›≥d
;

17 
__u32
 
	mmu…iˇ°
;

18 
__u32
 
	mcﬁlisi⁄s
;

21 
__u32
 
	mrx_Àngth_îr‹s
;

22 
__u32
 
	mrx_ovî_îr‹s
;

23 
__u32
 
	mrx_¸c_îr‹s
;

24 
__u32
 
	mrx_‰ame_îr‹s
;

25 
__u32
 
	mrx_fifo_îr‹s
;

26 
__u32
 
	mrx_mis£d_îr‹s
;

29 
__u32
 
	mtx_ab‹ãd_îr‹s
;

30 
__u32
 
	mtx_ˇºõr_îr‹s
;

31 
__u32
 
	mtx_fifo_îr‹s
;

32 
__u32
 
	mtx_hóπbót_îr‹s
;

33 
__u32
 
	mtx_wödow_îr‹s
;

36 
__u32
 
	mrx_com¥es£d
;

37 
__u32
 
	mtx_com¥es£d
;

41 
	sπ∆_lök_°©s64
 {

42 
__u64
 
	mrx_∑ckës
;

43 
__u64
 
	mtx_∑ckës
;

44 
__u64
 
	mrx_byãs
;

45 
__u64
 
	mtx_byãs
;

46 
__u64
 
	mrx_îr‹s
;

47 
__u64
 
	mtx_îr‹s
;

48 
__u64
 
	mrx_dr›≥d
;

49 
__u64
 
	mtx_dr›≥d
;

50 
__u64
 
	mmu…iˇ°
;

51 
__u64
 
	mcﬁlisi⁄s
;

54 
__u64
 
	mrx_Àngth_îr‹s
;

55 
__u64
 
	mrx_ovî_îr‹s
;

56 
__u64
 
	mrx_¸c_îr‹s
;

57 
__u64
 
	mrx_‰ame_îr‹s
;

58 
__u64
 
	mrx_fifo_îr‹s
;

59 
__u64
 
	mrx_mis£d_îr‹s
;

62 
__u64
 
	mtx_ab‹ãd_îr‹s
;

63 
__u64
 
	mtx_ˇºõr_îr‹s
;

64 
__u64
 
	mtx_fifo_îr‹s
;

65 
__u64
 
	mtx_hóπbót_îr‹s
;

66 
__u64
 
	mtx_wödow_îr‹s
;

69 
__u64
 
	mrx_com¥es£d
;

70 
__u64
 
	mtx_com¥es£d
;

74 
	sπ∆_lök_ifm≠
 {

75 
__u64
 
	mmem_°¨t
;

76 
__u64
 
	mmem_íd
;

77 
__u64
 
	mba£_addr
;

78 
__u16
 
	múq
;

79 
__u8
 
	mdma
;

80 
__u8
 
	mp‹t
;

102 
	mIFLA_UNSPEC
,

103 
	mIFLA_ADDRESS
,

104 
	mIFLA_BROADCAST
,

105 
	mIFLA_IFNAME
,

106 
	mIFLA_MTU
,

107 
	mIFLA_LINK
,

108 
	mIFLA_QDISC
,

109 
	mIFLA_STATS
,

110 
	mIFLA_COST
,

111 
	#IFLA_COST
 
IFLA_COST


	)

112 
	mIFLA_PRIORITY
,

113 
	#IFLA_PRIORITY
 
IFLA_PRIORITY


	)

114 
	mIFLA_MASTER
,

115 
	#IFLA_MASTER
 
IFLA_MASTER


	)

116 
	mIFLA_WIRELESS
,

117 
	#IFLA_WIRELESS
 
IFLA_WIRELESS


	)

118 
	mIFLA_PROTINFO
,

119 
	#IFLA_PROTINFO
 
IFLA_PROTINFO


	)

120 
	mIFLA_TXQLEN
,

121 
	#IFLA_TXQLEN
 
IFLA_TXQLEN


	)

122 
	mIFLA_MAP
,

123 
	#IFLA_MAP
 
IFLA_MAP


	)

124 
	mIFLA_WEIGHT
,

125 
	#IFLA_WEIGHT
 
IFLA_WEIGHT


	)

126 
	mIFLA_OPERSTATE
,

127 
	mIFLA_LINKMODE
,

128 
	mIFLA_LINKINFO
,

129 
	#IFLA_LINKINFO
 
IFLA_LINKINFO


	)

130 
	mIFLA_NET_NS_PID
,

131 
	mIFLA_IFALIAS
,

132 
	mIFLA_NUM_VF
,

133 
	mIFLA_VFINFO_LIST
,

134 
	mIFLA_STATS64
,

135 
	mIFLA_VF_PORTS
,

136 
	mIFLA_PORT_SELF
,

137 
	mIFLA_AF_SPEC
,

138 
	mIFLA_GROUP
,

139 
	mIFLA_NET_NS_FD
,

140 
	mIFLA_EXT_MASK
,

141 
	mIFLA_PROMISCUITY
,

142 
	#IFLA_PROMISCUITY
 
IFLA_PROMISCUITY


	)

143 
	mIFLA_NUM_TX_QUEUES
,

144 
	mIFLA_NUM_RX_QUEUES
,

145 
	mIFLA_CARRIER
,

146 
	mIFLA_PHYS_PORT_ID
,

147 
	m__IFLA_MAX


151 
	#IFLA_MAX
 (
__IFLA_MAX
 - 1)

	)

154 
	#IFLA_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
iföfomsg
))))

	)

155 
	#IFLA_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
iföfomsg
))

	)

158 
	mIFLA_INET_UNSPEC
,

159 
	mIFLA_INET_CONF
,

160 
	m__IFLA_INET_MAX
,

163 
	#IFLA_INET_MAX
 (
__IFLA_INET_MAX
 - 1)

	)

196 
	mIFLA_INET6_UNSPEC
,

197 
	mIFLA_INET6_FLAGS
,

198 
	mIFLA_INET6_CONF
,

199 
	mIFLA_INET6_STATS
,

200 
	mIFLA_INET6_MCAST
,

201 
	mIFLA_INET6_CACHEINFO
,

202 
	mIFLA_INET6_ICMP6STATS
,

203 
	mIFLA_INET6_TOKEN
,

204 
	m__IFLA_INET6_MAX


207 
	#IFLA_INET6_MAX
 (
__IFLA_INET6_MAX
 - 1)

	)

210 
	mBRIDGE_MODE_UNSPEC
,

211 
	mBRIDGE_MODE_HAIRPIN
,

215 
	mIFLA_BRPORT_UNSPEC
,

216 
	mIFLA_BRPORT_STATE
,

217 
	mIFLA_BRPORT_PRIORITY
,

218 
	mIFLA_BRPORT_COST
,

219 
	mIFLA_BRPORT_MODE
,

220 
	mIFLA_BRPORT_GUARD
,

221 
	mIFLA_BRPORT_PROTECT
,

222 
	mIFLA_BRPORT_FAST_LEAVE
,

223 
	mIFLA_BRPORT_LEARNING
,

224 
	mIFLA_BRPORT_UNICAST_FLOOD
,

225 
	m__IFLA_BRPORT_MAX


227 
	#IFLA_BRPORT_MAX
 (
__IFLA_BRPORT_MAX
 - 1)

	)

229 
	siÊa_ˇcheöfo
 {

230 
__u32
 
	mmax_ªasm_Àn
;

231 
__u32
 
	mt°amp
;

232 
__u32
 
	mªachabÀ_time
;

233 
__u32
 
	mªå™s_time
;

237 
	mIFLA_INFO_UNSPEC
,

238 
	mIFLA_INFO_KIND
,

239 
	mIFLA_INFO_DATA
,

240 
	mIFLA_INFO_XSTATS
,

241 
	m__IFLA_INFO_MAX
,

244 
	#IFLA_INFO_MAX
 (
__IFLA_INFO_MAX
 - 1)

	)

249 
	mIFLA_VLAN_UNSPEC
,

250 
	mIFLA_VLAN_ID
,

251 
	mIFLA_VLAN_FLAGS
,

252 
	mIFLA_VLAN_EGRESS_QOS
,

253 
	mIFLA_VLAN_INGRESS_QOS
,

254 
	mIFLA_VLAN_PROTOCOL
,

255 
	m__IFLA_VLAN_MAX
,

258 
	#IFLA_VLAN_MAX
 (
__IFLA_VLAN_MAX
 - 1)

	)

260 
	siÊa_vœn_Êags
 {

261 
__u32
 
	mÊags
;

262 
__u32
 
	mmask
;

266 
	mIFLA_VLAN_QOS_UNSPEC
,

267 
	mIFLA_VLAN_QOS_MAPPING
,

268 
	m__IFLA_VLAN_QOS_MAX


271 
	#IFLA_VLAN_QOS_MAX
 (
__IFLA_VLAN_QOS_MAX
 - 1)

	)

273 
	siÊa_vœn_qos_m≠pög
 {

274 
__u32
 
	m‰om
;

275 
__u32
 
	mto
;

280 
	mIFLA_MACVLAN_UNSPEC
,

281 
	mIFLA_MACVLAN_MODE
,

282 
	mIFLA_MACVLAN_FLAGS
,

283 
	m__IFLA_MACVLAN_MAX
,

286 
	#IFLA_MACVLAN_MAX
 (
__IFLA_MACVLAN_MAX
 - 1)

	)

288 
	emacvœn_mode
 {

289 
	mMACVLAN_MODE_PRIVATE
 = 1,

290 
	mMACVLAN_MODE_VEPA
 = 2,

291 
	mMACVLAN_MODE_BRIDGE
 = 4,

292 
	mMACVLAN_MODE_PASSTHRU
 = 8,

295 
	#MACVLAN_FLAG_NOPROMISC
 1

	)

299 
	mIFLA_VXLAN_UNSPEC
,

300 
	mIFLA_VXLAN_ID
,

301 
	mIFLA_VXLAN_GROUP
,

302 
	mIFLA_VXLAN_LINK
,

303 
	mIFLA_VXLAN_LOCAL
,

304 
	mIFLA_VXLAN_TTL
,

305 
	mIFLA_VXLAN_TOS
,

306 
	mIFLA_VXLAN_LEARNING
,

307 
	mIFLA_VXLAN_AGEING
,

308 
	mIFLA_VXLAN_LIMIT
,

309 
	mIFLA_VXLAN_PORT_RANGE
,

310 
	mIFLA_VXLAN_PROXY
,

311 
	mIFLA_VXLAN_RSC
,

312 
	mIFLA_VXLAN_L2MISS
,

313 
	mIFLA_VXLAN_L3MISS
,

314 
	mIFLA_VXLAN_PORT
,

315 
	mIFLA_VXLAN_GROUP6
,

316 
	mIFLA_VXLAN_LOCAL6
,

317 
	m__IFLA_VXLAN_MAX


319 
	#IFLA_VXLAN_MAX
 (
__IFLA_VXLAN_MAX
 - 1)

	)

321 
	siÊa_vxœn_p‹t_ønge
 {

322 
__be16
 
	mlow
;

323 
__be16
 
	mhigh
;

329 
	mIFLA_BOND_UNSPEC
,

330 
	mIFLA_BOND_MODE
,

331 
	mIFLA_BOND_ACTIVE_SLAVE
,

332 
	m__IFLA_BOND_MAX
,

335 
	#IFLA_BOND_MAX
 (
__IFLA_BOND_MAX
 - 1)

	)

340 
	mIFLA_VF_INFO_UNSPEC
,

341 
	mIFLA_VF_INFO
,

342 
	m__IFLA_VF_INFO_MAX
,

345 
	#IFLA_VF_INFO_MAX
 (
__IFLA_VF_INFO_MAX
 - 1)

	)

348 
	mIFLA_VF_UNSPEC
,

349 
	mIFLA_VF_MAC
,

350 
	mIFLA_VF_VLAN
,

351 
	mIFLA_VF_TX_RATE
,

352 
	mIFLA_VF_SPOOFCHK
,

353 
	mIFLA_VF_LINK_STATE
,

354 
	m__IFLA_VF_MAX
,

357 
	#IFLA_VF_MAX
 (
__IFLA_VF_MAX
 - 1)

	)

359 
	siÊa_vf_mac
 {

360 
__u32
 
	mvf
;

361 
__u8
 
	mmac
[32];

364 
	siÊa_vf_vœn
 {

365 
__u32
 
	mvf
;

366 
__u32
 
	mvœn
;

367 
__u32
 
	mqos
;

370 
	siÊa_vf_tx_øã
 {

371 
__u32
 
	mvf
;

372 
__u32
 
	møã
;

375 
	siÊa_vf_•oofchk
 {

376 
__u32
 
	mvf
;

377 
__u32
 
	m£âög
;

381 
	mIFLA_VF_LINK_STATE_AUTO
,

382 
	mIFLA_VF_LINK_STATE_ENABLE
,

383 
	mIFLA_VF_LINK_STATE_DISABLE
,

384 
	m__IFLA_VF_LINK_STATE_MAX
,

387 
	siÊa_vf_lök_°©e
 {

388 
__u32
 
	mvf
;

389 
__u32
 
	mlök_°©e
;

408 
	mIFLA_VF_PORT_UNSPEC
,

409 
	mIFLA_VF_PORT
,

410 
	m__IFLA_VF_PORT_MAX
,

413 
	#IFLA_VF_PORT_MAX
 (
__IFLA_VF_PORT_MAX
 - 1)

	)

416 
	mIFLA_PORT_UNSPEC
,

417 
	mIFLA_PORT_VF
,

418 
	mIFLA_PORT_PROFILE
,

419 
	mIFLA_PORT_VSI_TYPE
,

420 
	mIFLA_PORT_INSTANCE_UUID
,

421 
	mIFLA_PORT_HOST_UUID
,

422 
	mIFLA_PORT_REQUEST
,

423 
	mIFLA_PORT_RESPONSE
,

424 
	m__IFLA_PORT_MAX
,

427 
	#IFLA_PORT_MAX
 (
__IFLA_PORT_MAX
 - 1)

	)

429 
	#PORT_PROFILE_MAX
 40

	)

430 
	#PORT_UUID_MAX
 16

	)

431 
	#PORT_SELF_VF
 -1

	)

434 
	mPORT_REQUEST_PREASSOCIATE
 = 0,

435 
	mPORT_REQUEST_PREASSOCIATE_RR
,

436 
	mPORT_REQUEST_ASSOCIATE
,

437 
	mPORT_REQUEST_DISASSOCIATE
,

441 
	mPORT_VDP_RESPONSE_SUCCESS
 = 0,

442 
	mPORT_VDP_RESPONSE_INVALID_FORMAT
,

443 
	mPORT_VDP_RESPONSE_INSUFFICIENT_RESOURCES
,

444 
	mPORT_VDP_RESPONSE_UNUSED_VTID
,

445 
	mPORT_VDP_RESPONSE_VTID_VIOLATION
,

446 
	mPORT_VDP_RESPONSE_VTID_VERSION_VIOALTION
,

447 
	mPORT_VDP_RESPONSE_OUT_OF_SYNC
,

449 
	mPORT_PROFILE_RESPONSE_SUCCESS
 = 0x100,

450 
	mPORT_PROFILE_RESPONSE_INPROGRESS
,

451 
	mPORT_PROFILE_RESPONSE_INVALID
,

452 
	mPORT_PROFILE_RESPONSE_BADSTATE
,

453 
	mPORT_PROFILE_RESPONSE_INSUFFICIENT_RESOURCES
,

454 
	mPORT_PROFILE_RESPONSE_ERROR
,

457 
	siÊa_p‹t_vsi
 {

458 
__u8
 
	mvsi_mgr_id
;

459 
__u8
 
	mvsi_ty≥_id
[3];

460 
__u8
 
	mvsi_ty≥_vîsi⁄
;

461 
__u8
 
	m∑d
[3];

468 
	mIFLA_IPOIB_UNSPEC
,

469 
	mIFLA_IPOIB_PKEY
,

470 
	mIFLA_IPOIB_MODE
,

471 
	mIFLA_IPOIB_UMCAST
,

472 
	m__IFLA_IPOIB_MAX


476 
	mIPOIB_MODE_DATAGRAM
 = 0,

477 
	mIPOIB_MODE_CONNECTED
 = 1,

480 
	#IFLA_IPOIB_MAX
 (
__IFLA_IPOIB_MAX
 - 1)

	)

486 
	mIFLA_HSR_UNSPEC
,

487 
	mIFLA_HSR_SLAVE1
,

488 
	mIFLA_HSR_SLAVE2
,

489 
	mIFLA_HSR_MULTICAST_SPEC
,

490 
	mIFLA_HSR_SUPERVISION_ADDR
,

491 
	mIFLA_HSR_SEQ_NR
,

492 
	m__IFLA_HSR_MAX
,

495 
	#IFLA_HSR_MAX
 (
__IFLA_HSR_MAX
 - 1)

	)

	@/usr/include/linux/if_packet.h

1 #i‚de‡
__LINUX_IF_PACKET_H


2 
	#__LINUX_IF_PACKET_H


	)

4 
	~<löux/ty≥s.h
>

6 
	ssockaddr_pkt
 {

7 
	m•kt_Ámûy
;

8 
	m•kt_devi˚
[14];

9 
__be16
 
	m•kt_¥Ÿocﬁ
;

12 
	ssockaddr_Œ
 {

13 
	m¶l_Ámûy
;

14 
__be16
 
	m¶l_¥Ÿocﬁ
;

15 
	m¶l_ifödex
;

16 
	m¶l_h©y≥
;

17 
	m¶l_pkây≥
;

18 
	m¶l_hÆí
;

19 
	m¶l_addr
[8];

24 
	#PACKET_HOST
 0

	)

25 
	#PACKET_BROADCAST
 1

	)

26 
	#PACKET_MULTICAST
 2

	)

27 
	#PACKET_OTHERHOST
 3

	)

28 
	#PACKET_OUTGOING
 4

	)

30 
	#PACKET_LOOPBACK
 5

	)

31 
	#PACKET_FASTROUTE
 6

	)

35 
	#PACKET_ADD_MEMBERSHIP
 1

	)

36 
	#PACKET_DROP_MEMBERSHIP
 2

	)

37 
	#PACKET_RECV_OUTPUT
 3

	)

39 
	#PACKET_RX_RING
 5

	)

40 
	#PACKET_STATISTICS
 6

	)

41 
	#PACKET_COPY_THRESH
 7

	)

42 
	#PACKET_AUXDATA
 8

	)

43 
	#PACKET_ORIGDEV
 9

	)

44 
	#PACKET_VERSION
 10

	)

45 
	#PACKET_HDRLEN
 11

	)

46 
	#PACKET_RESERVE
 12

	)

47 
	#PACKET_TX_RING
 13

	)

48 
	#PACKET_LOSS
 14

	)

49 
	#PACKET_VNET_HDR
 15

	)

50 
	#PACKET_TX_TIMESTAMP
 16

	)

51 
	#PACKET_TIMESTAMP
 17

	)

52 
	#PACKET_FANOUT
 18

	)

53 
	#PACKET_TX_HAS_OFF
 19

	)

55 
	#PACKET_FANOUT_HASH
 0

	)

56 
	#PACKET_FANOUT_LB
 1

	)

57 
	#PACKET_FANOUT_CPU
 2

	)

58 
	#PACKET_FANOUT_ROLLOVER
 3

	)

59 
	#PACKET_FANOUT_RND
 4

	)

60 
	#PACKET_FANOUT_FLAG_ROLLOVER
 0x1000

	)

61 
	#PACKET_FANOUT_FLAG_DEFRAG
 0x8000

	)

63 
	sçackë_°©s
 {

64 
	mç_∑ckës
;

65 
	mç_dr›s
;

68 
	sçackë_°©s_v3
 {

69 
	mç_∑ckës
;

70 
	mç_dr›s
;

71 
	mç_‰ìze_q_˙t
;

74 
	uçackë_°©s_u
 {

75 
çackë_°©s
 
	m°©s1
;

76 
çackë_°©s_v3
 
	m°©s3
;

79 
	sçackë_auxd©a
 {

80 
__u32
 
	mç_°©us
;

81 
__u32
 
	mç_Àn
;

82 
__u32
 
	mç_¢≠Àn
;

83 
__u16
 
	mç_mac
;

84 
__u16
 
	mç_√t
;

85 
__u16
 
	mç_vœn_tci
;

86 
__u16
 
	mç_∑ddög
;

90 
	#TP_STATUS_KERNEL
 0

	)

91 
	#TP_STATUS_USER
 (1 << 0)

	)

92 
	#TP_STATUS_COPY
 (1 << 1)

	)

93 
	#TP_STATUS_LOSING
 (1 << 2)

	)

94 
	#TP_STATUS_CSUMNOTREADY
 (1 << 3)

	)

95 
	#TP_STATUS_VLAN_VALID
 (1 << 4Ë

	)

96 
	#TP_STATUS_BLK_TMO
 (1 << 5)

	)

99 
	#TP_STATUS_AVAILABLE
 0

	)

100 
	#TP_STATUS_SEND_REQUEST
 (1 << 0)

	)

101 
	#TP_STATUS_SENDING
 (1 << 1)

	)

102 
	#TP_STATUS_WRONG_FORMAT
 (1 << 2)

	)

105 
	#TP_STATUS_TS_SOFTWARE
 (1 << 29)

	)

106 
	#TP_STATUS_TS_SYS_HARDWARE
 (1 << 30)

	)

107 
	#TP_STATUS_TS_RAW_HARDWARE
 (1 << 31)

	)

110 
	#TP_FT_REQ_FILL_RXHASH
 0x1

	)

112 
	sçackë_hdr
 {

113 
	mç_°©us
;

114 
	mç_Àn
;

115 
	mç_¢≠Àn
;

116 
	mç_mac
;

117 
	mç_√t
;

118 
	mç_£c
;

119 
	mç_u£c
;

122 
	#TPACKET_ALIGNMENT
 16

	)

123 
	#TPACKET_ALIGN
(
x
Ë(((x)+
TPACKET_ALIGNMENT
-1)&~(TPACKET_ALIGNMENT-1))

	)

124 
	#TPACKET_HDRLEN
 (
	`TPACKET_ALIGN
((
çackë_hdr
)Ë+ (
sockaddr_Œ
))

	)

126 
	sçackë2_hdr
 {

127 
__u32
 
	mç_°©us
;

128 
__u32
 
	mç_Àn
;

129 
__u32
 
	mç_¢≠Àn
;

130 
__u16
 
	mç_mac
;

131 
__u16
 
	mç_√t
;

132 
__u32
 
	mç_£c
;

133 
__u32
 
	mç_n£c
;

134 
__u16
 
	mç_vœn_tci
;

135 
__u16
 
	mç_∑ddög
;

138 
	sçackë_hdr_v¨ü¡1
 {

139 
__u32
 
	mç_rxhash
;

140 
__u32
 
	mç_vœn_tci
;

143 
	sçackë3_hdr
 {

144 
__u32
 
	mç_√xt_off£t
;

145 
__u32
 
	mç_£c
;

146 
__u32
 
	mç_n£c
;

147 
__u32
 
	mç_¢≠Àn
;

148 
__u32
 
	mç_Àn
;

149 
__u32
 
	mç_°©us
;

150 
__u16
 
	mç_mac
;

151 
__u16
 
	mç_√t
;

154 
çackë_hdr_v¨ü¡1
 
	mhv1
;

158 
	sçackë_bd_ts
 {

159 
	mts_£c
;

161 
	mts_u£c
;

162 
	mts_n£c
;

166 
	sçackë_hdr_v1
 {

167 
__u32
 
	mblock_°©us
;

168 
__u32
 
	mnum_pkts
;

169 
__u32
 
	moff£t_to_fú°_pkt
;

174 
__u32
 
	mblk_Àn
;

185 
__Æig√d_u64
 
	m£q_num
;

212 
çackë_bd_ts
 
	mts_fú°_pkt
, 
	mts_œ°_pkt
;

215 
	uçackë_bd_hódî_u
 {

216 
çackë_hdr_v1
 
	mbh1
;

219 
	sçackë_block_desc
 {

220 
__u32
 
	mvîsi⁄
;

221 
__u32
 
	moff£t_to_¥iv
;

222 
çackë_bd_hódî_u
 
	mhdr
;

225 
	#TPACKET2_HDRLEN
 (
	`TPACKET_ALIGN
((
çackë2_hdr
)Ë+ (
sockaddr_Œ
))

	)

226 
	#TPACKET3_HDRLEN
 (
	`TPACKET_ALIGN
((
çackë3_hdr
)Ë+ (
sockaddr_Œ
))

	)

228 
	eçackë_vîsi⁄s
 {

229 
	mTPACKET_V1
,

230 
	mTPACKET_V2
,

231 
	mTPACKET_V3


247 
	sçackë_ªq
 {

248 
	mç_block_size
;

249 
	mç_block_ƒ
;

250 
	mç_‰ame_size
;

251 
	mç_‰ame_ƒ
;

254 
	sçackë_ªq3
 {

255 
	mç_block_size
;

256 
	mç_block_ƒ
;

257 
	mç_‰ame_size
;

258 
	mç_‰ame_ƒ
;

259 
	mç_ªtúe_blk_tov
;

260 
	mç_sizeof_¥iv
;

261 
	mç_„©uª_ªq_w‹d
;

264 
	uçackë_ªq_u
 {

265 
çackë_ªq
 
	mªq
;

266 
çackë_ªq3
 
	mªq3
;

269 
	s∑ckë_mªq
 {

270 
	mmr_ifödex
;

271 
	mmr_ty≥
;

272 
	mmr_Æí
;

273 
	mmr_addªss
[8];

276 
	#PACKET_MR_MULTICAST
 0

	)

277 
	#PACKET_MR_PROMISC
 1

	)

278 
	#PACKET_MR_ALLMULTI
 2

	)

279 
	#PACKET_MR_UNICAST
 3

	)

	@/usr/include/linux/ioctl.h

1 #i‚de‡
_LINUX_IOCTL_H


2 
	#_LINUX_IOCTL_H


	)

4 
	~<asm/io˘l.h
>

	@/usr/include/linux/ipc.h

1 #i‚de‡
_LINUX_IPC_H


2 
	#_LINUX_IPC_H


	)

4 
	~<löux/ty≥s.h
>

6 
	#IPC_PRIVATE
 ((
__kî√l_key_t
Ë0)

	)

9 
	sùc_≥rm


11 
__kî√l_key_t
 
	mkey
;

12 
__kî√l_uid_t
 
	muid
;

13 
__kî√l_gid_t
 
	mgid
;

14 
__kî√l_uid_t
 
	mcuid
;

15 
__kî√l_gid_t
 
	mcgid
;

16 
__kî√l_mode_t
 
	mmode
;

17 
	m£q
;

21 
	~<asm/ùcbuf.h
>

24 
	#IPC_CREAT
 00001000

	)

25 
	#IPC_EXCL
 00002000

	)

26 
	#IPC_NOWAIT
 00004000

	)

31 
	#IPC_DIPC
 00010000

	)

32 
	#IPC_OWN
 00020000

	)

38 
	#IPC_RMID
 0

	)

39 
	#IPC_SET
 1

	)

40 
	#IPC_STAT
 2

	)

41 
	#IPC_INFO
 3

	)

47 
	#IPC_OLD
 0

	)

49 
	#IPC_64
 0x0100

	)

57 
	sùc_kludge
 {

58 
msgbuf
 *
	mmsgp
;

59 
	mmsgtyp
;

62 
	#SEMOP
 1

	)

63 
	#SEMGET
 2

	)

64 
	#SEMCTL
 3

	)

65 
	#SEMTIMEDOP
 4

	)

66 
	#MSGSND
 11

	)

67 
	#MSGRCV
 12

	)

68 
	#MSGGET
 13

	)

69 
	#MSGCTL
 14

	)

70 
	#SHMAT
 21

	)

71 
	#SHMDT
 22

	)

72 
	#SHMGET
 23

	)

73 
	#SHMCTL
 24

	)

76 
	#DIPC
 25

	)

78 
	#IPCCALL
(
vîsi⁄
,
›
Ë((vîsi⁄)<<16 | (›))

	)

	@/usr/include/linux/irqnr.h

	@/usr/include/linux/libc-compat.h

48 #i‚de‡
_LIBC_COMPAT_H


49 
	#_LIBC_COMPAT_H


	)

52 #i‡
deföed
(
__GLIBC__
)

55 #i‡
deföed
(
_NETINET_IN_H
)

59 
	#__UAPI_DEF_IN6_ADDR
 0

	)

64 #i‡
deföed
(
__USE_MISC
Ë|| deföed (
__USE_GNU
)

65 
	#__UAPI_DEF_IN6_ADDR_ALT
 0

	)

67 
	#__UAPI_DEF_IN6_ADDR_ALT
 1

	)

69 
	#__UAPI_DEF_SOCKADDR_IN6
 0

	)

70 
	#__UAPI_DEF_IPV6_MREQ
 0

	)

71 
	#__UAPI_DEF_IPPROTO_V6
 0

	)

72 
	#__UAPI_DEF_IPV6_OPTIONS
 0

	)

79 
	#__UAPI_DEF_IN6_ADDR
 1

	)

82 
	#__UAPI_DEF_IN6_ADDR_ALT
 1

	)

83 
	#__UAPI_DEF_SOCKADDR_IN6
 1

	)

84 
	#__UAPI_DEF_IPV6_MREQ
 1

	)

85 
	#__UAPI_DEF_IPPROTO_V6
 1

	)

86 
	#__UAPI_DEF_IPV6_OPTIONS
 1

	)

91 #i‡
deföed
(
_SYS_XATTR_H
)

92 
	#__UAPI_DEF_XATTR
 0

	)

94 
	#__UAPI_DEF_XATTR
 1

	)

103 
	#__UAPI_DEF_IN6_ADDR
 1

	)

104 
	#__UAPI_DEF_IN6_ADDR_ALT
 1

	)

105 
	#__UAPI_DEF_SOCKADDR_IN6
 1

	)

106 
	#__UAPI_DEF_IPV6_MREQ
 1

	)

107 
	#__UAPI_DEF_IPPROTO_V6
 1

	)

108 
	#__UAPI_DEF_IPV6_OPTIONS
 1

	)

111 
	#__UAPI_DEF_XATTR
 1

	)

	@/usr/include/linux/posix_types.h

1 #i‚de‡
_LINUX_POSIX_TYPES_H


2 
	#_LINUX_POSIX_TYPES_H


	)

4 
	~<löux/°ddef.h
>

21 
	#__FD_SETSIZE
 344800

	)

22 
	#__FD_SETSIZE
 344800

	)

25 
	#__FD_SETSIZE
 344800

	)

26 } 
	t__kî√l_fd_£t
;

29 (*
	t__kî√l_sigh™dÀr_t
)();

32 
	t__kî√l_key_t
;

33 
	t__kî√l_mqd_t
;

35 
	~<asm/posix_ty≥s.h
>

	@/usr/include/linux/socket.h

1 #i‚de‡
_LINUX_SOCKET_H


2 
	#_LINUX_SOCKET_H


	)

7 
	#_K_SS_MAXSIZE
 128

	)

8 
	#_K_SS_ALIGNSIZE
 (
	`__Æignof__
 (
sockaddr
 *))

	)

11 
	t__kî√l_ß_Ámûy_t
;

13 
	s__kî√l_sockaddr_°‹age
 {

14 
__kî√l_ß_Ámûy_t
 
	mss_Ámûy
;

16 
	m__d©a
[
_K_SS_MAXSIZE
 - ()];

19 } 
__©åibuã__
 ((
Æig√d
(
_K_SS_ALIGNSIZE
)));

	@/usr/include/linux/sysinfo.h

1 #i‚de‡
_LINUX_SYSINFO_H


2 
	#_LINUX_SYSINFO_H


	)

4 
	~<löux/ty≥s.h
>

6 
	#SI_LOAD_SHIFT
 16

	)

7 
	ssysöfo
 {

8 
__kî√l_l⁄g_t
 
	mu±ime
;

9 
__kî√l_ul⁄g_t
 
	mlﬂds
[3];

10 
__kî√l_ul⁄g_t
 
	mtŸÆøm
;

11 
__kî√l_ul⁄g_t
 
	m‰ìøm
;

12 
__kî√l_ul⁄g_t
 
	msh¨edøm
;

13 
__kî√l_ul⁄g_t
 
	mbuf„ºam
;

14 
__kî√l_ul⁄g_t
 
	mtŸÆsw≠
;

15 
__kî√l_ul⁄g_t
 
	m‰ìsw≠
;

16 
__u16
 
	m¥ocs
;

17 
__u16
 
	m∑d
;

18 
__kî√l_ul⁄g_t
 
	mtŸÆhigh
;

19 
__kî√l_ul⁄g_t
 
	m‰ìhigh
;

20 
__u32
 
	mmem_unô
;

21 
	m_f
[20-2*(
__kî√l_ul⁄g_t
)-(
__u32
)];

	@/usr/include/net/if_arp.h

22 #i‚de‡
_NET_IF_ARP_H


24 
	#_NET_IF_ARP_H
 1

	)

25 
	~<sys/cdefs.h
>

27 
	~<sys/ty≥s.h
>

28 
	~<sys/sockë.h
>

30 
	g__BEGIN_DECLS


33 
	#MAX_ADDR_LEN
 7

	)

39 
	#ARPOP_REQUEST
 1

	)

40 
	#ARPOP_REPLY
 2

	)

41 
	#ARPOP_RREQUEST
 3

	)

42 
	#ARPOP_RREPLY
 4

	)

43 
	#ARPOP_InREQUEST
 8

	)

44 
	#ARPOP_InREPLY
 9

	)

45 
	#ARPOP_NAK
 10

	)

54 
	s¨phdr


56 
	m¨_hrd
;

57 
	m¨_¥o
;

58 
	m¨_h 
;

59 
	m¨_∂n
;

60 
	m¨_›
;

64 
	m__¨_sha
[
ETH_ALEN
];

65 
	m__¨_sù
[4];

66 
	m__¨_tha
[
ETH_ALEN
];

67 
	m__¨_tù
[4];

73 
	#ARPHRD_NETROM
 0

	)

74 
	#ARPHRD_ETHER
 1

	)

75 
	#ARPHRD_EETHER
 2

	)

76 
	#ARPHRD_AX25
 3

	)

77 
	#ARPHRD_PRONET
 4

	)

78 
	#ARPHRD_CHAOS
 5

	)

79 
	#ARPHRD_IEEE802
 6

	)

80 
	#ARPHRD_ARCNET
 7

	)

81 
	#ARPHRD_APPLETLK
 8

	)

82 
	#ARPHRD_DLCI
 15

	)

83 
	#ARPHRD_ATM
 19

	)

84 
	#ARPHRD_METRICOM
 23

	)

85 
	#ARPHRD_IEEE1394
 24

	)

86 
	#ARPHRD_EUI64
 27

	)

87 
	#ARPHRD_INFINIBAND
 32

	)

90 
	#ARPHRD_SLIP
 256

	)

91 
	#ARPHRD_CSLIP
 257

	)

92 
	#ARPHRD_SLIP6
 258

	)

93 
	#ARPHRD_CSLIP6
 259

	)

94 
	#ARPHRD_RSRVD
 260

	)

95 
	#ARPHRD_ADAPT
 264

	)

96 
	#ARPHRD_ROSE
 270

	)

97 
	#ARPHRD_X25
 271

	)

98 
	#ARPHRD_HWX25
 272

	)

99 
	#ARPHRD_PPP
 512

	)

100 
	#ARPHRD_CISCO
 513

	)

101 
	#ARPHRD_HDLC
 
ARPHRD_CISCO


	)

102 
	#ARPHRD_LAPB
 516

	)

103 
	#ARPHRD_DDCMP
 517

	)

104 
	#ARPHRD_RAWHDLC
 518

	)

106 
	#ARPHRD_TUNNEL
 768

	)

107 
	#ARPHRD_TUNNEL6
 769

	)

108 
	#ARPHRD_FRAD
 770

	)

109 
	#ARPHRD_SKIP
 771

	)

110 
	#ARPHRD_LOOPBACK
 772

	)

111 
	#ARPHRD_LOCALTLK
 773

	)

112 
	#ARPHRD_FDDI
 774

	)

113 
	#ARPHRD_BIF
 775

	)

114 
	#ARPHRD_SIT
 776

	)

115 
	#ARPHRD_IPDDP
 777

	)

116 
	#ARPHRD_IPGRE
 778

	)

117 
	#ARPHRD_PIMREG
 779

	)

118 
	#ARPHRD_HIPPI
 780

	)

119 
	#ARPHRD_ASH
 781

	)

120 
	#ARPHRD_ECONET
 782

	)

121 
	#ARPHRD_IRDA
 783

	)

122 
	#ARPHRD_FCPP
 784

	)

123 
	#ARPHRD_FCAL
 785

	)

124 
	#ARPHRD_FCPL
 786

	)

125 
	#ARPHRD_FCFABRIC
 787

	)

126 
	#ARPHRD_IEEE802_TR
 800

	)

127 
	#ARPHRD_IEEE80211
 801

	)

128 
	#ARPHRD_IEEE80211_PRISM
 802

	)

129 
	#ARPHRD_IEEE80211_RADIOTAP
 803

	)

130 
	#ARPHRD_IEEE802154
 804

	)

131 
	#ARPHRD_IEEE802154_PHY
 805

	)

133 
	#ARPHRD_VOID
 0xFFFF

	)

134 
	#ARPHRD_NONE
 0xFFFE

	)

138 
	s¨¥eq


140 
sockaddr
 
	m¨p_∑
;

141 
sockaddr
 
	m¨p_ha
;

142 
	m¨p_Êags
;

143 
sockaddr
 
	m¨p_√tmask
;

144 
	m¨p_dev
[16];

147 
	s¨¥eq_ﬁd


149 
sockaddr
 
	m¨p_∑
;

150 
sockaddr
 
	m¨p_ha
;

151 
	m¨p_Êags
;

152 
sockaddr
 
	m¨p_√tmask
;

156 
	#ATF_COM
 0x02

	)

157 
	#ATF_PERM
 0x04

	)

158 
	#ATF_PUBL
 0x08

	)

159 
	#ATF_USETRAILERS
 0x10

	)

160 
	#ATF_NETMASK
 0x20

	)

162 
	#ATF_DONTPUB
 0x40

	)

163 
	#ATF_MAGIC
 0x80

	)

167 
	#ARPD_UPDATE
 0x01

	)

168 
	#ARPD_LOOKUP
 0x02

	)

169 
	#ARPD_FLUSH
 0x03

	)

171 
	s¨pd_ªque°


173 
	mªq
;

174 
u_öt32_t
 
	mù
;

175 
	mdev
;

176 
	m°amp
;

177 
	mupd©ed
;

178 
	mha
[
MAX_ADDR_LEN
];

181 
	g__END_DECLS


	@/usr/include/rpc/netdb.h

36 #i‚de‡
_RPC_NETDB_H


37 
	#_RPC_NETDB_H
 1

	)

39 
	~<„©uªs.h
>

41 
	#__√ed_size_t


	)

42 
	~<°ddef.h
>

44 
__BEGIN_DECLS


46 
	sΩ˚¡


48 *
	mr_«me
;

49 **
	mr_Æü£s
;

50 
	mr_numbî
;

53 
	$£åp˚¡
 (
__°ay›í
Ë
__THROW
;

54 
	$ídΩ˚¡
 (Ë
__THROW
;

55 
Ω˚¡
 *
	$gëΩcby«me
 (c⁄° *
__«me
Ë
__THROW
;

56 
Ω˚¡
 *
	$gëΩcbynumbî
 (
__numbî
Ë
__THROW
;

57 
Ω˚¡
 *
	$gëΩ˚¡
 (Ë
__THROW
;

59 #ifde‡
__USE_MISC


60 
	$gëΩcby«me_r
 (c⁄° *
__«me
, 
Ω˚¡
 *
__ªsu…_buf
,

61 *
__buf„r
, 
size_t
 
__buÊí
,

62 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

64 
	$gëΩcbynumbî_r
 (
__numbî
, 
Ω˚¡
 *
__ªsu…_buf
,

65 *
__buf„r
, 
size_t
 
__buÊí
,

66 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

68 
	$gëΩ˚¡_r
 (
Ω˚¡
 *
__ªsu…_buf
, *
__buf„r
,

69 
size_t
 
__buÊí
, 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

72 
__END_DECLS


	@/usr/include/xlocale.h

20 #i‚de‡
_XLOCALE_H


21 
	#_XLOCALE_H
 1

	)

27 
	s__loˇÀ_°ru˘


30 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

33 c⁄° *
	m__˘y≥_b
;

34 c⁄° *
	m__˘y≥_tﬁowî
;

35 c⁄° *
	m__˘y≥_touµî
;

38 c⁄° *
	m__«mes
[13];

39 } *
	t__loˇÀ_t
;

42 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

23 
__off_t
 
	m__pos
;

24 
__mb°©e_t
 
	m__°©e
;

25 } 
	t_G_Âos_t
;

28 
__off64_t
 
	m__pos
;

29 
__mb°©e_t
 
	m__°©e
;

30 } 
	t_G_Âos64_t
;

31 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


32 
	~<gc⁄v.h
>

35 
__gc⁄v_öfo
 
	m__cd
;

38 
__gc⁄v_öfo
 
	m__cd
;

39 
__gc⁄v_°ï_d©a
 
	m__d©a
;

40 } 
	m__comböed
;

41 } 
	t_G_ic⁄v_t
;

46 
	#_G_va_li°
 
__gnuc_va_li°


	)

48 
	#_G_HAVE_MMAP
 1

	)

49 
	#_G_HAVE_MREMAP
 1

	)

51 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

54 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

56 
	#_G_BUFSIZ
 8192

	)

	@/usr/include/linux/netlink.h

1 #i‚de‡
__LINUX_NETLINK_H


2 
	#__LINUX_NETLINK_H


	)

4 
	~<löux/kî√l.h
>

5 
	~<löux/sockë.h
>

6 
	~<löux/ty≥s.h
>

8 
	#NETLINK_ROUTE
 0

	)

9 
	#NETLINK_UNUSED
 1

	)

10 
	#NETLINK_USERSOCK
 2

	)

11 
	#NETLINK_FIREWALL
 3

	)

12 
	#NETLINK_SOCK_DIAG
 4

	)

13 
	#NETLINK_NFLOG
 5

	)

14 
	#NETLINK_XFRM
 6

	)

15 
	#NETLINK_SELINUX
 7

	)

16 
	#NETLINK_ISCSI
 8

	)

17 
	#NETLINK_AUDIT
 9

	)

18 
	#NETLINK_FIB_LOOKUP
 10

	)

19 
	#NETLINK_CONNECTOR
 11

	)

20 
	#NETLINK_NETFILTER
 12

	)

21 
	#NETLINK_IP6_FW
 13

	)

22 
	#NETLINK_DNRTMSG
 14

	)

23 
	#NETLINK_KOBJECT_UEVENT
 15

	)

24 
	#NETLINK_GENERIC
 16

	)

26 
	#NETLINK_SCSITRANSPORT
 18

	)

27 
	#NETLINK_ECRYPTFS
 19

	)

28 
	#NETLINK_RDMA
 20

	)

29 
	#NETLINK_CRYPTO
 21

	)

31 
	#NETLINK_INET_DIAG
 
NETLINK_SOCK_DIAG


	)

33 
	#MAX_LINKS
 32

	)

35 
	ssockaddr_∆
 {

36 
__kî√l_ß_Ámûy_t
 
	m∆_Ámûy
;

37 
	m∆_∑d
;

38 
__u32
 
	m∆_pid
;

39 
__u32
 
	m∆_groups
;

42 
	s∆msghdr
 {

43 
__u32
 
	m∆msg_Àn
;

44 
__u16
 
	m∆msg_ty≥
;

45 
__u16
 
	m∆msg_Êags
;

46 
__u32
 
	m∆msg_£q
;

47 
__u32
 
	m∆msg_pid
;

52 
	#NLM_F_REQUEST
 1

	)

53 
	#NLM_F_MULTI
 2

	)

54 
	#NLM_F_ACK
 4

	)

55 
	#NLM_F_ECHO
 8

	)

56 
	#NLM_F_DUMP_INTR
 16

	)

59 
	#NLM_F_ROOT
 0x100

	)

60 
	#NLM_F_MATCH
 0x200

	)

61 
	#NLM_F_ATOMIC
 0x400

	)

62 
	#NLM_F_DUMP
 (
NLM_F_ROOT
|
NLM_F_MATCH
)

	)

65 
	#NLM_F_REPLACE
 0x100

	)

66 
	#NLM_F_EXCL
 0x200

	)

67 
	#NLM_F_CREATE
 0x400

	)

68 
	#NLM_F_APPEND
 0x800

	)

79 
	#NLMSG_ALIGNTO
 4U

	)

80 
	#NLMSG_ALIGN
(
Àn
Ë–(÷í)+
NLMSG_ALIGNTO
-1Ë& ~(NLMSG_ALIGNTO-1Ë)

	)

81 
	#NLMSG_HDRLEN
 ((Ë
	`NLMSG_ALIGN
((
∆msghdr
)))

	)

82 
	#NLMSG_LENGTH
(
Àn
Ë(÷íË+ 
NLMSG_HDRLEN
)

	)

83 
	#NLMSG_SPACE
(
Àn
Ë
	`NLMSG_ALIGN
(
	`NLMSG_LENGTH
÷í))

	)

84 
	#NLMSG_DATA
(
∆h
Ë((*)(((*ÍlhË+ 
	`NLMSG_LENGTH
(0)))

	)

85 
	#NLMSG_NEXT
(
∆h
,
Àn
Ë(÷íË-
	`NLMSG_ALIGN
(“lh)->
∆msg_Àn
), \

86 (
∆msghdr
*)(((*)(
∆h
)Ë+ 
	`NLMSG_ALIGN
(“lh)->
∆msg_Àn
)))

	)

87 
	#NLMSG_OK
(
∆h
,
Àn
Ë(÷íË>()(
∆msghdr
) && \

88 (
∆h
)->
∆msg_Àn
 >(
∆msghdr
) && \

89 (
∆h
)->
∆msg_Àn
 <(
Àn
))

	)

90 
	#NLMSG_PAYLOAD
(
∆h
,
Àn
Ë(“lh)->
∆msg_Àn
 - 
	`NLMSG_SPACE
(÷í)))

	)

92 
	#NLMSG_NOOP
 0x1

	)

93 
	#NLMSG_ERROR
 0x2

	)

94 
	#NLMSG_DONE
 0x3

	)

95 
	#NLMSG_OVERRUN
 0x4

	)

97 
	#NLMSG_MIN_TYPE
 0x10

	)

99 
	s∆msgîr
 {

100 
	mîr‹
;

101 
∆msghdr
 
	mmsg
;

104 
	#NETLINK_ADD_MEMBERSHIP
 1

	)

105 
	#NETLINK_DROP_MEMBERSHIP
 2

	)

106 
	#NETLINK_PKTINFO
 3

	)

107 
	#NETLINK_BROADCAST_ERROR
 4

	)

108 
	#NETLINK_NO_ENOBUFS
 5

	)

109 
	#NETLINK_RX_RING
 6

	)

110 
	#NETLINK_TX_RING
 7

	)

112 
	s∆_pktöfo
 {

113 
__u32
 
	mgroup
;

116 
	s∆_mm≠_ªq
 {

117 
	mnm_block_size
;

118 
	mnm_block_ƒ
;

119 
	mnm_‰ame_size
;

120 
	mnm_‰ame_ƒ
;

123 
	s∆_mm≠_hdr
 {

124 
	mnm_°©us
;

125 
	mnm_Àn
;

126 
__u32
 
	mnm_group
;

128 
__u32
 
	mnm_pid
;

129 
__u32
 
	mnm_uid
;

130 
__u32
 
	mnm_gid
;

133 
	e∆_mm≠_°©us
 {

134 
	mNL_MMAP_STATUS_UNUSED
,

135 
	mNL_MMAP_STATUS_RESERVED
,

136 
	mNL_MMAP_STATUS_VALID
,

137 
	mNL_MMAP_STATUS_COPY
,

138 
	mNL_MMAP_STATUS_SKIP
,

141 
	#NL_MMAP_MSG_ALIGNMENT
 
NLMSG_ALIGNTO


	)

142 
	#NL_MMAP_MSG_ALIGN
(
sz
Ë
	`__ALIGN_KERNEL
(sz, 
NL_MMAP_MSG_ALIGNMENT
)

	)

143 
	#NL_MMAP_HDRLEN
 
	`NL_MMAP_MSG_ALIGN
((
∆_mm≠_hdr
))

	)

145 
	#NET_MAJOR
 36

	)

148 
	mNETLINK_UNCONNECTED
 = 0,

149 
	mNETLINK_CONNECTED
,

161 
	s∆©å
 {

162 
__u16
 
	m∆a_Àn
;

163 
__u16
 
	m∆a_ty≥
;

176 
	#NLA_F_NESTED
 (1 << 15)

	)

177 
	#NLA_F_NET_BYTEORDER
 (1 << 14)

	)

178 
	#NLA_TYPE_MASK
 ~(
NLA_F_NESTED
 | 
NLA_F_NET_BYTEORDER
)

	)

180 
	#NLA_ALIGNTO
 4

	)

181 
	#NLA_ALIGN
(
Àn
Ë((÷íË+ 
NLA_ALIGNTO
 - 1Ë& ~(NLA_ALIGNTO - 1))

	)

182 
	#NLA_HDRLEN
 ((Ë
	`NLA_ALIGN
((
∆©å
)))

	)

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

54 
	#__STDC_ISO_10646__
 201103L

	)

57 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/gconv.h

22 #i‚de‡
_GCONV_H


23 
	#_GCONV_H
 1

	)

25 
	~<„©uªs.h
>

26 
	#__√ed_mb°©e_t


	)

27 
	#__√ed_wöt_t


	)

28 
	~<wch¨.h
>

29 
	#__√ed_size_t


	)

30 
	#__√ed_wch¨_t


	)

31 
	~<°ddef.h
>

34 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

39 
	m__GCONV_OK
 = 0,

40 
	m__GCONV_NOCONV
,

41 
	m__GCONV_NODB
,

42 
	m__GCONV_NOMEM
,

44 
	m__GCONV_EMPTY_INPUT
,

45 
	m__GCONV_FULL_OUTPUT
,

46 
	m__GCONV_ILLEGAL_INPUT
,

47 
	m__GCONV_INCOMPLETE_INPUT
,

49 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

50 
	m__GCONV_INTERNAL_ERROR


57 
	m__GCONV_IS_LAST
 = 0x0001,

58 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

59 
	m__GCONV_SWAP
 = 0x0004

64 
	g__gc⁄v_°ï
;

65 
	g__gc⁄v_°ï_d©a
;

66 
	g__gc⁄v_lﬂded_obje˘
;

67 
	g__gc⁄v_å™s_d©a
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

85 
	t__gc⁄v_°ï_d©a
 *, *,

89 
	tsize_t
 *);

92 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
) (*, const *,

97 (*
	t__gc⁄v_å™s_quîy_f˘
) (const *, const ***,

98 
	tsize_t
 *);

101 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

102 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

104 
	s__gc⁄v_å™s_d©a


107 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

108 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

109 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

110 *
__d©a
;

111 
__gc⁄v_å™s_d©a
 *
__√xt
;

116 
	s__gc⁄v_°ï


118 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

119 c⁄° *
__mod«me
;

121 
__cou¡î
;

123 *
__‰om_«me
;

124 *
__to_«me
;

126 
__gc⁄v_f˘
 
__f˘
;

127 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

128 
__gc⁄v_öô_f˘
 
__öô_f˘
;

129 
__gc⁄v_íd_f˘
 
__íd_f˘
;

133 
__mö_√eded_‰om
;

134 
__max_√eded_‰om
;

135 
__mö_√eded_to
;

136 
__max_√eded_to
;

139 
__°©eful
;

141 *
__d©a
;

146 
	s__gc⁄v_°ï_d©a


148 *
__outbuf
;

149 *
__outbu„nd
;

153 
__Êags
;

157 
__övoˇti⁄_cou¡î
;

161 
__öã∫Æ_u£
;

163 
__mb°©e_t
 *
__°©ï
;

164 
__mb°©e_t
 
__°©e
;

168 
__gc⁄v_å™s_d©a
 *
__å™s
;

173 
	s__gc⁄v_öfo


175 
size_t
 
__n°ïs
;

176 
__gc⁄v_°ï
 *
__°ïs
;

177 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

178 } *
	t__gc⁄v_t
;

	@/usr/include/wchar.h

23 #i‚de‡
_WCHAR_H


25 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


26 
	#_WCHAR_H
 1

	)

27 
	~<„©uªs.h
>

30 #ifde‡
_WCHAR_H


32 
	#__√ed___FILE


	)

33 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_FILE


	)

36 
	~<°dio.h
>

38 
	#__√ed___va_li°


	)

39 
	~<°d¨g.h
>

41 
	~<bôs/wch¨.h
>

44 
	#__√ed_size_t


	)

45 
	#__√ed_wch¨_t


	)

46 
	#__√ed_NULL


	)

48 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


49 #unde‡
__√ed_wöt_t


50 
	#__√ed_wöt_t


	)

51 
	~<°ddef.h
>

55 #i‚de‡
_WINT_T


60 
	#_WINT_T


	)

61 
	twöt_t
;

65 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

66 && 
deföed
 
__WINT_TYPE__


67 
__BEGIN_NAMESPACE_STD


68 
__WINT_TYPE__
 
	twöt_t
;

69 
	g__END_NAMESPACE_STD


74 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

75 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

79 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
____mb°©e_t_deföed


80 
	#____mb°©e_t_deföed
 1

	)

84 
	m__cou¡
;

87 #ifde‡
__WINT_TYPE__


88 
__WINT_TYPE__
 
	m__wch
;

90 
wöt_t
 
	m__wch
;

92 
	m__wchb
[4];

93 } 
	m__vÆue
;

94 } 
	t__mb°©e_t
;

96 #unde‡
__√ed_mb°©e_t


101 #ifde‡
_WCHAR_H


103 #i‚de‡
__mb°©e_t_deföed


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 
	#__mb°©e_t_deföed
 1

	)

111 #ifde‡
__USE_GNU


112 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

115 #i‚de‡
WCHAR_MIN


117 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

118 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

121 #i‚de‡
WEOF


122 
	#WEOF
 (0xffffffffu)

	)

127 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


128 
	~<w˘y≥.h
>

132 
__BEGIN_DECLS


134 
__BEGIN_NAMESPACE_STD


137 
tm
;

138 
__END_NAMESPACE_STD


142 
	$__USING_NAMESPACE_STD
(
tm
)

145 
__BEGIN_NAMESPACE_STD


147 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

150 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

151 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

152 
__THROW
;

155 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

158 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

159 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

160 
__THROW
;

163 
	$wcscmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
)

164 
__THROW
 
__©åibuã_puª__
;

166 
	$wc¢cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

167 
__THROW
 
__©åibuã_puª__
;

168 
__END_NAMESPACE_STD


170 #ifde‡
__USE_XOPEN2K8


172 
	$wcsˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

175 
	$wc¢ˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

176 
size_t
 
__n
Ë
__THROW
;

180 
	~<xloˇÀ.h
>

182 
	$wcsˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

183 
__loˇÀ_t
 
__loc
Ë
__THROW
;

185 
	$wc¢ˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

186 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


192 
	$wcscﬁl
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

196 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

197 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

198 
__END_NAMESPACE_STD


200 #ifde‡
__USE_XOPEN2K8


206 
	$wcscﬁl_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

207 
__loˇÀ_t
 
__loc
Ë
__THROW
;

212 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

213 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

216 
wch¨_t
 *
	$wcsdup
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

219 
__BEGIN_NAMESPACE_STD


221 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


222 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

223 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 "C++" c⁄° 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

227 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

228 
__THROW
 
__©åibuã_puª__
;

231 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


232 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

233 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 "C++" c⁄° 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

237 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

238 
__THROW
 
__©åibuã_puª__
;

240 
__END_NAMESPACE_STD


242 #ifde‡
__USE_GNU


245 
wch¨_t
 *
	$wcsch∫ul
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__wc
)

246 
__THROW
 
__©åibuã_puª__
;

249 
__BEGIN_NAMESPACE_STD


252 
size_t
 
	$wcsc•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ªje˘
)

253 
__THROW
 
__©åibuã_puª__
;

256 
size_t
 
	$wcs•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

257 
__THROW
 
__©åibuã_puª__
;

259 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


260 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

262 "C++" c⁄° 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
,

263 c⁄° 
wch¨_t
 *
__ac˚±
)

264 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

266 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

267 
__THROW
 
__©åibuã_puª__
;

270 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


271 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

273 "C++" c⁄° 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
,

274 c⁄° 
wch¨_t
 *
__√edÀ
)

275 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

277 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

278 
__THROW
 
__©åibuã_puª__
;

282 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

283 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

284 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

287 
size_t
 
	$wc¶í
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

288 
__END_NAMESPACE_STD


290 #ifde‡
__USE_XOPEN


292 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


293 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

295 "C++" c⁄° 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
,

296 c⁄° 
wch¨_t
 *
__√edÀ
)

297 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

299 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

300 
__THROW
 
__©åibuã_puª__
;

304 #ifde‡
__USE_XOPEN2K8


306 
size_t
 
	$wc¢Àn
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

307 
__THROW
 
__©åibuã_puª__
;

311 
__BEGIN_NAMESPACE_STD


313 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


314 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

316 "C++" c⁄° 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
,

317 
size_t
 
__n
)

318 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

320 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

321 
__THROW
 
__©åibuã_puª__
;

325 
	$wmemcmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

326 
__THROW
 
__©åibuã_puª__
;

329 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

330 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

334 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

335 
__THROW
;

338 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

339 
__END_NAMESPACE_STD


341 #ifde‡
__USE_GNU


344 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

345 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

346 
__THROW
;

350 
__BEGIN_NAMESPACE_STD


353 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

357 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

361 
	$mbsöô
 (c⁄° 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

365 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

366 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

367 
mb°©e_t
 *
__ª°ri˘
 
__p
Ë
__THROW
;

370 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

371 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

374 
size_t
 
	$__mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

375 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

376 
size_t
 
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

377 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

378 
__END_NAMESPACE_STD


380 #ifde‡
__USE_EXTERN_INLINES


386 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

387 
__exã∫_ölöe
 
wöt_t


388 
	`__NTH
 (
	$btowc
 (
__c
))

389 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

390 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

392 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

393 
__exã∫_ölöe
 

394 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

395 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

396 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

398 
__exã∫_ölöe
 
size_t


399 
__NTH
 (
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

400 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

401 {  (
__ps
 !
NULL


402 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

405 
__BEGIN_NAMESPACE_STD


408 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

409 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

410 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

414 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

415 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

416 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

417 
__END_NAMESPACE_STD


420 #ifdef 
__USE_XOPEN2K8


423 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

424 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

425 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

429 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

430 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

431 
size_t
 
__nwc
, size_à
__Àn
,

432 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

437 #ifde‡
__USE_XOPEN


439 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

443 
	$wcswidth
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

447 
__BEGIN_NAMESPACE_STD


450 
	$wc°od
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

451 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

452 
__END_NAMESPACE_STD


454 #ifde‡
__USE_ISOC99


455 
__BEGIN_NAMESPACE_C99


457 
	$wc°of
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

458 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

459 
	$wc°ﬁd
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

460 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

461 
__END_NAMESPACE_C99


465 
__BEGIN_NAMESPACE_STD


468 
	$wc°ﬁ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

469 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

473 
	$wc°oul
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

474 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

475 
__THROW
;

476 
__END_NAMESPACE_STD


478 #ifde‡
__USE_ISOC99


479 
__BEGIN_NAMESPACE_C99


482 
__exãnsi⁄__


483 
	$wc°ﬁl
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

484 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

485 
__THROW
;

489 
__exãnsi⁄__


490 
	$wc°ouŒ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

491 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

492 
__ba£
Ë
__THROW
;

493 
__END_NAMESPACE_C99


496 #ifde‡
__USE_GNU


499 
__exãnsi⁄__


500 
	$wc°oq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

501 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

502 
__THROW
;

506 
__exãnsi⁄__


507 
	$wc°ouq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

508 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

509 
__ba£
Ë
__THROW
;

512 #ifde‡
__USE_GNU


526 
	~<xloˇÀ.h
>

530 
	$wc°ﬁ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

531 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

532 
__loˇÀ_t
 
__loc
Ë
__THROW
;

534 
	$wc°oul_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

535 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

536 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

538 
__exãnsi⁄__


539 
	$wc°ﬁl_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

540 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

541 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

543 
__exãnsi⁄__


544 
	$wc°ouŒ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

545 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

546 
__ba£
, 
__loˇÀ_t
 
__loc
)

547 
__THROW
;

549 
	$wc°od_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

550 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

551 
__THROW
;

553 
	$wc°of_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

554 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

555 
__THROW
;

557 
	$wc°ﬁd_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

558 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

559 
__loˇÀ_t
 
__loc
Ë
__THROW
;

563 #ifde‡
__USE_XOPEN2K8


566 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

567 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

571 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

572 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

573 
__THROW
;

580 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

583 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


584 
__BEGIN_NAMESPACE_STD


587 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

594 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

595 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

601 
	`w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

605 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

606 
__THROW
 ;

612 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

613 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

614 
__gnuc_va_li°
 
__¨g
)

620 
	`vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

621 
__gnuc_va_li°
 
__¨g
)

625 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

626 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

627 
__gnuc_va_li°
 
__¨g
)

628 
__THROW
 ;

635 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

636 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

642 
	`wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
	$swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

646 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

647 
__THROW
 ;

649 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

650 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

651 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

652 #ifde‡
__REDIRECT


656 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

657 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

658 
__isoc99_fwsˇnf
)

660 
	`__REDIRECT
 (
wsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

661 
__isoc99_wsˇnf
)

663 
	`__REDIRECT_NTH
 (
swsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

664 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

665 ...), 
__isoc99_swsˇnf
)

668 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

669 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

670 
	`__isoc99_wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

671 
	$__isoc99_swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

672 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

673 
__THROW
;

674 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

675 
	#wsˇnf
 
__isoc99_wsˇnf


	)

676 
	#swsˇnf
 
__isoc99_swsˇnf


	)

680 
__END_NAMESPACE_STD


683 #ifde‡
__USE_ISOC99


684 
__BEGIN_NAMESPACE_C99


689 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

690 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

691 
__gnuc_va_li°
 
__¨g
)

697 
	`vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

698 
__gnuc_va_li°
 
__¨g
)

701 
	$vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

702 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

703 
__gnuc_va_li°
 
__¨g
)

704 
__THROW
 ;

706 #i‡!
deföed
 
__USE_GNU
 \

707 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

708 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

709 #ifde‡
__REDIRECT


710 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

711 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

712 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

714 
	`__REDIRECT
 (
vwsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

715 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

717 
	`__REDIRECT_NTH
 (
vswsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

718 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

719 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

722 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

723 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

724 
__gnuc_va_li°
 
__¨g
);

725 
	`__isoc99_vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

726 
__gnuc_va_li°
 
__¨g
);

727 
	$__isoc99_vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

728 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

729 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

730 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

731 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

732 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

736 
__END_NAMESPACE_C99


740 
__BEGIN_NAMESPACE_STD


745 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

746 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

752 
wöt_t
 
	`gëwch¨
 ();

759 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

760 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

766 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

774 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

775 
__FILE
 *
__ª°ri˘
 
__°ªam
);

781 
	`Âutws
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

782 
__FILE
 *
__ª°ri˘
 
__°ªam
);

789 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

790 
__END_NAMESPACE_STD


793 #ifde‡
__USE_GNU


801 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

802 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

810 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

818 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

827 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

828 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

837 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

838 
__FILE
 *
__ª°ri˘
 
__°ªam
);

846 
	`Âutws_u∆ocked
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

847 
__FILE
 *
__ª°ri˘
 
__°ªam
);

851 
__BEGIN_NAMESPACE_C99


855 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

856 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

857 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

858 
__END_NAMESPACE_C99


860 #ifde‡
__USE_GNU


861 
	~<xloˇÀ.h
>

865 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

866 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

867 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

868 
__loˇÀ_t
 
__loc
Ë
__THROW
;

877 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


878 
	#__√ed_iswxxx


	)

879 
	~<w˘y≥.h
>

883 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


884 
	~<bôs/wch¨2.h
>

887 #ifde‡
__LDBL_COMPAT


888 
	~<bôs/wch¨-ldbl.h
>

891 
__END_DECLS


899 #unde‡
__√ed_mb°©e_t


900 #unde‡
__√ed_wöt_t


	@/usr/include/wctype.h

23 #i‚de‡
_WCTYPE_H


25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 #i‚de‡
__√ed_iswxxx


29 
	#_WCTYPE_H
 1

	)

32 
	#__√ed_wöt_t


	)

33 
	~<wch¨.h
>

37 #i‚de‡
WEOF


38 
	#WEOF
 (0xffffffffu)

	)

41 #unde‡
__√ed_iswxxx


46 #i‚de‡
__iswxxx_deföed


47 
	#__iswxxx_deföed
 1

	)

49 
__BEGIN_NAMESPACE_C99


52 
	tw˘y≥_t
;

53 
	g__END_NAMESPACE_C99


55 #i‚de‡
_ISwbô


60 
	~<ídün.h
>

61 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


62 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

64 
	#_ISwbô
(
bô
) \

65 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

66 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

67 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

68 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

73 
	m__ISwuµî
 = 0,

74 
	m__ISwlowî
 = 1,

75 
	m__ISwÆpha
 = 2,

76 
	m__ISwdigô
 = 3,

77 
	m__ISwxdigô
 = 4,

78 
	m__ISw•a˚
 = 5,

79 
	m__ISw¥öt
 = 6,

80 
	m__ISwgøph
 = 7,

81 
	m__ISwbœnk
 = 8,

82 
	m__ISw˙ål
 = 9,

83 
	m__ISwpun˘
 = 10,

84 
	m__ISwÆnum
 = 11,

86 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

87 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

88 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

89 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

90 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

91 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

92 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

93 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

94 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

95 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

96 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

97 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

102 
__BEGIN_DECLS


104 
__BEGIN_NAMESPACE_C99


111 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

117 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

120 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

124 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

128 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

133 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

136 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

141 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

146 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

151 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

156 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

161 #ifde‡
__USE_ISOC99


162 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

171 
w˘y≥_t
 
	$w˘y≥
 (c⁄° *
__¥›îty
Ë
__THROW
;

175 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

176 
__END_NAMESPACE_C99


183 
__BEGIN_NAMESPACE_C99


186 c⁄° 
	t__öt32_t
 *
	tw˘øns_t
;

187 
__END_NAMESPACE_C99


188 #ifde‡
__USE_GNU


189 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

192 
__BEGIN_NAMESPACE_C99


194 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

197 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
__END_NAMESPACE_C99


200 
__END_DECLS


207 #ifde‡
_WCTYPE_H


213 
__BEGIN_DECLS


215 
__BEGIN_NAMESPACE_C99


218 
w˘øns_t
 
	$w˘øns
 (c⁄° *
__¥›îty
Ë
__THROW
;

221 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

222 
__END_NAMESPACE_C99


224 #ifde‡
__USE_XOPEN2K8


226 
	~<xloˇÀ.h
>

230 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

236 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

239 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

243 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

247 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

252 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

255 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

260 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

265 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

270 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

275 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

280 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

284 
w˘y≥_t
 
	$w˘y≥_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

285 
__THROW
;

289 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

290 
__THROW
;

298 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

301 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

305 
w˘øns_t
 
	$w˘øns_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

306 
__THROW
;

309 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

310 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

314 
__END_DECLS


	@
1
.
1
/usr/include
225
5882
glue.h
ipfw/dummynet.c
ipfw/expand_number.c
ipfw/glue.c
ipfw/humanize_number.c
ipfw/include/alias.h
ipfw/include/net/if_dl.h
ipfw/include/net/pfvar.h
ipfw/include/timeconv.h
ipfw/include_e/libutil.h
ipfw/include_e/netinet/__emtpy.h
ipfw/include_e/netinet/ip_dummynet.h
ipfw/include_e/netinet/ip_fw.h
ipfw/include_e/netinet/tcp.h
ipfw/include_e/sys/sockio.h
ipfw/ipfw2.c
ipfw/ipfw2.h
ipfw/ipv6.c
ipfw/main.c
ipfw/qsort.c
ipfw/qsort_r.c
kipfw-mod/bsd_compat.c
kipfw-mod/debug.c
kipfw-mod/dn_heap.c
kipfw-mod/dn_sched_fifo.c
kipfw-mod/dn_sched_prio.c
kipfw-mod/dn_sched_qfq.c
kipfw-mod/dn_sched_rr.c
kipfw-mod/dn_sched_wf2q.c
kipfw-mod/in_cksum.c
kipfw-mod/include_e/altq/if_altq.h
kipfw-mod/include_e/arpa/inet.h
kipfw-mod/include_e/machine/in_cksum.h
kipfw-mod/include_e/net/bpf.h
kipfw-mod/include_e/net/ethernet.h
kipfw-mod/include_e/net/if_types.h
kipfw-mod/include_e/net/netisr.h
kipfw-mod/include_e/net/pf_mtag.h
kipfw-mod/include_e/net/vnet.h
kipfw-mod/include_e/netinet/ether.h
kipfw-mod/include_e/netinet/icmp6.h
kipfw-mod/include_e/netinet/if_ether.h
kipfw-mod/include_e/netinet/in.h
kipfw-mod/include_e/netinet/in_pcb.h
kipfw-mod/include_e/netinet/in_systm.h
kipfw-mod/include_e/netinet/in_var.h
kipfw-mod/include_e/netinet/ip_carp.h
kipfw-mod/include_e/netinet/ip_var.h
kipfw-mod/include_e/netinet/pim.h
kipfw-mod/include_e/netinet/sctp.h
kipfw-mod/include_e/netinet/tcp_timer.h
kipfw-mod/include_e/netinet/tcpip.h
kipfw-mod/include_e/netinet/udp_var.h
kipfw-mod/include_e/netinet6/ip6_var.h
kipfw-mod/include_e/opt_inet.h
kipfw-mod/include_e/opt_inet6.h
kipfw-mod/include_e/opt_ipdivert.h
kipfw-mod/include_e/opt_ipfw.h
kipfw-mod/include_e/opt_ipsec.h
kipfw-mod/include_e/opt_mbuf_stress_test.h
kipfw-mod/include_e/opt_mpath.h
kipfw-mod/include_e/opt_param.h
kipfw-mod/include_e/sys/_lock.h
kipfw-mod/include_e/sys/_mutex.h
kipfw-mod/include_e/sys/_rwlock.h
kipfw-mod/include_e/sys/condvar.h
kipfw-mod/include_e/sys/domain.h
kipfw-mod/include_e/sys/eventhandler.h
kipfw-mod/include_e/sys/jail.h
kipfw-mod/include_e/sys/limits.h
kipfw-mod/include_e/sys/lock.h
kipfw-mod/include_e/sys/mutex.h
kipfw-mod/include_e/sys/priv.h
kipfw-mod/include_e/sys/proc.h
kipfw-mod/include_e/sys/rmlock.h
kipfw-mod/include_e/sys/rwlock.h
kipfw-mod/include_e/sys/socket.h
kipfw-mod/include_e/sys/socketvar.h
kipfw-mod/include_e/sys/sysctl.h
kipfw-mod/include_e/sys/time.h
kipfw-mod/include_e/sys/ucred.h
kipfw-mod/ip_dn_glue.c
kipfw-mod/ip_dn_io.c
kipfw-mod/ip_dummynet.c
kipfw-mod/ip_fw2.c
kipfw-mod/ip_fw_dynamic.c
kipfw-mod/ip_fw_log.c
kipfw-mod/ip_fw_lookup.c
kipfw-mod/ip_fw_nat.c
kipfw-mod/ip_fw_pfil.c
kipfw-mod/ip_fw_sockopt.c
kipfw-mod/ip_fw_table.c
kipfw-mod/ipfw2_mod.c
kipfw-mod/md_win.c
kipfw-mod/missing.h
kipfw-mod/radix.c
kipfw-mod/winmissing.h
kipfw/bsd_compat.c
kipfw/debug.c
kipfw/ipfw2_mod.c
kipfw/md_win.c
kipfw/missing.h
kipfw/winmissing.h
sys/net/if.h
sys/net/pfil.h
sys/net/radix.c
sys/net/radix.h
sys/netgraph/ng_ipfw.h
sys/netinet/in_cksum.c
sys/netinet/ip.h
sys/netinet/ip6.h
sys/netinet/ip_dummynet.h
sys/netinet/ip_fw.h
sys/netinet/ip_icmp.h
sys/netinet/ipfw/dn_heap.c
sys/netinet/ipfw/dn_heap.h
sys/netinet/ipfw/dn_sched.h
sys/netinet/ipfw/dn_sched_fifo.c
sys/netinet/ipfw/dn_sched_prio.c
sys/netinet/ipfw/dn_sched_qfq.c
sys/netinet/ipfw/dn_sched_rr.c
sys/netinet/ipfw/dn_sched_wf2q.c
sys/netinet/ipfw/ip_dn_glue.c
sys/netinet/ipfw/ip_dn_io.c
sys/netinet/ipfw/ip_dn_private.h
sys/netinet/ipfw/ip_dummynet.c
sys/netinet/ipfw/ip_fw2.c
sys/netinet/ipfw/ip_fw_dynamic.c
sys/netinet/ipfw/ip_fw_log.c
sys/netinet/ipfw/ip_fw_lookup.c
sys/netinet/ipfw/ip_fw_nat.c
sys/netinet/ipfw/ip_fw_pfil.c
sys/netinet/ipfw/ip_fw_private.h
sys/netinet/ipfw/ip_fw_sockopt.c
sys/netinet/ipfw/ip_fw_table.c
sys/netinet/tcp.h
sys/netinet/tcp_var.h
sys/netinet/udp.h
sys/sys/cdefs.h
sys/sys/kernel.h
sys/sys/malloc.h
sys/sys/mbuf.h
sys/sys/module.h
sys/sys/param.h
sys/sys/queue.h
sys/sys/syslog.h
sys/sys/systm.h
sys/sys/taskqueue.h
tcc_glue.h
/usr/include/arpa/inet.h
/usr/include/assert.h
/usr/include/ctype.h
/usr/include/err.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/grp.h
/usr/include/inttypes.h
/usr/include/linux/errno.h
/usr/include/linux/icmp.h
/usr/include/linux/if.h
/usr/include/linux/in.h
/usr/include/linux/in6.h
/usr/include/linux/kernel.h
/usr/include/linux/msg.h
/usr/include/linux/netdevice.h
/usr/include/linux/netfilter.h
/usr/include/linux/netfilter_ipv4.h
/usr/include/linux/random.h
/usr/include/linux/sched.h
/usr/include/linux/stddef.h
/usr/include/linux/sysctl.h
/usr/include/linux/tcp.h
/usr/include/linux/time.h
/usr/include/linux/types.h
/usr/include/linux/version.h
/usr/include/net/ethernet.h
/usr/include/net/if.h
/usr/include/net/route.h
/usr/include/netdb.h
/usr/include/netinet/ether.h
/usr/include/netinet/icmp6.h
/usr/include/netinet/if_ether.h
/usr/include/netinet/in.h
/usr/include/netinet/in_systm.h
/usr/include/netinet/ip.h
/usr/include/netinet/ip6.h
/usr/include/netinet/ip_icmp.h
/usr/include/netinet/tcp.h
/usr/include/netinet/udp.h
/usr/include/pwd.h
/usr/include/signal.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/strings.h
/usr/include/sysexits.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/alloca.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/limits.h
/usr/include/linux/hdlc/ioctl.h
/usr/include/linux/if_ether.h
/usr/include/linux/if_link.h
/usr/include/linux/if_packet.h
/usr/include/linux/ioctl.h
/usr/include/linux/ipc.h
/usr/include/linux/irqnr.h
/usr/include/linux/libc-compat.h
/usr/include/linux/posix_types.h
/usr/include/linux/socket.h
/usr/include/linux/sysinfo.h
/usr/include/net/if_arp.h
/usr/include/rpc/netdb.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/linux/netlink.h
/usr/include/stdc-predef.h
/usr/include/gconv.h
/usr/include/wchar.h
/usr/include/wctype.h
